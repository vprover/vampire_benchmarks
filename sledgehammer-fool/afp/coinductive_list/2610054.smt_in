(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Enat_a_fun$ 0 )
(declare-sort Enat_b_fun$ 0 )
(declare-sort A_set_a_fun$ 0 )
(declare-sort B_set_b_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_b_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort C_llist_b_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_enat_a_fun_fun$ 0 )
(declare-sort A_enat_b_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_enat_a_fun_fun$ 0 )
(declare-sort B_enat_b_fun_fun$ 0 )
(declare-sort Bool_a_a_fun_fun$ 0 )
(declare-sort Bool_a_b_fun_fun$ 0 )
(declare-sort Bool_b_a_fun_fun$ 0 )
(declare-sort Bool_b_b_fun_fun$ 0 )
(declare-sort Enat_a_a_fun_fun$ 0 )
(declare-sort Enat_a_b_fun_fun$ 0 )
(declare-sort Enat_b_a_fun_fun$ 0 )
(declare-sort Enat_b_b_fun_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort B_a_fun_b_a_fun_fun$ 0 )
(declare-sort B_a_fun_b_b_fun_fun$ 0 )
(declare-sort B_b_fun_b_a_fun_fun$ 0 )
(declare-sort B_b_fun_b_b_fun_fun$ 0 )
(declare-sort C_c_llist_b_fun_fun$ 0 )
(declare-sort C_llist_a_b_fun_fun$ 0 )
(declare-sort A_a_fun_bool_a_a_fun_fun_fun$ 0 )
(declare-sort A_b_fun_bool_a_b_fun_fun_fun$ 0 )
(declare-sort B_a_fun_bool_b_a_fun_fun_fun$ 0 )
(declare-sort B_b_fun_bool_b_b_fun_fun_fun$ 0 )
(declare-sort A_enat_a_fun_fun_enat_a_a_fun_fun_fun$ 0 )
(declare-sort A_enat_b_fun_fun_enat_a_b_fun_fun_fun$ 0 )
(declare-sort B_enat_a_fun_fun_enat_b_a_fun_fun_fun$ 0 )
(declare-sort B_enat_b_fun_fun_enat_b_b_fun_fun_fun$ 0 )
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()C_llist$)
(declare-fun lhd$ (C_llist$)C$)
(declare-fun ltl$ (C_llist$)C_llist$)
(declare-fun lCons$ (C$ C_llist$ )C_llist$)
(declare-sort Nat_option$ 0)
(declare-sort Enat$ 0)
(declare-fun none$ ()Nat_option$)
(declare-fun the$ (Nat_option$)Nat$)
(declare-fun some$ (Nat$ )Nat_option$)
(declare-fun rep_enat$ (Enat$)Nat_option$)
(declare-fun abs_enat$ (Nat_option$ )Enat$)
(declare-fun x$ ()C_llist$ )
(declare-fun uu$ ()A_b_fun$ )
(declare-fun uua$ (C$ )C_llist_a_b_fun_fun$ )
(declare-fun uub$ (B_a_fun$ )B_a_fun_bool_b_a_fun_fun_fun$ )
(declare-fun uuc$ (A_a_fun$ )A_a_fun_bool_a_a_fun_fun_fun$ )
(declare-fun uud$ (B_b_fun$ )B_b_fun_bool_b_b_fun_fun_fun$ )
(declare-fun uue$ (A_b_fun$ )A_b_fun_bool_a_b_fun_fun_fun$ )
(declare-fun uuf$ ()A_a_fun$ )
(declare-fun uug$ ()B_b_fun$ )
(declare-fun uuh$ (B_enat_a_fun_fun$ )Enat_b_a_fun_fun$ )
(declare-fun uui$ (B_a_fun$ )B_enat_a_fun_fun_enat_b_a_fun_fun_fun$ )
(declare-fun uuj$ (A_enat_a_fun_fun$ )Enat_a_a_fun_fun$ )
(declare-fun uuk$ (A_a_fun$ )A_enat_a_fun_fun_enat_a_a_fun_fun_fun$ )
(declare-fun uul$ (B_enat_b_fun_fun$ )Enat_b_b_fun_fun$ )
(declare-fun uum$ (B_b_fun$ )B_enat_b_fun_fun_enat_b_b_fun_fun_fun$ )
(declare-fun uun$ (A_enat_b_fun_fun$ )Enat_a_b_fun_fun$ )
(declare-fun uuo$ (A_b_fun$ )A_enat_b_fun_fun_enat_a_b_fun_fun_fun$ )
(declare-fun uup$ (B_a_a_fun_fun$ )A_b_a_fun_fun$ )
(declare-fun uuq$ (B_a_a_fun_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun uur$ (B_b_a_fun_fun$ )B_b_a_fun_fun$ )
(declare-fun uus$ (B_b_a_fun_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun uut$ (A_b_a_fun_fun$ )B_a_a_fun_fun$ )
(declare-fun uuu$ (A_b_a_fun_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun uuv$ (B_a_b_fun_fun$ )A_b_b_fun_fun$ )
(declare-fun uuw$ (B_a_b_fun_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun uux$ (A_a_a_fun_fun$ )A_a_a_fun_fun$ )
(declare-fun uuy$ (A_a_a_fun_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun uuz$ (B_b_b_fun_fun$ )B_b_b_fun_fun$ )
(declare-fun uva$ (B_b_b_fun_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun uvb$ (A_b_b_fun_fun$ )B_a_b_fun_fun$ )
(declare-fun uvc$ (A_b_b_fun_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun uvd$ (A_a_b_fun_fun$ )A_a_b_fun_fun$ )
(declare-fun uve$ (A_a_b_fun_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun uvf$ (A_a_fun$ )B_a_fun_b_a_fun_fun$ )
(declare-fun uvg$ (B_a_fun$ )B_b_fun_b_a_fun_fun$ )
(declare-fun uvh$ (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun uvi$ (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun uvj$ (A_b_fun$ )B_a_fun_b_b_fun_fun$ )
(declare-fun uvk$ (B_b_fun$ )B_b_fun_b_b_fun_fun$ )
(declare-fun uvl$ (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun uvm$ (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun lnil$ ()A_b_fun$ )
(declare-fun orda$ ()A_a_bool_fun_fun$ )
(declare-fun ordb$ ()B_b_bool_fun_fun$ )
(declare-fun lcons$ (A$ )C_c_llist_b_fun_fun$ )
(declare-fun transp$ (A_a_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (A_b_fun$ A$ )B$ )
(declare-fun transp$a (B_b_bool_fun_fun$ )Bool )
(declare-fun fun_app$a (C_llist_b_fun$ C_llist$ )B$ )
(declare-fun fun_app$b (C_llist_a_b_fun_fun$ C_llist$ )A_b_fun$ )
(declare-fun fun_app$c (C_c_llist_b_fun_fun$ C$ )C_llist_b_fun$ )
(declare-fun fun_app$d (B_b_fun$ B$ )B$ )
(declare-fun fun_app$e (B_b_fun_b_b_fun_fun$ B_b_fun$ )B_b_fun$ )
(declare-fun fun_app$f (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$g (B_a_fun$ B$ )A$ )
(declare-fun fun_app$h (B_b_fun_b_a_fun_fun$ B_b_fun$ )B_a_fun$ )
(declare-fun fun_app$i (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$j (B_a_fun_b_b_fun_fun$ B_a_fun$ )B_b_fun$ )
(declare-fun fun_app$k (B_a_b_fun_fun$ B$ )A_b_fun$ )
(declare-fun fun_app$l (B_a_fun_b_a_fun_fun$ B_a_fun$ )B_a_fun$ )
(declare-fun fun_app$m (A_a_fun$ A$ )A$ )
(declare-fun fun_app$n (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun fun_app$o (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$p (A_b_b_fun_fun$ A$ )B_b_fun$ )
(declare-fun fun_app$q (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$r (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$s (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$t (A_a_b_fun_fun$ A$ )A_b_fun$ )
(declare-fun fun_app$u (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$v (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$w (Enat_b_b_fun_fun$ Enat$ )B_b_fun$ )
(declare-fun fun_app$x (Enat_b_fun$ Enat$ )B$ )
(declare-fun fun_app$y (B_enat_b_fun_fun$ B$ )Enat_b_fun$ )
(declare-fun fun_app$z (Enat_b_a_fun_fun$ Enat$ )B_a_fun$ )
(declare-fun monotone$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$ A_b_fun$ )Bool )
(declare-fun case_enat$ (B$ Enat_b_fun$ Enat$ )B$ )
(declare-fun fun_app$aa (Enat_a_fun$ Enat$ )A$ )
(declare-fun fun_app$ab (B_enat_a_fun_fun$ B$ )Enat_a_fun$ )
(declare-fun fun_app$ac (Enat_a_b_fun_fun$ Enat$ )A_b_fun$ )
(declare-fun fun_app$ad (A_enat_b_fun_fun$ A$ )Enat_b_fun$ )
(declare-fun fun_app$ae (Enat_a_a_fun_fun$ Enat$ )A_a_fun$ )
(declare-fun fun_app$af (A_enat_a_fun_fun$ A$ )Enat_a_fun$ )
(declare-fun fun_app$ag (B_enat_b_fun_fun_enat_b_b_fun_fun_fun$ B_enat_b_fun_fun$ )Enat_b_b_fun_fun$ )
(declare-fun fun_app$ah (B_enat_a_fun_fun_enat_b_a_fun_fun_fun$ B_enat_a_fun_fun$ )Enat_b_a_fun_fun$ )
(declare-fun fun_app$ai (A_enat_b_fun_fun_enat_a_b_fun_fun_fun$ A_enat_b_fun_fun$ )Enat_a_b_fun_fun$ )
(declare-fun fun_app$aj (A_enat_a_fun_fun_enat_a_a_fun_fun_fun$ A_enat_a_fun_fun$ )Enat_a_a_fun_fun$ )
(declare-fun fun_app$ak (Bool_b_b_fun_fun$ Bool )B_b_fun$ )
(declare-fun fun_app$al (B_b_fun_bool_b_b_fun_fun_fun$ B_b_fun$ )Bool_b_b_fun_fun$ )
(declare-fun fun_app$am (Bool_b_a_fun_fun$ Bool )B_a_fun$ )
(declare-fun fun_app$an (B_a_fun_bool_b_a_fun_fun_fun$ B_a_fun$ )Bool_b_a_fun_fun$ )
(declare-fun fun_app$ao (Bool_a_b_fun_fun$ Bool )A_b_fun$ )
(declare-fun fun_app$ap (A_b_fun_bool_a_b_fun_fun_fun$ A_b_fun$ )Bool_a_b_fun_fun$ )
(declare-fun fun_app$aq (Bool_a_a_fun_fun$ Bool )A_a_fun$ )
(declare-fun fun_app$ar (A_a_fun_bool_a_a_fun_fun_fun$ A_a_fun$ )Bool_a_a_fun_fun$ )
(declare-fun fun_app$as (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$at (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$au (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$av (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun monotone$a (B_b_bool_fun_fun$ A_a_bool_fun_fun$ B_a_fun$ )Bool )
(declare-fun monotone$b (A_a_bool_fun_fun$ A_a_bool_fun_fun$ A_a_fun$ )Bool )
(declare-fun monotone$c (B_b_bool_fun_fun$ B_b_bool_fun_fun$ B_b_fun$ )Bool )
(declare-fun case_enat$a (A$ Enat_a_fun$ Enat$ )A$ )
(declare-fun case_llist$ (B$ C_c_llist_b_fun_fun$ )C_llist_b_fun$ )
(declare-fun partial_function_definitions$ (A_a_bool_fun_fun$ A_set_a_fun$ )Bool )
(declare-fun partial_function_definitions$a (B_b_bool_fun_fun$ B_set_b_fun$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(fun_app$a (case_llist$ (fun_app$ lnil$ ?v0 )(lcons$ ?v0 ))x$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$c (lcons$ ?v2 )?v0 )?v1 )):pattern ((fun_app$ (fun_app$b (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$d (fun_app$e (uva$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$f ?v0 ?v2 )(fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (uva$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$h (uus$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$i ?v0 ?v2 )(fun_app$d ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$h (uus$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$d (fun_app$j (uuw$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$k ?v0 ?v2 )(fun_app$g ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$j (uuw$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$l (uuq$ ?v0 )?v1 )?v2 )(fun_app$m (fun_app$n ?v0 ?v2 )(fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$l (uuq$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$o (uvc$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$p ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$o (uvc$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$q (uuu$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$r ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$q (uuu$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$s (uve$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$t ?v0 ?v2 )(fun_app$m ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$s (uve$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$u (uuy$ ?v0 )?v1 )?v2 )(fun_app$m (fun_app$v ?v0 ?v2 )(fun_app$m ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$u (uuy$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 B_enat_b_fun_fun$ )(?v1 Enat$ )(?v2 B$ ))(! (= (fun_app$d (fun_app$w (uul$ ?v0 )?v1 )?v2 )(fun_app$x (fun_app$y ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$w (uul$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 B_enat_a_fun_fun$ )(?v1 Enat$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$z (uuh$ ?v0 )?v1 )?v2 )(fun_app$aa (fun_app$ab ?v0 ?v2 )?v1 )):pattern ((fun_app$g (fun_app$z (uuh$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B$ )(?v2 B$ ))(! (= (fun_app$d (fun_app$f (uuz$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$f ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$f (uuz$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$i (uur$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$i ?v0 ?v2 )?v1 )):pattern ((fun_app$g (fun_app$i (uur$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$d (fun_app$p (uuv$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$d (fun_app$p (uuv$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$r (uup$ ?v0 )?v1 )?v2 )(fun_app$m (fun_app$n ?v0 ?v2 )?v1 )):pattern ((fun_app$g (fun_app$r (uup$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_enat_b_fun_fun$ )(?v1 Enat$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$ac (uun$ ?v0 )?v1 )?v2 )(fun_app$x (fun_app$ad ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$ac (uun$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_enat_a_fun_fun$ )(?v1 Enat$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$ae (uuj$ ?v0 )?v1 )?v2 )(fun_app$aa (fun_app$af ?v0 ?v2 )?v1 )):pattern ((fun_app$m (fun_app$ae (uuj$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 B$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$k (uvb$ ?v0 )?v1 )?v2 )(fun_app$d (fun_app$p ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$k (uvb$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 B$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$n (uut$ ?v0 )?v1 )?v2 )(fun_app$g (fun_app$r ?v0 ?v2 )?v1 )):pattern ((fun_app$m (fun_app$n (uut$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$t (uvd$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$t ?v0 ?v2 )?v1 )):pattern ((fun_app$ (fun_app$t (uvd$ ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$v (uux$ ?v0 )?v1 )?v2 )(fun_app$m (fun_app$v ?v0 ?v2 )?v1 )):pattern ((fun_app$m (fun_app$v (uux$ ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$d (fun_app$e (uvk$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (uvk$ ?v0 )?v1 )?v2 )))):named a22 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$o (uvl$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$o (uvl$ ?v0 )?v1 )?v2 )))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_b_fun$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$h (uvg$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$h (uvg$ ?v0 )?v1 )?v2 )))):named a24 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$q (uvh$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$q (uvh$ ?v0 )?v1 )?v2 )))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$d (fun_app$j (uvj$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$j (uvj$ ?v0 )?v1 )?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$s (uvm$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$s (uvm$ ?v0 )?v1 )?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_a_fun$ )(?v2 B$ ))(! (= (fun_app$g (fun_app$l (uvf$ ?v0 )?v1 )?v2 )(fun_app$m ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$l (uvf$ ?v0 )?v1 )?v2 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$m (fun_app$u (uvi$ ?v0 )?v1 )?v2 )(fun_app$m ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$u (uvi$ ?v0 )?v1 )?v2 )))):named a29 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_enat_b_fun_fun$ )(?v2 Enat$ )(?v3 B$ ))(! (= (fun_app$d (fun_app$w (fun_app$ag (uum$ ?v0 )?v1 )?v2 )?v3 )(case_enat$ (fun_app$d ?v0 ?v3 )(fun_app$y ?v1 ?v3 )?v2 )):pattern ((fun_app$d (fun_app$w (fun_app$ag (uum$ ?v0 )?v1 )?v2 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_enat_a_fun_fun$ )(?v2 Enat$ )(?v3 B$ ))(! (= (fun_app$g (fun_app$z (fun_app$ah (uui$ ?v0 )?v1 )?v2 )?v3 )(case_enat$a (fun_app$g ?v0 ?v3 )(fun_app$ab ?v1 ?v3 )?v2 )):pattern ((fun_app$g (fun_app$z (fun_app$ah (uui$ ?v0 )?v1 )?v2 )?v3 )))):named a31 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_enat_b_fun_fun$ )(?v2 Enat$ )(?v3 A$ ))(! (= (fun_app$ (fun_app$ac (fun_app$ai (uuo$ ?v0 )?v1 )?v2 )?v3 )(case_enat$ (fun_app$ ?v0 ?v3 )(fun_app$ad ?v1 ?v3 )?v2 )):pattern ((fun_app$ (fun_app$ac (fun_app$ai (uuo$ ?v0 )?v1 )?v2 )?v3 )))):named a32 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_enat_a_fun_fun$ )(?v2 Enat$ )(?v3 A$ ))(! (= (fun_app$m (fun_app$ae (fun_app$aj (uuk$ ?v0 )?v1 )?v2 )?v3 )(case_enat$a (fun_app$m ?v0 ?v3 )(fun_app$af ?v1 ?v3 )?v2 )):pattern ((fun_app$m (fun_app$ae (fun_app$aj (uuk$ ?v0 )?v1 )?v2 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_b_fun$ )(?v2 Bool )(?v3 B$ ))(! (= (fun_app$d (fun_app$ak (fun_app$al (uud$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$d ?v0 ?v3 )(fun_app$d ?v1 ?v3 ))):pattern ((fun_app$d (fun_app$ak (fun_app$al (uud$ ?v0 )?v1 )?v2 )?v3 )))):named a34 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_a_fun$ )(?v2 Bool )(?v3 B$ ))(! (= (fun_app$g (fun_app$am (fun_app$an (uub$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$g ?v0 ?v3 )(fun_app$g ?v1 ?v3 ))):pattern ((fun_app$g (fun_app$am (fun_app$an (uub$ ?v0 )?v1 )?v2 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun$ )(?v2 Bool )(?v3 A$ ))(! (= (fun_app$ (fun_app$ao (fun_app$ap (uue$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$ ?v0 ?v3 )(fun_app$ ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$ao (fun_app$ap (uue$ ?v0 )?v1 )?v2 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 Bool )(?v3 A$ ))(! (= (fun_app$m (fun_app$aq (fun_app$ar (uuc$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$m ?v0 ?v3 )(fun_app$m ?v1 ?v3 ))):pattern ((fun_app$m (fun_app$aq (fun_app$ar (uuc$ ?v0 )?v1 )?v2 )?v3 )))):named a37 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$d uug$ ?v0 )?v0 ):pattern ((fun_app$d uug$ ?v0 )))):named a38 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$m uuf$ ?v0 )?v0 ):pattern ((fun_app$m uuf$ ?v0 )))):named a39 ))
(assert (! (not (monotone$ orda$ ordb$ uu$ )):named a40 ))
(assert (! (monotone$ orda$ ordb$ lnil$ ):named a41 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ ))(monotone$ orda$ ordb$ (fun_app$b (uua$ ?v0 )?v1 ))):named a42 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_a_fun$ )(?v3 B_a_fun$ )(?v4 Bool ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(monotone$a ?v0 ?v1 ?v3 ))(monotone$a ?v0 ?v1 (fun_app$am (fun_app$an (uub$ ?v2 )?v3 )?v4 )))):named a43 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 Bool ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(monotone$b ?v0 ?v1 ?v3 ))(monotone$b ?v0 ?v1 (fun_app$aq (fun_app$ar (uuc$ ?v2 )?v3 )?v4 )))):named a44 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_fun$ )(?v3 B_b_fun$ )(?v4 Bool ))(=> (and (monotone$c ?v0 ?v1 ?v2 )(monotone$c ?v0 ?v1 ?v3 ))(monotone$c ?v0 ?v1 (fun_app$ak (fun_app$al (uud$ ?v2 )?v3 )?v4 )))):named a45 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_fun$ )(?v3 A_b_fun$ )(?v4 Bool ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(monotone$ ?v0 ?v1 ?v3 ))(monotone$ ?v0 ?v1 (fun_app$ao (fun_app$ap (uue$ ?v2 )?v3 )?v4 )))):named a46 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(monotone$b ?v0 ?v0 uuf$ )):named a47 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ ))(monotone$c ?v0 ?v0 uug$ )):named a48 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_a_fun$ ))(= (monotone$a ?v0 ?v1 ?v2 )(forall ((?v3 B$ )(?v4 B$ ))(=> (fun_app$as (fun_app$at ?v0 ?v3 )?v4 )(fun_app$au (fun_app$av ?v1 (fun_app$g ?v2 ?v3 ))(fun_app$g ?v2 ?v4 )))))):named a49 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_fun$ ))(= (monotone$b ?v0 ?v1 ?v2 )(forall ((?v3 A$ )(?v4 A$ ))(=> (fun_app$au (fun_app$av ?v0 ?v3 )?v4 )(fun_app$au (fun_app$av ?v1 (fun_app$m ?v2 ?v3 ))(fun_app$m ?v2 ?v4 )))))):named a50 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_fun$ ))(= (monotone$c ?v0 ?v1 ?v2 )(forall ((?v3 B$ )(?v4 B$ ))(=> (fun_app$as (fun_app$at ?v0 ?v3 )?v4 )(fun_app$as (fun_app$at ?v1 (fun_app$d ?v2 ?v3 ))(fun_app$d ?v2 ?v4 )))))):named a51 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_fun$ ))(= (monotone$ ?v0 ?v1 ?v2 )(forall ((?v3 A$ )(?v4 A$ ))(=> (fun_app$au (fun_app$av ?v0 ?v3 )?v4 )(fun_app$as (fun_app$at ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))))):named a52 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_a_fun$ ))(=> (forall ((?v3 B$ )(?v4 B$ ))(=> (fun_app$as (fun_app$at ?v0 ?v3 )?v4 )(fun_app$au (fun_app$av ?v1 (fun_app$g ?v2 ?v3 ))(fun_app$g ?v2 ?v4 ))))(monotone$a ?v0 ?v1 ?v2 ))):named a53 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_fun$ ))(=> (forall ((?v3 A$ )(?v4 A$ ))(=> (fun_app$au (fun_app$av ?v0 ?v3 )?v4 )(fun_app$au (fun_app$av ?v1 (fun_app$m ?v2 ?v3 ))(fun_app$m ?v2 ?v4 ))))(monotone$b ?v0 ?v1 ?v2 ))):named a54 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_fun$ ))(=> (forall ((?v3 B$ )(?v4 B$ ))(=> (fun_app$as (fun_app$at ?v0 ?v3 )?v4 )(fun_app$as (fun_app$at ?v1 (fun_app$d ?v2 ?v3 ))(fun_app$d ?v2 ?v4 ))))(monotone$c ?v0 ?v1 ?v2 ))):named a55 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_fun$ ))(=> (forall ((?v3 A$ )(?v4 A$ ))(=> (fun_app$au (fun_app$av ?v0 ?v3 )?v4 )(fun_app$as (fun_app$at ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 ))))(monotone$ ?v0 ?v1 ?v2 ))):named a56 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_a_fun$ )(?v3 B$ )(?v4 B$ ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(fun_app$as (fun_app$at ?v0 ?v3 )?v4 ))(fun_app$au (fun_app$av ?v1 (fun_app$g ?v2 ?v3 ))(fun_app$g ?v2 ?v4 )))):named a57 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_fun$ )(?v3 A$ )(?v4 A$ ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(fun_app$au (fun_app$av ?v0 ?v3 )?v4 ))(fun_app$au (fun_app$av ?v1 (fun_app$m ?v2 ?v3 ))(fun_app$m ?v2 ?v4 )))):named a58 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_fun$ )(?v3 B$ )(?v4 B$ ))(=> (and (monotone$c ?v0 ?v1 ?v2 )(fun_app$as (fun_app$at ?v0 ?v3 )?v4 ))(fun_app$as (fun_app$at ?v1 (fun_app$d ?v2 ?v3 ))(fun_app$d ?v2 ?v4 )))):named a59 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_fun$ )(?v3 A$ )(?v4 A$ ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(fun_app$au (fun_app$av ?v0 ?v3 )?v4 ))(fun_app$as (fun_app$at ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))):named a60 ))
(assert (! (forall ((?v0 B$ )(?v1 C_c_llist_b_fun_fun$ ))(! (= (fun_app$a (case_llist$ ?v0 ?v1 )lNil$ )?v0 ):pattern ((case_llist$ ?v0 ?v1 )))):named a61 ))
(assert (! (forall ((?v0 B$ )(?v1 C_c_llist_b_fun_fun$ )(?v2 C$ )(?v3 C_llist$ ))(! (= (fun_app$a (case_llist$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(fun_app$a (fun_app$c ?v1 ?v2 )?v3 )):pattern ((fun_app$a (case_llist$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))))):named a62 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_a_fun$ )(?v3 B_enat_a_fun_fun$ )(?v4 Enat$ ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(forall ((?v5 Enat$ ))(monotone$a ?v0 ?v1 (fun_app$z (uuh$ ?v3 )?v5 ))))(monotone$a ?v0 ?v1 (fun_app$z (fun_app$ah (uui$ ?v2 )?v3 )?v4 )))):named a63 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_fun$ )(?v3 A_enat_a_fun_fun$ )(?v4 Enat$ ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(forall ((?v5 Enat$ ))(monotone$b ?v0 ?v1 (fun_app$ae (uuj$ ?v3 )?v5 ))))(monotone$b ?v0 ?v1 (fun_app$ae (fun_app$aj (uuk$ ?v2 )?v3 )?v4 )))):named a64 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_fun$ )(?v3 B_enat_b_fun_fun$ )(?v4 Enat$ ))(=> (and (monotone$c ?v0 ?v1 ?v2 )(forall ((?v5 Enat$ ))(monotone$c ?v0 ?v1 (fun_app$w (uul$ ?v3 )?v5 ))))(monotone$c ?v0 ?v1 (fun_app$w (fun_app$ag (uum$ ?v2 )?v3 )?v4 )))):named a65 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_fun$ )(?v3 A_enat_b_fun_fun$ )(?v4 Enat$ ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(forall ((?v5 Enat$ ))(monotone$ ?v0 ?v1 (fun_app$ac (uun$ ?v3 )?v5 ))))(monotone$ ?v0 ?v1 (fun_app$ac (fun_app$ai (uuo$ ?v2 )?v3 )?v4 )))):named a66 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_a_a_fun_fun$ )(?v3 B_b_bool_fun_fun$ )(?v4 B_a_fun$ ))(=> (and (forall ((?v5 B$ ))(monotone$b ?v0 ?v1 (fun_app$n ?v2 ?v5 )))(and (monotone$a ?v3 ?v0 ?v4 )(and (forall ((?v5 A$ ))(monotone$a ?v3 ?v1 (fun_app$r (uup$ ?v2 )?v5 )))(transp$ ?v1 ))))(monotone$a ?v3 ?v1 (fun_app$l (uuq$ ?v2 )?v4 )))):named a67 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_b_a_fun_fun$ )(?v3 B_b_bool_fun_fun$ )(?v4 B_b_fun$ ))(=> (and (forall ((?v5 B$ ))(monotone$a ?v0 ?v1 (fun_app$i ?v2 ?v5 )))(and (monotone$c ?v3 ?v0 ?v4 )(and (forall ((?v5 B$ ))(monotone$a ?v3 ?v1 (fun_app$i (uur$ ?v2 )?v5 )))(transp$ ?v1 ))))(monotone$a ?v3 ?v1 (fun_app$h (uus$ ?v2 )?v4 )))):named a68 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_b_a_fun_fun$ )(?v3 A_a_bool_fun_fun$ )(?v4 A_b_fun$ ))(=> (and (forall ((?v5 A$ ))(monotone$a ?v0 ?v1 (fun_app$r ?v2 ?v5 )))(and (monotone$ ?v3 ?v0 ?v4 )(and (forall ((?v5 B$ ))(monotone$b ?v3 ?v1 (fun_app$n (uut$ ?v2 )?v5 )))(transp$ ?v1 ))))(monotone$b ?v3 ?v1 (fun_app$q (uuu$ ?v2 )?v4 )))):named a69 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_a_b_fun_fun$ )(?v3 B_b_bool_fun_fun$ )(?v4 B_a_fun$ ))(=> (and (forall ((?v5 B$ ))(monotone$ ?v0 ?v1 (fun_app$k ?v2 ?v5 )))(and (monotone$a ?v3 ?v0 ?v4 )(and (forall ((?v5 A$ ))(monotone$c ?v3 ?v1 (fun_app$p (uuv$ ?v2 )?v5 )))(transp$a ?v1 ))))(monotone$c ?v3 ?v1 (fun_app$j (uuw$ ?v2 )?v4 )))):named a70 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_a_fun_fun$ )(?v3 A_a_bool_fun_fun$ )(?v4 A_a_fun$ ))(=> (and (forall ((?v5 A$ ))(monotone$b ?v0 ?v1 (fun_app$v ?v2 ?v5 )))(and (monotone$b ?v3 ?v0 ?v4 )(and (forall ((?v5 A$ ))(monotone$b ?v3 ?v1 (fun_app$v (uux$ ?v2 )?v5 )))(transp$ ?v1 ))))(monotone$b ?v3 ?v1 (fun_app$u (uuy$ ?v2 )?v4 )))):named a71 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_b_fun_fun$ )(?v3 B_b_bool_fun_fun$ )(?v4 B_b_fun$ ))(=> (and (forall ((?v5 B$ ))(monotone$c ?v0 ?v1 (fun_app$f ?v2 ?v5 )))(and (monotone$c ?v3 ?v0 ?v4 )(and (forall ((?v5 B$ ))(monotone$c ?v3 ?v1 (fun_app$f (uuz$ ?v2 )?v5 )))(transp$a ?v1 ))))(monotone$c ?v3 ?v1 (fun_app$e (uva$ ?v2 )?v4 )))):named a72 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_b_b_fun_fun$ )(?v3 A_a_bool_fun_fun$ )(?v4 A_b_fun$ ))(=> (and (forall ((?v5 A$ ))(monotone$c ?v0 ?v1 (fun_app$p ?v2 ?v5 )))(and (monotone$ ?v3 ?v0 ?v4 )(and (forall ((?v5 B$ ))(monotone$ ?v3 ?v1 (fun_app$k (uvb$ ?v2 )?v5 )))(transp$a ?v1 ))))(monotone$ ?v3 ?v1 (fun_app$o (uvc$ ?v2 )?v4 )))):named a73 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_a_b_fun_fun$ )(?v3 A_a_bool_fun_fun$ )(?v4 A_a_fun$ ))(=> (and (forall ((?v5 A$ ))(monotone$ ?v0 ?v1 (fun_app$t ?v2 ?v5 )))(and (monotone$b ?v3 ?v0 ?v4 )(and (forall ((?v5 A$ ))(monotone$ ?v3 ?v1 (fun_app$t (uvd$ ?v2 )?v5 )))(transp$a ?v1 ))))(monotone$ ?v3 ?v1 (fun_app$s (uve$ ?v2 )?v4 )))):named a74 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_set_a_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_a_fun$ )(?v4 B_b_bool_fun_fun$ )(?v5 B_a_fun$ ))(=> (and (partial_function_definitions$ ?v0 ?v1 )(and (monotone$b ?v2 ?v0 ?v3 )(monotone$a ?v4 ?v2 ?v5 )))(monotone$a ?v4 ?v0 (fun_app$l (uvf$ ?v3 )?v5 )))):named a75 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_set_a_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_a_fun$ )(?v4 B_b_bool_fun_fun$ )(?v5 B_b_fun$ ))(=> (and (partial_function_definitions$ ?v0 ?v1 )(and (monotone$a ?v2 ?v0 ?v3 )(monotone$c ?v4 ?v2 ?v5 )))(monotone$a ?v4 ?v0 (fun_app$h (uvg$ ?v3 )?v5 )))):named a76 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_set_a_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_a_fun$ )(?v4 A_a_bool_fun_fun$ )(?v5 A_b_fun$ ))(=> (and (partial_function_definitions$ ?v0 ?v1 )(and (monotone$a ?v2 ?v0 ?v3 )(monotone$ ?v4 ?v2 ?v5 )))(monotone$b ?v4 ?v0 (fun_app$q (uvh$ ?v3 )?v5 )))):named a77 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_set_a_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_a_fun$ )(?v4 A_a_bool_fun_fun$ )(?v5 A_a_fun$ ))(=> (and (partial_function_definitions$ ?v0 ?v1 )(and (monotone$b ?v2 ?v0 ?v3 )(monotone$b ?v4 ?v2 ?v5 )))(monotone$b ?v4 ?v0 (fun_app$u (uvi$ ?v3 )?v5 )))):named a78 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_set_b_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_b_fun$ )(?v4 B_b_bool_fun_fun$ )(?v5 B_a_fun$ ))(=> (and (partial_function_definitions$a ?v0 ?v1 )(and (monotone$ ?v2 ?v0 ?v3 )(monotone$a ?v4 ?v2 ?v5 )))(monotone$c ?v4 ?v0 (fun_app$j (uvj$ ?v3 )?v5 )))):named a79 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_set_b_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_b_fun$ )(?v4 B_b_bool_fun_fun$ )(?v5 B_b_fun$ ))(=> (and (partial_function_definitions$a ?v0 ?v1 )(and (monotone$c ?v2 ?v0 ?v3 )(monotone$c ?v4 ?v2 ?v5 )))(monotone$c ?v4 ?v0 (fun_app$e (uvk$ ?v3 )?v5 )))):named a80 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_set_b_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_b_fun$ )(?v4 A_a_bool_fun_fun$ )(?v5 A_b_fun$ ))(=> (and (partial_function_definitions$a ?v0 ?v1 )(and (monotone$c ?v2 ?v0 ?v3 )(monotone$ ?v4 ?v2 ?v5 )))(monotone$ ?v4 ?v0 (fun_app$o (uvl$ ?v3 )?v5 )))):named a81 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_set_b_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_b_fun$ )(?v4 A_a_bool_fun_fun$ )(?v5 A_a_fun$ ))(=> (and (partial_function_definitions$a ?v0 ?v1 )(and (monotone$ ?v2 ?v0 ?v3 )(monotone$b ?v4 ?v2 ?v5 )))(monotone$ ?v4 ?v0 (fun_app$s (uvm$ ?v3 )?v5 )))):named a82 ))
(assert (! (forall ((?v0 C$ )(?v1 C_llist$ )(?v2 C$ )(?v3 C_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a83 ))
(check-sat )
(get-unsat-core )
