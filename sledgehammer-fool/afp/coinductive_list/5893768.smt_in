(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_set_b_fun$ 0 )
(declare-sort B_a_llist_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort A_llist_set_a_llist_fun$ 0 )
(declare-sort B_bool_fun_b_bool_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun f$ ()B_a_llist_fun$ )
(declare-fun uu$ ()B_bool_fun$ )
(declare-fun lub$ ()B_set_b_fun$ )
(declare-fun max$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun min$ (A_a_bool_fun_fun$ A$ A$ )A$ )
(declare-fun ord$ ()B_b_bool_fun_fun$ )
(declare-fun uua$ (A$ )A_bool_fun$ )
(declare-fun uub$ (Bool )B_bool_fun_b_bool_fun_fun$ )
(declare-fun uuc$ (B_bool_fun$ )B_bool_fun_b_bool_fun_fun$ )
(declare-fun uud$ (B_bool_fun$ )B_bool_fun_b_bool_fun_fun$ )
(declare-fun uue$ (B_bool_fun$ )B_bool_fun_b_bool_fun_fun$ )
(declare-fun uuf$ (B_bool_fun$ )B_bool_fun_b_bool_fun_fun$ )
(declare-fun uug$ (Bool )B_bool_fun$ )
(declare-fun uuh$ ()B_bool_fun$ )
(declare-fun lSup$ ()A_llist_set_a_llist_fun$ )
(declare-fun mcont$ (B_set_b_fun$ B_b_bool_fun_fun$ A_llist_set_a_llist_fun$ A_llist_a_llist_bool_fun_fun$ B_a_llist_fun$ )Bool )
(declare-fun atMost$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun atLeast$ (A_a_bool_fun_fun$ A$ )A_set$ )
(declare-fun collect$ (A_bool_fun$ )A_set$ )
(declare-fun fun_app$ (B_bool_fun$ B$ )Bool )
(declare-fun less_eq$ ()A_a_bool_fun_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun lsorted$ (A_a_bool_fun_fun$ A_llist$ )Bool )
(declare-fun fun_app$a (B_a_llist_fun$ B$ )A_llist$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$d (B_bool_fun_b_bool_fun_fun$ B_bool_fun$ )B_bool_fun$ )
(declare-fun fun_app$e (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$f (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun admissible$ (B_set_b_fun$ B_b_bool_fun_fun$ B_bool_fun$ )Bool )
(declare-fun atLeastAtMost$ (A_a_bool_fun_fun$ A$ A$ )A_set$ )
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uu$ ?v0 )(lsorted$ less_eq$ (fun_app$a f$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(fun_app$b (fun_app$c less_eq$ ?v1 )?v0 )):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$d (uuc$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$d (uuc$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$d (uud$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v1 ?v2 )(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$d (uud$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$d (uuf$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$d (uuf$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$d (uue$ ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$d (uue$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 Bool )(?v1 B_bool_fun$ )(?v2 B$ ))(! (= (fun_app$ (fun_app$d (uub$ ?v0 )?v1 )?v2 )(=> ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$d (uub$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 Bool )(?v1 B$ ))(! (= (fun_app$ (uug$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uug$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 B$ ))(! (= (fun_app$ uuh$ ?v0 )true ):pattern ((fun_app$ uuh$ ?v0 )))):named a8 ))
(assert (! (not (admissible$ lub$ ord$ uu$ )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (= ?v0 ?v1 )(fun_app$b (fun_app$c less_eq$ ?v1 )?v2 ))(fun_app$b (fun_app$c less_eq$ ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$b (fun_app$c less_eq$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$b (fun_app$c less_eq$ ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (max$ less_eq$ ?v0 ?v1 )(ite (fun_app$b (fun_app$c less_eq$ ?v0 )?v1 )?v1 ?v0 )):pattern ((max$ less_eq$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (min$ less_eq$ ?v0 ?v1 )(ite (fun_app$b (fun_app$c less_eq$ ?v0 )?v1 )?v0 ?v1 )):pattern ((min$ less_eq$ ?v0 ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A$ ))(= (atMost$ less_eq$ ?v0 )(collect$ (uua$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A$ ))(! (= (atLeast$ less_eq$ ?v0 )(collect$ (fun_app$c less_eq$ ?v0 ))):pattern ((atLeast$ less_eq$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(= (member$ ?v0 (atLeastAtMost$ less_eq$ ?v1 ?v2 ))(and (fun_app$b (fun_app$c less_eq$ ?v1 )?v0 )(fun_app$b (fun_app$c less_eq$ ?v0 )?v2 )))):named a16 ))
(assert (! (lsorted$ less_eq$ lNil$ ):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$e (fun_app$f lprefix$ ?v0 )?v1 )(lsorted$ less_eq$ ?v1 ))(lsorted$ less_eq$ ?v0 ))):named a18 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_llist$ ))(=> (and (fun_app$b (fun_app$c less_eq$ ?v0 )?v1 )(lsorted$ less_eq$ (lCons$ ?v1 ?v2 )))(lsorted$ less_eq$ (lCons$ ?v0 (lCons$ ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (lsorted$ less_eq$ ?v0 )(lsorted$ less_eq$ (ltl$ ?v0 )))):named a20 ))
(assert (! (mcont$ lub$ ord$ lSup$ lprefix$ f$ ):named a21 ))
(assert (! (forall ((?v0 Bool )(?v1 B_set_b_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_bool_fun$ ))(=> (=> ?v0 (admissible$ ?v1 ?v2 ?v3 ))(admissible$ ?v1 ?v2 (fun_app$d (uub$ ?v0 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 B_set_b_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_bool_fun$ )(?v3 B_bool_fun$ ))(=> (and (admissible$ ?v0 ?v1 (fun_app$d (uuc$ ?v2 )?v3 ))(admissible$ ?v0 ?v1 (fun_app$d (uud$ ?v2 )?v3 )))(admissible$ ?v0 ?v1 (fun_app$d (uue$ ?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 B_set_b_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_bool_fun$ )(?v3 B_bool_fun$ ))(=> (and (admissible$ ?v0 ?v1 ?v2 )(admissible$ ?v0 ?v1 ?v3 ))(admissible$ ?v0 ?v1 (fun_app$d (uuf$ ?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 B_set_b_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 Bool ))(admissible$ ?v0 ?v1 (uug$ ?v2 ))):named a25 ))
(assert (! (forall ((?v0 B_set_b_fun$ )(?v1 B_b_bool_fun_fun$ ))(admissible$ ?v0 ?v1 uuh$ )):named a26 ))
(check-sat )
(get-unsat-core )
