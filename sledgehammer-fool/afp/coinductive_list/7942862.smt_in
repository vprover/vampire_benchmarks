(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_d_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort A_c_llist_fun$ 0 )
(declare-sort B_d_llist_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort C_d_bool_fun_fun$ 0 )
(declare-sort Bool_bool_bool_fun_fun$ 0 )
(declare-sort A_a_fun_a_c_llist_fun_fun$ 0 )
(declare-sort B_b_fun_b_d_llist_fun_fun$ 0 )
(declare-sort C_llist_d_llist_bool_fun_fun$ 0 )
(declare-sort A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$ 0 )
(declare-sort B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$ 0 )
(declare-sort A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_llist$ 0)
(declare-sort D_llist$ 0)
(declare-fun lNil$ ()C_llist$)
(declare-fun lhd$ (C_llist$)C$)
(declare-fun ltl$ (C_llist$)C_llist$)
(declare-fun lCons$ (C$ C_llist$ )C_llist$)
(declare-fun lNil$a ()D_llist$)
(declare-fun lhd$a (D_llist$)D$)
(declare-fun ltl$a (D_llist$)D_llist$)
(declare-fun lCons$a (D$ D_llist$ )D_llist$)
(declare-fun a$ ()A_b_bool_fun_fun$ )
(declare-fun b$ ()C_d_bool_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()B$ )
(declare-fun uu$ ()Bool_bool_bool_fun_fun$ )
(declare-fun xa$ ()A$ )
(declare-fun ya$ ()B$ )
(declare-fun lHD1$ ()A_c_fun$ )
(declare-fun lHD2$ ()B_d_fun$ )
(declare-fun lTL1$ ()A_a_fun$ )
(declare-fun lTL2$ ()B_b_fun$ )
(declare-fun lnull$ (C_llist$ )Bool )
(declare-fun mORE1$ ()A_c_llist_fun$ )
(declare-fun mORE2$ ()B_d_llist_fun$ )
(declare-fun sTOP1$ ()A_bool_fun$ )
(declare-fun sTOP2$ ()B_bool_fun$ )
(declare-fun lnull$a (D_llist$ )Bool )
(declare-fun fun_app$ (Bool_bool_fun$ Bool )Bool )
(declare-fun rel_fun$ (A_b_bool_fun_fun$ C_d_bool_fun_fun$ A_c_fun$ B_d_fun$ )Bool )
(declare-fun fun_app$a (Bool_bool_bool_fun_fun$ Bool )Bool_bool_fun$ )
(declare-fun fun_app$b (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$c (C_d_bool_fun_fun$ C$ )D_bool_fun$ )
(declare-fun fun_app$d (A_c_llist_fun$ A$ )C_llist$ )
(declare-fun fun_app$e (A_a_fun_a_c_llist_fun_fun$ A_a_fun$ )A_c_llist_fun$ )
(declare-fun fun_app$f (A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$ A_c_llist_fun$ )A_a_fun_a_c_llist_fun_fun$ )
(declare-fun fun_app$g (A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$ A_bool_fun$ )A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$ )
(declare-fun fun_app$h (A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$ A_c_fun$ )A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$i (B_d_llist_fun$ B$ )D_llist$ )
(declare-fun fun_app$j (B_b_fun_b_d_llist_fun_fun$ B_b_fun$ )B_d_llist_fun$ )
(declare-fun fun_app$k (B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$ B_d_llist_fun$ )B_b_fun_b_d_llist_fun_fun$ )
(declare-fun fun_app$l (B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$ B_bool_fun$ )B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$ )
(declare-fun fun_app$m (B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$ B_d_fun$ )B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$n (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$o (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$p (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$q (A_c_fun$ A$ )C$ )
(declare-fun fun_app$r (B_d_fun$ B$ )D$ )
(declare-fun fun_app$s (A_a_fun$ A$ )A$ )
(declare-fun fun_app$t (B_b_fun$ B$ )B$ )
(declare-fun iS_LNIL1$ ()A_bool_fun$ )
(declare-fun iS_LNIL2$ ()B_bool_fun$ )
(declare-fun iterates$ (C_c_fun$ C$ )C_llist$ )
(declare-fun rel_fun$a (A_b_bool_fun_fun$ Bool_bool_bool_fun_fun$ A_bool_fun$ B_bool_fun$ )Bool )
(declare-fun rel_fun$b (A_b_bool_fun_fun$ A_b_bool_fun_fun$ A_a_fun$ B_b_fun$ )Bool )
(declare-fun rel_fun$c (A_b_bool_fun_fun$ C_llist_d_llist_bool_fun_fun$ A_c_llist_fun$ B_d_llist_fun$ )Bool )
(declare-fun iterates$a (D_d_fun$ D$ )D_llist$ )
(declare-fun llist_all2$ (C_d_bool_fun_fun$ )C_llist_d_llist_bool_fun_fun$ )
(declare-fun corec_llist$ (A_bool_fun$ )A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$ )
(declare-fun corec_llist$a (B_bool_fun$ )B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$ )
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(! (= (fun_app$ (fun_app$a uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not (fun_app$b (fun_app$c b$ (lhd$ (fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ iS_LNIL1$ )lHD1$ )sTOP1$ )mORE1$ )lTL1$ )xa$ )))(lhd$a (fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a iS_LNIL2$ )lHD2$ )sTOP2$ )mORE2$ )lTL2$ )ya$ )))):named a1 ))
(assert (! (fun_app$n (fun_app$o a$ xa$ )ya$ ):named a2 ))
(assert (! (not (lnull$ (fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ iS_LNIL1$ )lHD1$ )sTOP1$ )mORE1$ )lTL1$ )xa$ ))):named a3 ))
(assert (! (not (lnull$a (fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a iS_LNIL2$ )lHD2$ )sTOP2$ )mORE2$ )lTL2$ )ya$ ))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_c_fun$ )(?v3 A_bool_fun$ )(?v4 A_c_llist_fun$ )(?v5 A_a_fun$ ))(=> (not (fun_app$p ?v0 ?v1 ))(= (lhd$ (fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(fun_app$q ?v2 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_d_fun$ )(?v3 B_bool_fun$ )(?v4 B_d_llist_fun$ )(?v5 B_b_fun$ ))(=> (not (fun_app$n ?v0 ?v1 ))(= (lhd$a (fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(fun_app$r ?v2 ?v1 )))):named a6 ))
(assert (! (rel_fun$ a$ b$ lHD1$ lHD2$ ):named a7 ))
(assert (! (rel_fun$a a$ uu$ sTOP1$ sTOP2$ ):named a8 ))
(assert (! (rel_fun$a a$ uu$ iS_LNIL1$ iS_LNIL2$ ):named a9 ))
(assert (! (rel_fun$b a$ a$ lTL1$ lTL2$ ):named a10 ))
(assert (! (rel_fun$c a$ (llist_all2$ b$ )mORE1$ mORE2$ ):named a11 ))
(assert (! (fun_app$n (fun_app$o a$ x$ )y$ ):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_c_fun$ )(?v2 A_bool_fun$ )(?v3 A_c_llist_fun$ )(?v4 A_a_fun$ )(?v5 A$ ))(= (not (lnull$ (fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )))(not (fun_app$p ?v0 ?v5 )))):named a13 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_d_fun$ )(?v2 B_bool_fun$ )(?v3 B_d_llist_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(= (not (lnull$a (fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 )))(not (fun_app$n ?v0 ?v5 )))):named a14 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_c_fun$ )(?v2 A_bool_fun$ )(?v3 A_c_llist_fun$ )(?v4 A_a_fun$ )(?v5 A$ ))(= (lnull$ (fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$p ?v0 ?v5 ))):named a15 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_d_fun$ )(?v2 B_bool_fun$ )(?v3 B_d_llist_fun$ )(?v4 B_b_fun$ )(?v5 B$ ))(= (lnull$a (fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a ?v0 )?v1 )?v2 )?v3 )?v4 )?v5 ))(fun_app$n ?v0 ?v5 ))):named a16 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C$ ))(= (lhd$ (iterates$ ?v0 ?v1 ))?v1 )):named a17 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 D$ ))(= (lhd$a (iterates$a ?v0 ?v1 ))?v1 )):named a18 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_c_fun$ )(?v3 A_bool_fun$ )(?v4 A_c_llist_fun$ )(?v5 A_a_fun$ ))(! (=> (fun_app$p ?v0 ?v1 )(= (fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )lNil$ )):pattern ((fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_d_fun$ )(?v3 B_bool_fun$ )(?v4 B_d_llist_fun$ )(?v5 B_b_fun$ ))(! (=> (fun_app$n ?v0 ?v1 )(= (fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )lNil$a )):pattern ((fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_c_fun$ )(?v3 A_bool_fun$ )(?v4 A_c_llist_fun$ )(?v5 A_a_fun$ ))(=> (not (fun_app$p ?v0 ?v1 ))(= (fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )(lCons$ (fun_app$q ?v2 ?v1 )(ite (fun_app$p ?v3 ?v1 )(fun_app$d ?v4 ?v1 )(fun_app$d (fun_app$e (fun_app$f (fun_app$g (fun_app$h (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )(fun_app$s ?v5 ?v1 ))))))):named a21 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_d_fun$ )(?v3 B_bool_fun$ )(?v4 B_d_llist_fun$ )(?v5 B_b_fun$ ))(=> (not (fun_app$n ?v0 ?v1 ))(= (fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 )(lCons$a (fun_app$r ?v2 ?v1 )(ite (fun_app$n ?v3 ?v1 )(fun_app$i ?v4 ?v1 )(fun_app$i (fun_app$j (fun_app$k (fun_app$l (fun_app$m (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )(fun_app$t ?v5 ?v1 ))))))):named a22 ))
(check-sat )
(get-unsat-core )
