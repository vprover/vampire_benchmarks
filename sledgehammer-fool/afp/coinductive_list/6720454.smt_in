(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()Bool_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun comp$ (Bool_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (Bool_bool_fun$ Bool )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$a (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$b (A_bool_fun$ A$ )Bool )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$ uu$ ?v0 )(not ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= ys$ (lappend$ (ltakeWhile$ (fun_app$a (comp$ uu$ )p$ )ys$ )(lCons$ (lhd$ (ldropWhile$ (fun_app$a (comp$ uu$ )p$ )ys$ ))(ltl$ (ldropWhile$ (fun_app$a (comp$ uu$ )p$ )ys$ )))))):named a1 ))
(assert (! (exists ((?v0 A$ ))(and (member$ ?v0 (lset$ ys$ ))(fun_app$b p$ ?v0 ))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (ldropWhile$ ?v0 (lCons$ ?v1 ?v2 ))(ite (fun_app$b ?v0 ?v1 )(ldropWhile$ ?v0 ?v2 )(lCons$ ?v1 ?v2 ))):pattern ((ldropWhile$ ?v0 (lCons$ ?v1 ?v2 ))))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lappend$ (ltakeWhile$ ?v0 ?v1 )(ldropWhile$ ?v0 ?v1 ))?v1 )):named a6 ))
(assert (! (= x$ (lhd$ (ldropWhile$ (fun_app$a (comp$ uu$ )p$ )ys$ ))):named a7 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (lappend$ (lappend$ ?v0 ?v1 )?v2 )(lappend$ ?v0 (lappend$ ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lhd$ (lCons$ ?v0 ?v1 ))?v0 ):pattern ((lCons$ ?v0 ?v1 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (ltl$ (lCons$ ?v0 ?v1 ))?v1 ):pattern ((lCons$ ?v0 ?v1 )))):named a10 ))
(assert (! (= (lfilter$ p$ ys$ )(lCons$ x$ xs$ )):named a11 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (exists ((?v2 A$ ))(and (member$ ?v2 (lset$ ?v0 ))(not (fun_app$b ?v1 ?v2 ))))(member$ (lhd$ (ldropWhile$ ?v1 ?v0 ))(lset$ ?v0 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ ))(=> (exists ((?v2 A$ ))(and (member$ ?v2 (lset$ ?v0 ))(not (fun_app$b ?v1 ?v2 ))))(not (fun_app$b ?v1 (lhd$ (ldropWhile$ ?v1 ?v0 )))))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_llist$ ))(=> (and (member$ ?v0 (lset$ ?v1 ))(not (fun_app$b ?v2 ?v0 )))(= (ltakeWhile$ ?v2 (lappend$ ?v1 ?v3 ))(ltakeWhile$ ?v2 ?v1 )))):named a14 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$b (fun_app$a (comp$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$a (comp$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (= xs$ (ltl$ (lfilter$ p$ ys$ ))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$ ?v4 (lset$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (ldropWhile$ ?v2 ?v0 )(ldropWhile$ ?v3 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (member$ ?v0 (lset$ (ldropWhile$ ?v1 ?v2 )))(member$ ?v0 (lset$ ?v2 )))):named a18 ))
(check-sat )
(get-unsat-core )
