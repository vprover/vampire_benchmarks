(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_c_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_d_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort A_c_llist_fun$ 0 )
(declare-sort B_d_llist_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_d_bool_fun_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort D_c_bool_fun_fun$ 0 )
(declare-sort D_d_bool_fun_fun$ 0 )
(declare-sort D_llist_bool_fun$ 0 )
(declare-sort Bool_bool_bool_fun_fun$ 0 )
(declare-sort A_a_fun_a_c_llist_fun_fun$ 0 )
(declare-sort B_b_fun_b_d_llist_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_d_llist_bool_fun_fun$ 0 )
(declare-sort D_llist_d_llist_bool_fun_fun$ 0 )
(declare-sort A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$ 0 )
(declare-sort B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$ 0 )
(declare-sort A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$ 0 )
(declare-sort B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$ 0 )
(declare-sort A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$ 0 )
(declare-sort C_llist$ 0)
(declare-sort D_llist$ 0)
(declare-fun lNil$ ()C_llist$)
(declare-fun lhd$ (C_llist$)C$)
(declare-fun ltl$ (C_llist$)C_llist$)
(declare-fun lCons$ (C$ C_llist$ )C_llist$)
(declare-fun lNil$a ()D_llist$)
(declare-fun lhd$a (D_llist$)D$)
(declare-fun ltl$a (D_llist$)D_llist$)
(declare-fun lCons$a (D$ D_llist$ )D_llist$)
(declare-fun a$ ()A_b_bool_fun_fun$ )
(declare-fun b$ ()C_d_bool_fun_fun$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()B$ )
(declare-fun uu$ ()Bool_bool_bool_fun_fun$ )
(declare-fun xa$ ()A$ )
(declare-fun ya$ ()B$ )
(declare-fun uua$ ()D_d_bool_fun_fun$ )
(declare-fun uub$ ()D_llist_d_llist_bool_fun_fun$ )
(declare-fun uuc$ ()C_c_bool_fun_fun$ )
(declare-fun uud$ ()C_llist_c_llist_bool_fun_fun$ )
(declare-fun lHD1$ ()A_c_fun$ )
(declare-fun lHD2$ ()B_d_fun$ )
(declare-fun lTL1$ ()A_a_fun$ )
(declare-fun lTL2$ ()B_b_fun$ )
(declare-fun lnull$ (C_llist$ )Bool )
(declare-fun mORE1$ ()A_c_llist_fun$ )
(declare-fun mORE2$ ()B_d_llist_fun$ )
(declare-fun sTOP1$ ()A_bool_fun$ )
(declare-fun sTOP2$ ()B_bool_fun$ )
(declare-fun lnull$a (D_llist$ )Bool )
(declare-fun fun_app$ (D_llist_bool_fun$ D_llist$ )Bool )
(declare-fun rel_fun$ (A_b_bool_fun_fun$ Bool_bool_bool_fun_fun$ A_bool_fun$ B_bool_fun$ )Bool )
(declare-fun fun_app$a (D_llist_d_llist_bool_fun_fun$ D_llist$ )D_llist_bool_fun$ )
(declare-fun fun_app$b (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$c (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$d (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$e (Bool_bool_bool_fun_fun$ Bool )Bool_bool_fun$ )
(declare-fun fun_app$f (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$g (D_d_bool_fun_fun$ D$ )D_bool_fun$ )
(declare-fun fun_app$h (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$i (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$j (A_c_llist_fun$ A$ )C_llist$ )
(declare-fun fun_app$k (A_a_fun_a_c_llist_fun_fun$ A_a_fun$ )A_c_llist_fun$ )
(declare-fun fun_app$l (A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$ A_c_llist_fun$ )A_a_fun_a_c_llist_fun_fun$ )
(declare-fun fun_app$m (A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$ A_bool_fun$ )A_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun$ )
(declare-fun fun_app$n (A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$ A_c_fun$ )A_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$o (B_d_llist_fun$ B$ )D_llist$ )
(declare-fun fun_app$p (B_b_fun_b_d_llist_fun_fun$ B_b_fun$ )B_d_llist_fun$ )
(declare-fun fun_app$q (B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$ B_d_llist_fun$ )B_b_fun_b_d_llist_fun_fun$ )
(declare-fun fun_app$r (B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$ B_bool_fun$ )B_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun$ )
(declare-fun fun_app$s (B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$ B_d_fun$ )B_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun$ )
(declare-fun fun_app$t (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$u (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$v (C_llist_d_llist_bool_fun_fun$ C_llist$ )D_llist_bool_fun$ )
(declare-fun fun_app$w (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$x (A_a_fun$ A$ )A$ )
(declare-fun fun_app$y (B_b_fun$ B$ )B$ )
(declare-fun fun_app$z (D_c_bool_fun_fun$ D$ )C_bool_fun$ )
(declare-fun iS_LNIL1$ ()A_bool_fun$ )
(declare-fun iS_LNIL2$ ()B_bool_fun$ )
(declare-fun rel_fun$a (A_b_bool_fun_fun$ A_b_bool_fun_fun$ A_a_fun$ B_b_fun$ )Bool )
(declare-fun rel_fun$b (A_b_bool_fun_fun$ C_d_bool_fun_fun$ A_c_fun$ B_d_fun$ )Bool )
(declare-fun rel_fun$c (A_b_bool_fun_fun$ C_llist_d_llist_bool_fun_fun$ A_c_llist_fun$ B_d_llist_fun$ )Bool )
(declare-fun fun_app$aa (C_d_bool_fun_fun$ C$ )D_bool_fun$ )
(declare-fun llist_all2$ (C_d_bool_fun_fun$ )C_llist_d_llist_bool_fun_fun$ )
(declare-fun corec_llist$ (A_bool_fun$ )A_c_fun_a_bool_fun_a_c_llist_fun_a_a_fun_a_c_llist_fun_fun_fun_fun_fun$ )
(declare-fun llist_all2$a (D_d_bool_fun_fun$ )D_llist_d_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (C_c_bool_fun_fun$ )C_llist_c_llist_bool_fun_fun$ )
(declare-fun llist_all2$c (D_c_bool_fun_fun$ D_llist$ C_llist$ )Bool )
(declare-fun corec_llist$a (B_bool_fun$ )B_d_fun_b_bool_fun_b_d_llist_fun_b_b_fun_b_d_llist_fun_fun_fun_fun_fun$ )
(assert (! (forall ((?v0 D_llist$ )(?v1 D_llist$ ))(! (= (fun_app$ (fun_app$a uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(! (= (fun_app$b (fun_app$c uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$b (fun_app$c uud$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(! (= (fun_app$d (fun_app$e uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uu$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 D$ )(?v1 D$ ))(! (= (fun_app$f (fun_app$g uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uua$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$h (fun_app$i uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uuc$ ?v0 )?v1 )))):named a4 ))
(assert (! (not (or (exists ((?v0 A$ )(?v1 B$ ))(and (= (ltl$ (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$ iS_LNIL1$ )lHD1$ )sTOP1$ )mORE1$ )lTL1$ )xa$ ))(fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$ iS_LNIL1$ )lHD1$ )sTOP1$ )mORE1$ )lTL1$ )?v0 ))(and (= (ltl$a (fun_app$o (fun_app$p (fun_app$q (fun_app$r (fun_app$s (corec_llist$a iS_LNIL2$ )lHD2$ )sTOP2$ )mORE2$ )lTL2$ )ya$ ))(fun_app$o (fun_app$p (fun_app$q (fun_app$r (fun_app$s (corec_llist$a iS_LNIL2$ )lHD2$ )sTOP2$ )mORE2$ )lTL2$ )?v1 ))(fun_app$t (fun_app$u a$ ?v0 )?v1 ))))(fun_app$ (fun_app$v (llist_all2$ b$ )(ltl$ (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$ iS_LNIL1$ )lHD1$ )sTOP1$ )mORE1$ )lTL1$ )xa$ )))(ltl$a (fun_app$o (fun_app$p (fun_app$q (fun_app$r (fun_app$s (corec_llist$a iS_LNIL2$ )lHD2$ )sTOP2$ )mORE2$ )lTL2$ )ya$ ))))):named a5 ))
(assert (! (fun_app$t (fun_app$u a$ x$ )y$ ):named a6 ))
(assert (! (= (fun_app$w sTOP1$ xa$ )(fun_app$t sTOP2$ ya$ )):named a7 ))
(assert (! (fun_app$t (fun_app$u a$ xa$ )ya$ ):named a8 ))
(assert (! (fun_app$t (fun_app$u a$ (fun_app$x lTL1$ xa$ ))(fun_app$y lTL2$ ya$ )):named a9 ))
(assert (! (fun_app$ (fun_app$v (llist_all2$ b$ )(fun_app$j mORE1$ xa$ ))(fun_app$o mORE2$ ya$ )):named a10 ))
(assert (! (rel_fun$ a$ uu$ sTOP1$ sTOP2$ ):named a11 ))
(assert (! (not (lnull$ (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$ iS_LNIL1$ )lHD1$ )sTOP1$ )mORE1$ )lTL1$ )xa$ ))):named a12 ))
(assert (! (not (lnull$a (fun_app$o (fun_app$p (fun_app$q (fun_app$r (fun_app$s (corec_llist$a iS_LNIL2$ )lHD2$ )sTOP2$ )mORE2$ )lTL2$ )ya$ ))):named a13 ))
(assert (! (rel_fun$ a$ uu$ iS_LNIL1$ iS_LNIL2$ ):named a14 ))
(assert (! (rel_fun$a a$ a$ lTL1$ lTL2$ ):named a15 ))
(assert (! (rel_fun$b a$ b$ lHD1$ lHD2$ ):named a16 ))
(assert (! (rel_fun$c a$ (llist_all2$ b$ )mORE1$ mORE2$ ):named a17 ))
(assert (! (= (llist_all2$a uua$ )uub$ ):named a18 ))
(assert (! (= (llist_all2$b uuc$ )uud$ ):named a19 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 D_llist$ )(?v2 D_llist$ )(?v3 D_d_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 D$ )(?v5 D$ ))(=> (fun_app$f (fun_app$g ?v0 ?v4 )?v5 )(fun_app$f (fun_app$g ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$a (llist_all2$a ?v3 )?v1 )?v2 ))):named a20 ))
(assert (! (forall ((?v0 D_c_bool_fun_fun$ )(?v1 D_llist$ )(?v2 C_llist$ )(?v3 D_c_bool_fun_fun$ ))(=> (and (llist_all2$c ?v0 ?v1 ?v2 )(forall ((?v4 D$ )(?v5 C$ ))(=> (fun_app$h (fun_app$z ?v0 ?v4 )?v5 )(fun_app$h (fun_app$z ?v3 ?v4 )?v5 ))))(llist_all2$c ?v3 ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_c_bool_fun_fun$ ))(=> (and (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(forall ((?v4 C$ )(?v5 C$ ))(=> (fun_app$h (fun_app$i ?v0 ?v4 )?v5 )(fun_app$h (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$b (fun_app$c (llist_all2$b ?v3 )?v1 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C_llist$ )(?v2 D_llist$ )(?v3 C_d_bool_fun_fun$ ))(=> (and (fun_app$ (fun_app$v (llist_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 C$ )(?v5 D$ ))(=> (fun_app$f (fun_app$aa ?v0 ?v4 )?v5 )(fun_app$f (fun_app$aa ?v3 ?v4 )?v5 ))))(fun_app$ (fun_app$v (llist_all2$ ?v3 )?v1 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (fun_app$b (fun_app$c (llist_all2$b ?v0 )?v1 )?v2 )(fun_app$b (fun_app$c (llist_all2$b ?v0 )(ltl$ ?v1 ))(ltl$ ?v2 )))):named a24 ))
(assert (! (forall ((?v0 D_c_bool_fun_fun$ )(?v1 D_llist$ )(?v2 C_llist$ ))(=> (llist_all2$c ?v0 ?v1 ?v2 )(llist_all2$c ?v0 (ltl$a ?v1 )(ltl$ ?v2 )))):named a25 ))
(assert (! (forall ((?v0 D_d_bool_fun_fun$ )(?v1 D_llist$ )(?v2 D_llist$ ))(=> (fun_app$ (fun_app$a (llist_all2$a ?v0 )?v1 )?v2 )(fun_app$ (fun_app$a (llist_all2$a ?v0 )(ltl$a ?v1 ))(ltl$a ?v2 )))):named a26 ))
(assert (! (forall ((?v0 C_d_bool_fun_fun$ )(?v1 C_llist$ )(?v2 D_llist$ ))(=> (fun_app$ (fun_app$v (llist_all2$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$v (llist_all2$ ?v0 )(ltl$ ?v1 ))(ltl$a ?v2 )))):named a27 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_c_fun$ )(?v3 A_bool_fun$ )(?v4 A_c_llist_fun$ )(?v5 A_a_fun$ ))(=> (not (fun_app$w ?v0 ?v1 ))(= (ltl$ (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(ite (fun_app$w ?v3 ?v1 )(fun_app$j ?v4 ?v1 )(fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$ ?v0 )?v2 )?v3 )?v4 )?v5 )(fun_app$x ?v5 ?v1 )))))):named a28 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_d_fun$ )(?v3 B_bool_fun$ )(?v4 B_d_llist_fun$ )(?v5 B_b_fun$ ))(=> (not (fun_app$t ?v0 ?v1 ))(= (ltl$a (fun_app$o (fun_app$p (fun_app$q (fun_app$r (fun_app$s (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )?v1 ))(ite (fun_app$t ?v3 ?v1 )(fun_app$o ?v4 ?v1 )(fun_app$o (fun_app$p (fun_app$q (fun_app$r (fun_app$s (corec_llist$a ?v0 )?v2 )?v3 )?v4 )?v5 )(fun_app$y ?v5 ?v1 )))))):named a29 ))
(assert (! (fun_app$f (fun_app$aa b$ (lhd$ (fun_app$j (fun_app$k (fun_app$l (fun_app$m (fun_app$n (corec_llist$ iS_LNIL1$ )lHD1$ )sTOP1$ )mORE1$ )lTL1$ )xa$ )))(lhd$a (fun_app$o (fun_app$p (fun_app$q (fun_app$r (fun_app$s (corec_llist$a iS_LNIL2$ )lHD2$ )sTOP2$ )mORE2$ )lTL2$ )ya$ ))):named a30 ))
(check-sat )
(get-unsat-core )
