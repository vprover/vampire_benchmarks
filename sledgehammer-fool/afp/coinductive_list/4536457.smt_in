(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_b_prod_llist_bool_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_fun$ 0 )
(declare-sort A_llist_a_b_prod_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort Bool_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun$ 0 )
(declare-sort Bool_a_b_prod_llist_a_llist_fun_fun$ 0 )
(declare-sort Bool_a_llist_a_b_prod_llist_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ 0 )
(declare-sort Bool_a_b_prod_llist_a_b_prod_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_b_prod_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_b_prod_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_b_prod_llist_fun_a_llist_a_b_prod_llist_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_llist_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_llist_fun_bool_a_b_prod_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_a_b_prod_llist_fun_bool_a_llist_a_b_prod_llist_fun_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$ 0 )
(declare-sort A_b_prod_llist_a_b_prod_llist_fun_bool_a_b_prod_llist_a_b_prod_llist_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$a ()A_b_prod_llist$)
(declare-fun lhd$a (A_b_prod_llist$)A_b_prod$)
(declare-fun ltl$a (A_b_prod_llist$)A_b_prod_llist$)
(declare-fun lCons$a (A_b_prod$ A_b_prod_llist$ )A_b_prod_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun uu$ ()A_llist_a_b_prod_llist_fun$ )
(declare-fun ys$ ()B_llist$ )
(declare-fun uua$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uub$ (A_llist_a_llist_fun$ )A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_llist_fun_fun$ )
(declare-fun uuc$ (A_b_prod_llist_a_llist_fun$ )A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_llist_fun_fun$ )
(declare-fun uud$ (A_llist_a_b_prod_llist_fun$ )A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$ )
(declare-fun uue$ (A_b_prod_llist_a_b_prod_llist_fun$ )A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$ )
(declare-fun uuf$ (A_b_prod_llist_a_llist_fun$ )A_llist_a_b_prod_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uug$ (A_b_prod_llist_a_b_prod_llist_fun$ )A_llist_a_b_prod_llist_fun_a_llist_a_b_prod_llist_fun_fun$ )
(declare-fun uuh$ (A_llist_a_b_prod_llist_fun$ )A_llist_a_llist_fun_a_llist_a_b_prod_llist_fun_fun$ )
(declare-fun uui$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun uuj$ (A_llist$ )A_b_prod_llist_a_llist_fun$ )
(declare-fun uuk$ (A_b_prod_llist$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun uul$ (A_b_prod_llist$ )A_llist_a_b_prod_llist_fun$ )
(declare-fun uum$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ )
(declare-fun uun$ (A_b_prod_llist_a_b_prod_llist_fun$ )A_b_prod_llist_a_b_prod_llist_fun_bool_a_b_prod_llist_a_b_prod_llist_fun_fun_fun$ )
(declare-fun uuo$ (A_b_prod_llist_a_llist_fun$ )A_b_prod_llist_a_llist_fun_bool_a_b_prod_llist_a_llist_fun_fun_fun$ )
(declare-fun uup$ (A_llist_a_b_prod_llist_fun$ )A_llist_a_b_prod_llist_fun_bool_a_llist_a_b_prod_llist_fun_fun_fun$ )
(declare-fun uuq$ ()A_llist_a_llist_fun$ )
(declare-fun uur$ ()A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lzip$ (A_llist$ B_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$ (Nat$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$ (A_llist_a_b_prod_llist_fun$ A_llist$ )A_b_prod_llist$ )
(declare-fun ldropn$a (Nat$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_b_prod_llist_a_b_prod_llist_fun$ A_b_prod_llist$ )A_b_prod_llist$ )
(declare-fun fun_app$b (A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$ A_b_prod_llist_a_b_prod_llist_fun$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun fun_app$c (A_llist_a_b_prod_llist_fun_a_llist_a_b_prod_llist_fun_fun$ A_llist_a_b_prod_llist_fun$ )A_llist_a_b_prod_llist_fun$ )
(declare-fun fun_app$d (A_b_prod_llist_a_llist_fun$ A_b_prod_llist$ )A_llist$ )
(declare-fun fun_app$e (A_b_prod_llist_a_b_prod_llist_fun_a_b_prod_llist_a_llist_fun_fun$ A_b_prod_llist_a_b_prod_llist_fun$ )A_b_prod_llist_a_llist_fun$ )
(declare-fun fun_app$f (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$g (A_llist_a_b_prod_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_b_prod_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$h (A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_b_prod_llist_fun_fun$ A_b_prod_llist_a_llist_fun$ )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun fun_app$i (A_llist_a_llist_fun_a_llist_a_b_prod_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_b_prod_llist_fun$ )
(declare-fun fun_app$j (A_b_prod_llist_a_llist_fun_a_b_prod_llist_a_llist_fun_fun$ A_b_prod_llist_a_llist_fun$ )A_b_prod_llist_a_llist_fun$ )
(declare-fun fun_app$k (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$l (Bool_a_b_prod_llist_a_b_prod_llist_fun_fun$ Bool )A_b_prod_llist_a_b_prod_llist_fun$ )
(declare-fun fun_app$m (A_b_prod_llist_a_b_prod_llist_fun_bool_a_b_prod_llist_a_b_prod_llist_fun_fun_fun$ A_b_prod_llist_a_b_prod_llist_fun$ )Bool_a_b_prod_llist_a_b_prod_llist_fun_fun$ )
(declare-fun fun_app$n (Bool_a_b_prod_llist_a_llist_fun_fun$ Bool )A_b_prod_llist_a_llist_fun$ )
(declare-fun fun_app$o (A_b_prod_llist_a_llist_fun_bool_a_b_prod_llist_a_llist_fun_fun_fun$ A_b_prod_llist_a_llist_fun$ )Bool_a_b_prod_llist_a_llist_fun_fun$ )
(declare-fun fun_app$p (Bool_a_llist_a_b_prod_llist_fun_fun$ Bool )A_llist_a_b_prod_llist_fun$ )
(declare-fun fun_app$q (A_llist_a_b_prod_llist_fun_bool_a_llist_a_b_prod_llist_fun_fun_fun$ A_llist_a_b_prod_llist_fun$ )Bool_a_llist_a_b_prod_llist_fun_fun$ )
(declare-fun fun_app$r (Bool_a_llist_a_llist_fun_fun$ Bool )A_llist_a_llist_fun$ )
(declare-fun fun_app$s (A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun$ )Bool_a_llist_a_llist_fun_fun$ )
(declare-fun fun_app$t (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$u (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$v (A_b_prod_llist_bool_fun$ A_b_prod_llist$ )Bool )
(declare-fun fun_app$w (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist$ )A_b_prod_llist_bool_fun$ )
(declare-fun lprefix$a ()A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_llist_a_b_prod_llist_fun$ )Bool )
(declare-fun monotone$a (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun monotone$b (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_b_prod_llist_a_b_prod_llist_fun$ )Bool )
(declare-fun monotone$c (A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_b_prod_llist_a_llist_fun$ )Bool )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uu$ ?v0 )(lzip$ ?v0 ys$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_fun$ )(?v2 A_b_prod_llist$ ))(! (= (fun_app$a (fun_app$b (uue$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$b (uue$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_fun$ )(?v1 A_llist_a_b_prod_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$c (uug$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$c (uug$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_fun$ )(?v2 A_b_prod_llist$ ))(! (= (fun_app$d (fun_app$e (uuc$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (uuc$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_fun$ )(?v1 A_llist_a_b_prod_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$f (fun_app$g (uuf$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$g (uuf$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_fun$ )(?v1 A_b_prod_llist_a_llist_fun$ )(?v2 A_b_prod_llist$ ))(! (= (fun_app$a (fun_app$h (uud$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$h (uud$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$i (uuh$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$i (uuh$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_b_prod_llist_a_llist_fun$ )(?v2 A_b_prod_llist$ ))(! (= (fun_app$d (fun_app$j (uub$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$j (uub$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$f (fun_app$k (uua$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$f ?v1 ?v2 ))):pattern ((fun_app$f (fun_app$k (uua$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_fun$ )(?v2 Bool )(?v3 A_b_prod_llist$ ))(! (= (fun_app$a (fun_app$l (fun_app$m (uun$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$a ?v0 ?v3 )(fun_app$a ?v1 ?v3 ))):pattern ((fun_app$a (fun_app$l (fun_app$m (uun$ ?v0 )?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_fun$ )(?v1 A_b_prod_llist_a_llist_fun$ )(?v2 Bool )(?v3 A_b_prod_llist$ ))(! (= (fun_app$d (fun_app$n (fun_app$o (uuo$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$d ?v0 ?v3 )(fun_app$d ?v1 ?v3 ))):pattern ((fun_app$d (fun_app$n (fun_app$o (uuo$ ?v0 )?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_fun$ )(?v1 A_llist_a_b_prod_llist_fun$ )(?v2 Bool )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$p (fun_app$q (uup$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$ ?v0 ?v3 )(fun_app$ ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$p (fun_app$q (uup$ ?v0 )?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 Bool )(?v3 A_llist$ ))(! (= (fun_app$f (fun_app$r (fun_app$s (uum$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$f ?v0 ?v3 )(fun_app$f ?v1 ?v3 ))):pattern ((fun_app$f (fun_app$r (fun_app$s (uum$ ?v0 )?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(! (= (fun_app$a (uuk$ ?v0 )?v1 )?v0 ):pattern ((fun_app$a (uuk$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (uul$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uul$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_b_prod_llist$ ))(! (= (fun_app$d (uuj$ ?v0 )?v1 )?v0 ):pattern ((fun_app$d (uuj$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$f (uui$ ?v0 )?v1 )?v0 ):pattern ((fun_app$f (uui$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(! (= (fun_app$a uur$ ?v0 )?v0 ):pattern ((fun_app$a uur$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$f uuq$ ?v0 )?v0 ):pattern ((fun_app$f uuq$ ?v0 )))):named a18 ))
(assert (! (not (monotone$ lprefix$ lprefix$a uu$ )):named a19 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$t (fun_app$u lprefix$ ?v0 )?v0 )):named a20 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(fun_app$v (fun_app$w lprefix$a ?v0 )?v0 )):named a21 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$t (fun_app$u lprefix$ ?v0 )?v0 )):named a22 ))
(assert (! (forall ((?v0 A_b_prod_llist$ ))(fun_app$v (fun_app$w lprefix$a ?v0 )?v0 )):named a23 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$f ?v0 ?v5 )(ite (fun_app$t (fun_app$u lprefix$ ?v5 )?v1 )?v2 (fun_app$f ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$t (fun_app$u lprefix$ ?v5 )?v6 )(not (fun_app$t (fun_app$u lprefix$ ?v5 )?v1 )))(fun_app$t (fun_app$u ?v4 (fun_app$f ?v3 ?v5 ))(fun_app$f ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$t (fun_app$u lprefix$ ?v5 )?v1 ))(fun_app$t (fun_app$u ?v4 ?v2 )(fun_app$f ?v3 ?v5 ))))(fun_app$t (fun_app$u ?v4 ?v2 )?v2 ))))(monotone$a lprefix$ ?v4 ?v0 ))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_fun$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_b_prod_llist_a_b_prod_llist_fun$ )(?v4 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_b_prod_llist$ ))(= (fun_app$a ?v0 ?v5 )(ite (fun_app$v (fun_app$w lprefix$a ?v5 )?v1 )?v2 (fun_app$a ?v3 ?v5 ))))(and (forall ((?v5 A_b_prod_llist$ )(?v6 A_b_prod_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$a ?v5 )?v6 )(not (fun_app$v (fun_app$w lprefix$a ?v5 )?v1 )))(fun_app$v (fun_app$w ?v4 (fun_app$a ?v3 ?v5 ))(fun_app$a ?v3 ?v6 ))))(and (forall ((?v5 A_b_prod_llist$ ))(=> (not (fun_app$v (fun_app$w lprefix$a ?v5 )?v1 ))(fun_app$v (fun_app$w ?v4 ?v2 )(fun_app$a ?v3 ?v5 ))))(fun_app$v (fun_app$w ?v4 ?v2 )?v2 ))))(monotone$b lprefix$a ?v4 ?v0 ))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_llist_fun$ )(?v1 A_b_prod_llist$ )(?v2 A_llist$ )(?v3 A_b_prod_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_b_prod_llist$ ))(= (fun_app$d ?v0 ?v5 )(ite (fun_app$v (fun_app$w lprefix$a ?v5 )?v1 )?v2 (fun_app$d ?v3 ?v5 ))))(and (forall ((?v5 A_b_prod_llist$ )(?v6 A_b_prod_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$a ?v5 )?v6 )(not (fun_app$v (fun_app$w lprefix$a ?v5 )?v1 )))(fun_app$t (fun_app$u ?v4 (fun_app$d ?v3 ?v5 ))(fun_app$d ?v3 ?v6 ))))(and (forall ((?v5 A_b_prod_llist$ ))(=> (not (fun_app$v (fun_app$w lprefix$a ?v5 )?v1 ))(fun_app$t (fun_app$u ?v4 ?v2 )(fun_app$d ?v3 ?v5 ))))(fun_app$t (fun_app$u ?v4 ?v2 )?v2 ))))(monotone$c lprefix$a ?v4 ?v0 ))):named a26 ))
(assert (! (forall ((?v0 A_llist_a_b_prod_llist_fun$ )(?v1 A_llist$ )(?v2 A_b_prod_llist$ )(?v3 A_llist_a_b_prod_llist_fun$ )(?v4 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$t (fun_app$u lprefix$ ?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$t (fun_app$u lprefix$ ?v5 )?v6 )(not (fun_app$t (fun_app$u lprefix$ ?v5 )?v1 )))(fun_app$v (fun_app$w ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$t (fun_app$u lprefix$ ?v5 )?v1 ))(fun_app$v (fun_app$w ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$v (fun_app$w ?v4 ?v2 )?v2 ))))(monotone$ lprefix$ ?v4 ?v0 ))):named a27 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$a ?v0 lprefix$ ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$k (uua$ ?v1 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v3 A_b_prod_llist_a_llist_fun$ ))(=> (and (monotone$a ?v0 lprefix$ ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$ (fun_app$j (uub$ ?v1 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_llist_fun$ )(?v2 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v3 A_b_prod_llist_a_b_prod_llist_fun$ ))(=> (and (monotone$c ?v0 lprefix$ ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$ (fun_app$e (uuc$ ?v1 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_b_prod_llist_fun$ )(?v2 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v3 A_b_prod_llist_a_llist_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$b ?v2 lprefix$a (fun_app$h (uud$ ?v1 )?v3 )))):named a31 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_fun$ )(?v2 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v3 A_b_prod_llist_a_b_prod_llist_fun$ ))(=> (and (monotone$b ?v0 lprefix$a ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$b ?v2 lprefix$a (fun_app$b (uue$ ?v1 )?v3 )))):named a32 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_b_prod_llist_fun$ ))(=> (and (monotone$c ?v0 lprefix$ ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$g (uuf$ ?v1 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_b_prod_llist_fun$ ))(=> (and (monotone$b ?v0 lprefix$a ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$c (uug$ ?v1 )?v3 )))):named a34 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_b_prod_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$i (uuh$ ?v1 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$t (fun_app$u lprefix$ ?v0 )?v1 )(fun_app$t (fun_app$u lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$a ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$t (fun_app$u lprefix$ ?v0 )?v1 )(fun_app$t (fun_app$u lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$a ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$t (fun_app$u lprefix$ ?v0 )?v1 )(fun_app$t (fun_app$u lprefix$ ?v2 )?v1 ))(or (fun_app$t (fun_app$u lprefix$ ?v0 )?v2 )(fun_app$t (fun_app$u lprefix$ ?v2 )?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$a ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$a ?v2 )?v1 ))(or (fun_app$v (fun_app$w lprefix$a ?v0 )?v2 )(fun_app$v (fun_app$w lprefix$a ?v2 )?v0 )))):named a41 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$t (fun_app$u lprefix$ ?v0 )?v1 )(fun_app$t (fun_app$u lprefix$ ?v1 )?v2 ))(fun_app$t (fun_app$u lprefix$ ?v0 )?v2 ))):named a42 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$a ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$a ?v1 )?v2 ))(fun_app$v (fun_app$w lprefix$a ?v0 )?v2 ))):named a43 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$t (fun_app$u lprefix$ ?v0 )?v1 )(fun_app$t (fun_app$u lprefix$ ?v1 )?v2 ))(fun_app$t (fun_app$u lprefix$ ?v0 )?v2 ))):named a44 ))
(assert (! (forall ((?v0 A_b_prod_llist$ )(?v1 A_b_prod_llist$ )(?v2 A_b_prod_llist$ ))(=> (and (fun_app$v (fun_app$w lprefix$a ?v0 )?v1 )(fun_app$v (fun_app$w lprefix$a ?v1 )?v2 ))(fun_app$v (fun_app$w lprefix$a ?v0 )?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$a ?v0 lprefix$ (uui$ ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$c ?v0 lprefix$ (uuj$ ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist$ ))(monotone$b ?v0 lprefix$a (uuk$ ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_b_prod_llist$ ))(monotone$ ?v0 lprefix$a (uul$ ?v1 ))):named a49 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ )(?v4 Bool ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(monotone$a ?v0 ?v1 ?v3 ))(monotone$a ?v0 ?v1 (fun_app$r (fun_app$s (uum$ ?v2 )?v3 )?v4 )))):named a50 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_b_prod_llist_fun$ )(?v3 A_b_prod_llist_a_b_prod_llist_fun$ )(?v4 Bool ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(monotone$b ?v0 ?v1 ?v3 ))(monotone$b ?v0 ?v1 (fun_app$l (fun_app$m (uun$ ?v2 )?v3 )?v4 )))):named a51 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_llist_fun$ )(?v3 A_b_prod_llist_a_llist_fun$ )(?v4 Bool ))(=> (and (monotone$c ?v0 ?v1 ?v2 )(monotone$c ?v0 ?v1 ?v3 ))(monotone$c ?v0 ?v1 (fun_app$n (fun_app$o (uuo$ ?v2 )?v3 )?v4 )))):named a52 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v2 A_llist_a_b_prod_llist_fun$ )(?v3 A_llist_a_b_prod_llist_fun$ )(?v4 Bool ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(monotone$ ?v0 ?v1 ?v3 ))(monotone$ ?v0 ?v1 (fun_app$p (fun_app$q (uup$ ?v2 )?v3 )?v4 )))):named a53 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ ))(monotone$a ?v0 ?v0 uuq$ )):named a54 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ ))(monotone$b ?v0 ?v0 uur$ )):named a55 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (monotone$a ?v0 ?v1 ?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$t (fun_app$u ?v0 ?v3 )?v4 )(fun_app$t (fun_app$u ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 )))))):named a56 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_b_prod_llist_fun$ ))(= (monotone$b ?v0 ?v1 ?v2 )(forall ((?v3 A_b_prod_llist$ )(?v4 A_b_prod_llist$ ))(=> (fun_app$v (fun_app$w ?v0 ?v3 )?v4 )(fun_app$v (fun_app$w ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 )))))):named a57 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_llist_fun$ ))(= (monotone$c ?v0 ?v1 ?v2 )(forall ((?v3 A_b_prod_llist$ )(?v4 A_b_prod_llist$ ))(=> (fun_app$v (fun_app$w ?v0 ?v3 )?v4 )(fun_app$t (fun_app$u ?v1 (fun_app$d ?v2 ?v3 ))(fun_app$d ?v2 ?v4 )))))):named a58 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v2 A_llist_a_b_prod_llist_fun$ ))(= (monotone$ ?v0 ?v1 ?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$t (fun_app$u ?v0 ?v3 )?v4 )(fun_app$v (fun_app$w ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))))):named a59 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$t (fun_app$u ?v0 ?v3 )?v4 )(fun_app$t (fun_app$u ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 ))))(monotone$a ?v0 ?v1 ?v2 ))):named a60 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_b_prod_llist_fun$ ))(=> (forall ((?v3 A_b_prod_llist$ )(?v4 A_b_prod_llist$ ))(=> (fun_app$v (fun_app$w ?v0 ?v3 )?v4 )(fun_app$v (fun_app$w ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 ))))(monotone$b ?v0 ?v1 ?v2 ))):named a61 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_llist_fun$ ))(=> (forall ((?v3 A_b_prod_llist$ )(?v4 A_b_prod_llist$ ))(=> (fun_app$v (fun_app$w ?v0 ?v3 )?v4 )(fun_app$t (fun_app$u ?v1 (fun_app$d ?v2 ?v3 ))(fun_app$d ?v2 ?v4 ))))(monotone$c ?v0 ?v1 ?v2 ))):named a62 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v2 A_llist_a_b_prod_llist_fun$ ))(=> (forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$t (fun_app$u ?v0 ?v3 )?v4 )(fun_app$v (fun_app$w ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 ))))(monotone$ ?v0 ?v1 ?v2 ))):named a63 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(fun_app$t (fun_app$u ?v0 ?v3 )?v4 ))(fun_app$t (fun_app$u ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 )))):named a64 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_b_prod_llist_fun$ )(?v3 A_b_prod_llist$ )(?v4 A_b_prod_llist$ ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(fun_app$v (fun_app$w ?v0 ?v3 )?v4 ))(fun_app$v (fun_app$w ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 )))):named a65 ))
(assert (! (forall ((?v0 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_b_prod_llist_a_llist_fun$ )(?v3 A_b_prod_llist$ )(?v4 A_b_prod_llist$ ))(=> (and (monotone$c ?v0 ?v1 ?v2 )(fun_app$v (fun_app$w ?v0 ?v3 )?v4 ))(fun_app$t (fun_app$u ?v1 (fun_app$d ?v2 ?v3 ))(fun_app$d ?v2 ?v4 )))):named a66 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_b_prod_llist_a_b_prod_llist_bool_fun_fun$ )(?v2 A_llist_a_b_prod_llist_fun$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(fun_app$t (fun_app$u ?v0 ?v3 )?v4 ))(fun_app$v (fun_app$w ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))):named a67 ))
(assert (! (forall ((?v0 Nat$ ))(monotone$a lprefix$ lprefix$ (ldropn$ ?v0 ))):named a68 ))
(assert (! (forall ((?v0 Nat$ ))(monotone$b lprefix$a lprefix$a (ldropn$a ?v0 ))):named a69 ))
(check-sat )
(get-unsat-core )
