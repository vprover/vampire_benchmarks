(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort B_a_prod_llist_bool_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun$ 0 )
(declare-sort B_a_prod_llist_a_llist_fun$ 0 )
(declare-sort B_a_prod_llist_b_llist_fun$ 0 )
(declare-sort B_llist_b_a_prod_llist_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort Bool_a_llist_a_llist_fun_fun$ 0 )
(declare-sort Bool_a_llist_b_llist_fun_fun$ 0 )
(declare-sort Bool_b_llist_a_llist_fun_fun$ 0 )
(declare-sort Bool_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_a_prod_llist_b_a_prod_llist_fun$ 0 )
(declare-sort Bool_a_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort Bool_b_a_prod_llist_a_llist_fun_fun$ 0 )
(declare-sort Bool_b_a_prod_llist_b_llist_fun_fun$ 0 )
(declare-sort Bool_b_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ 0 )
(declare-sort Bool_b_a_prod_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort B_llist_b_a_prod_llist_fun_b_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_bool_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_bool_b_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun_a_llist_b_a_prod_llist_fun_fun$ 0 )
(declare-sort B_a_prod_llist_a_llist_fun_b_a_prod_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_a_prod_llist_fun_bool_a_llist_b_a_prod_llist_fun_fun_fun$ 0 )
(declare-sort B_a_prod_llist_a_llist_fun_bool_b_a_prod_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort B_a_prod_llist_b_llist_fun_bool_b_a_prod_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_b_a_prod_llist_fun_bool_b_llist_b_a_prod_llist_fun_fun_fun$ 0 )
(declare-sort B_a_prod_llist_b_a_prod_llist_fun_bool_b_a_prod_llist_b_a_prod_llist_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$ (B_a_prod$)B$)
(declare-fun snd$ (B_a_prod$)A$)
(declare-fun pair$ (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$a ()B_a_prod_llist$)
(declare-fun lhd$a (B_a_prod_llist$)B_a_prod$)
(declare-fun ltl$a (B_a_prod_llist$)B_a_prod_llist$)
(declare-fun lCons$a (B_a_prod$ B_a_prod_llist$ )B_a_prod_llist$)
(declare-fun lNil$b ()B_llist$)
(declare-fun lhd$b (B_llist$)B$)
(declare-fun ltl$b (B_llist$)B_llist$)
(declare-fun lCons$b (B$ B_llist$ )B_llist$)
(declare-fun uu$ (B_a_prod_llist_a_llist_fun$ )A_llist_b_a_prod_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun xs$ ()B_llist$ )
(declare-fun uua$ (A_llist_b_a_prod_llist_fun$ )A_llist_a_llist_fun_a_llist_b_a_prod_llist_fun_fun$ )
(declare-fun uub$ (B_a_prod_llist_b_a_prod_llist_fun$ )A_llist_b_a_prod_llist_fun_a_llist_b_a_prod_llist_fun_fun$ )
(declare-fun uuc$ (B_llist_a_llist_fun$ )A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uud$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uue$ (B_llist_b_llist_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun uuf$ (A_llist_b_llist_fun$ )A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun uug$ (A_llist_a_llist_fun$ )B_a_prod_llist_a_llist_fun_b_a_prod_llist_a_llist_fun_fun$ )
(declare-fun uuh$ (B_a_prod_llist_a_llist_fun$ )B_llist_b_a_prod_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun uui$ (A_llist_b_a_prod_llist_fun$ )B_llist_a_llist_fun_b_llist_b_a_prod_llist_fun_fun$ )
(declare-fun uuj$ (B_a_prod_llist_b_llist_fun$ )A_llist_b_a_prod_llist_b_a_prod_llist_fun_fun$ )
(declare-fun uuk$ (B_llist_b_llist_fun$ )A_llist_b_llist_b_a_prod_llist_fun_fun$ )
(declare-fun uul$ (A_llist_b_llist_fun$ )A_llist_a_llist_b_a_prod_llist_fun_fun$ )
(declare-fun uum$ (A_llist$ )B_llist_a_llist_fun$ )
(declare-fun uun$ (B_llist$ )B_a_prod_llist_b_llist_fun$ )
(declare-fun uuo$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun uup$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun uuq$ (A_llist$ )B_a_prod_llist_a_llist_fun$ )
(declare-fun uur$ (B_a_prod_llist$ )B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun uus$ (B_a_prod_llist$ )B_llist_b_a_prod_llist_fun$ )
(declare-fun uut$ (B_llist$ )A_llist_b_llist_fun$ )
(declare-fun uuu$ (B_a_prod_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun uuv$ (A_llist$ )B_llist_b_a_prod_llist_fun$ )
(declare-fun uuw$ (B_a_prod_llist_b_llist_fun$ )B_a_prod_llist_b_llist_fun_bool_b_a_prod_llist_b_llist_fun_fun_fun$ )
(declare-fun uux$ (B_llist_b_llist_fun$ )B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ )
(declare-fun uuy$ (B_llist_a_llist_fun$ )B_llist_a_llist_fun_bool_b_llist_a_llist_fun_fun_fun$ )
(declare-fun uuz$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ )
(declare-fun uva$ (B_a_prod_llist_b_a_prod_llist_fun$ )B_a_prod_llist_b_a_prod_llist_fun_bool_b_a_prod_llist_b_a_prod_llist_fun_fun_fun$ )
(declare-fun uvb$ (B_a_prod_llist_a_llist_fun$ )B_a_prod_llist_a_llist_fun_bool_b_a_prod_llist_a_llist_fun_fun_fun$ )
(declare-fun uvc$ (A_llist_b_llist_fun$ )A_llist_b_llist_fun_bool_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uvd$ (B_llist_b_a_prod_llist_fun$ )B_llist_b_a_prod_llist_fun_bool_b_llist_b_a_prod_llist_fun_fun_fun$ )
(declare-fun uve$ (A_llist_b_a_prod_llist_fun$ )A_llist_b_a_prod_llist_fun_bool_a_llist_b_a_prod_llist_fun_fun_fun$ )
(declare-fun uvf$ ()B_llist_b_llist_fun$ )
(declare-fun uvg$ ()A_llist_a_llist_fun$ )
(declare-fun uvh$ ()B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun lzip$ (B_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$ (B_llist_b_a_prod_llist_fun$ B_llist$ )B_a_prod_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_b_a_prod_llist_fun$ A_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$b (B_a_prod_llist_b_a_prod_llist_fun$ B_a_prod_llist$ )B_a_prod_llist$ )
(declare-fun fun_app$c (A_llist_b_a_prod_llist_b_a_prod_llist_fun_fun$ A_llist$ )B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$d (B_a_prod_llist_b_llist_fun$ B_a_prod_llist$ )B_llist$ )
(declare-fun fun_app$e (A_llist_b_llist_b_a_prod_llist_fun_fun$ A_llist$ )B_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$f (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$g (A_llist_a_llist_b_a_prod_llist_fun_fun$ A_llist$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$h (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun fun_app$i (A_llist_b_a_prod_llist_fun_a_llist_b_a_prod_llist_fun_fun$ A_llist_b_a_prod_llist_fun$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$j (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$k (B_llist_b_a_prod_llist_fun_b_llist_a_llist_fun_fun$ B_llist_b_a_prod_llist_fun$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$l (B_a_prod_llist_a_llist_fun$ B_a_prod_llist$ )A_llist$ )
(declare-fun fun_app$m (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$n (A_llist_b_a_prod_llist_fun_a_llist_a_llist_fun_fun$ A_llist_b_a_prod_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$o (A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ A_llist_b_llist_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$p (A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ A_llist_b_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$q (B_llist_a_llist_fun_b_llist_b_a_prod_llist_fun_fun$ B_llist_a_llist_fun$ )B_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$r (A_llist_a_llist_fun_a_llist_b_a_prod_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$s (A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$t (B_a_prod_llist_a_llist_fun_b_a_prod_llist_a_llist_fun_fun$ B_a_prod_llist_a_llist_fun$ )B_a_prod_llist_a_llist_fun$ )
(declare-fun fun_app$u (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$v (Bool_b_a_prod_llist_b_a_prod_llist_fun_fun$ Bool )B_a_prod_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$w (B_a_prod_llist_b_a_prod_llist_fun_bool_b_a_prod_llist_b_a_prod_llist_fun_fun_fun$ B_a_prod_llist_b_a_prod_llist_fun$ )Bool_b_a_prod_llist_b_a_prod_llist_fun_fun$ )
(declare-fun fun_app$x (Bool_b_a_prod_llist_b_llist_fun_fun$ Bool )B_a_prod_llist_b_llist_fun$ )
(declare-fun fun_app$y (B_a_prod_llist_b_llist_fun_bool_b_a_prod_llist_b_llist_fun_fun_fun$ B_a_prod_llist_b_llist_fun$ )Bool_b_a_prod_llist_b_llist_fun_fun$ )
(declare-fun fun_app$z (Bool_b_a_prod_llist_a_llist_fun_fun$ Bool )B_a_prod_llist_a_llist_fun$ )
(declare-fun lprefix$a ()B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )
(declare-fun lprefix$b ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ A_llist_b_a_prod_llist_fun$ )Bool )
(declare-fun fun_app$aa (B_a_prod_llist_a_llist_fun_bool_b_a_prod_llist_a_llist_fun_fun_fun$ B_a_prod_llist_a_llist_fun$ )Bool_b_a_prod_llist_a_llist_fun_fun$ )
(declare-fun fun_app$ab (Bool_b_llist_b_a_prod_llist_fun_fun$ Bool )B_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$ac (B_llist_b_a_prod_llist_fun_bool_b_llist_b_a_prod_llist_fun_fun_fun$ B_llist_b_a_prod_llist_fun$ )Bool_b_llist_b_a_prod_llist_fun_fun$ )
(declare-fun fun_app$ad (Bool_b_llist_b_llist_fun_fun$ Bool )B_llist_b_llist_fun$ )
(declare-fun fun_app$ae (B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ B_llist_b_llist_fun$ )Bool_b_llist_b_llist_fun_fun$ )
(declare-fun fun_app$af (Bool_b_llist_a_llist_fun_fun$ Bool )B_llist_a_llist_fun$ )
(declare-fun fun_app$ag (B_llist_a_llist_fun_bool_b_llist_a_llist_fun_fun_fun$ B_llist_a_llist_fun$ )Bool_b_llist_a_llist_fun_fun$ )
(declare-fun fun_app$ah (Bool_a_llist_b_a_prod_llist_fun_fun$ Bool )A_llist_b_a_prod_llist_fun$ )
(declare-fun fun_app$ai (A_llist_b_a_prod_llist_fun_bool_a_llist_b_a_prod_llist_fun_fun_fun$ A_llist_b_a_prod_llist_fun$ )Bool_a_llist_b_a_prod_llist_fun_fun$ )
(declare-fun fun_app$aj (Bool_a_llist_b_llist_fun_fun$ Bool )A_llist_b_llist_fun$ )
(declare-fun fun_app$ak (A_llist_b_llist_fun_bool_a_llist_b_llist_fun_fun_fun$ A_llist_b_llist_fun$ )Bool_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$al (Bool_a_llist_a_llist_fun_fun$ Bool )A_llist_a_llist_fun$ )
(declare-fun fun_app$am (A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun$ )Bool_a_llist_a_llist_fun_fun$ )
(declare-fun fun_app$an (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$ao (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$ap (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$aq (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$ar (B_a_prod_llist_bool_fun$ B_a_prod_llist$ )Bool )
(declare-fun fun_app$as (B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ B_a_prod_llist$ )B_a_prod_llist_bool_fun$ )
(declare-fun monotone$a (B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_a_prod_llist_b_llist_fun$ )Bool )
(declare-fun monotone$b (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$ )Bool )
(declare-fun monotone$c (B_llist_b_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ B_llist_a_llist_fun$ )Bool )
(declare-fun monotone$d (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun monotone$e (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun$ )Bool )
(declare-fun monotone$f (B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ B_a_prod_llist_b_a_prod_llist_fun$ )Bool )
(declare-fun monotone$g (B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ B_a_prod_llist_a_llist_fun$ )Bool )
(declare-fun monotone$h (B_llist_b_llist_bool_fun_fun$ B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ B_llist_b_a_prod_llist_fun$ )Bool )
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (uuv$ ?v0 )?v1 )(fun_app$a (lzip$ ?v1 )?v0 )):pattern ((fun_app$ (uuv$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_llist_fun$ )(?v1 A_llist$ )(?v2 B_a_prod_llist$ ))(! (= (fun_app$b (fun_app$c (uuj$ ?v0 )?v1 )?v2 )(fun_app$a (lzip$ (fun_app$d ?v0 ?v2 ))?v1 )):pattern ((fun_app$b (fun_app$c (uuj$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(! (= (fun_app$ (fun_app$e (uuk$ ?v0 )?v1 )?v2 )(fun_app$a (lzip$ (fun_app$f ?v0 ?v2 ))?v1 )):pattern ((fun_app$ (fun_app$e (uuk$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (fun_app$a (fun_app$g (uul$ ?v0 )?v1 )?v2 )(fun_app$a (lzip$ (fun_app$h ?v0 ?v2 ))?v1 )):pattern ((fun_app$a (fun_app$g (uul$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_fun$ )(?v1 A_llist_b_a_prod_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$a (fun_app$i (uub$ ?v0 )?v1 )?v2 )(fun_app$b ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$i (uub$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_a_prod_llist_a_llist_fun$ )(?v1 B_llist_b_a_prod_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$j (fun_app$k (uuh$ ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$k (uuh$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 B_a_prod_llist_a_llist_fun$ )(?v1 A_llist_b_a_prod_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$m (fun_app$n (uu$ ?v0 )?v1 )?v2 )(fun_app$l ?v0 (fun_app$a ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$n (uu$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$h (fun_app$o (uue$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$o (uue$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$m (fun_app$p (uuc$ ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$h ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$p (uuc$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_b_a_prod_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$ (fun_app$q (uui$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$q (uui$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_b_a_prod_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$a (fun_app$r (uua$ ?v0 )?v1 )?v2 )(fun_app$a ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$r (uua$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$h (fun_app$s (uuf$ ?v0 )?v1 )?v2 )(fun_app$h ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$h (fun_app$s (uuf$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_a_prod_llist_a_llist_fun$ )(?v2 B_a_prod_llist$ ))(! (= (fun_app$l (fun_app$t (uug$ ?v0 )?v1 )?v2 )(fun_app$m ?v0 (fun_app$l ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$t (uug$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$m (fun_app$u (uud$ ?v0 )?v1 )?v2 )(fun_app$m ?v0 (fun_app$m ?v1 ?v2 ))):pattern ((fun_app$m (fun_app$u (uud$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_fun$ )(?v2 Bool )(?v3 B_a_prod_llist$ ))(! (= (fun_app$b (fun_app$v (fun_app$w (uva$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$b ?v0 ?v3 )(fun_app$b ?v1 ?v3 ))):pattern ((fun_app$b (fun_app$v (fun_app$w (uva$ ?v0 )?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_llist_fun$ )(?v1 B_a_prod_llist_b_llist_fun$ )(?v2 Bool )(?v3 B_a_prod_llist$ ))(! (= (fun_app$d (fun_app$x (fun_app$y (uuw$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$d ?v0 ?v3 )(fun_app$d ?v1 ?v3 ))):pattern ((fun_app$d (fun_app$x (fun_app$y (uuw$ ?v0 )?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 B_a_prod_llist_a_llist_fun$ )(?v1 B_a_prod_llist_a_llist_fun$ )(?v2 Bool )(?v3 B_a_prod_llist$ ))(! (= (fun_app$l (fun_app$z (fun_app$aa (uvb$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$l ?v0 ?v3 )(fun_app$l ?v1 ?v3 ))):pattern ((fun_app$l (fun_app$z (fun_app$aa (uvb$ ?v0 )?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 B_llist_b_a_prod_llist_fun$ )(?v1 B_llist_b_a_prod_llist_fun$ )(?v2 Bool )(?v3 B_llist$ ))(! (= (fun_app$ (fun_app$ab (fun_app$ac (uvd$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$ ?v0 ?v3 )(fun_app$ ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$ab (fun_app$ac (uvd$ ?v0 )?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 Bool )(?v3 B_llist$ ))(! (= (fun_app$f (fun_app$ad (fun_app$ae (uux$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$f ?v0 ?v3 )(fun_app$f ?v1 ?v3 ))):pattern ((fun_app$f (fun_app$ad (fun_app$ae (uux$ ?v0 )?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 Bool )(?v3 B_llist$ ))(! (= (fun_app$j (fun_app$af (fun_app$ag (uuy$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$j ?v0 ?v3 )(fun_app$j ?v1 ?v3 ))):pattern ((fun_app$j (fun_app$af (fun_app$ag (uuy$ ?v0 )?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_a_prod_llist_fun$ )(?v1 A_llist_b_a_prod_llist_fun$ )(?v2 Bool )(?v3 A_llist$ ))(! (= (fun_app$a (fun_app$ah (fun_app$ai (uve$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$a ?v0 ?v3 )(fun_app$a ?v1 ?v3 ))):pattern ((fun_app$a (fun_app$ah (fun_app$ai (uve$ ?v0 )?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 Bool )(?v3 A_llist$ ))(! (= (fun_app$h (fun_app$aj (fun_app$ak (uvc$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$h ?v0 ?v3 )(fun_app$h ?v1 ?v3 ))):pattern ((fun_app$h (fun_app$aj (fun_app$ak (uvc$ ?v0 )?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 Bool )(?v3 A_llist$ ))(! (= (fun_app$m (fun_app$al (fun_app$am (uuz$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$m ?v0 ?v3 )(fun_app$m ?v1 ?v3 ))):pattern ((fun_app$m (fun_app$al (fun_app$am (uuz$ ?v0 )?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(! (= (fun_app$b (uur$ ?v0 )?v1 )?v0 ):pattern ((fun_app$b (uur$ ?v0 )?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_llist$ ))(! (= (fun_app$ (uus$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uus$ ?v0 )?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 A_llist$ ))(! (= (fun_app$a (uuu$ ?v0 )?v1 )?v0 ):pattern ((fun_app$a (uuu$ ?v0 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_a_prod_llist$ ))(! (= (fun_app$d (uun$ ?v0 )?v1 )?v0 ):pattern ((fun_app$d (uun$ ?v0 )?v1 )))):named a26 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$f (uuo$ ?v0 )?v1 )?v0 ):pattern ((fun_app$f (uuo$ ?v0 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(! (= (fun_app$h (uut$ ?v0 )?v1 )?v0 ):pattern ((fun_app$h (uut$ ?v0 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_a_prod_llist$ ))(! (= (fun_app$l (uuq$ ?v0 )?v1 )?v0 ):pattern ((fun_app$l (uuq$ ?v0 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(! (= (fun_app$j (uum$ ?v0 )?v1 )?v0 ):pattern ((fun_app$j (uum$ ?v0 )?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$m (uup$ ?v0 )?v1 )?v0 ):pattern ((fun_app$m (uup$ ?v0 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(! (= (fun_app$b uvh$ ?v0 )?v0 ):pattern ((fun_app$b uvh$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$f uvf$ ?v0 )?v0 ):pattern ((fun_app$f uvf$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$m uvg$ ?v0 )?v0 ):pattern ((fun_app$m uvg$ ?v0 )))):named a34 ))
(assert (! (not (monotone$ lprefix$ lprefix$a (lzip$ xs$ ))):named a35 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$an (fun_app$ao lprefix$b ?v0 )?v0 )):named a36 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ap (fun_app$aq lprefix$ ?v0 )?v0 )):named a37 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(fun_app$ar (fun_app$as lprefix$a ?v0 )?v0 )):named a38 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$an (fun_app$ao lprefix$b ?v0 )?v0 )):named a39 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ap (fun_app$aq lprefix$ ?v0 )?v0 )):named a40 ))
(assert (! (forall ((?v0 B_a_prod_llist$ ))(fun_app$ar (fun_app$as lprefix$a ?v0 )?v0 )):named a41 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_llist_fun$ )(?v1 B_a_prod_llist$ )(?v2 B_llist$ )(?v3 B_a_prod_llist_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_a_prod_llist$ ))(= (fun_app$d ?v0 ?v5 )(ite (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 )?v2 (fun_app$d ?v3 ?v5 ))))(and (forall ((?v5 B_a_prod_llist$ )(?v6 B_a_prod_llist$ ))(=> (and (fun_app$ar (fun_app$as lprefix$a ?v5 )?v6 )(not (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 )))(fun_app$an (fun_app$ao ?v4 (fun_app$d ?v3 ?v5 ))(fun_app$d ?v3 ?v6 ))))(and (forall ((?v5 B_a_prod_llist$ ))(=> (not (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 ))(fun_app$an (fun_app$ao ?v4 ?v2 )(fun_app$d ?v3 ?v5 ))))(fun_app$an (fun_app$ao ?v4 ?v2 )?v2 ))))(monotone$a lprefix$a ?v4 ?v0 ))):named a42 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_llist$ ))(= (fun_app$f ?v0 ?v5 )(ite (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 )?v2 (fun_app$f ?v3 ?v5 ))))(and (forall ((?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$b ?v5 )?v6 )(not (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 )))(fun_app$an (fun_app$ao ?v4 (fun_app$f ?v3 ?v5 ))(fun_app$f ?v3 ?v6 ))))(and (forall ((?v5 B_llist$ ))(=> (not (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 ))(fun_app$an (fun_app$ao ?v4 ?v2 )(fun_app$f ?v3 ?v5 ))))(fun_app$an (fun_app$ao ?v4 ?v2 )?v2 ))))(monotone$b lprefix$b ?v4 ?v0 ))):named a43 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_llist$ ))(= (fun_app$j ?v0 ?v5 )(ite (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 )?v2 (fun_app$j ?v3 ?v5 ))))(and (forall ((?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$b ?v5 )?v6 )(not (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 )))(fun_app$ap (fun_app$aq ?v4 (fun_app$j ?v3 ?v5 ))(fun_app$j ?v3 ?v6 ))))(and (forall ((?v5 B_llist$ ))(=> (not (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 ))(fun_app$ap (fun_app$aq ?v4 ?v2 )(fun_app$j ?v3 ?v5 ))))(fun_app$ap (fun_app$aq ?v4 ?v2 )?v2 ))))(monotone$c lprefix$b ?v4 ?v0 ))):named a44 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$m ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 )?v2 (fun_app$m ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v6 )(not (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 )))(fun_app$ap (fun_app$aq ?v4 (fun_app$m ?v3 ?v5 ))(fun_app$m ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 ))(fun_app$ap (fun_app$aq ?v4 ?v2 )(fun_app$m ?v3 ?v5 ))))(fun_app$ap (fun_app$aq ?v4 ?v2 )?v2 ))))(monotone$d lprefix$ ?v4 ?v0 ))):named a45 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$h ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 )?v2 (fun_app$h ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v6 )(not (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 )))(fun_app$an (fun_app$ao ?v4 (fun_app$h ?v3 ?v5 ))(fun_app$h ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 ))(fun_app$an (fun_app$ao ?v4 ?v2 )(fun_app$h ?v3 ?v5 ))))(fun_app$an (fun_app$ao ?v4 ?v2 )?v2 ))))(monotone$e lprefix$ ?v4 ?v0 ))):named a46 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_fun$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ )(?v3 B_a_prod_llist_b_a_prod_llist_fun$ )(?v4 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_a_prod_llist$ ))(= (fun_app$b ?v0 ?v5 )(ite (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 )?v2 (fun_app$b ?v3 ?v5 ))))(and (forall ((?v5 B_a_prod_llist$ )(?v6 B_a_prod_llist$ ))(=> (and (fun_app$ar (fun_app$as lprefix$a ?v5 )?v6 )(not (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 )))(fun_app$ar (fun_app$as ?v4 (fun_app$b ?v3 ?v5 ))(fun_app$b ?v3 ?v6 ))))(and (forall ((?v5 B_a_prod_llist$ ))(=> (not (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 ))(fun_app$ar (fun_app$as ?v4 ?v2 )(fun_app$b ?v3 ?v5 ))))(fun_app$ar (fun_app$as ?v4 ?v2 )?v2 ))))(monotone$f lprefix$a ?v4 ?v0 ))):named a47 ))
(assert (! (forall ((?v0 B_a_prod_llist_a_llist_fun$ )(?v1 B_a_prod_llist$ )(?v2 A_llist$ )(?v3 B_a_prod_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_a_prod_llist$ ))(= (fun_app$l ?v0 ?v5 )(ite (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 )?v2 (fun_app$l ?v3 ?v5 ))))(and (forall ((?v5 B_a_prod_llist$ )(?v6 B_a_prod_llist$ ))(=> (and (fun_app$ar (fun_app$as lprefix$a ?v5 )?v6 )(not (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 )))(fun_app$ap (fun_app$aq ?v4 (fun_app$l ?v3 ?v5 ))(fun_app$l ?v3 ?v6 ))))(and (forall ((?v5 B_a_prod_llist$ ))(=> (not (fun_app$ar (fun_app$as lprefix$a ?v5 )?v1 ))(fun_app$ap (fun_app$aq ?v4 ?v2 )(fun_app$l ?v3 ?v5 ))))(fun_app$ap (fun_app$aq ?v4 ?v2 )?v2 ))))(monotone$g lprefix$a ?v4 ?v0 ))):named a48 ))
(assert (! (forall ((?v0 B_llist_b_a_prod_llist_fun$ )(?v1 B_llist$ )(?v2 B_a_prod_llist$ )(?v3 B_llist_b_a_prod_llist_fun$ )(?v4 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_llist$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$b ?v5 )?v6 )(not (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 )))(fun_app$ar (fun_app$as ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 B_llist$ ))(=> (not (fun_app$an (fun_app$ao lprefix$b ?v5 )?v1 ))(fun_app$ar (fun_app$as ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$ar (fun_app$as ?v4 ?v2 )?v2 ))))(monotone$h lprefix$b ?v4 ?v0 ))):named a49 ))
(assert (! (forall ((?v0 A_llist_b_a_prod_llist_fun$ )(?v1 A_llist$ )(?v2 B_a_prod_llist$ )(?v3 A_llist_b_a_prod_llist_fun$ )(?v4 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$a ?v0 ?v5 )(ite (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 )?v2 (fun_app$a ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v6 )(not (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 )))(fun_app$ar (fun_app$as ?v4 (fun_app$a ?v3 ?v5 ))(fun_app$a ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$ap (fun_app$aq lprefix$ ?v5 )?v1 ))(fun_app$ar (fun_app$as ?v4 ?v2 )(fun_app$a ?v3 ?v5 ))))(fun_app$ar (fun_app$as ?v4 ?v2 )?v2 ))))(monotone$ lprefix$ ?v4 ?v0 ))):named a50 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_b_a_prod_llist_fun$ ))(=> (and (monotone$g ?v0 lprefix$ ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$d ?v2 lprefix$ (fun_app$n (uu$ ?v1 )?v3 )))):named a51 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_a_prod_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$d ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$r (uua$ ?v1 )?v3 )))):named a52 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_b_a_prod_llist_fun$ ))(=> (and (monotone$f ?v0 lprefix$a ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$i (uub$ ?v1 )?v3 )))):named a53 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_b_llist_fun$ ))(=> (and (monotone$c ?v0 lprefix$ ?v1 )(monotone$e ?v2 ?v0 ?v3 ))(monotone$d ?v2 lprefix$ (fun_app$p (uuc$ ?v1 )?v3 )))):named a54 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$d ?v0 lprefix$ ?v1 )(monotone$d ?v2 ?v0 ?v3 ))(monotone$d ?v2 lprefix$ (fun_app$u (uud$ ?v1 )?v3 )))):named a55 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_b_llist_fun$ ))(=> (and (monotone$b ?v0 lprefix$b ?v1 )(monotone$e ?v2 ?v0 ?v3 ))(monotone$e ?v2 lprefix$b (fun_app$o (uue$ ?v1 )?v3 )))):named a56 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$e ?v0 lprefix$b ?v1 )(monotone$d ?v2 ?v0 ?v3 ))(monotone$e ?v2 lprefix$b (fun_app$s (uuf$ ?v1 )?v3 )))):named a57 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v3 B_a_prod_llist_a_llist_fun$ ))(=> (and (monotone$d ?v0 lprefix$ ?v1 )(monotone$g ?v2 ?v0 ?v3 ))(monotone$g ?v2 lprefix$ (fun_app$t (uug$ ?v1 )?v3 )))):named a58 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_a_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_b_a_prod_llist_fun$ ))(=> (and (monotone$g ?v0 lprefix$ ?v1 )(monotone$h ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$ (fun_app$k (uuh$ ?v1 )?v3 )))):named a59 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_a_prod_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_a_llist_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$h ?v2 lprefix$a (fun_app$q (uui$ ?v1 )?v3 )))):named a60 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_llist_fun$ )(?v2 A_llist$ ))(=> (monotone$a ?v0 lprefix$b ?v1 )(monotone$f ?v0 lprefix$a (fun_app$c (uuj$ ?v1 )?v2 )))):named a61 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 A_llist$ ))(=> (monotone$b ?v0 lprefix$b ?v1 )(monotone$h ?v0 lprefix$a (fun_app$e (uuk$ ?v1 )?v2 )))):named a62 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(=> (monotone$e ?v0 lprefix$b ?v1 )(monotone$ ?v0 lprefix$a (fun_app$g (uul$ ?v1 )?v2 )))):named a63 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$b ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$b ?v1 )?v0 ))(= ?v0 ?v1 ))):named a64 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ap (fun_app$aq lprefix$ ?v0 )?v1 )(fun_app$ap (fun_app$aq lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a65 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(=> (and (fun_app$ar (fun_app$as lprefix$a ?v0 )?v1 )(fun_app$ar (fun_app$as lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a66 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$b ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$b ?v1 )?v0 ))(= ?v0 ?v1 ))):named a67 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ap (fun_app$aq lprefix$ ?v0 )?v1 )(fun_app$ap (fun_app$aq lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a68 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ ))(=> (and (fun_app$ar (fun_app$as lprefix$a ?v0 )?v1 )(fun_app$ar (fun_app$as lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a69 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$b ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$b ?v2 )?v1 ))(or (fun_app$an (fun_app$ao lprefix$b ?v0 )?v2 )(fun_app$an (fun_app$ao lprefix$b ?v2 )?v0 )))):named a70 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ap (fun_app$aq lprefix$ ?v0 )?v1 )(fun_app$ap (fun_app$aq lprefix$ ?v2 )?v1 ))(or (fun_app$ap (fun_app$aq lprefix$ ?v0 )?v2 )(fun_app$ap (fun_app$aq lprefix$ ?v2 )?v0 )))):named a71 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ ))(=> (and (fun_app$ar (fun_app$as lprefix$a ?v0 )?v1 )(fun_app$ar (fun_app$as lprefix$a ?v2 )?v1 ))(or (fun_app$ar (fun_app$as lprefix$a ?v0 )?v2 )(fun_app$ar (fun_app$as lprefix$a ?v2 )?v0 )))):named a72 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$b ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$b ?v1 )?v2 ))(fun_app$an (fun_app$ao lprefix$b ?v0 )?v2 ))):named a73 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ap (fun_app$aq lprefix$ ?v0 )?v1 )(fun_app$ap (fun_app$aq lprefix$ ?v1 )?v2 ))(fun_app$ap (fun_app$aq lprefix$ ?v0 )?v2 ))):named a74 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ ))(=> (and (fun_app$ar (fun_app$as lprefix$a ?v0 )?v1 )(fun_app$ar (fun_app$as lprefix$a ?v1 )?v2 ))(fun_app$ar (fun_app$as lprefix$a ?v0 )?v2 ))):named a75 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$an (fun_app$ao lprefix$b ?v0 )?v1 )(fun_app$an (fun_app$ao lprefix$b ?v1 )?v2 ))(fun_app$an (fun_app$ao lprefix$b ?v0 )?v2 ))):named a76 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ap (fun_app$aq lprefix$ ?v0 )?v1 )(fun_app$ap (fun_app$aq lprefix$ ?v1 )?v2 ))(fun_app$ap (fun_app$aq lprefix$ ?v0 )?v2 ))):named a77 ))
(assert (! (forall ((?v0 B_a_prod_llist$ )(?v1 B_a_prod_llist$ )(?v2 B_a_prod_llist$ ))(=> (and (fun_app$ar (fun_app$as lprefix$a ?v0 )?v1 )(fun_app$ar (fun_app$as lprefix$a ?v1 )?v2 ))(fun_app$ar (fun_app$as lprefix$a ?v0 )?v2 ))):named a78 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$c ?v0 lprefix$ (uum$ ?v1 ))):named a79 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_llist$ ))(monotone$a ?v0 lprefix$b (uun$ ?v1 ))):named a80 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist$ ))(monotone$b ?v0 lprefix$b (uuo$ ?v1 ))):named a81 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$d ?v0 lprefix$ (uup$ ?v1 ))):named a82 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$g ?v0 lprefix$ (uuq$ ?v1 ))):named a83 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_a_prod_llist$ ))(monotone$f ?v0 lprefix$a (uur$ ?v1 ))):named a84 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_a_prod_llist$ ))(monotone$h ?v0 lprefix$a (uus$ ?v1 ))):named a85 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist$ ))(monotone$e ?v0 lprefix$b (uut$ ?v1 ))):named a86 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_a_prod_llist$ ))(monotone$ ?v0 lprefix$a (uuu$ ?v1 ))):named a87 ))
(assert (! (forall ((?v0 A_llist$ ))(monotone$h lprefix$b lprefix$a (uuv$ ?v0 ))):named a88 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_b_llist_fun$ )(?v3 B_a_prod_llist_b_llist_fun$ )(?v4 Bool ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(monotone$a ?v0 ?v1 ?v3 ))(monotone$a ?v0 ?v1 (fun_app$x (fun_app$y (uuw$ ?v2 )?v3 )?v4 )))):named a89 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 B_llist_b_llist_fun$ )(?v4 Bool ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(monotone$b ?v0 ?v1 ?v3 ))(monotone$b ?v0 ?v1 (fun_app$ad (fun_app$ae (uux$ ?v2 )?v3 )?v4 )))):named a90 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 B_llist_a_llist_fun$ )(?v4 Bool ))(=> (and (monotone$c ?v0 ?v1 ?v2 )(monotone$c ?v0 ?v1 ?v3 ))(monotone$c ?v0 ?v1 (fun_app$af (fun_app$ag (uuy$ ?v2 )?v3 )?v4 )))):named a91 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ )(?v4 Bool ))(=> (and (monotone$d ?v0 ?v1 ?v2 )(monotone$d ?v0 ?v1 ?v3 ))(monotone$d ?v0 ?v1 (fun_app$al (fun_app$am (uuz$ ?v2 )?v3 )?v4 )))):named a92 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_b_a_prod_llist_fun$ )(?v3 B_a_prod_llist_b_a_prod_llist_fun$ )(?v4 Bool ))(=> (and (monotone$f ?v0 ?v1 ?v2 )(monotone$f ?v0 ?v1 ?v3 ))(monotone$f ?v0 ?v1 (fun_app$v (fun_app$w (uva$ ?v2 )?v3 )?v4 )))):named a93 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_a_llist_fun$ )(?v3 B_a_prod_llist_a_llist_fun$ )(?v4 Bool ))(=> (and (monotone$g ?v0 ?v1 ?v2 )(monotone$g ?v0 ?v1 ?v3 ))(monotone$g ?v0 ?v1 (fun_app$z (fun_app$aa (uvb$ ?v2 )?v3 )?v4 )))):named a94 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ )(?v3 A_llist_b_llist_fun$ )(?v4 Bool ))(=> (and (monotone$e ?v0 ?v1 ?v2 )(monotone$e ?v0 ?v1 ?v3 ))(monotone$e ?v0 ?v1 (fun_app$aj (fun_app$ak (uvc$ ?v2 )?v3 )?v4 )))):named a95 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 B_llist_b_a_prod_llist_fun$ )(?v3 B_llist_b_a_prod_llist_fun$ )(?v4 Bool ))(=> (and (monotone$h ?v0 ?v1 ?v2 )(monotone$h ?v0 ?v1 ?v3 ))(monotone$h ?v0 ?v1 (fun_app$ab (fun_app$ac (uvd$ ?v2 )?v3 )?v4 )))):named a96 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 A_llist_b_a_prod_llist_fun$ )(?v3 A_llist_b_a_prod_llist_fun$ )(?v4 Bool ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(monotone$ ?v0 ?v1 ?v3 ))(monotone$ ?v0 ?v1 (fun_app$ah (fun_app$ai (uve$ ?v2 )?v3 )?v4 )))):named a97 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ ))(monotone$b ?v0 ?v0 uvf$ )):named a98 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ ))(monotone$d ?v0 ?v0 uvg$ )):named a99 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ ))(monotone$f ?v0 ?v0 uvh$ )):named a100 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_b_llist_fun$ ))(= (monotone$a ?v0 ?v1 ?v2 )(forall ((?v3 B_a_prod_llist$ )(?v4 B_a_prod_llist$ ))(=> (fun_app$ar (fun_app$as ?v0 ?v3 )?v4 )(fun_app$an (fun_app$ao ?v1 (fun_app$d ?v2 ?v3 ))(fun_app$d ?v2 ?v4 )))))):named a101 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ ))(= (monotone$b ?v0 ?v1 ?v2 )(forall ((?v3 B_llist$ )(?v4 B_llist$ ))(=> (fun_app$an (fun_app$ao ?v0 ?v3 )?v4 )(fun_app$an (fun_app$ao ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 )))))):named a102 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_fun$ ))(= (monotone$c ?v0 ?v1 ?v2 )(forall ((?v3 B_llist$ )(?v4 B_llist$ ))(=> (fun_app$an (fun_app$ao ?v0 ?v3 )?v4 )(fun_app$ap (fun_app$aq ?v1 (fun_app$j ?v2 ?v3 ))(fun_app$j ?v2 ?v4 )))))):named a103 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(= (monotone$d ?v0 ?v1 ?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ap (fun_app$aq ?v0 ?v3 )?v4 )(fun_app$ap (fun_app$aq ?v1 (fun_app$m ?v2 ?v3 ))(fun_app$m ?v2 ?v4 )))))):named a104 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_b_a_prod_llist_fun$ ))(= (monotone$f ?v0 ?v1 ?v2 )(forall ((?v3 B_a_prod_llist$ )(?v4 B_a_prod_llist$ ))(=> (fun_app$ar (fun_app$as ?v0 ?v3 )?v4 )(fun_app$ar (fun_app$as ?v1 (fun_app$b ?v2 ?v3 ))(fun_app$b ?v2 ?v4 )))))):named a105 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_a_llist_fun$ ))(= (monotone$g ?v0 ?v1 ?v2 )(forall ((?v3 B_a_prod_llist$ )(?v4 B_a_prod_llist$ ))(=> (fun_app$ar (fun_app$as ?v0 ?v3 )?v4 )(fun_app$ap (fun_app$aq ?v1 (fun_app$l ?v2 ?v3 ))(fun_app$l ?v2 ?v4 )))))):named a106 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ ))(= (monotone$e ?v0 ?v1 ?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ap (fun_app$aq ?v0 ?v3 )?v4 )(fun_app$an (fun_app$ao ?v1 (fun_app$h ?v2 ?v3 ))(fun_app$h ?v2 ?v4 )))))):named a107 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 B_llist_b_a_prod_llist_fun$ ))(= (monotone$h ?v0 ?v1 ?v2 )(forall ((?v3 B_llist$ )(?v4 B_llist$ ))(=> (fun_app$an (fun_app$ao ?v0 ?v3 )?v4 )(fun_app$ar (fun_app$as ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 )))))):named a108 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 A_llist_b_a_prod_llist_fun$ ))(= (monotone$ ?v0 ?v1 ?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ap (fun_app$aq ?v0 ?v3 )?v4 )(fun_app$ar (fun_app$as ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 )))))):named a109 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_b_llist_fun$ ))(=> (forall ((?v3 B_a_prod_llist$ )(?v4 B_a_prod_llist$ ))(=> (fun_app$ar (fun_app$as ?v0 ?v3 )?v4 )(fun_app$an (fun_app$ao ?v1 (fun_app$d ?v2 ?v3 ))(fun_app$d ?v2 ?v4 ))))(monotone$a ?v0 ?v1 ?v2 ))):named a110 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ ))(=> (forall ((?v3 B_llist$ )(?v4 B_llist$ ))(=> (fun_app$an (fun_app$ao ?v0 ?v3 )?v4 )(fun_app$an (fun_app$ao ?v1 (fun_app$f ?v2 ?v3 ))(fun_app$f ?v2 ?v4 ))))(monotone$b ?v0 ?v1 ?v2 ))):named a111 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_fun$ ))(=> (forall ((?v3 B_llist$ )(?v4 B_llist$ ))(=> (fun_app$an (fun_app$ao ?v0 ?v3 )?v4 )(fun_app$ap (fun_app$aq ?v1 (fun_app$j ?v2 ?v3 ))(fun_app$j ?v2 ?v4 ))))(monotone$c ?v0 ?v1 ?v2 ))):named a112 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ ))(=> (forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ap (fun_app$aq ?v0 ?v3 )?v4 )(fun_app$ap (fun_app$aq ?v1 (fun_app$m ?v2 ?v3 ))(fun_app$m ?v2 ?v4 ))))(monotone$d ?v0 ?v1 ?v2 ))):named a113 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_b_a_prod_llist_fun$ ))(=> (forall ((?v3 B_a_prod_llist$ )(?v4 B_a_prod_llist$ ))(=> (fun_app$ar (fun_app$as ?v0 ?v3 )?v4 )(fun_app$ar (fun_app$as ?v1 (fun_app$b ?v2 ?v3 ))(fun_app$b ?v2 ?v4 ))))(monotone$f ?v0 ?v1 ?v2 ))):named a114 ))
(assert (! (forall ((?v0 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_a_prod_llist_a_llist_fun$ ))(=> (forall ((?v3 B_a_prod_llist$ )(?v4 B_a_prod_llist$ ))(=> (fun_app$ar (fun_app$as ?v0 ?v3 )?v4 )(fun_app$ap (fun_app$aq ?v1 (fun_app$l ?v2 ?v3 ))(fun_app$l ?v2 ?v4 ))))(monotone$g ?v0 ?v1 ?v2 ))):named a115 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ ))(=> (forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ap (fun_app$aq ?v0 ?v3 )?v4 )(fun_app$an (fun_app$ao ?v1 (fun_app$h ?v2 ?v3 ))(fun_app$h ?v2 ?v4 ))))(monotone$e ?v0 ?v1 ?v2 ))):named a116 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 B_llist_b_a_prod_llist_fun$ ))(=> (forall ((?v3 B_llist$ )(?v4 B_llist$ ))(=> (fun_app$an (fun_app$ao ?v0 ?v3 )?v4 )(fun_app$ar (fun_app$as ?v1 (fun_app$ ?v2 ?v3 ))(fun_app$ ?v2 ?v4 ))))(monotone$h ?v0 ?v1 ?v2 ))):named a117 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_a_prod_llist_b_a_prod_llist_bool_fun_fun$ )(?v2 A_llist_b_a_prod_llist_fun$ ))(=> (forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ap (fun_app$aq ?v0 ?v3 )?v4 )(fun_app$ar (fun_app$as ?v1 (fun_app$a ?v2 ?v3 ))(fun_app$a ?v2 ?v4 ))))(monotone$ ?v0 ?v1 ?v2 ))):named a118 ))
(check-sat )
(get-unsat-core )
