(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun p$ ()A_bool_fun$ )
(declare-fun x$ ()A$ )
(declare-fun uu$ ()Bool_bool_fun$ )
(declare-fun xs$ ()A_llist$ )
(declare-fun ys$ ()A_llist$ )
(declare-fun comp$ (Bool_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun lset$ (A_llist$ )A_set$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (Bool_bool_fun$ Bool )Bool )
(declare-fun lappend$ (A_llist$ A_llist$ )A_llist$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun ldropWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun ltakeWhile$ (A_bool_fun$ A_llist$ )A_llist$ )
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$ uu$ ?v0 )(not ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (exists ((?v0 A_llist$ )(?v1 A_llist$ ))(and (= ys$ (lappend$ ?v0 (lCons$ x$ ?v1 )))(and (lfinite$ ?v0 )(and (forall ((?v2 A$ ))(=> (member$ ?v2 (lset$ ?v0 ))(not (fun_app$a p$ ?v2 ))))(and (fun_app$a p$ x$ )(= xs$ (lfilter$ p$ ?v1 )))))))):named a1 ))
(assert (! (fun_app$a p$ x$ ):named a2 ))
(assert (! (forall ((?v0 A$ ))(=> (member$ ?v0 (lset$ (ltakeWhile$ (fun_app$b (comp$ uu$ )p$ )ys$ )))(not (fun_app$a p$ ?v0 )))):named a3 ))
(assert (! (lfinite$ (ltakeWhile$ (fun_app$b (comp$ uu$ )p$ )ys$ )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A$ )(?v3 A_llist$ ))(= (= (lCons$ ?v0 ?v1 )(lCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a6 ))
(assert (! (= xs$ (lfilter$ p$ (ltl$ (ldropWhile$ (fun_app$b (comp$ uu$ )p$ )ys$ )))):named a7 ))
(assert (! (exists ((?v0 A$ ))(and (member$ ?v0 (lset$ ys$ ))(fun_app$a p$ ?v0 ))):named a8 ))
(assert (! (= (lfilter$ p$ ys$ )(lCons$ x$ xs$ )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(! (= (lappend$ (lCons$ ?v0 ?v1 )?v2 )(lCons$ ?v0 (lappend$ ?v1 ?v2 ))):pattern ((lappend$ (lCons$ ?v0 ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (lfinite$ (lCons$ ?v0 ?v1 ))(lfinite$ ?v1 )):pattern ((lCons$ ?v0 ?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$ (lappend$ ?v0 ?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (lfilter$ ?v0 (lCons$ ?v1 ?v2 ))(ite (fun_app$a ?v0 ?v1 )(lCons$ ?v1 (lfilter$ ?v0 ?v2 ))(lfilter$ ?v0 ?v2 ))):pattern ((lfilter$ ?v0 (lCons$ ?v1 ?v2 ))))):named a14 ))
(assert (! (= ys$ (lappend$ (ltakeWhile$ (fun_app$b (comp$ uu$ )p$ )ys$ )(lCons$ x$ (ltl$ (ldropWhile$ (fun_app$b (comp$ uu$ )p$ )ys$ ))))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_bool_fun$ )(?v2 A_llist$ ))(=> (lfinite$ ?v0 )(= (lfilter$ ?v1 (lappend$ ?v0 ?v2 ))(lappend$ (lfilter$ ?v1 ?v0 )(lfilter$ ?v1 ?v2 ))))):named a16 ))
(assert (! (= xs$ (ltl$ (lfilter$ p$ ys$ ))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (member$ ?v0 (lset$ (lappend$ ?v1 ?v2 )))(or (member$ ?v0 (lset$ ?v1 ))(and (lfinite$ ?v1 )(member$ ?v0 (lset$ ?v2 )))))):named a18 ))
(check-sat )
(get-unsat-core )
