(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_set_a_fun$ 0 )
(declare-sort A_b_llist_fun$ 0 )
(declare-sort B_llist_a_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort Bool_a_a_fun_fun$ 0 )
(declare-sort A_a_b_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort Bool_a_b_llist_fun_fun$ 0 )
(declare-sort Bool_b_llist_a_fun_fun$ 0 )
(declare-sort B_llist_set_b_llist_fun$ 0 )
(declare-sort A_a_fun_a_b_llist_fun_fun$ 0 )
(declare-sort A_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort B_llist_a_b_llist_fun_fun$ 0 )
(declare-sort A_a_fun_bool_a_a_fun_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort Bool_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_a_bool_fun_fun_a_bool_fun_fun$ 0 )
(declare-sort A_b_llist_fun_a_b_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_a_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_b_llist_fun_bool_a_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_a_fun_bool_b_llist_a_fun_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()B_llist$)
(declare-fun lhd$ (B_llist$)B$)
(declare-fun ltl$ (B_llist$)B_llist$)
(declare-fun lCons$ (B$ B_llist$ )B_llist$)
(declare-fun f$ ()A_b_llist_fun$ )
(declare-fun uu$ ()A_bool_fun$ )
(declare-fun lub$ ()A_set_a_fun$ )
(declare-fun ord$ ()A_a_bool_fun_fun$ )
(declare-fun uua$ (Bool )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uub$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uuc$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uud$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uue$ (A_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun uuf$ (Bool )A_bool_fun$ )
(declare-fun uug$ ()A_bool_fun$ )
(declare-fun uuh$ (A_a_bool_fun_fun$ )A_a_bool_fun_fun$ )
(declare-fun uui$ (A$ )A_bool_fun$ )
(declare-fun uuj$ (A$ )A_bool_fun$ )
(declare-fun uuk$ (B_llist_a_b_llist_fun_fun$ )A_b_llist_b_llist_fun_fun$ )
(declare-fun uul$ (B_llist_a_b_llist_fun_fun$ )B_llist_a_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uum$ (B_llist_b_llist_b_llist_fun_fun$ )B_llist_b_llist_b_llist_fun_fun$ )
(declare-fun uun$ (B_llist_b_llist_b_llist_fun_fun$ )B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uuo$ (A_b_llist_b_llist_fun_fun$ )B_llist_a_b_llist_fun_fun$ )
(declare-fun uup$ (A_b_llist_b_llist_fun_fun$ )A_b_llist_fun_a_b_llist_fun_fun$ )
(declare-fun uuq$ (A_a_b_llist_fun_fun$ )A_a_b_llist_fun_fun$ )
(declare-fun uur$ (A_a_b_llist_fun_fun$ )A_a_fun_a_b_llist_fun_fun$ )
(declare-fun uus$ (B_llist_a_fun$ )B_llist_a_fun_bool_b_llist_a_fun_fun_fun$ )
(declare-fun uut$ (A_a_fun$ )A_a_fun_bool_a_a_fun_fun_fun$ )
(declare-fun uuu$ (B_llist_b_llist_fun$ )B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ )
(declare-fun uuv$ (A_b_llist_fun$ )A_b_llist_fun_bool_a_b_llist_fun_fun_fun$ )
(declare-fun lSup$ ()B_llist_set_b_llist_fun$ )
(declare-fun mcont$ (A_set_a_fun$ A_a_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ A_b_llist_fun$ )Bool )
(declare-fun mcont$a (B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$ )Bool )
(declare-fun mcont$b (B_llist_set_b_llist_fun$ B_llist_b_llist_bool_fun_fun$ A_set_a_fun$ A_a_bool_fun_fun$ B_llist_a_fun$ )Bool )
(declare-fun mcont$c (A_set_a_fun$ A_a_bool_fun_fun$ A_set_a_fun$ A_a_bool_fun_fun$ A_a_fun$ )Bool )
(declare-fun compact$ (A_set_a_fun$ )A_a_bool_fun_fun_a_bool_fun_fun$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun lprefix$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_b_llist_fun$ A$ )B_llist$ )
(declare-fun fun_app$b (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$c (B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ B_llist_b_llist_fun$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$d (B_llist_b_llist_b_llist_fun_fun$ B_llist$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$e (B_llist_a_fun_b_llist_b_llist_fun_fun$ B_llist_a_fun$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$f (B_llist_a_b_llist_fun_fun$ B_llist$ )A_b_llist_fun$ )
(declare-fun fun_app$g (B_llist_a_fun$ B_llist$ )A$ )
(declare-fun fun_app$h (A_b_llist_fun_a_b_llist_fun_fun$ A_b_llist_fun$ )A_b_llist_fun$ )
(declare-fun fun_app$i (A_b_llist_b_llist_fun_fun$ A$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$j (A_a_fun_a_b_llist_fun_fun$ A_a_fun$ )A_b_llist_fun$ )
(declare-fun fun_app$k (A_a_b_llist_fun_fun$ A$ )A_b_llist_fun$ )
(declare-fun fun_app$l (A_a_fun$ A$ )A$ )
(declare-fun fun_app$m (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$n (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$o (Bool_b_llist_b_llist_fun_fun$ Bool )B_llist_b_llist_fun$ )
(declare-fun fun_app$p (B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ B_llist_b_llist_fun$ )Bool_b_llist_b_llist_fun_fun$ )
(declare-fun fun_app$q (Bool_b_llist_a_fun_fun$ Bool )B_llist_a_fun$ )
(declare-fun fun_app$r (B_llist_a_fun_bool_b_llist_a_fun_fun_fun$ B_llist_a_fun$ )Bool_b_llist_a_fun_fun$ )
(declare-fun fun_app$s (Bool_a_b_llist_fun_fun$ Bool )A_b_llist_fun$ )
(declare-fun fun_app$t (A_b_llist_fun_bool_a_b_llist_fun_fun_fun$ A_b_llist_fun$ )Bool_a_b_llist_fun_fun$ )
(declare-fun fun_app$u (Bool_a_a_fun_fun$ Bool )A_a_fun$ )
(declare-fun fun_app$v (A_a_fun_bool_a_a_fun_fun_fun$ A_a_fun$ )Bool_a_a_fun_fun$ )
(declare-fun fun_app$w (A_a_bool_fun_fun_a_bool_fun_fun$ A_a_bool_fun_fun$ )A_bool_fun$ )
(declare-fun fun_app$x (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$y (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun ldistinct$ (B_llist$ )Bool )
(declare-fun admissible$ (A_set_a_fun$ A_a_bool_fun_fun$ A_bool_fun$ )Bool )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )(ldistinct$ (fun_app$a f$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$ (uui$ ?v0 )?v1 )(not (= ?v0 ?v1 ))):pattern ((fun_app$ (uui$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$ (uuj$ ?v0 )?v1 )(not (= ?v1 ?v0 ))):pattern ((fun_app$ (uuj$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 B_llist_b_llist_b_llist_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$b (fun_app$c (uun$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$d ?v0 ?v2 )(fun_app$b ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$c (uun$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$ )(?v1 B_llist_a_fun$ )(?v2 B_llist$ ))(! (= (fun_app$b (fun_app$e (uul$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$f ?v0 ?v2 )(fun_app$g ?v1 ?v2 ))):pattern ((fun_app$b (fun_app$e (uul$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 A_b_llist_b_llist_fun_fun$ )(?v1 A_b_llist_fun$ )(?v2 A$ ))(! (= (fun_app$a (fun_app$h (uup$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$i ?v0 ?v2 )(fun_app$a ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$h (uup$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 A_a_b_llist_fun_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$a (fun_app$j (uur$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$k ?v0 ?v2 )(fun_app$l ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$j (uur$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 B_llist_b_llist_b_llist_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(! (= (fun_app$b (fun_app$d (uum$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$d ?v0 ?v2 )?v1 )):pattern ((fun_app$b (fun_app$d (uum$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 B_llist_a_b_llist_fun_fun$ )(?v1 A$ )(?v2 B_llist$ ))(! (= (fun_app$b (fun_app$i (uuk$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$f ?v0 ?v2 )?v1 )):pattern ((fun_app$b (fun_app$i (uuk$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_b_llist_b_llist_fun_fun$ )(?v1 B_llist$ )(?v2 A$ ))(! (= (fun_app$a (fun_app$f (uuo$ ?v0 )?v1 )?v2 )(fun_app$b (fun_app$i ?v0 ?v2 )?v1 )):pattern ((fun_app$a (fun_app$f (uuo$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_a_b_llist_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$a (fun_app$k (uuq$ ?v0 )?v1 )?v2 )(fun_app$a (fun_app$k ?v0 ?v2 )?v1 )):pattern ((fun_app$a (fun_app$k (uuq$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$m (uub$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$m (uub$ ?v0 )?v1 )?v2 )))):named a11 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$m (uuc$ ?v0 )?v1 )?v2 )(=> (fun_app$ ?v1 ?v2 )(fun_app$ ?v0 ?v2 ))):pattern ((fun_app$ (fun_app$m (uuc$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$m (uue$ ?v0 )?v1 )?v2 )(and (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$m (uue$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$m (uud$ ?v0 )?v1 )?v2 )(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$m (uud$ ?v0 )?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 Bool )(?v1 A_bool_fun$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$m (uua$ ?v0 )?v1 )?v2 )(=> ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$m (uua$ ?v0 )?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ ))(! (= (fun_app$ (fun_app$n (uuh$ ?v0 )?v1 )?v2 )(not (fun_app$ (fun_app$n ?v0 ?v1 )?v2 ))):pattern ((fun_app$ (fun_app$n (uuh$ ?v0 )?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 Bool )(?v3 B_llist$ ))(! (= (fun_app$b (fun_app$o (fun_app$p (uuu$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$b ?v0 ?v3 )(fun_app$b ?v1 ?v3 ))):pattern ((fun_app$b (fun_app$o (fun_app$p (uuu$ ?v0 )?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 B_llist_a_fun$ )(?v1 B_llist_a_fun$ )(?v2 Bool )(?v3 B_llist$ ))(! (= (fun_app$g (fun_app$q (fun_app$r (uus$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$g ?v0 ?v3 )(fun_app$g ?v1 ?v3 ))):pattern ((fun_app$g (fun_app$q (fun_app$r (uus$ ?v0 )?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 A_b_llist_fun$ )(?v1 A_b_llist_fun$ )(?v2 Bool )(?v3 A$ ))(! (= (fun_app$a (fun_app$s (fun_app$t (uuv$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$a ?v0 ?v3 )(fun_app$a ?v1 ?v3 ))):pattern ((fun_app$a (fun_app$s (fun_app$t (uuv$ ?v0 )?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 Bool )(?v3 A$ ))(! (= (fun_app$l (fun_app$u (fun_app$v (uut$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$l ?v0 ?v3 )(fun_app$l ?v1 ?v3 ))):pattern ((fun_app$l (fun_app$u (fun_app$v (uut$ ?v0 )?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 Bool )(?v1 A$ ))(! (= (fun_app$ (uuf$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uuf$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uug$ ?v0 )true ):pattern ((fun_app$ uug$ ?v0 )))):named a22 ))
(assert (! (not (admissible$ lub$ ord$ uu$ )):named a23 ))
(assert (! (mcont$ lub$ ord$ lSup$ lprefix$ f$ ):named a24 ))
(assert (! (forall ((?v0 Bool )(?v1 A_set_a_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_bool_fun$ ))(=> (=> ?v0 (admissible$ ?v1 ?v2 ?v3 ))(admissible$ ?v1 ?v2 (fun_app$m (uua$ ?v0 )?v3 )))):named a25 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (admissible$ ?v0 ?v1 (fun_app$m (uub$ ?v2 )?v3 ))(admissible$ ?v0 ?v1 (fun_app$m (uuc$ ?v2 )?v3 )))(admissible$ ?v0 ?v1 (fun_app$m (uud$ ?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (admissible$ ?v0 ?v1 ?v2 )(admissible$ ?v0 ?v1 ?v3 ))(admissible$ ?v0 ?v1 (fun_app$m (uue$ ?v2 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 Bool ))(admissible$ ?v0 ?v1 (uuf$ ?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ ))(admissible$ ?v0 ?v1 uug$ )):named a29 ))
(assert (! (= (ldistinct$ lNil$ )true ):named a30 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(= (fun_app$ (fun_app$w (compact$ ?v0 )?v1 )?v2 )(and (admissible$ ?v0 ?v1 (fun_app$n (uuh$ ?v1 )?v2 ))(admissible$ ?v0 ?v1 (uui$ ?v2 ))))):named a31 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(=> (and (fun_app$ (fun_app$w (compact$ ?v0 )?v1 )?v2 )(=> (and (admissible$ ?v0 ?v1 (fun_app$n (uuh$ ?v1 )?v2 ))(admissible$ ?v0 ?v1 (uui$ ?v2 )))false ))false )):named a32 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(=> (fun_app$ (fun_app$w (compact$ ?v0 )?v1 )?v2 )(admissible$ ?v0 ?v1 (uuj$ ?v2 )))):named a33 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(=> (fun_app$ (fun_app$w (compact$ ?v0 )?v1 )?v2 )(admissible$ ?v0 ?v1 (uui$ ?v2 )))):named a34 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ ))(=> (and (admissible$ ?v0 ?v1 (fun_app$n (uuh$ ?v1 )?v2 ))(admissible$ ?v0 ?v1 (uui$ ?v2 )))(fun_app$ (fun_app$w (compact$ ?v0 )?v1 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$x (fun_app$y lprefix$ ?v0 )?v0 )):named a36 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$x (fun_app$y lprefix$ ?v0 )?v0 )):named a37 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$x (fun_app$y lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$x (fun_app$y lprefix$ lNil$ )?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_llist_a_b_llist_fun_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_a_fun$ ))(=> (and (forall ((?v6 B_llist$ ))(mcont$ ?v0 ?v1 lSup$ lprefix$ (fun_app$f ?v2 ?v6 )))(and (forall ((?v6 A$ ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$i (uuk$ ?v2 )?v6 )))(mcont$b ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$e (uul$ ?v2 )?v5 )))):named a39 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_b_llist_fun_fun$ )(?v3 B_llist_set_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ )(?v5 B_llist_b_llist_fun$ ))(=> (and (forall ((?v6 B_llist$ ))(mcont$a ?v0 ?v1 lSup$ lprefix$ (fun_app$d ?v2 ?v6 )))(and (forall ((?v6 B_llist$ ))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$d (uum$ ?v2 )?v6 )))(mcont$a ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$a ?v3 ?v4 lSup$ lprefix$ (fun_app$c (uun$ ?v2 )?v5 )))):named a40 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_b_llist_b_llist_fun_fun$ )(?v3 A_set_a_fun$ )(?v4 A_a_bool_fun_fun$ )(?v5 A_b_llist_fun$ ))(=> (and (forall ((?v6 A$ ))(mcont$a ?v0 ?v1 lSup$ lprefix$ (fun_app$i ?v2 ?v6 )))(and (forall ((?v6 B_llist$ ))(mcont$ ?v3 ?v4 lSup$ lprefix$ (fun_app$f (uuo$ ?v2 )?v6 )))(mcont$ ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$ ?v3 ?v4 lSup$ lprefix$ (fun_app$h (uup$ ?v2 )?v5 )))):named a41 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_b_llist_fun_fun$ )(?v3 A_set_a_fun$ )(?v4 A_a_bool_fun_fun$ )(?v5 A_a_fun$ ))(=> (and (forall ((?v6 A$ ))(mcont$ ?v0 ?v1 lSup$ lprefix$ (fun_app$k ?v2 ?v6 )))(and (forall ((?v6 A$ ))(mcont$ ?v3 ?v4 lSup$ lprefix$ (fun_app$k (uuq$ ?v2 )?v6 )))(mcont$c ?v3 ?v4 ?v0 ?v1 ?v5 )))(mcont$ ?v3 ?v4 lSup$ lprefix$ (fun_app$j (uur$ ?v2 )?v5 )))):named a42 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_set_a_fun$ )(?v3 A_a_bool_fun_fun$ )(?v4 B_llist_a_fun$ )(?v5 B_llist_a_fun$ )(?v6 Bool ))(=> (and (mcont$b ?v0 ?v1 ?v2 ?v3 ?v4 )(mcont$b ?v0 ?v1 ?v2 ?v3 ?v5 ))(mcont$b ?v0 ?v1 ?v2 ?v3 (fun_app$q (fun_app$r (uus$ ?v4 )?v5 )?v6 )))):named a43 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_set_a_fun$ )(?v3 A_a_bool_fun_fun$ )(?v4 A_a_fun$ )(?v5 A_a_fun$ )(?v6 Bool ))(=> (and (mcont$c ?v0 ?v1 ?v2 ?v3 ?v4 )(mcont$c ?v0 ?v1 ?v2 ?v3 ?v5 ))(mcont$c ?v0 ?v1 ?v2 ?v3 (fun_app$u (fun_app$v (uut$ ?v4 )?v5 )?v6 )))):named a44 ))
(assert (! (forall ((?v0 B_llist_set_b_llist_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_set_b_llist_fun$ )(?v3 B_llist_b_llist_bool_fun_fun$ )(?v4 B_llist_b_llist_fun$ )(?v5 B_llist_b_llist_fun$ )(?v6 Bool ))(=> (and (mcont$a ?v0 ?v1 ?v2 ?v3 ?v4 )(mcont$a ?v0 ?v1 ?v2 ?v3 ?v5 ))(mcont$a ?v0 ?v1 ?v2 ?v3 (fun_app$o (fun_app$p (uuu$ ?v4 )?v5 )?v6 )))):named a45 ))
(assert (! (forall ((?v0 A_set_a_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_llist_set_b_llist_fun$ )(?v3 B_llist_b_llist_bool_fun_fun$ )(?v4 A_b_llist_fun$ )(?v5 A_b_llist_fun$ )(?v6 Bool ))(=> (and (mcont$ ?v0 ?v1 ?v2 ?v3 ?v4 )(mcont$ ?v0 ?v1 ?v2 ?v3 ?v5 ))(mcont$ ?v0 ?v1 ?v2 ?v3 (fun_app$s (fun_app$t (uuv$ ?v4 )?v5 )?v6 )))):named a46 ))
(check-sat )
(get-unsat-core )
