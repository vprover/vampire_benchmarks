(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_llist_fun$ 0 )
(declare-sort B_llist_a_llist_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort A_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort Bool_a_llist_a_llist_fun_fun$ 0 )
(declare-sort Bool_a_llist_b_llist_fun_fun$ 0 )
(declare-sort Bool_b_llist_a_llist_fun_fun$ 0 )
(declare-sort Bool_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_a_llist_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_a_llist_b_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_a_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_a_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ 0 )
(declare-sort A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_llist_fun_bool_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_a_llist_fun_bool_b_llist_a_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist_a_a_llist_b_llist_fun_fun_fun_a_llist_a_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort B_llist_a_a_llist_b_llist_fun_fun_fun_a_llist_b_llist_b_llist_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-fun f$ (A$ )A_llist_a_llist_b_llist_fun_fun$ )
(declare-fun uu$ (A_llist$ )A_a_llist_b_llist_fun_fun$ )
(declare-fun uua$ ()A_llist_b_llist_fun$ )
(declare-fun uub$ (B_llist_a_a_llist_b_llist_fun_fun_fun$ )A_a_llist_b_llist_b_llist_fun_fun_fun$ )
(declare-fun uuc$ (B_llist_b_llist_fun$ )B_llist_a_a_llist_b_llist_fun_fun_fun_a_llist_b_llist_b_llist_fun_fun_fun$ )
(declare-fun uud$ (A_llist_a_a_llist_b_llist_fun_fun_fun$ )A_a_llist_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uue$ (A_llist_b_llist_fun$ )A_llist_a_a_llist_b_llist_fun_fun_fun_a_llist_a_llist_b_llist_fun_fun_fun$ )
(declare-fun uuf$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uug$ (A_llist_a_llist_fun$ )B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun uuh$ (B_llist_a_llist_fun$ )B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ )
(declare-fun uui$ (A_llist_b_llist_fun$ )B_llist_a_llist_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uuj$ (B_llist_b_llist_fun$ )B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ )
(declare-fun uuk$ (B_llist_a_llist_fun$ )A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ )
(declare-fun uul$ (B_llist_b_llist_fun$ )A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun uum$ (A_llist_b_llist_fun$ )A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ )
(declare-fun uun$ (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun uuo$ (A_llist$ )B_llist_a_llist_fun$ )
(declare-fun uup$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun uuq$ (B_llist$ )A_llist_b_llist_fun$ )
(declare-fun uur$ (A$ )A_llist_b_llist_fun$ )
(declare-fun uus$ (A_llist_a_llist_fun$ )A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ )
(declare-fun uut$ (B_llist_b_llist_fun$ )B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ )
(declare-fun uuu$ (B_llist_a_llist_fun$ )B_llist_a_llist_fun_bool_b_llist_a_llist_fun_fun_fun$ )
(declare-fun uuv$ (A_llist_b_llist_fun$ )A_llist_b_llist_fun_bool_a_llist_b_llist_fun_fun_fun$ )
(declare-fun fun_app$ (A_llist_b_llist_fun$ A_llist$ )B_llist$ )
(declare-fun lprefix$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun fun_app$a (A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ A_a_llist_b_llist_fun_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$b (A_llist_a_llist_b_llist_fun_fun$ A_llist$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$c (A_a_llist_b_llist_fun_fun$ A$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$d (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun fun_app$e (B_llist_b_llist_fun_b_llist_b_llist_fun_fun$ B_llist_b_llist_fun$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$f (A_llist_b_llist_fun_a_llist_b_llist_fun_fun$ A_llist_b_llist_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$g (B_llist_a_llist_fun$ B_llist$ )A_llist$ )
(declare-fun fun_app$h (B_llist_b_llist_fun_b_llist_a_llist_fun_fun$ B_llist_b_llist_fun$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$i (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$j (A_llist_b_llist_fun_a_llist_a_llist_fun_fun$ A_llist_b_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$k (B_llist_a_llist_fun_b_llist_b_llist_fun_fun$ B_llist_a_llist_fun$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$l (A_llist_a_llist_fun_a_llist_b_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_b_llist_fun$ )
(declare-fun fun_app$m (B_llist_a_llist_fun_b_llist_a_llist_fun_fun$ B_llist_a_llist_fun$ )B_llist_a_llist_fun$ )
(declare-fun fun_app$n (A_llist_a_llist_fun_a_llist_a_llist_fun_fun$ A_llist_a_llist_fun$ )A_llist_a_llist_fun$ )
(declare-fun fun_app$o (A_llist_b_llist_b_llist_fun_fun$ A_llist$ )B_llist_b_llist_fun$ )
(declare-fun fun_app$p (A_a_llist_b_llist_b_llist_fun_fun_fun$ A$ )A_llist_b_llist_b_llist_fun_fun$ )
(declare-fun fun_app$q (B_llist_a_a_llist_b_llist_fun_fun_fun$ B_llist$ )A_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$r (A_a_llist_a_llist_b_llist_fun_fun_fun$ A$ )A_llist_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$s (A_llist_a_a_llist_b_llist_fun_fun_fun$ A_llist$ )A_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$t (B_llist_a_a_llist_b_llist_fun_fun_fun_a_llist_b_llist_b_llist_fun_fun_fun$ B_llist_a_a_llist_b_llist_fun_fun_fun$ )A_llist_b_llist_b_llist_fun_fun$ )
(declare-fun fun_app$u (A_llist_a_a_llist_b_llist_fun_fun_fun_a_llist_a_llist_b_llist_fun_fun_fun$ A_llist_a_a_llist_b_llist_fun_fun_fun$ )A_llist_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$v (Bool_b_llist_b_llist_fun_fun$ Bool )B_llist_b_llist_fun$ )
(declare-fun fun_app$w (B_llist_b_llist_fun_bool_b_llist_b_llist_fun_fun_fun$ B_llist_b_llist_fun$ )Bool_b_llist_b_llist_fun_fun$ )
(declare-fun fun_app$x (Bool_b_llist_a_llist_fun_fun$ Bool )B_llist_a_llist_fun$ )
(declare-fun fun_app$y (B_llist_a_llist_fun_bool_b_llist_a_llist_fun_fun_fun$ B_llist_a_llist_fun$ )Bool_b_llist_a_llist_fun_fun$ )
(declare-fun fun_app$z (Bool_a_llist_b_llist_fun_fun$ Bool )A_llist_b_llist_fun$ )
(declare-fun lprefix$a ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun monotone$ (A_llist_a_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ A_llist_b_llist_fun$ )Bool )
(declare-fun fun_app$aa (A_llist_b_llist_fun_bool_a_llist_b_llist_fun_fun_fun$ A_llist_b_llist_fun$ )Bool_a_llist_b_llist_fun_fun$ )
(declare-fun fun_app$ab (Bool_a_llist_a_llist_fun_fun$ Bool )A_llist_a_llist_fun$ )
(declare-fun fun_app$ac (A_llist_a_llist_fun_bool_a_llist_a_llist_fun_fun_fun$ A_llist_a_llist_fun$ )Bool_a_llist_a_llist_fun_fun$ )
(declare-fun fun_app$ad (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$ae (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$af (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$ag (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun monotone$a (A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ A_llist_a_llist_fun$ )Bool )
(declare-fun monotone$b (B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_bool_fun_fun$ B_llist_b_llist_fun$ )Bool )
(declare-fun monotone$c (B_llist_b_llist_bool_fun_fun$ A_llist_a_llist_bool_fun_fun$ B_llist_a_llist_fun$ )Bool )
(declare-fun case_llist$ (B_llist$ )A_a_llist_b_llist_fun_fun_a_llist_b_llist_fun_fun$ )
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ uua$ ?v0 )(fun_app$ (fun_app$a (case_llist$ lNil$a )(uu$ ?v0 ))?v0 )):pattern ((fun_app$ uua$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_llist$ ))(! (= (fun_app$ (uur$ ?v0 )?v1 )(fun_app$ (fun_app$b (f$ ?v0 )?v1 )(lCons$ ?v0 ?v1 ))):pattern ((fun_app$ (uur$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$c (uu$ ?v0 )?v1 )?v2 )(fun_app$ (fun_app$b (f$ ?v1 )?v2 )?v0 )):pattern ((fun_app$ (fun_app$c (uu$ ?v0 )?v1 )?v2 )))):named a2 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$d (fun_app$e (uuj$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$e (uuj$ ?v0 )?v1 )?v2 )))):named a3 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$f (uul$ ?v0 )?v1 )?v2 )(fun_app$d ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$f (uul$ ?v0 )?v1 )?v2 )))):named a4 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$g (fun_app$h (uuh$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$h (uuh$ ?v0 )?v1 )?v2 )))):named a5 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$i (fun_app$j (uuk$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$ ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$j (uuk$ ?v0 )?v1 )?v2 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$d (fun_app$k (uui$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$d (fun_app$k (uui$ ?v0 )?v1 )?v2 )))):named a7 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$ (fun_app$l (uum$ ?v0 )?v1 )?v2 )(fun_app$ ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$ (fun_app$l (uum$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist$ ))(! (= (fun_app$g (fun_app$m (uug$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$m (uug$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist$ ))(! (= (fun_app$i (fun_app$n (uuf$ ?v0 )?v1 )?v2 )(fun_app$i ?v0 (fun_app$i ?v1 ?v2 ))):pattern ((fun_app$i (fun_app$n (uuf$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 B_llist_a_a_llist_b_llist_fun_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 B_llist$ ))(! (= (fun_app$d (fun_app$o (fun_app$p (uub$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$c (fun_app$q ?v0 ?v3 )?v1 )?v2 )):pattern ((fun_app$d (fun_app$o (fun_app$p (uub$ ?v0 )?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_a_a_llist_b_llist_fun_fun_fun$ )(?v1 A$ )(?v2 A_llist$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$b (fun_app$r (uud$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$c (fun_app$s ?v0 ?v3 )?v1 )?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$r (uud$ ?v0 )?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_a_a_llist_b_llist_fun_fun_fun$ )(?v2 A_llist$ )(?v3 B_llist$ ))(! (= (fun_app$d (fun_app$o (fun_app$t (uuc$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (case_llist$ (fun_app$d ?v0 ?v3 ))(fun_app$q ?v1 ?v3 ))?v2 )):pattern ((fun_app$d (fun_app$o (fun_app$t (uuc$ ?v0 )?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_a_a_llist_b_llist_fun_fun_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$b (fun_app$u (uue$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$a (case_llist$ (fun_app$ ?v0 ?v3 ))(fun_app$s ?v1 ?v3 ))?v2 )):pattern ((fun_app$ (fun_app$b (fun_app$u (uue$ ?v0 )?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 Bool )(?v3 B_llist$ ))(! (= (fun_app$d (fun_app$v (fun_app$w (uut$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$d ?v0 ?v3 )(fun_app$d ?v1 ?v3 ))):pattern ((fun_app$d (fun_app$v (fun_app$w (uut$ ?v0 )?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 Bool )(?v3 B_llist$ ))(! (= (fun_app$g (fun_app$x (fun_app$y (uuu$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$g ?v0 ?v3 )(fun_app$g ?v1 ?v3 ))):pattern ((fun_app$g (fun_app$x (fun_app$y (uuu$ ?v0 )?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 Bool )(?v3 A_llist$ ))(! (= (fun_app$ (fun_app$z (fun_app$aa (uuv$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$ ?v0 ?v3 )(fun_app$ ?v1 ?v3 ))):pattern ((fun_app$ (fun_app$z (fun_app$aa (uuv$ ?v0 )?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 Bool )(?v3 A_llist$ ))(! (= (fun_app$i (fun_app$ab (fun_app$ac (uus$ ?v0 )?v1 )?v2 )?v3 )(ite ?v2 (fun_app$i ?v0 ?v3 )(fun_app$i ?v1 ?v3 ))):pattern ((fun_app$i (fun_app$ab (fun_app$ac (uus$ ?v0 )?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$d (uup$ ?v0 )?v1 )?v0 ):pattern ((fun_app$d (uup$ ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_llist$ ))(! (= (fun_app$ (uuq$ ?v0 )?v1 )?v0 ):pattern ((fun_app$ (uuq$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B_llist$ ))(! (= (fun_app$g (uuo$ ?v0 )?v1 )?v0 ):pattern ((fun_app$g (uuo$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$i (uun$ ?v0 )?v1 )?v0 ):pattern ((fun_app$i (uun$ ?v0 )?v1 )))):named a22 ))
(assert (! (not (monotone$ lprefix$ lprefix$a uua$ )):named a23 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ad (fun_app$ae lprefix$ ?v0 )?v0 )):named a24 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$af (fun_app$ag lprefix$a ?v0 )?v0 )):named a25 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ad (fun_app$ae lprefix$ ?v0 )?v0 )):named a26 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$af (fun_app$ag lprefix$a ?v0 )?v0 )):named a27 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$ad (fun_app$ae lprefix$ lNil$ )?v0 )true ):pattern ((fun_app$ad (fun_app$ae lprefix$ lNil$ )?v0 )))):named a28 ))
(assert (! (forall ((?v0 B_llist$ ))(! (= (fun_app$af (fun_app$ag lprefix$a lNil$a )?v0 )true ):pattern ((fun_app$af (fun_app$ag lprefix$a lNil$a )?v0 )))):named a29 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 A_a_llist_b_llist_fun_fun$ ))(! (= (fun_app$ (fun_app$a (case_llist$ ?v0 )?v1 )lNil$ )?v0 ):pattern ((fun_app$a (case_llist$ ?v0 )?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$i ?v0 ?v5 )(ite (fun_app$ad (fun_app$ae lprefix$ ?v5 )?v1 )?v2 (fun_app$i ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$ad (fun_app$ae lprefix$ ?v5 )?v6 )(not (fun_app$ad (fun_app$ae lprefix$ ?v5 )?v1 )))(fun_app$ad (fun_app$ae ?v4 (fun_app$i ?v3 ?v5 ))(fun_app$i ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$ad (fun_app$ae lprefix$ ?v5 )?v1 ))(fun_app$ad (fun_app$ae ?v4 ?v2 )(fun_app$i ?v3 ?v5 ))))(fun_app$ad (fun_app$ae ?v4 ?v2 )?v2 ))))(monotone$a lprefix$ ?v4 ?v0 ))):named a31 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_llist$ ))(= (fun_app$d ?v0 ?v5 )(ite (fun_app$af (fun_app$ag lprefix$a ?v5 )?v1 )?v2 (fun_app$d ?v3 ?v5 ))))(and (forall ((?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$a ?v5 )?v6 )(not (fun_app$af (fun_app$ag lprefix$a ?v5 )?v1 )))(fun_app$af (fun_app$ag ?v4 (fun_app$d ?v3 ?v5 ))(fun_app$d ?v3 ?v6 ))))(and (forall ((?v5 B_llist$ ))(=> (not (fun_app$af (fun_app$ag lprefix$a ?v5 )?v1 ))(fun_app$af (fun_app$ag ?v4 ?v2 )(fun_app$d ?v3 ?v5 ))))(fun_app$af (fun_app$ag ?v4 ?v2 )?v2 ))))(monotone$b lprefix$a ?v4 ?v0 ))):named a32 ))
(assert (! (forall ((?v0 B_llist_a_llist_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist_a_llist_fun$ )(?v4 A_llist_a_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 B_llist$ ))(= (fun_app$g ?v0 ?v5 )(ite (fun_app$af (fun_app$ag lprefix$a ?v5 )?v1 )?v2 (fun_app$g ?v3 ?v5 ))))(and (forall ((?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$a ?v5 )?v6 )(not (fun_app$af (fun_app$ag lprefix$a ?v5 )?v1 )))(fun_app$ad (fun_app$ae ?v4 (fun_app$g ?v3 ?v5 ))(fun_app$g ?v3 ?v6 ))))(and (forall ((?v5 B_llist$ ))(=> (not (fun_app$af (fun_app$ag lprefix$a ?v5 )?v1 ))(fun_app$ad (fun_app$ae ?v4 ?v2 )(fun_app$g ?v3 ?v5 ))))(fun_app$ad (fun_app$ae ?v4 ?v2 )?v2 ))))(monotone$c lprefix$a ?v4 ?v0 ))):named a33 ))
(assert (! (forall ((?v0 A_llist_b_llist_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist_b_llist_fun$ )(?v4 B_llist_b_llist_bool_fun_fun$ ))(=> (and (forall ((?v5 A_llist$ ))(= (fun_app$ ?v0 ?v5 )(ite (fun_app$ad (fun_app$ae lprefix$ ?v5 )?v1 )?v2 (fun_app$ ?v3 ?v5 ))))(and (forall ((?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (fun_app$ad (fun_app$ae lprefix$ ?v5 )?v6 )(not (fun_app$ad (fun_app$ae lprefix$ ?v5 )?v1 )))(fun_app$af (fun_app$ag ?v4 (fun_app$ ?v3 ?v5 ))(fun_app$ ?v3 ?v6 ))))(and (forall ((?v5 A_llist$ ))(=> (not (fun_app$ad (fun_app$ae lprefix$ ?v5 )?v1 ))(fun_app$af (fun_app$ag ?v4 ?v2 )(fun_app$ ?v3 ?v5 ))))(fun_app$af (fun_app$ag ?v4 ?v2 )?v2 ))))(monotone$ lprefix$ ?v4 ?v0 ))):named a34 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 B_llist_a_a_llist_b_llist_fun_fun_fun$ )(?v4 A_llist$ ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(forall ((?v5 A$ )(?v6 A_llist$ ))(monotone$b ?v0 ?v1 (fun_app$o (fun_app$p (uub$ ?v3 )?v5 )?v6 ))))(monotone$b ?v0 ?v1 (fun_app$o (fun_app$t (uuc$ ?v2 )?v3 )?v4 )))):named a35 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ )(?v3 A_llist_a_a_llist_b_llist_fun_fun_fun$ )(?v4 A_llist$ ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(forall ((?v5 A$ )(?v6 A_llist$ ))(monotone$ ?v0 ?v1 (fun_app$b (fun_app$r (uud$ ?v3 )?v5 )?v6 ))))(monotone$ ?v0 ?v1 (fun_app$b (fun_app$u (uue$ ?v2 )?v3 )?v4 )))):named a36 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$a ?v0 lprefix$ ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$n (uuf$ ?v1 )?v3 )))):named a37 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_a_llist_fun$ ))(=> (and (monotone$a ?v0 lprefix$ ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$ (fun_app$m (uug$ ?v1 )?v3 )))):named a38 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_b_llist_fun$ ))(=> (and (monotone$c ?v0 lprefix$ ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$c ?v2 lprefix$ (fun_app$h (uuh$ ?v1 )?v3 )))):named a39 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_a_llist_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$c ?v2 ?v0 ?v3 ))(monotone$b ?v2 lprefix$a (fun_app$k (uui$ ?v1 )?v3 )))):named a40 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 B_llist_b_llist_bool_fun_fun$ )(?v3 B_llist_b_llist_fun$ ))(=> (and (monotone$b ?v0 lprefix$a ?v1 )(monotone$b ?v2 ?v0 ?v3 ))(monotone$b ?v2 lprefix$a (fun_app$e (uuj$ ?v1 )?v3 )))):named a41 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_a_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_b_llist_fun$ ))(=> (and (monotone$c ?v0 lprefix$ ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$a ?v2 lprefix$ (fun_app$j (uuk$ ?v1 )?v3 )))):named a42 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_b_llist_fun$ ))(=> (and (monotone$b ?v0 lprefix$a ?v1 )(monotone$ ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$f (uul$ ?v1 )?v3 )))):named a43 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_b_llist_fun$ )(?v2 A_llist_a_llist_bool_fun_fun$ )(?v3 A_llist_a_llist_fun$ ))(=> (and (monotone$ ?v0 lprefix$a ?v1 )(monotone$a ?v2 ?v0 ?v3 ))(monotone$ ?v2 lprefix$a (fun_app$l (uum$ ?v1 )?v3 )))):named a44 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ad (fun_app$ae lprefix$ ?v0 )?v1 )(fun_app$ad (fun_app$ae lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a45 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$a ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (fun_app$ad (fun_app$ae lprefix$ ?v0 )?v1 )(fun_app$ad (fun_app$ae lprefix$ ?v1 )?v0 ))(= ?v0 ?v1 ))):named a47 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$a ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$a ?v1 )?v0 ))(= ?v0 ?v1 ))):named a48 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ad (fun_app$ae lprefix$ ?v0 )?v1 )(fun_app$ad (fun_app$ae lprefix$ ?v2 )?v1 ))(or (fun_app$ad (fun_app$ae lprefix$ ?v0 )?v2 )(fun_app$ad (fun_app$ae lprefix$ ?v2 )?v0 )))):named a49 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$a ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$a ?v2 )?v1 ))(or (fun_app$af (fun_app$ag lprefix$a ?v0 )?v2 )(fun_app$af (fun_app$ag lprefix$a ?v2 )?v0 )))):named a50 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ad (fun_app$ae lprefix$ ?v0 )?v1 )(fun_app$ad (fun_app$ae lprefix$ ?v1 )?v2 ))(fun_app$ad (fun_app$ae lprefix$ ?v0 )?v2 ))):named a51 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$a ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$a ?v1 )?v2 ))(fun_app$af (fun_app$ag lprefix$a ?v0 )?v2 ))):named a52 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ad (fun_app$ae lprefix$ ?v0 )?v1 )(fun_app$ad (fun_app$ae lprefix$ ?v1 )?v2 ))(fun_app$ad (fun_app$ae lprefix$ ?v0 )?v2 ))):named a53 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (and (fun_app$af (fun_app$ag lprefix$a ?v0 )?v1 )(fun_app$af (fun_app$ag lprefix$a ?v1 )?v2 ))(fun_app$af (fun_app$ag lprefix$a ?v0 )?v2 ))):named a54 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$a ?v0 lprefix$ (uun$ ?v1 ))):named a55 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 A_llist$ ))(monotone$c ?v0 lprefix$ (uuo$ ?v1 ))):named a56 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist$ ))(monotone$b ?v0 lprefix$a (uup$ ?v1 ))):named a57 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist$ ))(monotone$ ?v0 lprefix$a (uuq$ ?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_llist$ ))(fun_app$ad (fun_app$ae lprefix$ lNil$ )?v0 )):named a59 ))
(assert (! (forall ((?v0 B_llist$ ))(fun_app$af (fun_app$ag lprefix$a lNil$a )?v0 )):named a60 ))
(assert (! (forall ((?v0 A$ ))(monotone$ lprefix$ lprefix$a (uur$ ?v0 ))):named a61 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 A_llist_a_llist_fun$ )(?v3 A_llist_a_llist_fun$ )(?v4 Bool ))(=> (and (monotone$a ?v0 ?v1 ?v2 )(monotone$a ?v0 ?v1 ?v3 ))(monotone$a ?v0 ?v1 (fun_app$ab (fun_app$ac (uus$ ?v2 )?v3 )?v4 )))):named a62 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 B_llist_b_llist_fun$ )(?v3 B_llist_b_llist_fun$ )(?v4 Bool ))(=> (and (monotone$b ?v0 ?v1 ?v2 )(monotone$b ?v0 ?v1 ?v3 ))(monotone$b ?v0 ?v1 (fun_app$v (fun_app$w (uut$ ?v2 )?v3 )?v4 )))):named a63 ))
(assert (! (forall ((?v0 B_llist_b_llist_bool_fun_fun$ )(?v1 A_llist_a_llist_bool_fun_fun$ )(?v2 B_llist_a_llist_fun$ )(?v3 B_llist_a_llist_fun$ )(?v4 Bool ))(=> (and (monotone$c ?v0 ?v1 ?v2 )(monotone$c ?v0 ?v1 ?v3 ))(monotone$c ?v0 ?v1 (fun_app$x (fun_app$y (uuu$ ?v2 )?v3 )?v4 )))):named a64 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 B_llist_b_llist_bool_fun_fun$ )(?v2 A_llist_b_llist_fun$ )(?v3 A_llist_b_llist_fun$ )(?v4 Bool ))(=> (and (monotone$ ?v0 ?v1 ?v2 )(monotone$ ?v0 ?v1 ?v3 ))(monotone$ ?v0 ?v1 (fun_app$z (fun_app$aa (uuv$ ?v2 )?v3 )?v4 )))):named a65 ))
(check-sat )
(get-unsat-core )
