(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_state_fun$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_prod_tree_fset$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_fun$ 0 )
(declare-sort State_state_rule_prod_tree_fun$ 0 )
(declare-sort Rule_stream_rule_stream_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod_tree_state_rule_prod_tree_fun$ 0 )
(declare-sort Rule_stream_state_state_rule_prod_tree_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-fun s$ ()State$ )
(declare-fun t$ ()State_rule_prod_tree$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State_set$ )
(declare-fun sl$ ()State_fset$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun cont$ (State_rule_prod_tree$ )State_rule_prod_tree_fset$ )
(declare-fun node$ (State_rule_prod$ State_rule_prod_tree_fset$ )State_rule_prod_tree$ )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun fimage$ (State_state_rule_prod_tree_fun$ State_fset$ )State_rule_prod_tree_fset$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ )Rule_stream_state_state_rule_prod_tree_fun_fun$ )
(declare-fun thesis$ ()Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fimage$a (State_state_fun$ State_fset$ )State_fset$ )
(declare-fun fimage$b (State_rule_prod_tree_state_fun$ State_rule_prod_tree_fset$ )State_fset$ )
(declare-fun fimage$c (State_rule_prod_tree_state_rule_prod_tree_fun$ State_rule_prod_tree_fset$ )State_rule_prod_tree_fset$ )
(declare-fun fmember$ (State$ State_fset$ )Bool )
(declare-fun fun_app$ (State_state_rule_prod_tree_fun$ State$ )State_rule_prod_tree$ )
(declare-fun pickEff$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )State_fset$ )
(declare-fun fmember$a (State_rule_prod_tree$ State_rule_prod_tree_fset$ )Bool )
(declare-fun fun_app$a (Rule_stream_state_state_rule_prod_tree_fun_fun$ Rule_stream$ )State_state_rule_prod_tree_fun$ )
(declare-fun fun_app$b (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fun_app$c (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$d (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$e (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$f (Rule_stream_rule_stream_bool_fun_fun$ Rule_stream$ )Rule_stream_bool_fun$ )
(declare-fun fun_app$g (State_state_fun$ State$ )State$ )
(declare-fun fun_app$h (State_rule_prod_tree_state_fun$ State_rule_prod_tree$ )State$ )
(declare-fun fun_app$i (State_rule_prod_tree_state_rule_prod_tree_fun$ State_rule_prod_tree$ )State_rule_prod_tree$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 State$ ))(=> (and (fmember$ ?v0 (pickEff$ eff$ (shd$ (trim$ eff$ rs$ s$ ))s$ ))(= t$ (fun_app$ (fun_app$a (mkTree$ eff$ )(stl$ (trim$ eff$ rs$ s$ )))?v0 )))thesis$ )):named a1 ))
(assert (! (member$ s$ s$a ):named a2 ))
(assert (! (fmember$a t$ (cont$ (fun_app$ (fun_app$a (mkTree$ eff$ )rs$ )s$ ))):named a3 ))
(assert (! (= sl$ (pickEff$ eff$ (shd$ (trim$ eff$ rs$ s$ ))s$ )):named a4 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(=> (enabled$ eff$ ?v0 ?v1 )(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )(pickEff$ eff$ ?v0 ?v1 )))):named a5 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$b (fun_app$c (fun_app$d eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (cont$ (fun_app$ (fun_app$a (mkTree$ eff$ )?v0 )?v1 ))(fimage$ (fun_app$a (mkTree$ eff$ )(stl$ (trim$ eff$ ?v0 ?v1 )))(pickEff$ eff$ (shd$ (trim$ eff$ ?v0 ?v1 ))?v1 )))):named a7 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(=> (and (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 Rule_stream$ )(?v4 Rule_stream$ ))(=> (fun_app$e (fun_app$f ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$e (fun_app$f ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a9 ))
(assert (! (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(=> (and (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 Rule_stream$ )(?v4 Rule_stream$ ))(=> (fun_app$e (fun_app$f ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$e (fun_app$f ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a10 ))
(assert (! (forall ((?v0 Rule_state_state_fset_bool_fun_fun_fun$ )(?v1 Rule_stream$ )(?v2 State$ ))(= (cont$ (fun_app$ (fun_app$a (mkTree$ ?v0 )?v1 )?v2 ))(fimage$ (fun_app$a (mkTree$ ?v0 )(stl$ (trim$ ?v0 ?v1 ?v2 )))(pickEff$ ?v0 (shd$ (trim$ ?v0 ?v1 ?v2 ))?v2 )))):named a11 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (root$ (fun_app$ (fun_app$a (mkTree$ eff$ )?v0 )?v1 ))(pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 ))))):named a12 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(! (= (fun_app$ (fun_app$a (mkTree$ eff$ )?v0 )?v1 )(node$ (pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 )))(fimage$ (fun_app$a (mkTree$ eff$ )(stl$ (trim$ eff$ ?v0 ?v1 )))(pickEff$ eff$ (shd$ (trim$ eff$ ?v0 ?v1 ))?v1 )))):pattern ((fun_app$ (fun_app$a (mkTree$ eff$ )?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 Bool )(?v1 State$ )(?v2 State$ )(?v3 State_fset$ ))(= (fmember$ (ite ?v0 ?v1 ?v2 )?v3 )(and (=> ?v0 (fmember$ ?v1 ?v3 ))(=> (not ?v0 )(fmember$ ?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 Bool )(?v1 State_rule_prod_tree$ )(?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_tree_fset$ ))(= (fmember$a (ite ?v0 ?v1 ?v2 )?v3 )(and (=> ?v0 (fmember$a ?v1 ?v3 ))(=> (not ?v0 )(fmember$a ?v2 ?v3 ))))):named a15 ))
(assert (! (forall ((?v0 State$ )(?v1 Bool )(?v2 State_fset$ )(?v3 State_fset$ ))(= (fmember$ ?v0 (ite ?v1 ?v2 ?v3 ))(and (=> ?v1 (fmember$ ?v0 ?v2 ))(=> (not ?v1 )(fmember$ ?v0 ?v3 ))))):named a16 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 Bool )(?v2 State_rule_prod_tree_fset$ )(?v3 State_rule_prod_tree_fset$ ))(= (fmember$a ?v0 (ite ?v1 ?v2 ?v3 ))(and (=> ?v1 (fmember$a ?v0 ?v2 ))(=> (not ?v1 )(fmember$a ?v0 ?v3 ))))):named a17 ))
(assert (! (forall ((?v0 State_fset$ )(?v1 State_fset$ ))(=> (forall ((?v2 State$ ))(= (fmember$ ?v2 ?v0 )(fmember$ ?v2 ?v1 )))(= ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 State_rule_prod_tree_fset$ )(?v1 State_rule_prod_tree_fset$ ))(=> (forall ((?v2 State_rule_prod_tree$ ))(= (fmember$a ?v2 ?v0 )(fmember$a ?v2 ?v1 )))(= ?v0 ?v1 ))):named a19 ))
(assert (! (forall ((?v0 State_rule_prod$ )(?v1 State_rule_prod_tree_fset$ )(?v2 State_rule_prod$ )(?v3 State_rule_prod_tree_fset$ ))(= (= (node$ ?v0 ?v1 )(node$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 State$ )(?v1 State_state_fun$ )(?v2 State$ )(?v3 State_fset$ ))(=> (and (= ?v0 (fun_app$g ?v1 ?v2 ))(fmember$ ?v2 ?v3 ))(fmember$ ?v0 (fimage$a ?v1 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_state_rule_prod_tree_fun$ )(?v2 State$ )(?v3 State_fset$ ))(=> (and (= ?v0 (fun_app$ ?v1 ?v2 ))(fmember$ ?v2 ?v3 ))(fmember$a ?v0 (fimage$ ?v1 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 State$ )(?v1 State_rule_prod_tree_state_fun$ )(?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_tree_fset$ ))(=> (and (= ?v0 (fun_app$h ?v1 ?v2 ))(fmember$a ?v2 ?v3 ))(fmember$ ?v0 (fimage$b ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 State_rule_prod_tree_state_rule_prod_tree_fun$ )(?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_tree_fset$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(fmember$a ?v2 ?v3 ))(fmember$a ?v0 (fimage$c ?v1 ?v3 )))):named a24 ))
(check-sat )
(get-unsat-core )
