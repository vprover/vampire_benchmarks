(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort Nat$ 0 )
(declare-sort Rule$ 0 )
(declare-sort State$ 0 )
(declare-sort State_set$ 0 )
(declare-sort State_fset$ 0 )
(declare-sort State_fset_bool_fun$ 0 )
(declare-sort Rule_stream_bool_fun$ 0 )
(declare-sort State_rule_prod_tree$ 0 )
(declare-sort State_rule_prod_tree_fset$ 0 )
(declare-sort State_state_fset_bool_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_bool_fun$ 0 )
(declare-sort Rule_stream_rule_stream_bool_fun_fun$ 0 )
(declare-sort Rule_state_state_fset_bool_fun_fun_fun$ 0 )
(declare-sort State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ 0 )
(declare-sort Rule_stream$ 0)
(declare-fun shd$ (Rule_stream$)Rule$)
(declare-fun stl$ (Rule_stream$)Rule_stream$)
(declare-fun sCons$ (Rule$ Rule_stream$ )Rule_stream$)
(declare-sort State_rule_prod$ 0)
(declare-fun fst$ (State_rule_prod$)State$)
(declare-fun snd$ (State_rule_prod$)Rule$)
(declare-fun pair$ (State$ Rule$ )State_rule_prod$)
(declare-sort State_rule_prod_stream$ 0)
(declare-fun shd$a (State_rule_prod_stream$)State_rule_prod$)
(declare-fun stl$a (State_rule_prod_stream$)State_rule_prod_stream$)
(declare-fun sCons$a (State_rule_prod$ State_rule_prod_stream$ )State_rule_prod_stream$)
(declare-fun n$ ()Nat$ )
(declare-fun s$ ()State$ )
(declare-fun t$ ()State_rule_prod_tree$ )
(declare-fun ma$ ()Nat$ )
(declare-fun rs$ ()Rule_stream$ )
(declare-fun s$a ()State$ )
(declare-fun s$b ()State_set$ )
(declare-fun eff$ ()Rule_state_state_fset_bool_fun_fun_fun$ )
(declare-fun rsa$ ()Rule_stream$ )
(declare-fun cont$ (State_rule_prod_tree$ )State_rule_prod_tree_fset$ )
(declare-fun root$ (State_rule_prod_tree$ )State_rule_prod$ )
(declare-fun trim$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )Rule_stream$ )
(declare-fun ipath$ (State_rule_prod_tree$ State_rule_prod_stream$ )Bool )
(declare-fun sdrop$ (Nat$ Rule_stream$ )Rule_stream$ )
(declare-fun steps$ ()State_rule_prod_stream$ )
(declare-fun member$ (State$ State_set$ )Bool )
(declare-fun mkTree$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule_stream$ State$ )State_rule_prod_tree$ )
(declare-fun sdrop$a (Nat$ State_rule_prod_stream$ )State_rule_prod_stream$ )
(declare-fun stepsa$ ()State_rule_prod_stream$ )
(declare-fun thesis$ ()Bool )
(declare-fun enabled$ (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ State$ )Bool )
(declare-fun fmember$ (State$ State_fset$ )Bool )
(declare-fun fun_app$ (State_fset_bool_fun$ State_fset$ )Bool )
(declare-fun fmember$a (State_rule_prod_tree$ State_rule_prod_tree_fset$ )Bool )
(declare-fun fun_app$a (State_state_fset_bool_fun_fun$ State$ )State_fset_bool_fun$ )
(declare-fun fun_app$b (Rule_state_state_fset_bool_fun_fun_fun$ Rule$ )State_state_fset_bool_fun_fun$ )
(declare-fun fun_app$c (State_rule_prod_stream_bool_fun$ State_rule_prod_stream$ )Bool )
(declare-fun fun_app$d (State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ State_rule_prod_stream$ )State_rule_prod_stream_bool_fun$ )
(declare-fun fun_app$e (Rule_stream_bool_fun$ Rule_stream$ )Bool )
(declare-fun fun_app$f (Rule_stream_rule_stream_bool_fun_fun$ Rule_stream$ )Rule_stream_bool_fun$ )
(assert (! (not thesis$ ):named a0 ))
(assert (! (forall ((?v0 State_fset$ )(?v1 State$ ))(=> (and (fun_app$ (fun_app$a (fun_app$b eff$ (shd$ (trim$ eff$ (sdrop$ n$ rsa$ )s$ )))s$ )?v0 )(and (fmember$ ?v1 ?v0 )(= t$ (mkTree$ eff$ (stl$ (trim$ eff$ (sdrop$ n$ rsa$ )s$ ))?v1 ))))thesis$ )):named a1 ))
(assert (! (member$ s$a s$b ):named a2 ))
(assert (! (member$ s$ s$b ):named a3 ))
(assert (! (exists ((?v0 State_fset$ )(?v1 State$ ))(and (member$ ?v1 s$b )(and (fun_app$ (fun_app$a (fun_app$b eff$ (shd$ (trim$ eff$ (sdrop$ n$ rsa$ )s$ )))s$ )?v0 )(and (fmember$ ?v1 ?v0 )(= t$ (mkTree$ eff$ (stl$ (trim$ eff$ (sdrop$ n$ rsa$ )s$ ))?v1 )))))):named a4 ))
(assert (! (fmember$a t$ (cont$ (mkTree$ eff$ (sdrop$ n$ rsa$ )s$ ))):named a5 ))
(assert (! (forall ((?v0 Rule$ )(?v1 State$ ))(! (= (enabled$ eff$ ?v0 ?v1 )(exists ((?v2 State_fset$ ))(fun_app$ (fun_app$a (fun_app$b eff$ ?v0 )?v1 )?v2 ))):pattern ((enabled$ eff$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 State_rule_prod_stream$ ))(= (sdrop$a ?v0 (stl$a ?v1 ))(stl$a (sdrop$a ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Rule_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a8 ))
(assert (! (forall ((?v0 State_rule_prod_stream$ )(?v1 State_rule_prod_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 Rule_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_stream$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$c (fun_app$d ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a11 ))
(assert (! (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(=> (and (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 Rule_stream$ )(?v4 Rule_stream$ ))(=> (fun_app$e (fun_app$f ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$e (fun_app$f ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a12 ))
(assert (! (forall ((?v0 State_rule_prod_stream_state_rule_prod_stream_bool_fun_fun$ )(?v1 State_rule_prod_stream$ )(?v2 State_rule_prod_stream$ ))(=> (and (fun_app$c (fun_app$d ?v0 ?v1 )?v2 )(forall ((?v3 State_rule_prod_stream$ )(?v4 State_rule_prod_stream$ ))(=> (fun_app$c (fun_app$d ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$c (fun_app$d ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a13 ))
(assert (! (forall ((?v0 Rule_stream_rule_stream_bool_fun_fun$ )(?v1 Rule_stream$ )(?v2 Rule_stream$ ))(=> (and (fun_app$e (fun_app$f ?v0 ?v1 )?v2 )(forall ((?v3 Rule_stream$ )(?v4 Rule_stream$ ))(=> (fun_app$e (fun_app$f ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$e (fun_app$f ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a14 ))
(assert (! (ipath$ (mkTree$ eff$ (sdrop$ n$ rsa$ )s$ )(sdrop$a ma$ stepsa$ )):named a15 ))
(assert (! (forall ((?v0 Rule_stream$ )(?v1 State$ ))(= (root$ (mkTree$ eff$ ?v0 ?v1 ))(pair$ ?v1 (shd$ (trim$ eff$ ?v0 ?v1 ))))):named a16 ))
(assert (! (ipath$ (mkTree$ eff$ rs$ s$a )steps$ ):named a17 ))
(assert (! (forall ((?v0 Bool )(?v1 State$ )(?v2 State$ )(?v3 State_fset$ ))(= (fmember$ (ite ?v0 ?v1 ?v2 )?v3 )(and (=> ?v0 (fmember$ ?v1 ?v3 ))(=> (not ?v0 )(fmember$ ?v2 ?v3 ))))):named a18 ))
(assert (! (forall ((?v0 Bool )(?v1 State_rule_prod_tree$ )(?v2 State_rule_prod_tree$ )(?v3 State_rule_prod_tree_fset$ ))(= (fmember$a (ite ?v0 ?v1 ?v2 )?v3 )(and (=> ?v0 (fmember$a ?v1 ?v3 ))(=> (not ?v0 )(fmember$a ?v2 ?v3 ))))):named a19 ))
(assert (! (forall ((?v0 State$ )(?v1 Bool )(?v2 State_fset$ )(?v3 State_fset$ ))(= (fmember$ ?v0 (ite ?v1 ?v2 ?v3 ))(and (=> ?v1 (fmember$ ?v0 ?v2 ))(=> (not ?v1 )(fmember$ ?v0 ?v3 ))))):named a20 ))
(assert (! (forall ((?v0 State_rule_prod_tree$ )(?v1 Bool )(?v2 State_rule_prod_tree_fset$ )(?v3 State_rule_prod_tree_fset$ ))(= (fmember$a ?v0 (ite ?v1 ?v2 ?v3 ))(and (=> ?v1 (fmember$a ?v0 ?v2 ))(=> (not ?v1 )(fmember$a ?v0 ?v3 ))))):named a21 ))
(assert (! (forall ((?v0 State_fset$ )(?v1 State_fset$ ))(=> (forall ((?v2 State$ ))(= (fmember$ ?v2 ?v0 )(fmember$ ?v2 ?v1 )))(= ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 State_rule_prod_tree_fset$ )(?v1 State_rule_prod_tree_fset$ ))(=> (forall ((?v2 State_rule_prod_tree$ ))(= (fmember$a ?v2 ?v0 )(fmember$a ?v2 ?v1 )))(= ?v0 ?v1 ))):named a23 ))
(assert (! (= (root$ (mkTree$ eff$ (sdrop$ n$ rsa$ )s$ ))(shd$a (sdrop$a ma$ stepsa$ ))):named a24 ))
(assert (! (=> (forall ((?v0 Nat$ )(?v1 State$ ))(=> (and (member$ ?v1 s$b )(ipath$ (mkTree$ eff$ (sdrop$ ?v0 rsa$ )?v1 )(sdrop$a ma$ stepsa$ )))false ))false ):named a25 ))
(check-sat )
(get-unsat-core )
