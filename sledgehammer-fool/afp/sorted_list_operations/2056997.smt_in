(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_a_list_a_list_fun_fun$ 0 )
(declare-sort A_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun l1$ ()A_list$ )
(declare-fun l2$ ()A_list$ )
(declare-fun x1$ ()A$ )
(declare-fun x2$ ()A$ )
(declare-fun l2a$ ()A_list$ )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun zipf$ (A_a_a_fun_fun$ )A_list_a_list_a_list_fun_fun$ )
(declare-fun shift$ (A_list_set$ A$ )A_list_set$ )
(declare-fun member$ (A_list$ A$ )Bool )
(declare-fun fun_app$ (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun member$a (A_list$ A_list_set$ )Bool )
(declare-fun fun_app$a (A_list_a_list_a_list_fun_fun$ A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun subset_sorted$ (A_list$ A_list$ )Bool )
(assert (! (not (= (= (cons$ x1$ l1$ )l2a$ )(and (subset_sorted$ (cons$ x1$ l1$ )l2a$ )(subset_sorted$ l2a$ (cons$ x1$ l1$ ))))):named a0 ))
(assert (! (= l2a$ (cons$ x2$ l2$ )):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(= (= l1$ ?v0 )(and (subset_sorted$ l1$ ?v0 )(subset_sorted$ ?v0 l1$ )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(=> (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (subset_sorted$ (cons$ ?v0 ?v1 )nil$ )false ):pattern ((cons$ ?v0 ?v1 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(! (= (subset_sorted$ (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(ite (less$ ?v0 ?v2 )false (ite (= ?v0 ?v2 )(subset_sorted$ ?v1 ?v3 )(subset_sorted$ (cons$ ?v0 ?v1 )?v3 )))):pattern ((subset_sorted$ (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))))):named a7 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (subset_sorted$ nil$ ?v0 )true ):pattern ((subset_sorted$ nil$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(! (= (member$ (cons$ ?v0 ?v1 )?v2 )(or (= ?v0 ?v2 )(member$ ?v1 ?v2 ))):pattern ((member$ (cons$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A$ ))(=> (member$a ?v0 (shift$ ?v1 ?v2 ))(member$a (cons$ ?v2 ?v0 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$ (fun_app$a (zipf$ ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(cons$ (fun_app$b (fun_app$c ?v0 ?v1 )?v3 )(fun_app$ (fun_app$a (zipf$ ?v0 )?v2 )?v4 ))):pattern ((fun_app$ (fun_app$a (zipf$ ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 Bool ))(=> (and (= (subset_sorted$ ?v0 ?v1 )?v2 )(and (forall ((?v3 A_list$ ))(=> (and (= ?v0 nil$ )(and (= ?v1 ?v3 )?v2 ))false ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(=> (and (= ?v0 (cons$ ?v3 ?v4 ))(and (= ?v1 nil$ )(not ?v2 )))false ))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (and (= ?v0 (cons$ ?v3 ?v4 ))(and (= ?v1 (cons$ ?v5 ?v6 ))(= ?v2 (ite (less$ ?v3 ?v5 )false (ite (= ?v3 ?v5 )(subset_sorted$ ?v4 ?v6 )(subset_sorted$ (cons$ ?v3 ?v4 )?v6 ))))))false )))))false )):named a12 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (subset_sorted$ ?v0 ?v1 )(and (forall ((?v2 A_list$ ))(=> (and (= ?v0 nil$ )(= ?v1 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_list$ )(?v4 A$ )(?v5 A_list$ ))(=> (and (= ?v0 (cons$ ?v2 ?v3 ))(and (= ?v1 (cons$ ?v4 ?v5 ))(ite (less$ ?v2 ?v4 )false (ite (= ?v2 ?v4 )(subset_sorted$ ?v3 ?v5 )(subset_sorted$ (cons$ ?v2 ?v3 )?v5 )))))false ))))false )):named a13 ))
(assert (! (forall ((?v0 A$ ))(! (= (member$ nil$ ?v0 )false ):pattern ((member$ nil$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(! (= (fun_app$ (fun_app$a (zipf$ ?v0 )nil$ )nil$ )nil$ ):pattern ((zipf$ ?v0 )))):named a15 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a16 ))
(check-sat )
(get-unsat-core )
