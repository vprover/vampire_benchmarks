(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_list_set$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_list_a_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_list_list_set$ 0 )
(declare-sort A_a_list_list_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_list_list_a_fun$ 0 )
(declare-sort A_a_a_list_fun_fun$ 0 )
(declare-sort A_a_list_a_fun_fun$ 0 )
(declare-sort A_list_a_a_fun_fun$ 0 )
(declare-sort A_list_list_list_set$ 0 )
(declare-sort A_list_a_list_list_fun$ 0 )
(declare-sort A_list_list_a_list_fun$ 0 )
(declare-sort A_a_a_list_list_fun_fun$ 0 )
(declare-sort A_a_list_a_list_fun_fun$ 0 )
(declare-sort A_a_list_list_a_fun_fun$ 0 )
(declare-sort A_list_a_a_list_fun_fun$ 0 )
(declare-sort A_list_a_list_a_fun_fun$ 0 )
(declare-sort A_list_a_list_list_list_fun$ 0 )
(declare-sort A_list_list_a_list_list_fun$ 0 )
(declare-sort A_list_list_list_a_list_fun$ 0 )
(declare-sort A_list_a_list_a_list_fun_fun$ 0 )
(declare-sort A_list_a_list_a_list_list_fun_fun$ 0 )
(declare-sort A_list_a_list_list_a_list_fun_fun$ 0 )
(declare-sort A_list_list_a_list_a_list_fun_fun$ 0 )
(declare-sort A_list_a_list_a_list_list_list_fun_fun$ 0 )
(declare-sort A_list_a_list_list_a_list_list_fun_fun$ 0 )
(declare-sort A_list_a_list_list_list_a_list_fun_fun$ 0 )
(declare-sort A_list_list_a_list_a_list_list_fun_fun$ 0 )
(declare-sort A_list_list_a_list_list_a_list_fun_fun$ 0 )
(declare-sort A_list_list_a_list_list_a_list_list_fun_fun$ 0 )
(declare-sort A_list$ 0)
(declare-sort A_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-sort A_list_list_list_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()A_list_list$)
(declare-fun hd$a (A_list_list$)A_list$)
(declare-fun tl$a (A_list_list$)A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$ )A_list_list$)
(declare-fun nil$b ()A_list_list_list$)
(declare-fun hd$b (A_list_list_list$)A_list_list$)
(declare-fun tl$b (A_list_list_list$)A_list_list_list$)
(declare-fun cons$b (A_list_list$ A_list_list_list$ )A_list_list_list$)
(declare-fun nil$c ()A_list_list_list_list$)
(declare-fun hd$c (A_list_list_list_list$)A_list_list_list$)
(declare-fun tl$c (A_list_list_list_list$)A_list_list_list_list$)
(declare-fun cons$c (A_list_list_list$ A_list_list_list_list$ )A_list_list_list_list$)
(declare-fun l1$ ()A_list$ )
(declare-fun x1$ ()A$ )
(declare-fun l2a$ ()A_list$ )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun zipf$ (A_a_a_fun_fun$ )A_list_a_list_a_list_fun_fun$ )
(declare-fun shift$ (A_list_list_list_set$ A_list_list$ )A_list_list_list_set$ )
(declare-fun zipf$a (A_a_a_list_fun_fun$ )A_list_a_list_a_list_list_fun_fun$ )
(declare-fun zipf$b (A_a_list_a_fun_fun$ )A_list_a_list_list_a_list_fun_fun$ )
(declare-fun zipf$c (A_list_a_a_fun_fun$ )A_list_list_a_list_a_list_fun_fun$ )
(declare-fun zipf$d (A_a_list_a_list_fun_fun$ )A_list_a_list_list_a_list_list_fun_fun$ )
(declare-fun zipf$e (A_list_a_a_list_fun_fun$ )A_list_list_a_list_a_list_list_fun_fun$ )
(declare-fun zipf$f (A_list_a_list_a_fun_fun$ )A_list_list_a_list_list_a_list_fun_fun$ )
(declare-fun zipf$g (A_list_a_list_a_list_fun_fun$ )A_list_list_a_list_list_a_list_list_fun_fun$ )
(declare-fun zipf$h (A_a_a_list_list_fun_fun$ )A_list_a_list_a_list_list_list_fun_fun$ )
(declare-fun zipf$i (A_a_list_list_a_fun_fun$ )A_list_a_list_list_list_a_list_fun_fun$ )
(declare-fun member$ (A_list_list_list$ A_list_list$ )Bool )
(declare-fun shift$a (A_list_list_set$ A_list$ )A_list_list_set$ )
(declare-fun shift$b (A_list_set$ A$ )A_list_set$ )
(declare-fun fun_app$ (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun member$a (A_list_list$ A_list$ )Bool )
(declare-fun member$b (A_list$ A$ )Bool )
(declare-fun member$c (A_list_list_list$ A_list_list_list_set$ )Bool )
(declare-fun member$d (A_list_list$ A_list_list_set$ )Bool )
(declare-fun member$e (A_list$ A_list_set$ )Bool )
(declare-fun fun_app$a (A_list_a_list_a_list_fun_fun$ A_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$b (A_a_fun$ A$ )A$ )
(declare-fun fun_app$c (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$d (A_list_a_list_list_fun$ A_list$ )A_list_list$ )
(declare-fun fun_app$e (A_list_a_list_a_list_list_fun_fun$ A_list$ )A_list_a_list_list_fun$ )
(declare-fun fun_app$f (A_a_list_fun$ A$ )A_list$ )
(declare-fun fun_app$g (A_a_a_list_fun_fun$ A$ )A_a_list_fun$ )
(declare-fun fun_app$h (A_list_list_a_list_fun$ A_list_list$ )A_list$ )
(declare-fun fun_app$i (A_list_a_list_list_a_list_fun_fun$ A_list$ )A_list_list_a_list_fun$ )
(declare-fun fun_app$j (A_list_a_fun$ A_list$ )A$ )
(declare-fun fun_app$k (A_a_list_a_fun_fun$ A$ )A_list_a_fun$ )
(declare-fun fun_app$l (A_list_list_a_list_a_list_fun_fun$ A_list_list$ )A_list_a_list_fun$ )
(declare-fun fun_app$m (A_list_a_a_fun_fun$ A_list$ )A_a_fun$ )
(declare-fun fun_app$n (A_list_list_a_list_list_fun$ A_list_list$ )A_list_list$ )
(declare-fun fun_app$o (A_list_a_list_list_a_list_list_fun_fun$ A_list$ )A_list_list_a_list_list_fun$ )
(declare-fun fun_app$p (A_a_list_a_list_fun_fun$ A$ )A_list_a_list_fun$ )
(declare-fun fun_app$q (A_list_list_a_list_a_list_list_fun_fun$ A_list_list$ )A_list_a_list_list_fun$ )
(declare-fun fun_app$r (A_list_a_a_list_fun_fun$ A_list$ )A_a_list_fun$ )
(declare-fun fun_app$s (A_list_list_a_list_list_a_list_fun_fun$ A_list_list$ )A_list_list_a_list_fun$ )
(declare-fun fun_app$t (A_list_a_list_a_fun_fun$ A_list$ )A_list_a_fun$ )
(declare-fun fun_app$u (A_list_list_a_list_list_a_list_list_fun_fun$ A_list_list$ )A_list_list_a_list_list_fun$ )
(declare-fun fun_app$v (A_list_a_list_list_list_fun$ A_list$ )A_list_list_list$ )
(declare-fun fun_app$w (A_list_a_list_a_list_list_list_fun_fun$ A_list$ )A_list_a_list_list_list_fun$ )
(declare-fun fun_app$x (A_a_list_list_fun$ A$ )A_list_list$ )
(declare-fun fun_app$y (A_a_a_list_list_fun_fun$ A$ )A_a_list_list_fun$ )
(declare-fun fun_app$z (A_list_list_list_a_list_fun$ A_list_list_list$ )A_list$ )
(declare-fun fun_app$aa (A_list_a_list_list_list_a_list_fun_fun$ A_list$ )A_list_list_list_a_list_fun$ )
(declare-fun fun_app$ab (A_list_list_a_fun$ A_list_list$ )A$ )
(declare-fun fun_app$ac (A_a_list_list_a_fun_fun$ A$ )A_list_list_a_fun$ )
(declare-fun subset_sorted$ (A_list$ A_list$ )Bool )
(assert (! (not (= (= (cons$ x1$ l1$ )l2a$ )(and (subset_sorted$ (cons$ x1$ l1$ )l2a$ )(subset_sorted$ l2a$ (cons$ x1$ l1$ ))))):named a0 ))
(assert (! (forall ((?v0 A_list$ ))(= (= l1$ ?v0 )(and (subset_sorted$ l1$ ?v0 )(subset_sorted$ ?v0 l1$ )))):named a1 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a2 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(= (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(=> (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ ))(not (= (cons$b ?v0 ?v1 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(not (= (cons$a ?v0 ?v1 )?v1 ))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (subset_sorted$ (cons$ ?v0 ?v1 )nil$ )false ):pattern ((cons$ ?v0 ?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(! (= (subset_sorted$ (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(ite (less$ ?v0 ?v2 )false (ite (= ?v0 ?v2 )(subset_sorted$ ?v1 ?v3 )(subset_sorted$ (cons$ ?v0 ?v1 )?v3 )))):pattern ((subset_sorted$ (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))))):named a12 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (subset_sorted$ nil$ ?v0 )true ):pattern ((subset_sorted$ nil$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list$ ))(! (= (member$ (cons$b ?v0 ?v1 )?v2 )(or (= ?v0 ?v2 )(member$ ?v1 ?v2 ))):pattern ((member$ (cons$b ?v0 ?v1 )?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ ))(! (= (member$a (cons$a ?v0 ?v1 )?v2 )(or (= ?v0 ?v2 )(member$a ?v1 ?v2 ))):pattern ((member$a (cons$a ?v0 ?v1 )?v2 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(! (= (member$b (cons$ ?v0 ?v1 )?v2 )(or (= ?v0 ?v2 )(member$b ?v1 ?v2 ))):pattern ((member$b (cons$ ?v0 ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 A_list_list_list$ )(?v1 A_list_list_list_set$ )(?v2 A_list_list$ ))(=> (member$c ?v0 (shift$ ?v1 ?v2 ))(member$c (cons$b ?v2 ?v0 )?v1 ))):named a17 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_set$ )(?v2 A_list$ ))(=> (member$d ?v0 (shift$a ?v1 ?v2 ))(member$d (cons$a ?v2 ?v0 )?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_set$ )(?v2 A$ ))(=> (member$e ?v0 (shift$b ?v1 ?v2 ))(member$e (cons$ ?v2 ?v0 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$ (fun_app$a (zipf$ ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(cons$ (fun_app$b (fun_app$c ?v0 ?v1 )?v3 )(fun_app$ (fun_app$a (zipf$ ?v0 )?v2 )?v4 ))):pattern ((fun_app$ (fun_app$a (zipf$ ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a20 ))
(assert (! (forall ((?v0 A_a_a_list_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$d (fun_app$e (zipf$a ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(cons$a (fun_app$f (fun_app$g ?v0 ?v1 )?v3 )(fun_app$d (fun_app$e (zipf$a ?v0 )?v2 )?v4 ))):pattern ((fun_app$d (fun_app$e (zipf$a ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a21 ))
(assert (! (forall ((?v0 A_a_list_a_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list_list$ ))(! (= (fun_app$h (fun_app$i (zipf$b ?v0 )(cons$ ?v1 ?v2 ))(cons$a ?v3 ?v4 ))(cons$ (fun_app$j (fun_app$k ?v0 ?v1 )?v3 )(fun_app$h (fun_app$i (zipf$b ?v0 )?v2 )?v4 ))):pattern ((fun_app$h (fun_app$i (zipf$b ?v0 )(cons$ ?v1 ?v2 ))(cons$a ?v3 ?v4 ))))):named a22 ))
(assert (! (forall ((?v0 A_list_a_a_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$ (fun_app$l (zipf$c ?v0 )(cons$a ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(cons$ (fun_app$b (fun_app$m ?v0 ?v1 )?v3 )(fun_app$ (fun_app$l (zipf$c ?v0 )?v2 )?v4 ))):pattern ((fun_app$ (fun_app$l (zipf$c ?v0 )(cons$a ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a23 ))
(assert (! (forall ((?v0 A_a_list_a_list_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A_list$ )(?v4 A_list_list$ ))(! (= (fun_app$n (fun_app$o (zipf$d ?v0 )(cons$ ?v1 ?v2 ))(cons$a ?v3 ?v4 ))(cons$a (fun_app$ (fun_app$p ?v0 ?v1 )?v3 )(fun_app$n (fun_app$o (zipf$d ?v0 )?v2 )?v4 ))):pattern ((fun_app$n (fun_app$o (zipf$d ?v0 )(cons$ ?v1 ?v2 ))(cons$a ?v3 ?v4 ))))):named a24 ))
(assert (! (forall ((?v0 A_list_a_a_list_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$d (fun_app$q (zipf$e ?v0 )(cons$a ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(cons$a (fun_app$f (fun_app$r ?v0 ?v1 )?v3 )(fun_app$d (fun_app$q (zipf$e ?v0 )?v2 )?v4 ))):pattern ((fun_app$d (fun_app$q (zipf$e ?v0 )(cons$a ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a25 ))
(assert (! (forall ((?v0 A_list_a_list_a_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list$ )(?v4 A_list_list$ ))(! (= (fun_app$h (fun_app$s (zipf$f ?v0 )(cons$a ?v1 ?v2 ))(cons$a ?v3 ?v4 ))(cons$ (fun_app$j (fun_app$t ?v0 ?v1 )?v3 )(fun_app$h (fun_app$s (zipf$f ?v0 )?v2 )?v4 ))):pattern ((fun_app$h (fun_app$s (zipf$f ?v0 )(cons$a ?v1 ?v2 ))(cons$a ?v3 ?v4 ))))):named a26 ))
(assert (! (forall ((?v0 A_list_a_list_a_list_fun_fun$ )(?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list$ )(?v4 A_list_list$ ))(! (= (fun_app$n (fun_app$u (zipf$g ?v0 )(cons$a ?v1 ?v2 ))(cons$a ?v3 ?v4 ))(cons$a (fun_app$ (fun_app$a ?v0 ?v1 )?v3 )(fun_app$n (fun_app$u (zipf$g ?v0 )?v2 )?v4 ))):pattern ((fun_app$n (fun_app$u (zipf$g ?v0 )(cons$a ?v1 ?v2 ))(cons$a ?v3 ?v4 ))))):named a27 ))
(assert (! (forall ((?v0 A_a_a_list_list_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A$ )(?v4 A_list$ ))(! (= (fun_app$v (fun_app$w (zipf$h ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))(cons$b (fun_app$x (fun_app$y ?v0 ?v1 )?v3 )(fun_app$v (fun_app$w (zipf$h ?v0 )?v2 )?v4 ))):pattern ((fun_app$v (fun_app$w (zipf$h ?v0 )(cons$ ?v1 ?v2 ))(cons$ ?v3 ?v4 ))))):named a28 ))
(assert (! (forall ((?v0 A_a_list_list_a_fun_fun$ )(?v1 A$ )(?v2 A_list$ )(?v3 A_list_list$ )(?v4 A_list_list_list$ ))(! (= (fun_app$z (fun_app$aa (zipf$i ?v0 )(cons$ ?v1 ?v2 ))(cons$b ?v3 ?v4 ))(cons$ (fun_app$ab (fun_app$ac ?v0 ?v1 )?v3 )(fun_app$z (fun_app$aa (zipf$i ?v0 )?v2 )?v4 ))):pattern ((fun_app$z (fun_app$aa (zipf$i ?v0 )(cons$ ?v1 ?v2 ))(cons$b ?v3 ?v4 ))))):named a29 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 Bool ))(=> (and (= (subset_sorted$ ?v0 ?v1 )?v2 )(and (forall ((?v3 A_list$ ))(=> (and (= ?v0 nil$ )(and (= ?v1 ?v3 )?v2 ))false ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(=> (and (= ?v0 (cons$ ?v3 ?v4 ))(and (= ?v1 nil$ )(not ?v2 )))false ))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (and (= ?v0 (cons$ ?v3 ?v4 ))(and (= ?v1 (cons$ ?v5 ?v6 ))(= ?v2 (ite (less$ ?v3 ?v5 )false (ite (= ?v3 ?v5 )(subset_sorted$ ?v4 ?v6 )(subset_sorted$ (cons$ ?v3 ?v4 )?v6 ))))))false )))))false )):named a30 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (subset_sorted$ ?v0 ?v1 )(and (forall ((?v2 A_list$ ))(=> (and (= ?v0 nil$ )(= ?v1 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_list$ )(?v4 A$ )(?v5 A_list$ ))(=> (and (= ?v0 (cons$ ?v2 ?v3 ))(and (= ?v1 (cons$ ?v4 ?v5 ))(ite (less$ ?v2 ?v4 )false (ite (= ?v2 ?v4 )(subset_sorted$ ?v3 ?v5 )(subset_sorted$ (cons$ ?v2 ?v3 )?v5 )))))false ))))false )):named a31 ))
(assert (! (forall ((?v0 A_list_list$ ))(! (= (member$ nil$b ?v0 )false ):pattern ((member$ nil$b ?v0 )))):named a32 ))
(assert (! (forall ((?v0 A$ ))(! (= (member$b nil$ ?v0 )false ):pattern ((member$b nil$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (member$a nil$a ?v0 )false ):pattern ((member$a nil$a ?v0 )))):named a34 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ ))(! (= (fun_app$ (fun_app$a (zipf$ ?v0 )nil$ )nil$ )nil$ ):pattern ((zipf$ ?v0 )))):named a35 ))
(assert (! (forall ((?v0 A_a_a_list_fun_fun$ ))(! (= (fun_app$d (fun_app$e (zipf$a ?v0 )nil$ )nil$ )nil$a ):pattern ((zipf$a ?v0 )))):named a36 ))
(assert (! (forall ((?v0 A_a_list_a_fun_fun$ ))(! (= (fun_app$h (fun_app$i (zipf$b ?v0 )nil$ )nil$a )nil$ ):pattern ((zipf$b ?v0 )))):named a37 ))
(assert (! (forall ((?v0 A_list_a_a_fun_fun$ ))(! (= (fun_app$ (fun_app$l (zipf$c ?v0 )nil$a )nil$ )nil$ ):pattern ((zipf$c ?v0 )))):named a38 ))
(assert (! (forall ((?v0 A_a_list_a_list_fun_fun$ ))(! (= (fun_app$n (fun_app$o (zipf$d ?v0 )nil$ )nil$a )nil$a ):pattern ((zipf$d ?v0 )))):named a39 ))
(assert (! (forall ((?v0 A_list_a_a_list_fun_fun$ ))(! (= (fun_app$d (fun_app$q (zipf$e ?v0 )nil$a )nil$ )nil$a ):pattern ((zipf$e ?v0 )))):named a40 ))
(assert (! (forall ((?v0 A_list_a_list_a_fun_fun$ ))(! (= (fun_app$h (fun_app$s (zipf$f ?v0 )nil$a )nil$a )nil$ ):pattern ((zipf$f ?v0 )))):named a41 ))
(assert (! (forall ((?v0 A_list_a_list_a_list_fun_fun$ ))(! (= (fun_app$n (fun_app$u (zipf$g ?v0 )nil$a )nil$a )nil$a ):pattern ((zipf$g ?v0 )))):named a42 ))
(assert (! (forall ((?v0 A_a_a_list_list_fun_fun$ ))(! (= (fun_app$v (fun_app$w (zipf$h ?v0 )nil$ )nil$ )nil$b ):pattern ((zipf$h ?v0 )))):named a43 ))
(assert (! (forall ((?v0 A_a_list_list_a_fun_fun$ ))(! (= (fun_app$z (fun_app$aa (zipf$i ?v0 )nil$ )nil$b )nil$ ):pattern ((zipf$i ?v0 )))):named a44 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a45 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a46 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a47 ))
(assert (! (forall ((?v0 A_list_list_list_list$ ))(=> (and (=> (= ?v0 nil$c )false )(and (forall ((?v1 A_list_list_list_list$ ))(=> (= ?v0 (cons$c nil$b ?v1 ))false ))(forall ((?v1 A_list_list$ )(?v2 A_list_list_list$ )(?v3 A_list_list_list_list$ ))(=> (= ?v0 (cons$c (cons$b ?v1 ?v2 )?v3 ))false ))))false )):named a48 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_list_list_list$ ))(=> (= ?v0 (cons$b nil$a ?v1 ))false ))(forall ((?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (= ?v0 (cons$b (cons$a ?v1 ?v2 )?v3 ))false ))))false )):named a49 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_list_list$ ))(=> (= ?v0 (cons$a nil$ ?v1 ))false ))(forall ((?v1 A$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= ?v0 (cons$a (cons$ ?v1 ?v2 )?v3 ))false ))))false )):named a50 ))
(check-sat )
(get-unsat-core )
