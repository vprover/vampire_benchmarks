(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort A_list$ 0)
(declare-sort A_list_list$ 0)
(declare-sort A_list_list_list$ 0)
(declare-sort A_list_list_list_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun nil$a ()A_list_list$)
(declare-fun hd$a (A_list_list$)A_list$)
(declare-fun tl$a (A_list_list$)A_list_list$)
(declare-fun cons$a (A_list$ A_list_list$ )A_list_list$)
(declare-fun nil$b ()A_list_list_list$)
(declare-fun hd$b (A_list_list_list$)A_list_list$)
(declare-fun tl$b (A_list_list_list$)A_list_list_list$)
(declare-fun cons$b (A_list_list$ A_list_list_list$ )A_list_list_list$)
(declare-fun nil$c ()A_list_list_list_list$)
(declare-fun hd$c (A_list_list_list_list$)A_list_list_list$)
(declare-fun tl$c (A_list_list_list_list$)A_list_list_list_list$)
(declare-fun cons$c (A_list_list_list$ A_list_list_list_list$ )A_list_list_list_list$)
(declare-fun l1$ ()A_list$ )
(declare-fun x1$ ()A$ )
(declare-fun l2a$ ()A_list$ )
(declare-fun less$ (A$ A$ )Bool )
(declare-fun subset_sorted$ (A_list$ A_list$ )Bool )
(assert (! (not (= (= (cons$ x1$ l1$ )l2a$ )(and (subset_sorted$ (cons$ x1$ l1$ )l2a$ )(subset_sorted$ l2a$ (cons$ x1$ l1$ ))))):named a0 ))
(assert (! (= l2a$ nil$ ):named a1 ))
(assert (! (forall ((?v0 A_list$ ))(= (= l1$ ?v0 )(and (subset_sorted$ l1$ ?v0 )(subset_sorted$ ?v0 l1$ )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (subset_sorted$ (cons$ ?v0 ?v1 )nil$ )false ):pattern ((cons$ ?v0 ?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(= (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(= (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(= (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_list$ ))(! (= (subset_sorted$ nil$ ?v0 )true ):pattern ((subset_sorted$ nil$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (= (cons$b ?v0 ?v1 )(cons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= (cons$a ?v0 ?v1 )(cons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(=> (= (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ ))(not (= (cons$b ?v0 ?v1 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(not (= (cons$a ?v0 ?v1 )?v1 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= (cons$ ?v0 ?v1 )?v1 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ )(?v3 A_list$ ))(! (= (subset_sorted$ (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))(ite (less$ ?v0 ?v2 )false (ite (= ?v0 ?v2 )(subset_sorted$ ?v1 ?v3 )(subset_sorted$ (cons$ ?v0 ?v1 )?v3 )))):pattern ((subset_sorted$ (cons$ ?v0 ?v1 )(cons$ ?v2 ?v3 ))))):named a14 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 Bool ))(=> (and (= (subset_sorted$ ?v0 ?v1 )?v2 )(and (forall ((?v3 A_list$ ))(=> (and (= ?v0 nil$ )(and (= ?v1 ?v3 )?v2 ))false ))(and (forall ((?v3 A$ )(?v4 A_list$ ))(=> (and (= ?v0 (cons$ ?v3 ?v4 ))(and (= ?v1 nil$ )(not ?v2 )))false ))(forall ((?v3 A$ )(?v4 A_list$ )(?v5 A$ )(?v6 A_list$ ))(=> (and (= ?v0 (cons$ ?v3 ?v4 ))(and (= ?v1 (cons$ ?v5 ?v6 ))(= ?v2 (ite (less$ ?v3 ?v5 )false (ite (= ?v3 ?v5 )(subset_sorted$ ?v4 ?v6 )(subset_sorted$ (cons$ ?v3 ?v4 )?v6 ))))))false )))))false )):named a15 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (subset_sorted$ ?v0 ?v1 )(and (forall ((?v2 A_list$ ))(=> (and (= ?v0 nil$ )(= ?v1 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_list$ )(?v4 A$ )(?v5 A_list$ ))(=> (and (= ?v0 (cons$ ?v2 ?v3 ))(and (= ?v1 (cons$ ?v4 ?v5 ))(ite (less$ ?v2 ?v4 )false (ite (= ?v2 ?v4 )(subset_sorted$ ?v3 ?v5 )(subset_sorted$ (cons$ ?v2 ?v3 )?v5 )))))false ))))false )):named a16 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ ))(=> (and (not (subset_sorted$ ?v0 ?v1 ))(and (forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (= ?v0 (cons$ ?v2 ?v3 ))(= ?v1 nil$ ))false ))(forall ((?v2 A$ )(?v3 A_list$ )(?v4 A$ )(?v5 A_list$ ))(=> (and (= ?v0 (cons$ ?v2 ?v3 ))(and (= ?v1 (cons$ ?v4 ?v5 ))(not (ite (less$ ?v2 ?v4 )false (ite (= ?v2 ?v4 )(subset_sorted$ ?v3 ?v5 )(subset_sorted$ (cons$ ?v2 ?v3 )?v5 ))))))false ))))false )):named a17 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(= (not (= ?v0 nil$b ))(exists ((?v1 A_list_list$ )(?v2 A_list_list_list$ ))(= ?v0 (cons$b ?v1 ?v2 ))))):named a18 ))
(assert (! (forall ((?v0 A_list_list$ ))(= (not (= ?v0 nil$a ))(exists ((?v1 A_list$ )(?v2 A_list_list$ ))(= ?v0 (cons$a ?v1 ?v2 ))))):named a19 ))
(assert (! (forall ((?v0 A_list$ ))(= (not (= ?v0 nil$ ))(exists ((?v1 A$ )(?v2 A_list$ ))(= ?v0 (cons$ ?v1 ?v2 ))))):named a20 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_list_list$ ))(=> (= ?v0 (cons$b ?v1 nil$b ))false ))(forall ((?v1 A_list_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (= ?v0 (cons$b ?v1 (cons$b ?v2 ?v3 )))false ))))false )):named a21 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_list$ ))(=> (= ?v0 (cons$a ?v1 nil$a ))false ))(forall ((?v1 A_list$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= ?v0 (cons$a ?v1 (cons$a ?v2 ?v3 )))false ))))false )):named a22 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(and (forall ((?v1 A$ ))(=> (= ?v0 (cons$ ?v1 nil$ ))false ))(forall ((?v1 A$ )(?v2 A$ )(?v3 A_list$ ))(=> (= ?v0 (cons$ ?v1 (cons$ ?v2 ?v3 )))false ))))false )):named a23 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(=> (not (= ?v0 nil$b ))false ))false )):named a24 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a25 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a26 ))
(assert (! (forall ((?v0 A_list_list_list_list$ ))(=> (and (=> (= ?v0 nil$c )false )(and (forall ((?v1 A_list_list_list_list$ ))(=> (= ?v0 (cons$c nil$b ?v1 ))false ))(forall ((?v1 A_list_list$ )(?v2 A_list_list_list$ )(?v3 A_list_list_list_list$ ))(=> (= ?v0 (cons$c (cons$b ?v1 ?v2 )?v3 ))false ))))false )):named a27 ))
(assert (! (forall ((?v0 A_list_list_list$ ))(=> (and (=> (= ?v0 nil$b )false )(and (forall ((?v1 A_list_list_list$ ))(=> (= ?v0 (cons$b nil$a ?v1 ))false ))(forall ((?v1 A_list$ )(?v2 A_list_list$ )(?v3 A_list_list_list$ ))(=> (= ?v0 (cons$b (cons$a ?v1 ?v2 )?v3 ))false ))))false )):named a28 ))
(assert (! (forall ((?v0 A_list_list$ ))(=> (and (=> (= ?v0 nil$a )false )(and (forall ((?v1 A_list_list$ ))(=> (= ?v0 (cons$a nil$ ?v1 ))false ))(forall ((?v1 A$ )(?v2 A_list$ )(?v3 A_list_list$ ))(=> (= ?v0 (cons$a (cons$ ?v1 ?v2 )?v3 ))false ))))false )):named a29 ))
(assert (! (forall ((?v0 A_list_list$ )(?v1 A_list_list_list$ ))(not (= nil$b (cons$b ?v0 ?v1 )))):named a30 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list_list$ ))(not (= nil$a (cons$a ?v0 ?v1 )))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(not (= nil$ (cons$ ?v0 ?v1 )))):named a32 ))
(check-sat )
(get-unsat-core )
