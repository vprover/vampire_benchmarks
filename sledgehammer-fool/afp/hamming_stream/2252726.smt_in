(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort Nat$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_llist_bool_fun$ 0 )
(declare-sort Nat_llist_nat_llist_bool_fun_fun$ 0 )
(declare-sort Nat_llist_nat_llist_nat_llist_bool_fun_fun_fun$ 0 )
(declare-sort Nat_llist$ 0)
(declare-fun lNil$ ()Nat_llist$)
(declare-fun lhd$ (Nat_llist$)Nat$)
(declare-fun ltl$ (Nat_llist$)Nat_llist$)
(declare-fun lCons$ (Nat$ Nat_llist$ )Nat_llist$)
(declare-fun uu$ ()Nat_llist_bool_fun$ )
(declare-fun the$ (Nat_llist_bool_fun$ )Nat_llist$ )
(declare-fun uua$ (Nat_llist$ )Nat_llist_bool_fun$ )
(declare-fun uub$ (Nat_llist$ )Nat_llist_bool_fun$ )
(declare-fun uuc$ (Bool )Nat_llist_nat_llist_nat_llist_bool_fun_fun_fun$ )
(declare-fun lset$ (Nat_llist$ )Nat_set$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun smooth$ ()Nat_bool_fun$ )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_llist_bool_fun$ Nat_llist$ )Bool )
(declare-fun hamming$ ()Nat_llist$ )
(declare-fun less_eq$ (Nat_set$ Nat_set$ )Bool )
(declare-fun lsorted$ (Nat_llist$ )Bool )
(declare-fun fun_app$a (Nat_llist_nat_llist_bool_fun_fun$ Nat_llist$ )Nat_llist_bool_fun$ )
(declare-fun fun_app$b (Nat_llist_nat_llist_nat_llist_bool_fun_fun_fun$ Nat_llist$ )Nat_llist_nat_llist_bool_fun_fun$ )
(declare-fun fun_app$c (Nat_bool_fun$ Nat$ )Bool )
(declare-fun ldistinct$ (Nat_llist$ )Bool )
(assert (! (forall ((?v0 Nat_llist$ ))(! (= (fun_app$ uu$ ?v0 )(and (lsorted$ ?v0 )(and (ldistinct$ ?v0 )(= (lset$ ?v0 )(collect$ smooth$ ))))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 Bool )(?v1 Nat_llist$ )(?v2 Nat_llist$ )(?v3 Nat_llist$ ))(! (= (fun_app$ (fun_app$a (fun_app$b (uuc$ ?v0 )?v1 )?v2 )?v3 )(and (=> (= ?v0 true )(= ?v3 ?v1 ))(=> (= ?v0 false )(= ?v3 ?v2 )))):pattern ((fun_app$ (fun_app$a (fun_app$b (uuc$ ?v0 )?v1 )?v2 )?v3 )))):named a3 ))
(assert (! (not (= (the$ uu$ )hamming$ )):named a4 ))
(assert (! (= (lset$ hamming$ )(collect$ smooth$ )):named a5 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$c smooth$ ?v0 )(member$ ?v0 (lset$ hamming$ )))):named a6 ))
(assert (! (ldistinct$ hamming$ ):named a7 ))
(assert (! (lsorted$ hamming$ ):named a8 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (the$ (uua$ ?v0 ))?v0 )):named a9 ))
(assert (! (forall ((?v0 Nat_llist$ ))(= (the$ (uub$ ?v0 ))?v0 )):named a10 ))
(assert (! (forall ((?v0 Nat_llist_bool_fun$ )(?v1 Nat_llist$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 Nat_llist$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 ))))(= (the$ ?v0 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 Nat_llist$ )(?v1 Nat_llist$ ))(=> (and (lsorted$ ?v0 )(and (ldistinct$ ?v0 )(and (lsorted$ ?v1 )(and (ldistinct$ ?v1 )(= (lset$ ?v0 )(lset$ ?v1 ))))))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Bool )(?v1 Nat_llist$ )(?v2 Nat_llist$ ))(= (ite ?v0 ?v1 ?v2 )(the$ (fun_app$a (fun_app$b (uuc$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat_llist_bool_fun$ )(?v1 Nat_llist_bool_fun$ ))(=> (and (exists ((?v2 Nat_llist$ ))(and (fun_app$ ?v0 ?v2 )(forall ((?v3 Nat_llist$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v2 )))))(forall ((?v2 Nat_llist$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (the$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Nat_llist_bool_fun$ )(?v1 Nat_llist$ ))(=> (and (exists ((?v2 Nat_llist$ ))(and (fun_app$ ?v0 ?v2 )(forall ((?v3 Nat_llist$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v2 )))))(fun_app$ ?v0 ?v1 ))(= (the$ ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 Nat_llist_bool_fun$ ))(=> (exists ((?v1 Nat_llist$ ))(and (fun_app$ ?v0 ?v1 )(forall ((?v2 Nat_llist$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 )))))(fun_app$ ?v0 (the$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Nat_llist_bool_fun$ )(?v1 Nat_llist$ )(?v2 Nat_llist_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(and (forall ((?v3 Nat_llist$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v1 )))(forall ((?v3 Nat_llist$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 )))))(fun_app$ ?v2 (the$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Nat_llist_bool_fun$ )(?v1 Nat_llist$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 Nat_llist$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 ))))(fun_app$ ?v0 (the$ ?v0 )))):named a18 ))
(assert (! (less_eq$ (lset$ hamming$ )(collect$ smooth$ )):named a19 ))
(assert (! (forall ((?v0 Nat_llist_bool_fun$ )(?v1 Nat_llist$ ))(=> (= ?v0 (uua$ ?v1 ))(= (the$ ?v0 )?v1 ))):named a20 ))
(check-sat )
(get-unsat-core )
