(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Natural$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Unit_b_fun$ 0 )
(declare-sort Bool_nat_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort A_b_tllist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun select$ (Char$)Nibble$)
(declare-fun selecta$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun x$ ()A$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun size$ (Char$ )Nat$ )
(declare-fun tnth$ (A_b_tllist$ Nat$ )A$ )
(declare-fun zero$ ()Nat$ )
(declare-fun size$a (Natural$ )Nat$ )
(declare-fun zero$a ()Natural$ )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun tappend$ (A_b_tllist$ B_a_b_tllist_fun$ )A_b_tllist$ )
(declare-fun tfilter$ (Unit_b_fun$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun fun_app$a (Bool_nat_fun$ Bool )Nat$ )
(declare-fun rec_bool$ (Nat$ Nat$ )Bool_nat_fun$ )
(declare-fun tfilter$a (B$ A_bool_fun$ A_b_tllist$ )A_b_tllist$ )
(declare-fun size_bool$ ()Bool_nat_fun$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun pred_tllist$ (A_bool_fun$ B_bool_fun$ A_b_tllist$ )Bool )
(declare-fun size_natural$ (Natural$ )Nat$ )
(assert (! (not (= (tnth$ (tCons$ x$ xs$ )zero$ )x$ )):named a0 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 A$ )(?v3 A_b_tllist$ ))(= (= (tCons$ ?v0 ?v1 )(tCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a1 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(and (fun_app$ ?v0 ?v2 )(pred_tllist$ ?v0 ?v1 ?v3 ))):pattern ((pred_tllist$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a2 ))
(assert (! (= zero$ zero$ ):named a3 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a5 ))
(assert (! (forall ((?v0 Natural$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a6 ))
(assert (! (forall ((?v0 Unit_b_fun$ )(?v1 A_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))(ite (fun_app$ ?v1 ?v2 )(tCons$ ?v2 (tfilter$ ?v0 ?v1 ?v3 ))(tfilter$ ?v0 ?v1 ?v3 ))):pattern ((tfilter$ ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a7 ))
(assert (! (forall ((?v0 B$ )(?v1 A_bool_fun$ )(?v2 A$ )(?v3 A_b_tllist$ ))(! (= (tfilter$a ?v0 ?v1 (tCons$ ?v2 ?v3 ))(ite (fun_app$ ?v1 ?v2 )(tCons$ ?v2 (tfilter$a ?v0 ?v1 ?v3 ))(tfilter$a ?v0 ?v1 ?v3 ))):pattern ((tfilter$a ?v0 ?v1 (tCons$ ?v2 ?v3 ))))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_tllist$ )(?v2 B_a_b_tllist_fun$ ))(! (= (tappend$ (tCons$ ?v0 ?v1 )?v2 )(tCons$ ?v0 (tappend$ ?v1 ?v2 ))):pattern ((tappend$ (tCons$ ?v0 ?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a10 ))
(assert (! (= (fun_app$a size_bool$ true )zero$ ):named a11 ))
(assert (! (= (fun_app$a size_bool$ false )zero$ ):named a12 ))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$ )):named a13 ))
(assert (! (= (size_natural$ zero$a )zero$ ):named a14 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size$ ?v0 )zero$ ):pattern ((size$ ?v0 )))):named a15 ))
(assert (! (= (size$a zero$a )zero$ ):named a16 ))
(check-sat )
(get-unsat-core )
