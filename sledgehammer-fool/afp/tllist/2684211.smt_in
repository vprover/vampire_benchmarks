(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort E$ 0 )
(declare-sort F$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort E_bool_fun$ 0 )
(declare-sort F_bool_fun$ 0 )
(declare-sort C_a_llist_fun$ 0 )
(declare-sort D_b_llist_fun$ 0 )
(declare-sort E_a_llist_fun$ 0 )
(declare-sort F_b_llist_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_llist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_c_c_fun_fun$ 0 )
(declare-sort A_llist_e_c_fun_fun$ 0 )
(declare-sort B_llist_b_llist_fun$ 0 )
(declare-sort B_llist_d_d_fun_fun$ 0 )
(declare-sort C_a_llist_c_prod_fun$ 0 )
(declare-sort C_a_llist_e_prod_fun$ 0 )
(declare-sort D_b_llist_d_prod_fun$ 0 )
(declare-sort D_b_llist_f_prod_fun$ 0 )
(declare-sort E_a_llist_c_prod_fun$ 0 )
(declare-sort E_a_llist_e_prod_fun$ 0 )
(declare-sort A_llist_c_bool_fun_fun$ 0 )
(declare-sort A_llist_e_bool_fun_fun$ 0 )
(declare-sort B_llist_d_bool_fun_fun$ 0 )
(declare-sort B_llist_f_bool_fun_fun$ 0 )
(declare-sort B_llist_d_prod_bool_fun$ 0 )
(declare-sort B_llist_f_prod_bool_fun$ 0 )
(declare-sort A_llist_c_a_llist_fun_fun$ 0 )
(declare-sort A_llist_e_a_llist_fun_fun$ 0 )
(declare-sort B_llist_d_b_llist_fun_fun$ 0 )
(declare-sort B_llist_f_b_llist_fun_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_b_llist_bool_fun_fun$ 0 )
(declare-sort B_llist_d_prod_bool_fun_c_fun$ 0 )
(declare-sort C_b_llist_d_prod_bool_fun_fun$ 0 )
(declare-sort C_b_llist_f_prod_bool_fun_fun$ 0 )
(declare-sort E_b_llist_d_prod_bool_fun_fun$ 0 )
(declare-sort E_b_llist_f_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_c_a_llist_c_prod_fun_fun$ 0 )
(declare-sort A_llist_c_a_llist_e_prod_fun_fun$ 0 )
(declare-sort A_llist_e_a_llist_c_prod_fun_fun$ 0 )
(declare-sort A_llist_e_a_llist_e_prod_fun_fun$ 0 )
(declare-sort B_llist_d_b_llist_d_prod_fun_fun$ 0 )
(declare-sort C_a_llist_e_prod_fun_a_llist_e_prod_fun$ 0 )
(declare-sort D_b_llist_f_prod_fun_b_llist_f_prod_fun$ 0 )
(declare-sort A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_c_b_llist_f_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_e_b_llist_d_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_c_c_fun_fun_a_llist_c_c_fun_fun_fun$ 0 )
(declare-sort B_llist_d_d_fun_fun_b_llist_d_d_fun_fun_fun$ 0 )
(declare-sort C_a_llist_e_prod_fun_a_llist_e_prod_fun_c_fun$ 0 )
(declare-sort C_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ 0 )
(declare-sort D_d_b_llist_f_prod_fun_b_llist_f_prod_fun_fun$ 0 )
(declare-sort E_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ 0 )
(declare-sort B_llist_d_prod_bool_fun_b_llist_d_prod_bool_fun_fun$ 0 )
(declare-sort B_llist_f_prod_bool_fun_b_llist_f_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_c_a_llist_c_prod_fun_fun_a_llist_c_c_fun_fun_fun$ 0 )
(declare-sort A_llist_c_a_llist_e_prod_fun_fun_a_llist_c_c_fun_fun_fun$ 0 )
(declare-sort B_llist_d_b_llist_d_prod_fun_fun_b_llist_d_d_fun_fun_fun$ 0 )
(declare-sort A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ 0 )
(declare-sort A_llist_e_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ 0 )
(declare-sort B_llist_d_d_b_llist_f_prod_fun_b_llist_f_prod_fun_fun_fun$ 0 )
(declare-sort C_a_llist_e_prod_fun_a_llist_c_a_llist_e_prod_fun_fun_fun$ 0 )
(declare-sort A_llist_c_b_llist_d_prod_bool_fun_fun_fun_a_llist_c_c_fun_fun_fun$ 0 )
(declare-sort B_llist_d_prod_bool_fun_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ 0 )
(declare-sort C_a_llist_e_prod_fun_a_llist_e_prod_fun_b_llist_d_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun_a_llist_c_c_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort B_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()B_llist$)
(declare-fun lhd$a (B_llist$)B$)
(declare-fun ltl$a (B_llist$)B_llist$)
(declare-fun lCons$a (B$ B_llist$ )B_llist$)
(declare-sort B_llist_f_prod$ 0)
(declare-sort A_llist_e_prod$ 0)
(declare-sort A_llist_c_prod$ 0)
(declare-sort B_llist_d_prod$ 0)
(declare-fun fst$ (B_llist_f_prod$)B_llist$)
(declare-fun snd$ (B_llist_f_prod$)F$)
(declare-fun pair$ (B_llist$ F$ )B_llist_f_prod$)
(declare-fun fst$a (A_llist_e_prod$)A_llist$)
(declare-fun snd$a (A_llist_e_prod$)E$)
(declare-fun pair$a (A_llist$ E$ )A_llist_e_prod$)
(declare-fun fst$b (A_llist_c_prod$)A_llist$)
(declare-fun snd$b (A_llist_c_prod$)C$)
(declare-fun pair$b (A_llist$ C$ )A_llist_c_prod$)
(declare-fun fst$c (B_llist_d_prod$)B_llist$)
(declare-fun snd$c (B_llist_d_prod$)D$)
(declare-fun pair$c (B_llist$ D$ )B_llist_d_prod$)
(declare-fun pa$ ()A_b_bool_fun_fun$ )
(declare-fun qa$ (C$ D$ )Bool )
(declare-fun ra$ (E$ F$ )Bool )
(declare-fun uu$ (A_llist$ E$ )B_llist_f_bool_fun_fun$ )
(declare-fun uua$ ()A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )
(declare-fun uub$ ()A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )
(declare-fun uuc$ ()B_llist_d_d_b_llist_f_prod_fun_b_llist_f_prod_fun_fun_fun$ )
(declare-fun uud$ (A_llist$ C$ )B_llist_d_bool_fun_fun$ )
(declare-fun uue$ ()A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )
(declare-fun uuf$ ()A_llist_c_c_fun_fun$ )
(declare-fun uug$ ()B_llist_d_d_fun_fun$ )
(declare-fun uuh$ (Bool A_llist_e_bool_fun_fun$ )A_llist_e_bool_fun_fun$ )
(declare-fun uui$ (Bool A_llist_c_bool_fun_fun$ )A_llist_c_bool_fun_fun$ )
(declare-fun uuj$ ()B_llist_f_b_llist_fun_fun$ )
(declare-fun uuk$ ()A_llist_e_a_llist_fun_fun$ )
(declare-fun uul$ ()A_llist_c_a_llist_fun_fun$ )
(declare-fun uum$ ()B_llist_d_b_llist_fun_fun$ )
(declare-fun uun$ (A_llist_e_b_llist_d_prod_bool_fun_fun_fun$ B_llist_d_prod$ )A_llist_e_bool_fun_fun$ )
(declare-fun uuo$ (A_llist_e_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ C_a_llist_e_prod_fun$ )A_llist_e_a_llist_e_prod_fun_fun$ )
(declare-fun uup$ (A_llist_c_b_llist_f_prod_bool_fun_fun_fun$ B_llist_f_prod$ )A_llist_c_bool_fun_fun$ )
(declare-fun uuq$ (A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ B_llist_f_prod$ )A_llist_e_bool_fun_fun$ )
(declare-fun uur$ (A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ B_llist_d_prod$ )A_llist_c_bool_fun_fun$ )
(declare-fun uus$ (A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )C_a_llist_e_prod_fun_a_llist_c_a_llist_e_prod_fun_fun_fun$ )
(declare-fun uut$ (B_b_bool_fun_fun$ B_b_bool_fun_fun$ )B_b_bool_fun_fun$ )
(declare-fun uuu$ (B_a_bool_fun_fun$ B_a_bool_fun_fun$ )B_a_bool_fun_fun$ )
(declare-fun uuv$ (A_a_bool_fun_fun$ A_a_bool_fun_fun$ )A_a_bool_fun_fun$ )
(declare-fun uuw$ (A_b_bool_fun_fun$ A_b_bool_fun_fun$ )A_b_bool_fun_fun$ )
(declare-fun uux$ (B_llist_d_d_fun_fun$ )B_llist_d_b_llist_d_prod_fun_fun_b_llist_d_d_fun_fun_fun$ )
(declare-fun uuy$ (A_llist_c_c_fun_fun$ )A_llist_c_a_llist_c_prod_fun_fun_a_llist_c_c_fun_fun_fun$ )
(declare-fun uuz$ (A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ A_llist_e_a_llist_e_prod_fun_fun$ )A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )
(declare-fun uva$ (A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ A_llist_c_a_llist_c_prod_fun_fun$ )A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )
(declare-fun uvb$ (A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ A_llist_c_a_llist_c_prod_fun_fun$ )A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )
(declare-fun uvc$ (A_llist_e_c_fun_fun$ )A_llist_c_a_llist_e_prod_fun_fun_a_llist_c_c_fun_fun_fun$ )
(declare-fun uvd$ (A_llist_e_bool_fun_fun$ A_llist_e_a_llist_e_prod_fun_fun$ )A_llist_e_bool_fun_fun$ )
(declare-fun uve$ (A_llist_e_bool_fun_fun$ A_llist_c_a_llist_e_prod_fun_fun$ )A_llist_c_bool_fun_fun$ )
(declare-fun uvf$ (A_llist_c_bool_fun_fun$ A_llist_e_a_llist_c_prod_fun_fun$ )A_llist_e_bool_fun_fun$ )
(declare-fun uvg$ (A_llist_c_bool_fun_fun$ A_llist_c_a_llist_c_prod_fun_fun$ )A_llist_c_bool_fun_fun$ )
(declare-fun uvh$ (D_d_fun$ )B_llist_d_d_fun_fun_b_llist_d_d_fun_fun_fun$ )
(declare-fun uvi$ (C_c_fun$ )A_llist_c_c_fun_fun_a_llist_c_c_fun_fun_fun$ )
(declare-fun uvj$ (B_llist_d_prod_bool_fun_c_fun$ )A_llist_c_b_llist_d_prod_bool_fun_fun_fun_a_llist_c_c_fun_fun_fun$ )
(declare-fun uvk$ (C_b_llist_d_prod_bool_fun_fun$ A_llist_c_c_fun_fun$ )A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )
(declare-fun uvl$ (B_llist_f_prod_bool_fun_b_llist_f_prod_bool_fun_fun$ A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )
(declare-fun uvm$ (B_llist_d_prod_bool_fun_b_llist_d_prod_bool_fun_fun$ A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )
(declare-fun uvn$ (C_a_llist_e_prod_fun_a_llist_e_prod_fun_c_fun$ )A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun_a_llist_c_c_fun_fun_fun$ )
(declare-fun uvo$ (C_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ A_llist_c_c_fun_fun$ )A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )
(declare-fun uvp$ (B_llist_d_prod_bool_fun_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )
(declare-fun uvq$ (C_a_llist_e_prod_fun_a_llist_e_prod_fun_b_llist_d_prod_bool_fun_fun$ A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )
(declare-fun uvr$ ()B_b_bool_fun_fun$ )
(declare-fun uvs$ ()B_llist_b_llist_bool_fun_fun$ )
(declare-fun uvt$ ()A_a_bool_fun_fun$ )
(declare-fun uvu$ ()A_llist_a_llist_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist_c_prod$ )
(declare-fun ysa$ ()B_llist_d_prod$ )
(declare-fun xs_a$ ()C_a_llist_e_prod_fun$ )
(declare-fun ys_a$ ()D_b_llist_f_prod_fun$ )
(declare-fun apfst$ (B_llist_b_llist_fun$ B_llist_f_prod$ )B_llist_f_prod$ )
(declare-fun apfst$a (A_llist_a_llist_fun$ A_llist_e_prod$ )A_llist_e_prod$ )
(declare-fun apfst$b (A_llist_a_llist_fun$ A_llist_c_prod$ )A_llist_c_prod$ )
(declare-fun apfst$c (B_llist_b_llist_fun$ B_llist_d_prod$ )B_llist_d_prod$ )
(declare-fun fun_app$ (D_d_fun$ D$ )D$ )
(declare-fun lappend$ (B_llist$ )B_llist_b_llist_fun$ )
(declare-fun lfinite$ (B_llist$ )Bool )
(declare-fun fun_app$a (B_llist_d_d_fun_fun$ B_llist$ )D_d_fun$ )
(declare-fun fun_app$b (C_c_fun$ C$ )C$ )
(declare-fun fun_app$c (A_llist_c_c_fun_fun$ A_llist$ )C_c_fun$ )
(declare-fun fun_app$d (B_llist_bool_fun$ B_llist$ )Bool )
(declare-fun fun_app$e (B_llist_b_llist_bool_fun_fun$ B_llist$ )B_llist_bool_fun$ )
(declare-fun fun_app$f (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$g (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$j (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$k (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$l (C_b_llist_d_prod_bool_fun_fun$ C$ )B_llist_d_prod_bool_fun$ )
(declare-fun fun_app$m (A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ A_llist$ )C_b_llist_d_prod_bool_fun_fun$ )
(declare-fun fun_app$n (E_b_llist_f_prod_bool_fun_fun$ E$ )B_llist_f_prod_bool_fun$ )
(declare-fun fun_app$o (A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ A_llist$ )E_b_llist_f_prod_bool_fun_fun$ )
(declare-fun fun_app$p (D_b_llist_f_prod_fun_b_llist_f_prod_fun$ D_b_llist_f_prod_fun$ )B_llist_f_prod$ )
(declare-fun fun_app$q (D_d_b_llist_f_prod_fun_b_llist_f_prod_fun_fun$ D$ )D_b_llist_f_prod_fun_b_llist_f_prod_fun$ )
(declare-fun fun_app$r (B_llist_d_d_b_llist_f_prod_fun_b_llist_f_prod_fun_fun_fun$ B_llist$ )D_d_b_llist_f_prod_fun_b_llist_f_prod_fun_fun$ )
(declare-fun fun_app$s (D_b_llist_f_prod_fun$ D$ )B_llist_f_prod$ )
(declare-fun fun_app$t (C_a_llist_e_prod_fun_a_llist_e_prod_fun$ C_a_llist_e_prod_fun$ )A_llist_e_prod$ )
(declare-fun fun_app$u (C_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ C$ )C_a_llist_e_prod_fun_a_llist_e_prod_fun$ )
(declare-fun fun_app$v (A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ A_llist$ )C_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ )
(declare-fun fun_app$w (C_a_llist_e_prod_fun$ C$ )A_llist_e_prod$ )
(declare-fun fun_app$x (E_bool_fun$ E$ )Bool )
(declare-fun fun_app$y (A_llist_e_bool_fun_fun$ A_llist$ )E_bool_fun$ )
(declare-fun fun_app$z (B_llist_f_prod_bool_fun$ B_llist_f_prod$ )Bool )
(declare-fun lappend$a (A_llist$ )A_llist_a_llist_fun$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun case_prod$ (B_llist_d_bool_fun_fun$ )B_llist_d_prod_bool_fun$ )
(declare-fun fun_app$aa (B_llist_d_prod_bool_fun$ B_llist_d_prod$ )Bool )
(declare-fun fun_app$ab (E_b_llist_d_prod_bool_fun_fun$ E$ )B_llist_d_prod_bool_fun$ )
(declare-fun fun_app$ac (A_llist_e_b_llist_d_prod_bool_fun_fun_fun$ A_llist$ )E_b_llist_d_prod_bool_fun_fun$ )
(declare-fun fun_app$ad (E_a_llist_e_prod_fun$ E$ )A_llist_e_prod$ )
(declare-fun fun_app$ae (A_llist_e_a_llist_e_prod_fun_fun$ A_llist$ )E_a_llist_e_prod_fun$ )
(declare-fun fun_app$af (E_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ E$ )C_a_llist_e_prod_fun_a_llist_e_prod_fun$ )
(declare-fun fun_app$ag (A_llist_e_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ A_llist$ )E_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ )
(declare-fun fun_app$ah (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$ai (A_llist_c_bool_fun_fun$ A_llist$ )C_bool_fun$ )
(declare-fun fun_app$aj (C_b_llist_f_prod_bool_fun_fun$ C$ )B_llist_f_prod_bool_fun$ )
(declare-fun fun_app$ak (A_llist_c_b_llist_f_prod_bool_fun_fun_fun$ A_llist$ )C_b_llist_f_prod_bool_fun_fun$ )
(declare-fun fun_app$al (A_llist_c_a_llist_e_prod_fun_fun$ A_llist$ )C_a_llist_e_prod_fun$ )
(declare-fun fun_app$am (C_a_llist_e_prod_fun_a_llist_c_a_llist_e_prod_fun_fun_fun$ C_a_llist_e_prod_fun$ )A_llist_c_a_llist_e_prod_fun_fun$ )
(declare-fun fun_app$an (F_bool_fun$ F$ )Bool )
(declare-fun fun_app$ao (B_llist_f_bool_fun_fun$ B_llist$ )F_bool_fun$ )
(declare-fun fun_app$ap (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$aq (B_llist_d_bool_fun_fun$ B_llist$ )D_bool_fun$ )
(declare-fun fun_app$ar (B_a_bool_fun_fun$ B$ )A_bool_fun$ )
(declare-fun fun_app$as (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$at (B_llist_d_b_llist_d_prod_fun_fun_b_llist_d_d_fun_fun_fun$ B_llist_d_b_llist_d_prod_fun_fun$ )B_llist_d_d_fun_fun$ )
(declare-fun fun_app$au (D_b_llist_d_prod_fun$ D$ )B_llist_d_prod$ )
(declare-fun fun_app$av (B_llist_d_b_llist_d_prod_fun_fun$ B_llist$ )D_b_llist_d_prod_fun$ )
(declare-fun fun_app$aw (A_llist_c_a_llist_e_prod_fun_fun_a_llist_c_c_fun_fun_fun$ A_llist_c_a_llist_e_prod_fun_fun$ )A_llist_c_c_fun_fun$ )
(declare-fun fun_app$ax (E_a_llist_c_prod_fun$ E$ )A_llist_c_prod$ )
(declare-fun fun_app$ay (A_llist_e_a_llist_c_prod_fun_fun$ A_llist$ )E_a_llist_c_prod_fun$ )
(declare-fun fun_app$az (C_a_llist_c_prod_fun$ C$ )A_llist_c_prod$ )
(declare-fun fun_app$ba (A_llist_c_a_llist_c_prod_fun_fun$ A_llist$ )C_a_llist_c_prod_fun$ )
(declare-fun fun_app$bb (A_llist_c_a_llist_c_prod_fun_fun_a_llist_c_c_fun_fun_fun$ A_llist_c_a_llist_c_prod_fun_fun$ )A_llist_c_c_fun_fun$ )
(declare-fun fun_app$bc (B_llist_f_prod_bool_fun_b_llist_f_prod_bool_fun_fun$ B_llist_f_prod_bool_fun$ )B_llist_f_prod_bool_fun$ )
(declare-fun fun_app$bd (B_llist_d_prod_bool_fun_b_llist_d_prod_bool_fun_fun$ B_llist_d_prod_bool_fun$ )B_llist_d_prod_bool_fun$ )
(declare-fun fun_app$be (B_llist_d_prod_bool_fun_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ B_llist_d_prod_bool_fun$ )C_a_llist_e_prod_fun_a_llist_e_prod_fun$ )
(declare-fun fun_app$bf (A_llist_c_b_llist_d_prod_bool_fun_fun_fun_a_llist_c_c_fun_fun_fun$ A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )A_llist_c_c_fun_fun$ )
(declare-fun fun_app$bg (B_llist_d_prod_bool_fun_c_fun$ B_llist_d_prod_bool_fun$ )C$ )
(declare-fun fun_app$bh (C_a_llist_e_prod_fun_a_llist_e_prod_fun_b_llist_d_prod_bool_fun_fun$ C_a_llist_e_prod_fun_a_llist_e_prod_fun$ )B_llist_d_prod_bool_fun$ )
(declare-fun fun_app$bi (A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun_a_llist_c_c_fun_fun_fun$ A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )A_llist_c_c_fun_fun$ )
(declare-fun fun_app$bj (C_a_llist_e_prod_fun_a_llist_e_prod_fun_c_fun$ C_a_llist_e_prod_fun_a_llist_e_prod_fun$ )C$ )
(declare-fun fun_app$bk (B_llist_d_d_fun_fun_b_llist_d_d_fun_fun_fun$ B_llist_d_d_fun_fun$ )B_llist_d_d_fun_fun$ )
(declare-fun fun_app$bl (A_llist_c_c_fun_fun_a_llist_c_c_fun_fun_fun$ A_llist_c_c_fun_fun$ )A_llist_c_c_fun_fun$ )
(declare-fun fun_app$bm (F_b_llist_fun$ F$ )B_llist$ )
(declare-fun fun_app$bn (B_llist_f_b_llist_fun_fun$ B_llist$ )F_b_llist_fun$ )
(declare-fun fun_app$bo (D_b_llist_fun$ D$ )B_llist$ )
(declare-fun fun_app$bp (B_llist_d_b_llist_fun_fun$ B_llist$ )D_b_llist_fun$ )
(declare-fun fun_app$bq (E_a_llist_fun$ E$ )A_llist$ )
(declare-fun fun_app$br (A_llist_e_a_llist_fun_fun$ A_llist$ )E_a_llist_fun$ )
(declare-fun fun_app$bs (C_a_llist_fun$ C$ )A_llist$ )
(declare-fun fun_app$bt (A_llist_c_a_llist_fun_fun$ A_llist$ )C_a_llist_fun$ )
(declare-fun fun_app$bu (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$bv (B_llist_b_llist_fun$ B_llist$ )B_llist$ )
(declare-fun undefined$ ()D$ )
(declare-fun case_prod$a (B_llist_f_bool_fun_fun$ )B_llist_f_prod_bool_fun$ )
(declare-fun case_prod$b (B_llist_d_d_fun_fun$ B_llist_d_prod$ )D$ )
(declare-fun case_prod$c (A_llist_e_bool_fun_fun$ A_llist_e_prod$ )Bool )
(declare-fun case_prod$d (A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ A_llist_e_prod$ )B_llist_f_prod_bool_fun$ )
(declare-fun case_prod$e (A_llist_e_c_fun_fun$ A_llist_e_prod$ )C$ )
(declare-fun case_prod$f (A_llist_c_bool_fun_fun$ A_llist_c_prod$ )Bool )
(declare-fun case_prod$g (A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ A_llist_c_prod$ )B_llist_d_prod_bool_fun$ )
(declare-fun case_prod$h (A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ A_llist_c_prod$ )C_a_llist_e_prod_fun_a_llist_e_prod_fun$ )
(declare-fun case_prod$i (A_llist_c_c_fun_fun$ A_llist_c_prod$ )C$ )
(declare-fun case_prod$j (B_llist_d_d_b_llist_f_prod_fun_b_llist_f_prod_fun_fun_fun$ B_llist_d_prod$ D_b_llist_f_prod_fun$ )B_llist_f_prod$ )
(declare-fun case_prod$k (B_llist_f_b_llist_fun_fun$ B_llist_f_prod$ )B_llist$ )
(declare-fun case_prod$l (A_llist_e_a_llist_fun_fun$ A_llist_e_prod$ )A_llist$ )
(declare-fun case_prod$m (A_llist_c_a_llist_fun_fun$ A_llist_c_prod$ )A_llist$ )
(declare-fun case_prod$n (B_llist_d_b_llist_fun_fun$ B_llist_d_prod$ )B_llist$ )
(declare-fun case_prod$o (A_llist_e_b_llist_d_prod_bool_fun_fun_fun$ A_llist_e_prod$ B_llist_d_prod$ )Bool )
(declare-fun case_prod$p (A_llist_e_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ A_llist_e_prod$ C_a_llist_e_prod_fun$ )A_llist_e_prod$ )
(declare-fun case_prod$q (A_llist_e_a_llist_e_prod_fun_fun$ A_llist_e_prod$ )A_llist_e_prod$ )
(declare-fun case_prod$r (A_llist_c_b_llist_f_prod_bool_fun_fun_fun$ A_llist_c_prod$ B_llist_f_prod$ )Bool )
(declare-fun case_prod$s (A_llist_c_a_llist_e_prod_fun_fun$ A_llist_c_prod$ )A_llist_e_prod$ )
(declare-fun case_prod$t (B_llist_d_b_llist_d_prod_fun_fun$ B_llist_d_prod$ )B_llist_d_prod$ )
(declare-fun case_prod$u (A_llist_c_a_llist_c_prod_fun_fun$ A_llist_c_prod$ )A_llist_c_prod$ )
(declare-fun case_prod$v (A_llist_e_a_llist_c_prod_fun_fun$ A_llist_e_prod$ )A_llist_c_prod$ )
(declare-fun llist_all2$ (A_b_bool_fun_fun$ A_llist$ B_llist$ )Bool )
(declare-fun undefined$a ()C$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ )A_llist_a_llist_bool_fun_fun$ )
(declare-fun llist_all2$b (B_a_bool_fun_fun$ B_llist$ A_llist$ )Bool )
(declare-fun llist_all2$c (B_b_bool_fun_fun$ )B_llist_b_llist_bool_fun_fun$ )
(assert (! (forall ((?v0 B_llist$ )(?v1 D$ ))(! (= (fun_app$ (fun_app$a uug$ ?v0 )?v1 )(ite (lfinite$ ?v0 )?v1 undefined$ )):pattern ((fun_app$ (fun_app$a uug$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C$ ))(! (= (fun_app$b (fun_app$c uuf$ ?v0 )?v1 )(ite (lfinite$a ?v0 )?v1 undefined$a )):pattern ((fun_app$b (fun_app$c uuf$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (= (fun_app$d (fun_app$e uvs$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$d (fun_app$e uvs$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (= (fun_app$f (fun_app$g uvu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$f (fun_app$g uvu$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$h (fun_app$i uvr$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uvr$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$j (fun_app$k uvt$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$j (fun_app$k uvt$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C$ ))(! (= (fun_app$l (fun_app$m uue$ ?v0 )?v1 )(case_prod$ (uud$ ?v0 ?v1 ))):pattern ((fun_app$l (fun_app$m uue$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 E$ ))(! (= (fun_app$n (fun_app$o uua$ ?v0 )?v1 )(case_prod$a (uu$ ?v0 ?v1 ))):pattern ((fun_app$n (fun_app$o uua$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 D$ )(?v2 D_b_llist_f_prod_fun$ ))(! (= (fun_app$p (fun_app$q (fun_app$r uuc$ ?v0 )?v1 )?v2 )(apfst$ (lappend$ ?v0 )(fun_app$s ?v2 ?v1 ))):pattern ((fun_app$p (fun_app$q (fun_app$r uuc$ ?v0 )?v1 )?v2 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C$ )(?v2 C_a_llist_e_prod_fun$ ))(! (= (fun_app$t (fun_app$u (fun_app$v uub$ ?v0 )?v1 )?v2 )(apfst$a (lappend$a ?v0 )(fun_app$w ?v2 ?v1 ))):pattern ((fun_app$t (fun_app$u (fun_app$v uub$ ?v0 )?v1 )?v2 )))):named a9 ))
(assert (! (forall ((?v0 A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )(?v1 B_llist_f_prod$ )(?v2 A_llist$ )(?v3 E$ ))(! (= (fun_app$x (fun_app$y (uuq$ ?v0 ?v1 )?v2 )?v3 )(fun_app$z (fun_app$n (fun_app$o ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$x (fun_app$y (uuq$ ?v0 ?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_llist_e_b_llist_d_prod_bool_fun_fun_fun$ )(?v1 B_llist_d_prod$ )(?v2 A_llist$ )(?v3 E$ ))(! (= (fun_app$x (fun_app$y (uun$ ?v0 ?v1 )?v2 )?v3 )(fun_app$aa (fun_app$ab (fun_app$ac ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$x (fun_app$y (uun$ ?v0 ?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 A_llist_e_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v1 C_a_llist_e_prod_fun$ )(?v2 A_llist$ )(?v3 E$ ))(! (= (fun_app$ad (fun_app$ae (uuo$ ?v0 ?v1 )?v2 )?v3 )(fun_app$t (fun_app$af (fun_app$ag ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$ad (fun_app$ae (uuo$ ?v0 ?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 A_llist_c_b_llist_f_prod_bool_fun_fun_fun$ )(?v1 B_llist_f_prod$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$ah (fun_app$ai (uup$ ?v0 ?v1 )?v2 )?v3 )(fun_app$z (fun_app$aj (fun_app$ak ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$ah (fun_app$ai (uup$ ?v0 ?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v1 B_llist_d_prod$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$ah (fun_app$ai (uur$ ?v0 ?v1 )?v2 )?v3 )(fun_app$aa (fun_app$l (fun_app$m ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$ah (fun_app$ai (uur$ ?v0 ?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v1 C_a_llist_e_prod_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$w (fun_app$al (fun_app$am (uus$ ?v0 )?v1 )?v2 )?v3 )(fun_app$t (fun_app$u (fun_app$v ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$w (fun_app$al (fun_app$am (uus$ ?v0 )?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 E$ )(?v2 B_llist$ )(?v3 F$ ))(! (= (fun_app$an (fun_app$ao (uu$ ?v0 ?v1 )?v2 )?v3 )(and (llist_all2$ pa$ ?v0 ?v2 )(=> (lfinite$a ?v0 )(ra$ ?v1 ?v3 )))):pattern ((fun_app$an (fun_app$ao (uu$ ?v0 ?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C$ )(?v2 B_llist$ )(?v3 D$ ))(! (= (fun_app$ap (fun_app$aq (uud$ ?v0 ?v1 )?v2 )?v3 )(and (llist_all2$ pa$ ?v0 ?v2 )(=> (lfinite$a ?v0 )(qa$ ?v1 ?v3 )))):pattern ((fun_app$ap (fun_app$aq (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$i (uut$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$h (fun_app$i ?v0 ?v2 )?v3 )(fun_app$h (fun_app$i ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$i (uut$ ?v0 ?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_a_bool_fun_fun$ )(?v2 B$ )(?v3 A$ ))(! (= (fun_app$j (fun_app$ar (uuu$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$j (fun_app$ar ?v0 ?v2 )?v3 )(fun_app$j (fun_app$ar ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$ar (uuu$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$as (uuw$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$h (fun_app$as ?v0 ?v2 )?v3 )(fun_app$h (fun_app$as ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$as (uuw$ ?v0 ?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$j (fun_app$k (uuv$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$j (fun_app$k ?v0 ?v2 )?v3 )(fun_app$j (fun_app$k ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uuv$ ?v0 ?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 B_llist_d_d_fun_fun$ )(?v1 B_llist_d_b_llist_d_prod_fun_fun$ )(?v2 B_llist$ )(?v3 D$ ))(! (= (fun_app$ (fun_app$a (fun_app$at (uux$ ?v0 )?v1 )?v2 )?v3 )(case_prod$b ?v0 (fun_app$au (fun_app$av ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (fun_app$at (uux$ ?v0 )?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_e_bool_fun_fun$ )(?v1 A_llist_e_a_llist_e_prod_fun_fun$ )(?v2 A_llist$ )(?v3 E$ ))(! (= (fun_app$x (fun_app$y (uvd$ ?v0 ?v1 )?v2 )?v3 )(case_prod$c ?v0 (fun_app$ad (fun_app$ae ?v1 ?v2 )?v3 ))):pattern ((fun_app$x (fun_app$y (uvd$ ?v0 ?v1 )?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_llist_e_bool_fun_fun$ )(?v1 A_llist_c_a_llist_e_prod_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$ah (fun_app$ai (uve$ ?v0 ?v1 )?v2 )?v3 )(case_prod$c ?v0 (fun_app$w (fun_app$al ?v1 ?v2 )?v3 ))):pattern ((fun_app$ah (fun_app$ai (uve$ ?v0 ?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )(?v1 A_llist_e_a_llist_e_prod_fun_fun$ )(?v2 A_llist$ )(?v3 E$ ))(! (= (fun_app$n (fun_app$o (uuz$ ?v0 ?v1 )?v2 )?v3 )(case_prod$d ?v0 (fun_app$ad (fun_app$ae ?v1 ?v2 )?v3 ))):pattern ((fun_app$n (fun_app$o (uuz$ ?v0 ?v1 )?v2 )?v3 )))):named a25 ))
(assert (! (forall ((?v0 A_llist_e_c_fun_fun$ )(?v1 A_llist_c_a_llist_e_prod_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$b (fun_app$c (fun_app$aw (uvc$ ?v0 )?v1 )?v2 )?v3 )(case_prod$e ?v0 (fun_app$w (fun_app$al ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$aw (uvc$ ?v0 )?v1 )?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 A_llist_c_bool_fun_fun$ )(?v1 A_llist_e_a_llist_c_prod_fun_fun$ )(?v2 A_llist$ )(?v3 E$ ))(! (= (fun_app$x (fun_app$y (uvf$ ?v0 ?v1 )?v2 )?v3 )(case_prod$f ?v0 (fun_app$ax (fun_app$ay ?v1 ?v2 )?v3 ))):pattern ((fun_app$x (fun_app$y (uvf$ ?v0 ?v1 )?v2 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 A_llist_c_bool_fun_fun$ )(?v1 A_llist_c_a_llist_c_prod_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$ah (fun_app$ai (uvg$ ?v0 ?v1 )?v2 )?v3 )(case_prod$f ?v0 (fun_app$az (fun_app$ba ?v1 ?v2 )?v3 ))):pattern ((fun_app$ah (fun_app$ai (uvg$ ?v0 ?v1 )?v2 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v1 A_llist_c_a_llist_c_prod_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$l (fun_app$m (uva$ ?v0 ?v1 )?v2 )?v3 )(case_prod$g ?v0 (fun_app$az (fun_app$ba ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uva$ ?v0 ?v1 )?v2 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v1 A_llist_c_a_llist_c_prod_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$u (fun_app$v (uvb$ ?v0 ?v1 )?v2 )?v3 )(case_prod$h ?v0 (fun_app$az (fun_app$ba ?v1 ?v2 )?v3 ))):pattern ((fun_app$u (fun_app$v (uvb$ ?v0 ?v1 )?v2 )?v3 )))):named a30 ))
(assert (! (forall ((?v0 A_llist_c_c_fun_fun$ )(?v1 A_llist_c_a_llist_c_prod_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$b (fun_app$c (fun_app$bb (uuy$ ?v0 )?v1 )?v2 )?v3 )(case_prod$i ?v0 (fun_app$az (fun_app$ba ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$bb (uuy$ ?v0 )?v1 )?v2 )?v3 )))):named a31 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_e_bool_fun_fun$ )(?v2 A_llist$ )(?v3 E$ ))(! (= (fun_app$x (fun_app$y (uuh$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$x (fun_app$y ?v1 ?v2 )?v3 ))):pattern ((fun_app$x (fun_app$y (uuh$ ?v0 ?v1 )?v2 )?v3 )))):named a32 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_c_bool_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$ah (fun_app$ai (uui$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$ah (fun_app$ai ?v1 ?v2 )?v3 ))):pattern ((fun_app$ah (fun_app$ai (uui$ ?v0 ?v1 )?v2 )?v3 )))):named a33 ))
(assert (! (forall ((?v0 B_llist_f_prod_bool_fun_b_llist_f_prod_bool_fun_fun$ )(?v1 A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )(?v2 A_llist$ )(?v3 E$ ))(! (= (fun_app$n (fun_app$o (uvl$ ?v0 ?v1 )?v2 )?v3 )(fun_app$bc ?v0 (fun_app$n (fun_app$o ?v1 ?v2 )?v3 ))):pattern ((fun_app$n (fun_app$o (uvl$ ?v0 ?v1 )?v2 )?v3 )))):named a34 ))
(assert (! (forall ((?v0 B_llist_d_prod_bool_fun_b_llist_d_prod_bool_fun_fun$ )(?v1 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$l (fun_app$m (uvm$ ?v0 ?v1 )?v2 )?v3 )(fun_app$bd ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uvm$ ?v0 ?v1 )?v2 )?v3 )))):named a35 ))
(assert (! (forall ((?v0 B_llist_d_prod_bool_fun_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ )(?v1 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$u (fun_app$v (uvp$ ?v0 ?v1 )?v2 )?v3 )(fun_app$be ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$u (fun_app$v (uvp$ ?v0 ?v1 )?v2 )?v3 )))):named a36 ))
(assert (! (forall ((?v0 B_llist_d_prod_bool_fun_c_fun$ )(?v1 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$b (fun_app$c (fun_app$bf (uvj$ ?v0 )?v1 )?v2 )?v3 )(fun_app$bg ?v0 (fun_app$l (fun_app$m ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$bf (uvj$ ?v0 )?v1 )?v2 )?v3 )))):named a37 ))
(assert (! (forall ((?v0 C_a_llist_e_prod_fun_a_llist_e_prod_fun_b_llist_d_prod_bool_fun_fun$ )(?v1 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$l (fun_app$m (uvq$ ?v0 ?v1 )?v2 )?v3 )(fun_app$bh ?v0 (fun_app$u (fun_app$v ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uvq$ ?v0 ?v1 )?v2 )?v3 )))):named a38 ))
(assert (! (forall ((?v0 C_a_llist_e_prod_fun_a_llist_e_prod_fun_c_fun$ )(?v1 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$b (fun_app$c (fun_app$bi (uvn$ ?v0 )?v1 )?v2 )?v3 )(fun_app$bj ?v0 (fun_app$u (fun_app$v ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$bi (uvn$ ?v0 )?v1 )?v2 )?v3 )))):named a39 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 B_llist_d_d_fun_fun$ )(?v2 B_llist$ )(?v3 D$ ))(! (= (fun_app$ (fun_app$a (fun_app$bk (uvh$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (fun_app$bk (uvh$ ?v0 )?v1 )?v2 )?v3 )))):named a40 ))
(assert (! (forall ((?v0 C_b_llist_d_prod_bool_fun_fun$ )(?v1 A_llist_c_c_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$l (fun_app$m (uvk$ ?v0 ?v1 )?v2 )?v3 )(fun_app$l ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$l (fun_app$m (uvk$ ?v0 ?v1 )?v2 )?v3 )))):named a41 ))
(assert (! (forall ((?v0 C_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ )(?v1 A_llist_c_c_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$u (fun_app$v (uvo$ ?v0 ?v1 )?v2 )?v3 )(fun_app$u ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$u (fun_app$v (uvo$ ?v0 ?v1 )?v2 )?v3 )))):named a42 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 A_llist_c_c_fun_fun$ )(?v2 A_llist$ )(?v3 C$ ))(! (= (fun_app$b (fun_app$c (fun_app$bl (uvi$ ?v0 )?v1 )?v2 )?v3 )(fun_app$b ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$bl (uvi$ ?v0 )?v1 )?v2 )?v3 )))):named a43 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 F$ ))(! (= (fun_app$bm (fun_app$bn uuj$ ?v0 )?v1 )?v0 ):pattern ((fun_app$bm (fun_app$bn uuj$ ?v0 )?v1 )))):named a44 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 D$ ))(! (= (fun_app$bo (fun_app$bp uum$ ?v0 )?v1 )?v0 ):pattern ((fun_app$bo (fun_app$bp uum$ ?v0 )?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 E$ ))(! (= (fun_app$bq (fun_app$br uuk$ ?v0 )?v1 )?v0 ):pattern ((fun_app$bq (fun_app$br uuk$ ?v0 )?v1 )))):named a46 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C$ ))(! (= (fun_app$bs (fun_app$bt uul$ ?v0 )?v1 )?v0 ):pattern ((fun_app$bs (fun_app$bt uul$ ?v0 )?v1 )))):named a47 ))
(assert (! (not (fun_app$z (case_prod$d uua$ (fun_app$t (case_prod$h uub$ xsa$ )xs_a$ ))(case_prod$j uuc$ ysa$ ys_a$ ))):named a48 ))
(assert (! (fun_app$aa (case_prod$g uue$ xsa$ )ysa$ ):named a49 ))
(assert (! (=> (and (lfinite$a (fst$b xsa$ ))(and (lfinite$ (fst$c ysa$ ))(qa$ (case_prod$i uuf$ xsa$ )(case_prod$b uug$ ysa$ ))))(fun_app$z (case_prod$d uua$ (fun_app$w xs_a$ (case_prod$i uuf$ xsa$ )))(fun_app$s ys_a$ (case_prod$b uug$ ysa$ )))):named a50 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_c_prod$ )(?v2 A_llist_a_llist_fun$ ))(= (= (apfst$b ?v0 ?v1 )(apfst$b ?v2 ?v1 ))(= (fun_app$bu ?v0 (fst$b ?v1 ))(fun_app$bu ?v2 (fst$b ?v1 ))))):named a51 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_d_prod$ )(?v2 B_llist_b_llist_fun$ ))(= (= (apfst$c ?v0 ?v1 )(apfst$c ?v2 ?v1 ))(= (fun_app$bv ?v0 (fst$c ?v1 ))(fun_app$bv ?v2 (fst$c ?v1 ))))):named a52 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_e_prod$ )(?v2 A_llist_a_llist_fun$ ))(= (= (apfst$a ?v0 ?v1 )(apfst$a ?v2 ?v1 ))(= (fun_app$bu ?v0 (fst$a ?v1 ))(fun_app$bu ?v2 (fst$a ?v1 ))))):named a53 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_f_prod$ )(?v2 B_llist_b_llist_fun$ ))(= (= (apfst$ ?v0 ?v1 )(apfst$ ?v2 ?v1 ))(= (fun_app$bv ?v0 (fst$ ?v1 ))(fun_app$bv ?v2 (fst$ ?v1 ))))):named a54 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_e_prod$ ))(= (fst$a (apfst$a ?v0 ?v1 ))(fun_app$bu ?v0 (fst$a ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_f_prod$ ))(= (fst$ (apfst$ ?v0 ?v1 ))(fun_app$bv ?v0 (fst$ ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_c_prod$ ))(= (fst$b (apfst$b ?v0 ?v1 ))(fun_app$bu ?v0 (fst$b ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_llist_b_llist_fun$ )(?v1 B_llist_d_prod$ ))(= (fst$c (apfst$c ?v0 ?v1 ))(fun_app$bv ?v0 (fst$c ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(= (lfinite$a (fun_app$bu (lappend$a ?v0 )?v1 ))(and (lfinite$a ?v0 )(lfinite$a ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(= (lfinite$ (fun_app$bv (lappend$ ?v0 )?v1 ))(and (lfinite$ ?v0 )(lfinite$ ?v1 )))):named a60 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_e_bool_fun_fun$ )(?v2 A_llist_e_prod$ ))(= (case_prod$c (uuh$ ?v0 ?v1 )?v2 )(and ?v0 (case_prod$c ?v1 ?v2 )))):named a61 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_c_bool_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (case_prod$f (uui$ ?v0 ?v1 )?v2 )(and ?v0 (case_prod$f ?v1 ?v2 )))):named a62 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_llist$ )(?v4 A_llist$ ))(=> (and (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v1 )?v2 )(=> (and (lfinite$a ?v1 )(lfinite$a ?v2 ))(fun_app$f (fun_app$g (llist_all2$a ?v0 )?v3 )?v4 )))(fun_app$f (fun_app$g (llist_all2$a ?v0 )(fun_app$bu (lappend$a ?v1 )?v3 ))(fun_app$bu (lappend$a ?v2 )?v4 )))):named a63 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_llist$ )(?v4 A_llist$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(=> (and (lfinite$ ?v1 )(lfinite$a ?v2 ))(llist_all2$b ?v0 ?v3 ?v4 )))(llist_all2$b ?v0 (fun_app$bv (lappend$ ?v1 )?v3 )(fun_app$bu (lappend$a ?v2 )?v4 )))):named a64 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_llist$ )(?v4 B_llist$ ))(=> (and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(=> (and (lfinite$ ?v1 )(lfinite$ ?v2 ))(fun_app$d (fun_app$e (llist_all2$c ?v0 )?v3 )?v4 )))(fun_app$d (fun_app$e (llist_all2$c ?v0 )(fun_app$bv (lappend$ ?v1 )?v3 ))(fun_app$bv (lappend$ ?v2 )?v4 )))):named a65 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_llist$ )(?v4 B_llist$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(=> (and (lfinite$a ?v1 )(lfinite$ ?v2 ))(llist_all2$ ?v0 ?v3 ?v4 )))(llist_all2$ ?v0 (fun_app$bu (lappend$a ?v1 )?v3 )(fun_app$bv (lappend$ ?v2 )?v4 )))):named a66 ))
(assert (! (forall ((?v0 B_llist_f_prod$ ))(= (fst$ ?v0 )(case_prod$k uuj$ ?v0 ))):named a67 ))
(assert (! (forall ((?v0 A_llist_e_prod$ ))(= (fst$a ?v0 )(case_prod$l uuk$ ?v0 ))):named a68 ))
(assert (! (forall ((?v0 A_llist_c_prod$ ))(= (fst$b ?v0 )(case_prod$m uul$ ?v0 ))):named a69 ))
(assert (! (forall ((?v0 B_llist_d_prod$ ))(= (fst$c ?v0 )(case_prod$n uum$ ?v0 ))):named a70 ))
(assert (! (forall ((?v0 A_llist_e_b_llist_d_prod_bool_fun_fun_fun$ )(?v1 A_llist_e_prod$ )(?v2 B_llist_d_prod$ ))(= (case_prod$o ?v0 ?v1 ?v2 )(case_prod$c (uun$ ?v0 ?v2 )?v1 ))):named a71 ))
(assert (! (forall ((?v0 A_llist_e_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v1 A_llist_e_prod$ )(?v2 C_a_llist_e_prod_fun$ ))(= (case_prod$p ?v0 ?v1 ?v2 )(case_prod$q (uuo$ ?v0 ?v2 )?v1 ))):named a72 ))
(assert (! (forall ((?v0 A_llist_c_b_llist_f_prod_bool_fun_fun_fun$ )(?v1 A_llist_c_prod$ )(?v2 B_llist_f_prod$ ))(= (case_prod$r ?v0 ?v1 ?v2 )(case_prod$f (uup$ ?v0 ?v2 )?v1 ))):named a73 ))
(assert (! (forall ((?v0 A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )(?v1 A_llist_e_prod$ )(?v2 B_llist_f_prod$ ))(= (fun_app$z (case_prod$d ?v0 ?v1 )?v2 )(case_prod$c (uuq$ ?v0 ?v2 )?v1 ))):named a74 ))
(assert (! (forall ((?v0 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v1 A_llist_c_prod$ )(?v2 B_llist_d_prod$ ))(= (fun_app$aa (case_prod$g ?v0 ?v1 )?v2 )(case_prod$f (uur$ ?v0 ?v2 )?v1 ))):named a75 ))
(assert (! (forall ((?v0 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v1 A_llist_c_prod$ )(?v2 C_a_llist_e_prod_fun$ ))(= (fun_app$t (case_prod$h ?v0 ?v1 )?v2 )(case_prod$s (fun_app$am (uus$ ?v0 )?v2 )?v1 ))):named a76 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(! (=> (not (lfinite$a ?v0 ))(= (fun_app$bu (lappend$a ?v0 )?v1 )?v0 )):pattern ((fun_app$bu (lappend$a ?v0 )?v1 )))):named a77 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ ))(! (=> (not (lfinite$ ?v0 ))(= (fun_app$bv (lappend$ ?v0 )?v1 )?v0 )):pattern ((fun_app$bv (lappend$ ?v0 )?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v1 )?v2 )(= (lfinite$a ?v1 )(lfinite$a ?v2 )))):named a79 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ ))(=> (llist_all2$b ?v0 ?v1 ?v2 )(= (lfinite$ ?v1 )(lfinite$a ?v2 )))):named a80 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ ))(=> (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(= (lfinite$ ?v1 )(lfinite$ ?v2 )))):named a81 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ ))(=> (llist_all2$ ?v0 ?v1 ?v2 )(= (lfinite$a ?v1 )(lfinite$ ?v2 )))):named a82 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_llist$ )(?v3 B_llist$ ))(= (fun_app$d (fun_app$e (llist_all2$c (uut$ ?v0 ?v1 ))?v2 )?v3 )(and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v2 )?v3 )(fun_app$d (fun_app$e (llist_all2$c ?v1 )?v2 )?v3 )))):named a83 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_a_bool_fun_fun$ )(?v2 B_llist$ )(?v3 A_llist$ ))(= (llist_all2$b (uuu$ ?v0 ?v1 )?v2 ?v3 )(and (llist_all2$b ?v0 ?v2 ?v3 )(llist_all2$b ?v1 ?v2 ?v3 )))):named a84 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_llist$ )(?v3 A_llist$ ))(= (fun_app$f (fun_app$g (llist_all2$a (uuv$ ?v0 ?v1 ))?v2 )?v3 )(and (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v2 )?v3 )(fun_app$f (fun_app$g (llist_all2$a ?v1 )?v2 )?v3 )))):named a85 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B_llist$ ))(= (llist_all2$ (uuw$ ?v0 ?v1 )?v2 ?v3 )(and (llist_all2$ ?v0 ?v2 ?v3 )(llist_all2$ ?v1 ?v2 ?v3 )))):named a86 ))
(assert (! (forall ((?v0 B_llist_d_d_fun_fun$ )(?v1 B_llist_d_b_llist_d_prod_fun_fun$ )(?v2 B_llist_d_prod$ ))(= (case_prod$b ?v0 (case_prod$t ?v1 ?v2 ))(case_prod$b (fun_app$at (uux$ ?v0 )?v1 )?v2 ))):named a87 ))
(assert (! (forall ((?v0 A_llist_c_c_fun_fun$ )(?v1 A_llist_c_a_llist_c_prod_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (case_prod$i ?v0 (case_prod$u ?v1 ?v2 ))(case_prod$i (fun_app$bb (uuy$ ?v0 )?v1 )?v2 ))):named a88 ))
(assert (! (forall ((?v0 A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )(?v1 A_llist_e_a_llist_e_prod_fun_fun$ )(?v2 A_llist_e_prod$ ))(= (case_prod$d ?v0 (case_prod$q ?v1 ?v2 ))(case_prod$d (uuz$ ?v0 ?v1 )?v2 ))):named a89 ))
(assert (! (forall ((?v0 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v1 A_llist_c_a_llist_c_prod_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (case_prod$g ?v0 (case_prod$u ?v1 ?v2 ))(case_prod$g (uva$ ?v0 ?v1 )?v2 ))):named a90 ))
(assert (! (forall ((?v0 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v1 A_llist_c_a_llist_c_prod_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (case_prod$h ?v0 (case_prod$u ?v1 ?v2 ))(case_prod$h (uvb$ ?v0 ?v1 )?v2 ))):named a91 ))
(assert (! (forall ((?v0 A_llist_e_c_fun_fun$ )(?v1 A_llist_c_a_llist_e_prod_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (case_prod$e ?v0 (case_prod$s ?v1 ?v2 ))(case_prod$i (fun_app$aw (uvc$ ?v0 )?v1 )?v2 ))):named a92 ))
(assert (! (forall ((?v0 A_llist_e_bool_fun_fun$ )(?v1 A_llist_e_a_llist_e_prod_fun_fun$ )(?v2 A_llist_e_prod$ ))(= (case_prod$c ?v0 (case_prod$q ?v1 ?v2 ))(case_prod$c (uvd$ ?v0 ?v1 )?v2 ))):named a93 ))
(assert (! (forall ((?v0 A_llist_e_bool_fun_fun$ )(?v1 A_llist_c_a_llist_e_prod_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (case_prod$c ?v0 (case_prod$s ?v1 ?v2 ))(case_prod$f (uve$ ?v0 ?v1 )?v2 ))):named a94 ))
(assert (! (forall ((?v0 A_llist_c_bool_fun_fun$ )(?v1 A_llist_e_a_llist_c_prod_fun_fun$ )(?v2 A_llist_e_prod$ ))(= (case_prod$f ?v0 (case_prod$v ?v1 ?v2 ))(case_prod$c (uvf$ ?v0 ?v1 )?v2 ))):named a95 ))
(assert (! (forall ((?v0 A_llist_c_bool_fun_fun$ )(?v1 A_llist_c_a_llist_c_prod_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (case_prod$f ?v0 (case_prod$u ?v1 ?v2 ))(case_prod$f (uvg$ ?v0 ?v1 )?v2 ))):named a96 ))
(assert (! (forall ((?v0 D_d_fun$ )(?v1 B_llist_d_d_fun_fun$ )(?v2 B_llist_d_prod$ ))(= (fun_app$ ?v0 (case_prod$b ?v1 ?v2 ))(case_prod$b (fun_app$bk (uvh$ ?v0 )?v1 )?v2 ))):named a97 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 A_llist_c_c_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (fun_app$b ?v0 (case_prod$i ?v1 ?v2 ))(case_prod$i (fun_app$bl (uvi$ ?v0 )?v1 )?v2 ))):named a98 ))
(assert (! (forall ((?v0 B_llist_d_prod_bool_fun_c_fun$ )(?v1 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (fun_app$bg ?v0 (case_prod$g ?v1 ?v2 ))(case_prod$i (fun_app$bf (uvj$ ?v0 )?v1 )?v2 ))):named a99 ))
(assert (! (forall ((?v0 C_b_llist_d_prod_bool_fun_fun$ )(?v1 A_llist_c_c_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (fun_app$l ?v0 (case_prod$i ?v1 ?v2 ))(case_prod$g (uvk$ ?v0 ?v1 )?v2 ))):named a100 ))
(assert (! (forall ((?v0 B_llist_f_prod_bool_fun_b_llist_f_prod_bool_fun_fun$ )(?v1 A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ )(?v2 A_llist_e_prod$ ))(= (fun_app$bc ?v0 (case_prod$d ?v1 ?v2 ))(case_prod$d (uvl$ ?v0 ?v1 )?v2 ))):named a101 ))
(assert (! (forall ((?v0 B_llist_d_prod_bool_fun_b_llist_d_prod_bool_fun_fun$ )(?v1 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (fun_app$bd ?v0 (case_prod$g ?v1 ?v2 ))(case_prod$g (uvm$ ?v0 ?v1 )?v2 ))):named a102 ))
(assert (! (forall ((?v0 C_a_llist_e_prod_fun_a_llist_e_prod_fun_c_fun$ )(?v1 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (fun_app$bj ?v0 (case_prod$h ?v1 ?v2 ))(case_prod$i (fun_app$bi (uvn$ ?v0 )?v1 )?v2 ))):named a103 ))
(assert (! (forall ((?v0 C_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ )(?v1 A_llist_c_c_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (fun_app$u ?v0 (case_prod$i ?v1 ?v2 ))(case_prod$h (uvo$ ?v0 ?v1 )?v2 ))):named a104 ))
(assert (! (forall ((?v0 B_llist_d_prod_bool_fun_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun$ )(?v1 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (fun_app$be ?v0 (case_prod$g ?v1 ?v2 ))(case_prod$h (uvp$ ?v0 ?v1 )?v2 ))):named a105 ))
(assert (! (forall ((?v0 C_a_llist_e_prod_fun_a_llist_e_prod_fun_b_llist_d_prod_bool_fun_fun$ )(?v1 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ )(?v2 A_llist_c_prod$ ))(= (fun_app$bh ?v0 (case_prod$h ?v1 ?v2 ))(case_prod$g (uvq$ ?v0 ?v1 )?v2 ))):named a106 ))
(assert (! (forall ((?v0 B_llist_d_prod$ )(?v1 B_llist_d_prod$ )(?v2 B_llist_d_d_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$b ?v2 ?v0 )(case_prod$b ?v2 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 A_llist_c_prod$ )(?v1 A_llist_c_prod$ )(?v2 A_llist_c_c_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$i ?v2 ?v0 )(case_prod$i ?v2 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 A_llist_e_prod$ )(?v1 A_llist_e_prod$ )(?v2 A_llist_e_b_llist_f_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$d ?v2 ?v0 )(case_prod$d ?v2 ?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_llist_c_prod$ )(?v1 A_llist_c_prod$ )(?v2 A_llist_c_b_llist_d_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$g ?v2 ?v0 )(case_prod$g ?v2 ?v1 )))):named a110 ))
(assert (! (forall ((?v0 A_llist_c_prod$ )(?v1 A_llist_c_prod$ )(?v2 A_llist_c_c_a_llist_e_prod_fun_a_llist_e_prod_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$h ?v2 ?v0 )(case_prod$h ?v2 ?v1 )))):named a111 ))
(assert (! (forall ((?v0 A_llist_e_prod$ )(?v1 A_llist_e_prod$ )(?v2 A_llist_e_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$c ?v2 ?v0 )(case_prod$c ?v2 ?v1 )))):named a112 ))
(assert (! (forall ((?v0 A_llist_c_prod$ )(?v1 A_llist_c_prod$ )(?v2 A_llist_c_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$f ?v2 ?v0 )(case_prod$f ?v2 ?v1 )))):named a113 ))
(assert (! (forall ((?v0 A_llist_c_prod$ )(?v1 A_llist_c_prod$ )(?v2 A_llist_c_a_llist_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$m ?v2 ?v0 )(case_prod$m ?v2 ?v1 )))):named a114 ))
(assert (! (forall ((?v0 A_llist_c_prod$ )(?v1 A_llist_c_prod$ )(?v2 A_llist_c_a_llist_e_prod_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$s ?v2 ?v0 )(case_prod$s ?v2 ?v1 )))):named a115 ))
(assert (! (forall ((?v0 A_llist_c_prod$ )(?v1 A_llist_c_prod$ )(?v2 A_llist_c_a_llist_c_prod_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$u ?v2 ?v0 )(case_prod$u ?v2 ?v1 )))):named a116 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 B_llist$ )(?v4 B_llist$ )(?v5 B_llist$ )(?v6 B_llist$ ))(=> (and (forall ((?v7 B$ )(?v8 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v7 )?v8 )(forall ((?v9 B$ )(?v10 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v9 )?v10 )(= (fun_app$h (fun_app$i ?v1 ?v7 )?v9 )(fun_app$h (fun_app$i ?v2 ?v8 )?v10 ))))))(and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v3 )?v4 )(fun_app$d (fun_app$e (llist_all2$c ?v0 )?v5 )?v6 )))(= (fun_app$d (fun_app$e (llist_all2$c ?v1 )?v3 )?v5 )(fun_app$d (fun_app$e (llist_all2$c ?v2 )?v4 )?v6 )))):named a117 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 B_llist$ )(?v4 A_llist$ )(?v5 B_llist$ )(?v6 A_llist$ ))(=> (and (forall ((?v7 B$ )(?v8 A$ ))(=> (fun_app$j (fun_app$ar ?v0 ?v7 )?v8 )(forall ((?v9 B$ )(?v10 A$ ))(=> (fun_app$j (fun_app$ar ?v0 ?v9 )?v10 )(= (fun_app$h (fun_app$i ?v1 ?v7 )?v9 )(fun_app$j (fun_app$k ?v2 ?v8 )?v10 ))))))(and (llist_all2$b ?v0 ?v3 ?v4 )(llist_all2$b ?v0 ?v5 ?v6 )))(= (fun_app$d (fun_app$e (llist_all2$c ?v1 )?v3 )?v5 )(fun_app$f (fun_app$g (llist_all2$a ?v2 )?v4 )?v6 )))):named a118 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 A_a_bool_fun_fun$ )(?v3 A_llist$ )(?v4 A_llist$ )(?v5 A_llist$ )(?v6 A_llist$ ))(=> (and (forall ((?v7 A$ )(?v8 A$ ))(=> (fun_app$j (fun_app$k ?v0 ?v7 )?v8 )(forall ((?v9 A$ )(?v10 A$ ))(=> (fun_app$j (fun_app$k ?v0 ?v9 )?v10 )(= (fun_app$j (fun_app$k ?v1 ?v7 )?v9 )(fun_app$j (fun_app$k ?v2 ?v8 )?v10 ))))))(and (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v3 )?v4 )(fun_app$f (fun_app$g (llist_all2$a ?v0 )?v5 )?v6 )))(= (fun_app$f (fun_app$g (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$f (fun_app$g (llist_all2$a ?v2 )?v4 )?v6 )))):named a119 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_a_bool_fun_fun$ )(?v2 B_b_bool_fun_fun$ )(?v3 A_llist$ )(?v4 B_llist$ )(?v5 A_llist$ )(?v6 B_llist$ ))(=> (and (forall ((?v7 A$ )(?v8 B$ ))(=> (fun_app$h (fun_app$as ?v0 ?v7 )?v8 )(forall ((?v9 A$ )(?v10 B$ ))(=> (fun_app$h (fun_app$as ?v0 ?v9 )?v10 )(= (fun_app$j (fun_app$k ?v1 ?v7 )?v9 )(fun_app$h (fun_app$i ?v2 ?v8 )?v10 ))))))(and (llist_all2$ ?v0 ?v3 ?v4 )(llist_all2$ ?v0 ?v5 ?v6 )))(= (fun_app$f (fun_app$g (llist_all2$a ?v1 )?v3 )?v5 )(fun_app$d (fun_app$e (llist_all2$c ?v2 )?v4 )?v6 )))):named a120 ))
(assert (! (forall ((?v0 B_b_bool_fun_fun$ )(?v1 B_llist$ )(?v2 B_llist$ )(?v3 B_b_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$e (llist_all2$c ?v0 )?v1 )?v2 )(forall ((?v4 B$ )(?v5 B$ ))(=> (fun_app$h (fun_app$i ?v0 ?v4 )?v5 )(fun_app$h (fun_app$i ?v3 ?v4 )?v5 ))))(fun_app$d (fun_app$e (llist_all2$c ?v3 )?v1 )?v2 ))):named a121 ))
(assert (! (forall ((?v0 B_a_bool_fun_fun$ )(?v1 B_llist$ )(?v2 A_llist$ )(?v3 B_a_bool_fun_fun$ ))(=> (and (llist_all2$b ?v0 ?v1 ?v2 )(forall ((?v4 B$ )(?v5 A$ ))(=> (fun_app$j (fun_app$ar ?v0 ?v4 )?v5 )(fun_app$j (fun_app$ar ?v3 ?v4 )?v5 ))))(llist_all2$b ?v3 ?v1 ?v2 ))):named a122 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$f (fun_app$g (llist_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 A$ )(?v5 A$ ))(=> (fun_app$j (fun_app$k ?v0 ?v4 )?v5 )(fun_app$j (fun_app$k ?v3 ?v4 )?v5 ))))(fun_app$f (fun_app$g (llist_all2$a ?v3 )?v1 )?v2 ))):named a123 ))
(assert (! (forall ((?v0 A_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B_llist$ )(?v3 A_b_bool_fun_fun$ ))(=> (and (llist_all2$ ?v0 ?v1 ?v2 )(forall ((?v4 A$ )(?v5 B$ ))(=> (fun_app$h (fun_app$as ?v0 ?v4 )?v5 )(fun_app$h (fun_app$as ?v3 ?v4 )?v5 ))))(llist_all2$ ?v3 ?v1 ?v2 ))):named a124 ))
(assert (! (= (llist_all2$c uvr$ )uvs$ ):named a125 ))
(assert (! (= (llist_all2$a uvt$ )uvu$ ):named a126 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$bu (lappend$a (fun_app$bu (lappend$a ?v0 )?v1 ))?v2 )(fun_app$bu (lappend$a ?v0 )(fun_app$bu (lappend$a ?v1 )?v2 )))):named a127 ))
(assert (! (forall ((?v0 B_llist$ )(?v1 B_llist$ )(?v2 B_llist$ ))(= (fun_app$bv (lappend$ (fun_app$bv (lappend$ ?v0 )?v1 ))?v2 )(fun_app$bv (lappend$ ?v0 )(fun_app$bv (lappend$ ?v1 )?v2 )))):named a128 ))
(check-sat )
(get-unsat-core )
