(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort D$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort C_c_fun$ 0 )
(declare-sort D_d_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort D_bool_fun$ 0 )
(declare-sort A_a_llist_fun$ 0 )
(declare-sort A_llist_a_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort C_c_llist_fun$ 0 )
(declare-sort C_llist_c_fun$ 0 )
(declare-sort A_b_prod_a_fun$ 0 )
(declare-sort C_d_prod_c_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_c_bool_fun_fun$ 0 )
(declare-sort A_llist_bool_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort C_a_bool_fun_fun$ 0 )
(declare-sort C_c_bool_fun_fun$ 0 )
(declare-sort C_llist_bool_fun$ 0 )
(declare-sort D_d_bool_fun_fun$ 0 )
(declare-sort A_b_tllist_bool_fun$ 0 )
(declare-sort A_llist_a_llist_fun$ 0 )
(declare-sort A_llist_b_b_fun_fun$ 0 )
(declare-sort C_d_tllist_bool_fun$ 0 )
(declare-sort C_llist_c_llist_fun$ 0 )
(declare-sort C_llist_d_d_fun_fun$ 0 )
(declare-sort A_b_prod_a_llist_fun$ 0 )
(declare-sort A_llist_b_prod_a_fun$ 0 )
(declare-sort C_d_prod_c_llist_fun$ 0 )
(declare-sort C_llist_d_prod_c_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_fun$ 0 )
(declare-sort C_d_prod_c_d_prod_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun$ 0 )
(declare-sort Bool_bool_bool_fun_fun$ 0 )
(declare-sort C_llist_d_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun$ 0 )
(declare-sort C_llist_d_prod_bool_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_fun$ 0 )
(declare-sort C_llist_d_prod_c_llist_fun$ 0 )
(declare-sort A_b_prod_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_prod_a_b_prod_fun$ 0 )
(declare-sort C_d_prod_c_llist_d_prod_fun$ 0 )
(declare-sort C_llist_d_prod_c_d_prod_fun$ 0 )
(declare-sort A_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort A_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_a_llist_bool_fun_fun$ 0 )
(declare-sort C_llist_c_llist_bool_fun_fun$ 0 )
(declare-sort B_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort B_c_llist_d_prod_bool_fun_fun$ 0 )
(declare-sort D_c_llist_d_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun$ 0 )
(declare-sort C_llist_d_prod_c_llist_d_prod_fun$ 0 )
(declare-sort A_b_tllist_a_b_tllist_bool_fun_fun$ 0 )
(declare-sort C_d_tllist_c_d_tllist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_b_tllist_bool_fun_fun$ 0 )
(declare-sort C_llist_d_prod_c_d_tllist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_c_llist_d_prod_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_d_c_llist_d_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_c_llist_d_prod_bool_fun_fun$ 0 )
(declare-sort C_llist_d_prod_c_llist_d_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun_a_b_tllist_bool_fun_bool_fun_fun$ 0 )
(declare-sort C_llist_d_prod_bool_fun_c_d_tllist_bool_fun_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_c_llist_d_prod_bool_fun_fun_a_b_tllist_c_d_tllist_bool_fun_fun_bool_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-sort C_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-fun lNil$a ()C_llist$)
(declare-fun lhd$a (C_llist$)C$)
(declare-fun ltl$a (C_llist$)C_llist$)
(declare-fun lCons$a (C$ C_llist$ )C_llist$)
(declare-sort C_llist_d_prod$ 0)
(declare-sort A_llist_b_prod$ 0)
(declare-fun fst$ (C_llist_d_prod$)C_llist$)
(declare-fun snd$ (C_llist_d_prod$)D$)
(declare-fun pair$ (C_llist$ D$ )C_llist_d_prod$)
(declare-fun fst$a (A_llist_b_prod$)A_llist$)
(declare-fun snd$a (A_llist_b_prod$)B$)
(declare-fun pair$a (A_llist$ B$ )A_llist_b_prod$)
(declare-sort A_b_tllist$ 0)
(declare-sort C_d_tllist$ 0)
(declare-fun terminal$ (A_b_tllist$)B$)
(declare-fun tNil$ (B$ )A_b_tllist$)
(declare-fun thd$ (A_b_tllist$)A$)
(declare-fun ttl$ (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$ (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun terminal$a (C_d_tllist$)D$)
(declare-fun tNil$a (D$ )C_d_tllist$)
(declare-fun thd$a (C_d_tllist$)C$)
(declare-fun ttl$a (C_d_tllist$)C_d_tllist$)
(declare-fun tCons$a (C$ C_d_tllist$ )C_d_tllist$)
(declare-sort A_b_prod$ 0)
(declare-sort C_d_prod$ 0)
(declare-fun fst$b (A_b_prod$)A$)
(declare-fun snd$b (A_b_prod$)B$)
(declare-fun pair$b (A$ B$ )A_b_prod$)
(declare-fun fst$c (C_d_prod$)C$)
(declare-fun snd$c (C_d_prod$)D$)
(declare-fun pair$c (C$ D$ )C_d_prod$)
(declare-fun p$ ()A_c_bool_fun_fun$ )
(declare-fun r$ (B$ D$ )Bool )
(declare-fun x$ (A_b_tllist$ C_d_tllist$ )Bool )
(declare-fun uu$ (A_llist$ B$ )C_llist_d_bool_fun_fun$ )
(declare-fun xa$ ()A_llist_b_prod_c_llist_d_prod_bool_fun_fun$ )
(declare-fun xs$ ()A_b_tllist$ )
(declare-fun ys$ ()C_d_tllist$ )
(declare-fun uua$ ()A_llist_b_c_llist_d_prod_bool_fun_fun_fun$ )
(declare-fun uub$ ()A_a_bool_fun_fun$ )
(declare-fun uuc$ ()B_b_bool_fun_fun$ )
(declare-fun uud$ ()C_c_bool_fun_fun$ )
(declare-fun uue$ ()D_d_bool_fun_fun$ )
(declare-fun uuf$ ()Bool_bool_bool_fun_fun$ )
(declare-fun uug$ ()A_llist_b_bool_fun_fun$ )
(declare-fun uuh$ ()C_llist_d_bool_fun_fun$ )
(declare-fun uui$ ()A_llist_b_b_fun_fun$ )
(declare-fun uuj$ ()C_llist_d_d_fun_fun$ )
(declare-fun uuk$ ()A_llist_a_fun$ )
(declare-fun uul$ ()A_llist_b_prod_a_llist_fun$ )
(declare-fun uum$ ()C_llist_c_fun$ )
(declare-fun uun$ ()C_llist_d_prod_c_llist_fun$ )
(declare-fun uuo$ ()A_llist_a_llist_fun$ )
(declare-fun uup$ ()C_llist_c_llist_fun$ )
(declare-fun uuq$ (A_llist$ B$ )A_llist_b_bool_fun_fun$ )
(declare-fun uur$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uus$ ()A_b_tllist_a_b_tllist_bool_fun_fun$ )
(declare-fun uut$ (C_llist$ D$ )C_llist_d_bool_fun_fun$ )
(declare-fun uuu$ ()C_llist_d_c_llist_d_prod_bool_fun_fun_fun$ )
(declare-fun uuv$ ()C_d_tllist_c_d_tllist_bool_fun_fun$ )
(declare-fun uuw$ ()A_b_prod_a_fun$ )
(declare-fun uux$ ()C_d_prod_c_fun$ )
(declare-fun uuy$ (Bool C_llist_d_bool_fun_fun$ )C_llist_d_bool_fun_fun$ )
(declare-fun uuz$ (Bool A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun xsa$ ()A_llist_b_prod$ )
(declare-fun ysa$ ()C_llist_d_prod$ )
(declare-fun comp$ (A_llist_a_fun$ A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_a_fun$ )
(declare-fun apfst$ (A_llist_a_llist_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun comp$a (C_llist_c_fun$ C_llist_d_prod_c_llist_fun$ )C_llist_d_prod_c_fun$ )
(declare-fun comp$b (A_llist_b_prod_a_llist_fun$ A_b_prod_a_llist_b_prod_fun$ )A_b_prod_a_llist_fun$ )
(declare-fun comp$c (A_a_llist_fun$ A_b_prod_a_fun$ )A_b_prod_a_llist_fun$ )
(declare-fun comp$d (C_llist_d_prod_c_llist_fun$ C_d_prod_c_llist_d_prod_fun$ )C_d_prod_c_llist_fun$ )
(declare-fun comp$e (C_c_llist_fun$ C_d_prod_c_fun$ )C_d_prod_c_llist_fun$ )
(declare-fun comp$f (C_d_prod_c_fun$ C_d_prod_c_d_prod_fun$ )C_d_prod_c_fun$ )
(declare-fun comp$g (C_c_fun$ C_d_prod_c_fun$ )C_d_prod_c_fun$ )
(declare-fun comp$h (A_b_prod_a_fun$ A_b_prod_a_b_prod_fun$ )A_b_prod_a_fun$ )
(declare-fun comp$i (A_a_fun$ A_b_prod_a_fun$ )A_b_prod_a_fun$ )
(declare-fun comp$j (A_b_prod_a_fun$ A_llist_b_prod_a_b_prod_fun$ )A_llist_b_prod_a_fun$ )
(declare-fun comp$k (C_d_prod_c_fun$ C_llist_d_prod_c_d_prod_fun$ )C_llist_d_prod_c_fun$ )
(declare-fun comp$l (A_llist_b_prod_a_llist_fun$ A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun comp$m (A_llist_a_llist_fun$ A_llist_b_prod_a_llist_fun$ )A_llist_b_prod_a_llist_fun$ )
(declare-fun comp$n (C_llist_d_prod_c_llist_fun$ C_llist_d_prod_c_llist_d_prod_fun$ )C_llist_d_prod_c_llist_fun$ )
(declare-fun comp$o (C_llist_c_llist_fun$ C_llist_d_prod_c_llist_fun$ )C_llist_d_prod_c_llist_fun$ )
(declare-fun lnull$ (C_llist$ )Bool )
(declare-fun apfst$a (C_llist_c_llist_fun$ )C_llist_d_prod_c_llist_d_prod_fun$ )
(declare-fun apfst$b (A_a_llist_fun$ )A_b_prod_a_llist_b_prod_fun$ )
(declare-fun apfst$c (C_c_llist_fun$ )C_d_prod_c_llist_d_prod_fun$ )
(declare-fun apfst$d (C_c_fun$ )C_d_prod_c_d_prod_fun$ )
(declare-fun apfst$e (A_a_fun$ )A_b_prod_a_b_prod_fun$ )
(declare-fun apfst$f (A_llist_a_fun$ )A_llist_b_prod_a_b_prod_fun$ )
(declare-fun apfst$g (C_llist_c_fun$ )C_llist_d_prod_c_d_prod_fun$ )
(declare-fun lnull$a (A_llist$ )Bool )
(declare-fun domainp$ (A_llist_b_prod_c_llist_d_prod_bool_fun_fun_a_b_tllist_c_d_tllist_bool_fun_fun_bool_fun_fun$ A_llist_b_prod_c_llist_d_prod_bool_fun_fun$ )Bool )
(declare-fun fun_app$ (C_llist_c_llist_fun$ C_llist$ )C_llist$ )
(declare-fun lfinite$ (C_llist$ )Bool )
(declare-fun rel_fun$ (A_llist_b_prod_a_b_tllist_bool_fun_fun$ C_llist_d_prod_bool_fun_c_d_tllist_bool_fun_bool_fun_fun$ )A_llist_b_prod_c_llist_d_prod_bool_fun_fun_a_b_tllist_c_d_tllist_bool_fun_fun_bool_fun_fun$ )
(declare-fun fun_app$a (A_llist_a_llist_fun$ A_llist$ )A_llist$ )
(declare-fun fun_app$b (C_llist_c_fun$ C_llist$ )C$ )
(declare-fun fun_app$c (A_llist_a_fun$ A_llist$ )A$ )
(declare-fun fun_app$d (C_llist_d_prod_c_llist_fun$ C_llist_d_prod$ )C_llist$ )
(declare-fun fun_app$e (A_llist_b_prod_a_llist_fun$ A_llist_b_prod$ )A_llist$ )
(declare-fun fun_app$f (C_d_prod_c_fun$ C_d_prod$ )C$ )
(declare-fun fun_app$g (A_b_prod_a_fun$ A_b_prod$ )A$ )
(declare-fun fun_app$h (D_d_fun$ D$ )D$ )
(declare-fun fun_app$i (C_llist_d_d_fun_fun$ C_llist$ )D_d_fun$ )
(declare-fun fun_app$j (B_b_fun$ B$ )B$ )
(declare-fun fun_app$k (A_llist_b_b_fun_fun$ A_llist$ )B_b_fun$ )
(declare-fun fun_app$l (C_d_tllist_bool_fun$ C_d_tllist$ )Bool )
(declare-fun fun_app$m (C_d_tllist_c_d_tllist_bool_fun_fun$ C_d_tllist$ )C_d_tllist_bool_fun$ )
(declare-fun fun_app$n (A_b_tllist_bool_fun$ A_b_tllist$ )Bool )
(declare-fun fun_app$o (A_b_tllist_a_b_tllist_bool_fun_fun$ A_b_tllist$ )A_b_tllist_bool_fun$ )
(declare-fun fun_app$p (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$q (Bool_bool_bool_fun_fun$ Bool )Bool_bool_fun$ )
(declare-fun fun_app$r (D_bool_fun$ D$ )Bool )
(declare-fun fun_app$s (D_d_bool_fun_fun$ D$ )D_bool_fun$ )
(declare-fun fun_app$t (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$u (C_c_bool_fun_fun$ C$ )C_bool_fun$ )
(declare-fun fun_app$v (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$w (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$x (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$y (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$z (D_c_llist_d_prod_bool_fun_fun$ D$ )C_llist_d_prod_bool_fun$ )
(declare-fun lfinite$a (A_llist$ )Bool )
(declare-fun rel_fun$a (C_llist_d_prod_c_d_tllist_bool_fun_fun$ Bool_bool_bool_fun_fun$ )C_llist_d_prod_bool_fun_c_d_tllist_bool_fun_bool_fun_fun$ )
(declare-fun rel_fun$b (A_llist_b_prod_a_b_tllist_bool_fun_fun$ A_llist_b_prod_bool_fun_a_b_tllist_bool_fun_bool_fun_fun$ A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ A_b_tllist_a_b_tllist_bool_fun_fun$ )Bool )
(declare-fun rel_fun$c (A_llist_b_prod_a_b_tllist_bool_fun_fun$ Bool_bool_bool_fun_fun$ )A_llist_b_prod_bool_fun_a_b_tllist_bool_fun_bool_fun_fun$ )
(declare-fun rel_fun$d (C_llist_d_prod_c_d_tllist_bool_fun_fun$ C_llist_d_prod_bool_fun_c_d_tllist_bool_fun_bool_fun_fun$ C_llist_d_prod_c_llist_d_prod_bool_fun_fun$ C_d_tllist_c_d_tllist_bool_fun_fun$ )Bool )
(declare-fun case_prod$ (C_llist_d_bool_fun_fun$ )C_llist_d_prod_bool_fun$ )
(declare-fun fun_app$aa (C_llist_d_c_llist_d_prod_bool_fun_fun_fun$ C_llist$ )D_c_llist_d_prod_bool_fun_fun$ )
(declare-fun fun_app$ab (B_a_llist_b_prod_bool_fun_fun$ B$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$ac (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist$ )B_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$ad (B_c_llist_d_prod_bool_fun_fun$ B$ )C_llist_d_prod_bool_fun$ )
(declare-fun fun_app$ae (A_llist_b_c_llist_d_prod_bool_fun_fun_fun$ A_llist$ )B_c_llist_d_prod_bool_fun_fun$ )
(declare-fun fun_app$af (C_llist_d_bool_fun_fun$ C_llist$ )D_bool_fun$ )
(declare-fun fun_app$ag (A_llist_b_bool_fun_fun$ A_llist$ )B_bool_fun$ )
(declare-fun fun_app$ah (C_llist_bool_fun$ C_llist$ )Bool )
(declare-fun fun_app$ai (C_llist_d_prod_bool_fun$ C_llist_d_prod$ )Bool )
(declare-fun fun_app$aj (A_llist_b_prod_c_llist_d_prod_bool_fun_fun$ A_llist_b_prod$ )C_llist_d_prod_bool_fun$ )
(declare-fun fun_app$ak (A_llist_b_prod_bool_fun$ A_llist_b_prod$ )Bool )
(declare-fun fun_app$al (A_c_bool_fun_fun$ A$ )C_bool_fun$ )
(declare-fun fun_app$am (A_llist_b_prod_a_fun$ A_llist_b_prod$ )A$ )
(declare-fun fun_app$an (C_llist_d_prod_c_fun$ C_llist_d_prod$ )C$ )
(declare-fun fun_app$ao (A_llist_b_prod_a_llist_b_prod_fun$ A_llist_b_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$ap (C_llist_d_prod_c_llist_d_prod_fun$ C_llist_d_prod$ )C_llist_d_prod$ )
(declare-fun fun_app$aq (C_d_prod_c_d_prod_fun$ C_d_prod$ )C_d_prod$ )
(declare-fun fun_app$ar (C_c_fun$ C$ )C$ )
(declare-fun fun_app$as (C_d_prod_c_llist_d_prod_fun$ C_d_prod$ )C_llist_d_prod$ )
(declare-fun fun_app$at (C_c_llist_fun$ C$ )C_llist$ )
(declare-fun fun_app$au (A_b_prod_a_b_prod_fun$ A_b_prod$ )A_b_prod$ )
(declare-fun fun_app$av (A_a_fun$ A$ )A$ )
(declare-fun fun_app$aw (A_b_prod_a_llist_b_prod_fun$ A_b_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$ax (A_a_llist_fun$ A$ )A_llist$ )
(declare-fun fun_app$ay (A_llist_b_prod_a_b_prod_fun$ A_llist_b_prod$ )A_b_prod$ )
(declare-fun fun_app$az (C_llist_d_prod_c_d_prod_fun$ C_llist_d_prod$ )C_d_prod$ )
(declare-fun fun_app$ba (A_llist_bool_fun$ A_llist$ )Bool )
(declare-fun fun_app$bb (C_a_bool_fun_fun$ C$ )A_bool_fun$ )
(declare-fun fun_app$bc (A_llist_a_llist_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$bd (C_llist_a_llist_bool_fun_fun$ C_llist$ )A_llist_bool_fun$ )
(declare-fun fun_app$be (C_llist_c_llist_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$bf (A_llist_c_llist_bool_fun_fun$ A_llist$ )C_llist_bool_fun$ )
(declare-fun fun_app$bg (C_llist_d_prod_c_llist_d_prod_bool_fun_fun$ C_llist_d_prod$ )C_llist_d_prod_bool_fun$ )
(declare-fun fun_app$bh (A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ A_llist_b_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun undefined$ ()D$ )
(declare-fun case_prod$a (A_llist_b_bool_fun_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun case_prod$b (A_llist_b_c_llist_d_prod_bool_fun_fun_fun$ A_llist_b_prod$ )C_llist_d_prod_bool_fun$ )
(declare-fun case_prod$c (A_llist_b_b_fun_fun$ A_llist_b_prod$ )B$ )
(declare-fun case_prod$d (C_llist_d_d_fun_fun$ C_llist_d_prod$ )D$ )
(declare-fun case_prod$e (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_prod_a_llist_b_prod_bool_fun_fun$ )
(declare-fun case_prod$f (C_llist_d_c_llist_d_prod_bool_fun_fun_fun$ )C_llist_d_prod_c_llist_d_prod_bool_fun_fun$ )
(declare-fun llist_all2$ (A_c_bool_fun_fun$ A_llist$ )C_llist_bool_fun$ )
(declare-fun pcr_tllist$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$ )A_llist_b_prod_a_b_tllist_bool_fun_fun$ )
(declare-fun undefined$a ()B$ )
(declare-fun llist_all2$a (A_a_bool_fun_fun$ A_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$b (C_a_bool_fun_fun$ C_llist$ )A_llist_bool_fun$ )
(declare-fun llist_all2$c (C_c_bool_fun_fun$ C_llist$ )C_llist_bool_fun$ )
(declare-fun pcr_tllist$a (C_c_bool_fun_fun$ D_d_bool_fun_fun$ )C_llist_d_prod_c_d_tllist_bool_fun_fun$ )
(assert (! (forall ((?v0 C_llist$ ))(! (= (fun_app$ uup$ ?v0 )(ltl$a ?v0 )):pattern ((fun_app$ uup$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$a uuo$ ?v0 )(ltl$ ?v0 )):pattern ((fun_app$a uuo$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 C_llist$ ))(! (= (fun_app$b uum$ ?v0 )(lhd$a ?v0 )):pattern ((fun_app$b uum$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_llist$ ))(! (= (fun_app$c uuk$ ?v0 )(lhd$ ?v0 )):pattern ((fun_app$c uuk$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 C_llist_d_prod$ ))(! (= (fun_app$d uun$ ?v0 )(fst$ ?v0 )):pattern ((fun_app$d uun$ ?v0 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_b_prod$ ))(! (= (fun_app$e uul$ ?v0 )(fst$a ?v0 )):pattern ((fun_app$e uul$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 C_d_prod$ ))(! (= (fun_app$f uux$ ?v0 )(fst$c ?v0 )):pattern ((fun_app$f uux$ ?v0 )))):named a6 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$g uuw$ ?v0 )(fst$b ?v0 )):pattern ((fun_app$g uuw$ ?v0 )))):named a7 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 D$ ))(! (= (fun_app$h (fun_app$i uuj$ ?v0 )?v1 )(ite (lfinite$ ?v0 )?v1 undefined$ )):pattern ((fun_app$h (fun_app$i uuj$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$j (fun_app$k uui$ ?v0 )?v1 )(ite (lfinite$a ?v0 )?v1 undefined$a )):pattern ((fun_app$j (fun_app$k uui$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 C_d_tllist$ )(?v1 C_d_tllist$ ))(! (= (fun_app$l (fun_app$m uuv$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$l (fun_app$m uuv$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_b_tllist$ )(?v1 A_b_tllist$ ))(! (= (fun_app$n (fun_app$o uus$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$n (fun_app$o uus$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(! (= (fun_app$p (fun_app$q uuf$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$p (fun_app$q uuf$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 D$ )(?v1 D$ ))(! (= (fun_app$r (fun_app$s uue$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$r (fun_app$s uue$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 C$ )(?v1 C$ ))(! (= (fun_app$t (fun_app$u uud$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$t (fun_app$u uud$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$v (fun_app$w uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$v (fun_app$w uuc$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(! (= (fun_app$x (fun_app$y uub$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$x (fun_app$y uub$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 D$ ))(! (= (fun_app$z (fun_app$aa uuu$ ?v0 )?v1 )(case_prod$ (uut$ ?v0 ?v1 ))):pattern ((fun_app$z (fun_app$aa uuu$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$ab (fun_app$ac uur$ ?v0 )?v1 )(case_prod$a (uuq$ ?v0 ?v1 ))):pattern ((fun_app$ab (fun_app$ac uur$ ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$ad (fun_app$ae uua$ ?v0 )?v1 )(case_prod$ (uu$ ?v0 ?v1 ))):pattern ((fun_app$ad (fun_app$ae uua$ ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 D$ ))(! (= (fun_app$r (fun_app$af uuh$ ?v0 )?v1 )(lnull$ ?v0 )):pattern ((fun_app$r (fun_app$af uuh$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$v (fun_app$ag uug$ ?v0 )?v1 )(lnull$a ?v0 )):pattern ((fun_app$v (fun_app$ag uug$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$r (fun_app$af (uu$ ?v0 ?v1 )?v2 )?v3 )(and (fun_app$ah (llist_all2$ p$ ?v0 )?v2 )(=> (lfinite$a ?v0 )(r$ ?v1 ?v3 )))):pattern ((fun_app$r (fun_app$af (uu$ ?v0 ?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 D$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$r (fun_app$af (uut$ ?v0 ?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$ ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$r (fun_app$af (uut$ ?v0 ?v1 )?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$v (fun_app$ag (uuq$ ?v0 ?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$a ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$v (fun_app$ag (uuq$ ?v0 ?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 Bool )(?v1 C_llist_d_bool_fun_fun$ )(?v2 C_llist$ )(?v3 D$ ))(! (= (fun_app$r (fun_app$af (uuy$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$r (fun_app$af ?v1 ?v2 )?v3 ))):pattern ((fun_app$r (fun_app$af (uuy$ ?v0 ?v1 )?v2 )?v3 )))):named a25 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$v (fun_app$ag (uuz$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$v (fun_app$ag ?v1 ?v2 )?v3 ))):pattern ((fun_app$v (fun_app$ag (uuz$ ?v0 ?v1 )?v2 )?v3 )))):named a26 ))
(assert (! (not (fun_app$ai (case_prod$b uua$ xsa$ )ysa$ )):named a27 ))
(assert (! (domainp$ (rel_fun$ (pcr_tllist$ uub$ uuc$ )(rel_fun$a (pcr_tllist$a uud$ uue$ )uuf$ ))xa$ ):named a28 ))
(assert (! (fun_app$ai (fun_app$aj xa$ xsa$ )ysa$ ):named a29 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 C_llist_d_prod$ ))(=> (fun_app$ai (fun_app$aj xa$ ?v0 )?v1 )(and (= (fun_app$ak (case_prod$a uug$ )?v0 )(fun_app$ai (case_prod$ uuh$ )?v1 ))(and (=> (and (fun_app$ak (case_prod$a uug$ )?v0 )(fun_app$ai (case_prod$ uuh$ )?v1 ))(r$ (case_prod$c uui$ ?v0 )(case_prod$d uuj$ ?v1 )))(=> (and (not (fun_app$ak (case_prod$a uug$ )?v0 ))(not (fun_app$ai (case_prod$ uuh$ )?v1 )))(and (fun_app$t (fun_app$al p$ (fun_app$am (comp$ uuk$ uul$ )?v0 ))(fun_app$an (comp$a uum$ uun$ )?v1 ))(or (fun_app$ai (fun_app$aj xa$ (fun_app$ao (apfst$ uuo$ )?v0 ))(fun_app$ap (apfst$a uup$ )?v1 ))(fun_app$ai (case_prod$b uua$ (fun_app$ao (apfst$ uuo$ )?v0 ))(fun_app$ap (apfst$a uup$ )?v1 ))))))))):named a30 ))
(assert (! (x$ xs$ ys$ ):named a31 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a32 ))
(assert (! (forall ((?v0 C_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a33 ))
(assert (! (rel_fun$b (pcr_tllist$ uub$ uuc$ )(rel_fun$c (pcr_tllist$ uub$ uuc$ )uuf$ )(case_prod$e uur$ )uus$ ):named a34 ))
(assert (! (rel_fun$d (pcr_tllist$a uud$ uue$ )(rel_fun$a (pcr_tllist$a uud$ uue$ )uuf$ )(case_prod$f uuu$ )uuv$ ):named a35 ))
(assert (! (forall ((?v0 A_a_llist_fun$ ))(= (comp$b uul$ (apfst$b ?v0 ))(comp$c ?v0 uuw$ ))):named a36 ))
(assert (! (forall ((?v0 C_c_llist_fun$ ))(= (comp$d uun$ (apfst$c ?v0 ))(comp$e ?v0 uux$ ))):named a37 ))
(assert (! (forall ((?v0 C_c_fun$ ))(= (comp$f uux$ (apfst$d ?v0 ))(comp$g ?v0 uux$ ))):named a38 ))
(assert (! (forall ((?v0 A_a_fun$ ))(= (comp$h uuw$ (apfst$e ?v0 ))(comp$i ?v0 uuw$ ))):named a39 ))
(assert (! (forall ((?v0 A_llist_a_fun$ ))(= (comp$j uuw$ (apfst$f ?v0 ))(comp$ ?v0 uul$ ))):named a40 ))
(assert (! (forall ((?v0 C_llist_c_fun$ ))(= (comp$k uux$ (apfst$g ?v0 ))(comp$a ?v0 uun$ ))):named a41 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ ))(= (comp$l uul$ (apfst$ ?v0 ))(comp$m ?v0 uul$ ))):named a42 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ ))(= (comp$n uun$ (apfst$a ?v0 ))(comp$o ?v0 uun$ ))):named a43 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_d_prod$ )(?v2 C_c_fun$ ))(= (= (fun_app$aq (apfst$d ?v0 )?v1 )(fun_app$aq (apfst$d ?v2 )?v1 ))(= (fun_app$ar ?v0 (fst$c ?v1 ))(fun_app$ar ?v2 (fst$c ?v1 ))))):named a44 ))
(assert (! (forall ((?v0 C_c_llist_fun$ )(?v1 C_d_prod$ )(?v2 C_c_llist_fun$ ))(= (= (fun_app$as (apfst$c ?v0 )?v1 )(fun_app$as (apfst$c ?v2 )?v1 ))(= (fun_app$at ?v0 (fst$c ?v1 ))(fun_app$at ?v2 (fst$c ?v1 ))))):named a45 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_prod$ )(?v2 A_a_fun$ ))(= (= (fun_app$au (apfst$e ?v0 )?v1 )(fun_app$au (apfst$e ?v2 )?v1 ))(= (fun_app$av ?v0 (fst$b ?v1 ))(fun_app$av ?v2 (fst$b ?v1 ))))):named a46 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_b_prod$ )(?v2 A_a_llist_fun$ ))(= (= (fun_app$aw (apfst$b ?v0 )?v1 )(fun_app$aw (apfst$b ?v2 )?v1 ))(= (fun_app$ax ?v0 (fst$b ?v1 ))(fun_app$ax ?v2 (fst$b ?v1 ))))):named a47 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_a_fun$ ))(= (= (fun_app$ay (apfst$f ?v0 )?v1 )(fun_app$ay (apfst$f ?v2 )?v1 ))(= (fun_app$c ?v0 (fst$a ?v1 ))(fun_app$c ?v2 (fst$a ?v1 ))))):named a48 ))
(assert (! (forall ((?v0 C_llist_c_fun$ )(?v1 C_llist_d_prod$ )(?v2 C_llist_c_fun$ ))(= (= (fun_app$az (apfst$g ?v0 )?v1 )(fun_app$az (apfst$g ?v2 )?v1 ))(= (fun_app$b ?v0 (fst$ ?v1 ))(fun_app$b ?v2 (fst$ ?v1 ))))):named a49 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_a_llist_fun$ ))(= (= (fun_app$ao (apfst$ ?v0 )?v1 )(fun_app$ao (apfst$ ?v2 )?v1 ))(= (fun_app$a ?v0 (fst$a ?v1 ))(fun_app$a ?v2 (fst$a ?v1 ))))):named a50 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 C_llist_d_prod$ )(?v2 C_llist_c_llist_fun$ ))(= (= (fun_app$ap (apfst$a ?v0 )?v1 )(fun_app$ap (apfst$a ?v2 )?v1 ))(= (fun_app$ ?v0 (fst$ ?v1 ))(fun_app$ ?v2 (fst$ ?v1 ))))):named a51 ))
(assert (! (forall ((?v0 A_a_llist_fun$ )(?v1 A_b_prod$ ))(= (fst$a (fun_app$aw (apfst$b ?v0 )?v1 ))(fun_app$ax ?v0 (fst$b ?v1 )))):named a52 ))
(assert (! (forall ((?v0 C_c_llist_fun$ )(?v1 C_d_prod$ ))(= (fst$ (fun_app$as (apfst$c ?v0 )?v1 ))(fun_app$at ?v0 (fst$c ?v1 )))):named a53 ))
(assert (! (forall ((?v0 C_llist_c_fun$ )(?v1 C_llist_d_prod$ ))(= (fst$c (fun_app$az (apfst$g ?v0 )?v1 ))(fun_app$b ?v0 (fst$ ?v1 )))):named a54 ))
(assert (! (forall ((?v0 C_c_fun$ )(?v1 C_d_prod$ ))(= (fst$c (fun_app$aq (apfst$d ?v0 )?v1 ))(fun_app$ar ?v0 (fst$c ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_llist_a_fun$ )(?v1 A_llist_b_prod$ ))(= (fst$b (fun_app$ay (apfst$f ?v0 )?v1 ))(fun_app$c ?v0 (fst$a ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_prod$ ))(= (fst$b (fun_app$au (apfst$e ?v0 )?v1 ))(fun_app$av ?v0 (fst$b ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_llist_a_llist_fun$ )(?v1 A_llist_b_prod$ ))(= (fst$a (fun_app$ao (apfst$ ?v0 )?v1 ))(fun_app$a ?v0 (fst$a ?v1 )))):named a58 ))
(assert (! (forall ((?v0 C_llist_c_llist_fun$ )(?v1 C_llist_d_prod$ ))(= (fst$ (fun_app$ap (apfst$a ?v0 )?v1 ))(fun_app$ ?v0 (fst$ ?v1 )))):named a59 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfinite$a (ltl$ ?v0 ))(lfinite$a ?v0 ))):named a60 ))
(assert (! (forall ((?v0 C_llist$ ))(= (lfinite$ (ltl$a ?v0 ))(lfinite$ ?v0 ))):named a61 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(= (fun_app$ba (llist_all2$a ?v0 ?v1 )?v2 )(and (= (lnull$a ?v1 )(lnull$a ?v2 ))(=> (and (not (lnull$a ?v1 ))(not (lnull$a ?v2 )))(and (fun_app$x (fun_app$y ?v0 (lhd$ ?v1 ))(lhd$ ?v2 ))(fun_app$ba (llist_all2$a ?v0 (ltl$ ?v1 ))(ltl$ ?v2 ))))))):named a62 ))
(assert (! (forall ((?v0 C_a_bool_fun_fun$ )(?v1 C_llist$ )(?v2 A_llist$ ))(= (fun_app$ba (llist_all2$b ?v0 ?v1 )?v2 )(and (= (lnull$ ?v1 )(lnull$a ?v2 ))(=> (and (not (lnull$ ?v1 ))(not (lnull$a ?v2 )))(and (fun_app$x (fun_app$bb ?v0 (lhd$a ?v1 ))(lhd$ ?v2 ))(fun_app$ba (llist_all2$b ?v0 (ltl$a ?v1 ))(ltl$ ?v2 ))))))):named a63 ))
(assert (! (forall ((?v0 C_c_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ ))(= (fun_app$ah (llist_all2$c ?v0 ?v1 )?v2 )(and (= (lnull$ ?v1 )(lnull$ ?v2 ))(=> (and (not (lnull$ ?v1 ))(not (lnull$ ?v2 )))(and (fun_app$t (fun_app$u ?v0 (lhd$a ?v1 ))(lhd$a ?v2 ))(fun_app$ah (llist_all2$c ?v0 (ltl$a ?v1 ))(ltl$a ?v2 ))))))):named a64 ))
(assert (! (forall ((?v0 A_c_bool_fun_fun$ )(?v1 A_llist$ )(?v2 C_llist$ ))(= (fun_app$ah (llist_all2$ ?v0 ?v1 )?v2 )(and (= (lnull$a ?v1 )(lnull$ ?v2 ))(=> (and (not (lnull$a ?v1 ))(not (lnull$ ?v2 )))(and (fun_app$t (fun_app$al ?v0 (lhd$ ?v1 ))(lhd$a ?v2 ))(fun_app$ah (llist_all2$ ?v0 (ltl$ ?v1 ))(ltl$a ?v2 ))))))):named a65 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ )(?v2 A_a_bool_fun_fun$ ))(=> (and (= (lnull$a ?v0 )(lnull$a ?v1 ))(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(and (fun_app$x (fun_app$y ?v2 (lhd$ ?v0 ))(lhd$ ?v1 ))(fun_app$ba (llist_all2$a ?v2 (ltl$ ?v0 ))(ltl$ ?v1 )))))(fun_app$ba (llist_all2$a ?v2 ?v0 )?v1 ))):named a66 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 A_llist$ )(?v2 C_a_bool_fun_fun$ ))(=> (and (= (lnull$ ?v0 )(lnull$a ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$a ?v1 )))(and (fun_app$x (fun_app$bb ?v2 (lhd$a ?v0 ))(lhd$ ?v1 ))(fun_app$ba (llist_all2$b ?v2 (ltl$a ?v0 ))(ltl$ ?v1 )))))(fun_app$ba (llist_all2$b ?v2 ?v0 )?v1 ))):named a67 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ )(?v2 C_c_bool_fun_fun$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (fun_app$t (fun_app$u ?v2 (lhd$a ?v0 ))(lhd$a ?v1 ))(fun_app$ah (llist_all2$c ?v2 (ltl$a ?v0 ))(ltl$a ?v1 )))))(fun_app$ah (llist_all2$c ?v2 ?v0 )?v1 ))):named a68 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 C_llist$ )(?v2 A_c_bool_fun_fun$ ))(=> (and (= (lnull$a ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$a ?v0 ))(not (lnull$ ?v1 )))(and (fun_app$t (fun_app$al ?v2 (lhd$ ?v0 ))(lhd$a ?v1 ))(fun_app$ah (llist_all2$ ?v2 (ltl$ ?v0 ))(ltl$a ?v1 )))))(fun_app$ah (llist_all2$ ?v2 ?v0 )?v1 ))):named a69 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$ba (fun_app$bc ?v0 ?v1 )?v2 )(and (forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$ba (fun_app$bc ?v0 ?v4 )?v5 )(= (lnull$a ?v4 )(lnull$a ?v5 ))))(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (and (fun_app$ba (fun_app$bc ?v0 ?v4 )?v5 )(and (not (lnull$a ?v4 ))(not (lnull$a ?v5 ))))(and (fun_app$x (fun_app$y ?v3 (lhd$ ?v4 ))(lhd$ ?v5 ))(or (fun_app$ba (fun_app$bc ?v0 (ltl$ ?v4 ))(ltl$ ?v5 ))(fun_app$ba (llist_all2$a ?v3 (ltl$ ?v4 ))(ltl$ ?v5 ))))))))(fun_app$ba (llist_all2$a ?v3 ?v1 )?v2 ))):named a70 ))
(assert (! (forall ((?v0 C_llist_a_llist_bool_fun_fun$ )(?v1 C_llist$ )(?v2 A_llist$ )(?v3 C_a_bool_fun_fun$ ))(=> (and (fun_app$ba (fun_app$bd ?v0 ?v1 )?v2 )(and (forall ((?v4 C_llist$ )(?v5 A_llist$ ))(=> (fun_app$ba (fun_app$bd ?v0 ?v4 )?v5 )(= (lnull$ ?v4 )(lnull$a ?v5 ))))(forall ((?v4 C_llist$ )(?v5 A_llist$ ))(=> (and (fun_app$ba (fun_app$bd ?v0 ?v4 )?v5 )(and (not (lnull$ ?v4 ))(not (lnull$a ?v5 ))))(and (fun_app$x (fun_app$bb ?v3 (lhd$a ?v4 ))(lhd$ ?v5 ))(or (fun_app$ba (fun_app$bd ?v0 (ltl$a ?v4 ))(ltl$ ?v5 ))(fun_app$ba (llist_all2$b ?v3 (ltl$a ?v4 ))(ltl$ ?v5 ))))))))(fun_app$ba (llist_all2$b ?v3 ?v1 )?v2 ))):named a71 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_c_bool_fun_fun$ ))(=> (and (fun_app$ah (fun_app$be ?v0 ?v1 )?v2 )(and (forall ((?v4 C_llist$ )(?v5 C_llist$ ))(=> (fun_app$ah (fun_app$be ?v0 ?v4 )?v5 )(= (lnull$ ?v4 )(lnull$ ?v5 ))))(forall ((?v4 C_llist$ )(?v5 C_llist$ ))(=> (and (fun_app$ah (fun_app$be ?v0 ?v4 )?v5 )(and (not (lnull$ ?v4 ))(not (lnull$ ?v5 ))))(and (fun_app$t (fun_app$u ?v3 (lhd$a ?v4 ))(lhd$a ?v5 ))(or (fun_app$ah (fun_app$be ?v0 (ltl$a ?v4 ))(ltl$a ?v5 ))(fun_app$ah (llist_all2$c ?v3 (ltl$a ?v4 ))(ltl$a ?v5 ))))))))(fun_app$ah (llist_all2$c ?v3 ?v1 )?v2 ))):named a72 ))
(assert (! (forall ((?v0 A_llist_c_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 C_llist$ )(?v3 A_c_bool_fun_fun$ ))(=> (and (fun_app$ah (fun_app$bf ?v0 ?v1 )?v2 )(and (forall ((?v4 A_llist$ )(?v5 C_llist$ ))(=> (fun_app$ah (fun_app$bf ?v0 ?v4 )?v5 )(= (lnull$a ?v4 )(lnull$ ?v5 ))))(forall ((?v4 A_llist$ )(?v5 C_llist$ ))(=> (and (fun_app$ah (fun_app$bf ?v0 ?v4 )?v5 )(and (not (lnull$a ?v4 ))(not (lnull$ ?v5 ))))(and (fun_app$t (fun_app$al ?v3 (lhd$ ?v4 ))(lhd$a ?v5 ))(or (fun_app$ah (fun_app$bf ?v0 (ltl$ ?v4 ))(ltl$a ?v5 ))(fun_app$ah (llist_all2$ ?v3 (ltl$ ?v4 ))(ltl$a ?v5 ))))))))(fun_app$ah (llist_all2$ ?v3 ?v1 )?v2 ))):named a73 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$ba (fun_app$bc ?v0 ?v1 )?v2 )(forall ((?v4 A_llist$ )(?v5 A_llist$ ))(=> (fun_app$ba (fun_app$bc ?v0 ?v4 )?v5 )(and (= (lnull$a ?v4 )(lnull$a ?v5 ))(=> (and (not (lnull$a ?v4 ))(not (lnull$a ?v5 )))(and (fun_app$x (fun_app$y ?v3 (lhd$ ?v4 ))(lhd$ ?v5 ))(fun_app$ba (fun_app$bc ?v0 (ltl$ ?v4 ))(ltl$ ?v5 ))))))))(fun_app$ba (llist_all2$a ?v3 ?v1 )?v2 ))):named a74 ))
(assert (! (forall ((?v0 C_llist_a_llist_bool_fun_fun$ )(?v1 C_llist$ )(?v2 A_llist$ )(?v3 C_a_bool_fun_fun$ ))(=> (and (fun_app$ba (fun_app$bd ?v0 ?v1 )?v2 )(forall ((?v4 C_llist$ )(?v5 A_llist$ ))(=> (fun_app$ba (fun_app$bd ?v0 ?v4 )?v5 )(and (= (lnull$ ?v4 )(lnull$a ?v5 ))(=> (and (not (lnull$ ?v4 ))(not (lnull$a ?v5 )))(and (fun_app$x (fun_app$bb ?v3 (lhd$a ?v4 ))(lhd$ ?v5 ))(fun_app$ba (fun_app$bd ?v0 (ltl$a ?v4 ))(ltl$ ?v5 ))))))))(fun_app$ba (llist_all2$b ?v3 ?v1 )?v2 ))):named a75 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ )(?v3 C_c_bool_fun_fun$ ))(=> (and (fun_app$ah (fun_app$be ?v0 ?v1 )?v2 )(forall ((?v4 C_llist$ )(?v5 C_llist$ ))(=> (fun_app$ah (fun_app$be ?v0 ?v4 )?v5 )(and (= (lnull$ ?v4 )(lnull$ ?v5 ))(=> (and (not (lnull$ ?v4 ))(not (lnull$ ?v5 )))(and (fun_app$t (fun_app$u ?v3 (lhd$a ?v4 ))(lhd$a ?v5 ))(fun_app$ah (fun_app$be ?v0 (ltl$a ?v4 ))(ltl$a ?v5 ))))))))(fun_app$ah (llist_all2$c ?v3 ?v1 )?v2 ))):named a76 ))
(assert (! (forall ((?v0 A_llist_c_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 C_llist$ )(?v3 A_c_bool_fun_fun$ ))(=> (and (fun_app$ah (fun_app$bf ?v0 ?v1 )?v2 )(forall ((?v4 A_llist$ )(?v5 C_llist$ ))(=> (fun_app$ah (fun_app$bf ?v0 ?v4 )?v5 )(and (= (lnull$a ?v4 )(lnull$ ?v5 ))(=> (and (not (lnull$a ?v4 ))(not (lnull$ ?v5 )))(and (fun_app$t (fun_app$al ?v3 (lhd$ ?v4 ))(lhd$a ?v5 ))(fun_app$ah (fun_app$bf ?v0 (ltl$ ?v4 ))(ltl$a ?v5 ))))))))(fun_app$ah (llist_all2$ ?v3 ?v1 )?v2 ))):named a77 ))
(assert (! (forall ((?v0 Bool )(?v1 C_llist_d_bool_fun_fun$ )(?v2 C_llist_d_prod$ ))(= (fun_app$ai (case_prod$ (uuy$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$ai (case_prod$ ?v1 )?v2 )))):named a78 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ak (case_prod$a (uuz$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$ak (case_prod$a ?v1 )?v2 )))):named a79 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 A_llist$ ))(=> (and (= (lnull$a ?v0 )(lnull$a ?v1 ))(=> (and (not (lnull$a ?v0 ))(not (lnull$a ?v1 )))(and (= (lhd$ ?v0 )(lhd$ ?v1 ))(= (ltl$ ?v0 )(ltl$ ?v1 )))))(= ?v0 ?v1 ))):named a80 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 C_llist$ ))(=> (and (= (lnull$ ?v0 )(lnull$ ?v1 ))(=> (and (not (lnull$ ?v0 ))(not (lnull$ ?v1 )))(and (= (lhd$a ?v0 )(lhd$a ?v1 ))(= (ltl$a ?v0 )(ltl$a ?v1 )))))(= ?v0 ?v1 ))):named a81 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ba (fun_app$bc ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ba (fun_app$bc ?v0 ?v3 )?v4 )(and (= (lnull$a ?v3 )(lnull$a ?v4 ))(=> (and (not (lnull$a ?v3 ))(not (lnull$a ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(or (fun_app$ba (fun_app$bc ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))(= (ltl$ ?v3 )(ltl$ ?v4 )))))))))(= ?v1 ?v2 ))):named a82 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$ah (fun_app$be ?v0 ?v1 )?v2 )(forall ((?v3 C_llist$ )(?v4 C_llist$ ))(=> (fun_app$ah (fun_app$be ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$a ?v3 )(lhd$a ?v4 ))(or (fun_app$ah (fun_app$be ?v0 (ltl$a ?v3 ))(ltl$a ?v4 ))(= (ltl$a ?v3 )(ltl$a ?v4 )))))))))(= ?v1 ?v2 ))):named a83 ))
(assert (! (forall ((?v0 A_llist_a_llist_bool_fun_fun$ )(?v1 A_llist$ )(?v2 A_llist$ ))(=> (and (fun_app$ba (fun_app$bc ?v0 ?v1 )?v2 )(forall ((?v3 A_llist$ )(?v4 A_llist$ ))(=> (fun_app$ba (fun_app$bc ?v0 ?v3 )?v4 )(and (= (lnull$a ?v3 )(lnull$a ?v4 ))(=> (and (not (lnull$a ?v3 ))(not (lnull$a ?v4 )))(and (= (lhd$ ?v3 )(lhd$ ?v4 ))(fun_app$ba (fun_app$bc ?v0 (ltl$ ?v3 ))(ltl$ ?v4 ))))))))(= ?v1 ?v2 ))):named a84 ))
(assert (! (forall ((?v0 C_llist_c_llist_bool_fun_fun$ )(?v1 C_llist$ )(?v2 C_llist$ ))(=> (and (fun_app$ah (fun_app$be ?v0 ?v1 )?v2 )(forall ((?v3 C_llist$ )(?v4 C_llist$ ))(=> (fun_app$ah (fun_app$be ?v0 ?v3 )?v4 )(and (= (lnull$ ?v3 )(lnull$ ?v4 ))(=> (and (not (lnull$ ?v3 ))(not (lnull$ ?v4 )))(and (= (lhd$a ?v3 )(lhd$a ?v4 ))(fun_app$ah (fun_app$be ?v0 (ltl$a ?v3 ))(ltl$a ?v4 ))))))))(= ?v1 ?v2 ))):named a85 ))
(assert (! (forall ((?v0 C_llist_d_prod$ )(?v1 C_llist_d_prod$ )(?v2 C_llist_d_c_llist_d_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$bg (case_prod$f ?v2 )?v0 )(fun_app$bg (case_prod$f ?v2 )?v1 )))):named a86 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$bh (case_prod$e ?v2 )?v0 )(fun_app$bh (case_prod$e ?v2 )?v1 )))):named a87 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_c_llist_d_prod_bool_fun_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$b ?v2 ?v0 )(case_prod$b ?v2 ?v1 )))):named a88 ))
(assert (! (forall ((?v0 C_llist_d_prod$ )(?v1 C_llist_d_prod$ )(?v2 C_llist_d_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$ai (case_prod$ ?v2 )?v0 )(fun_app$ai (case_prod$ ?v2 )?v1 )))):named a89 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_bool_fun_fun$ ))(=> (= ?v0 ?v1 )(= (fun_app$ak (case_prod$a ?v2 )?v0 )(fun_app$ak (case_prod$a ?v2 )?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_b_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$c ?v2 ?v0 )(case_prod$c ?v2 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 C_llist_d_prod$ )(?v1 C_llist_d_prod$ )(?v2 C_llist_d_d_fun_fun$ ))(=> (= ?v0 ?v1 )(= (case_prod$d ?v2 ?v0 )(case_prod$d ?v2 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 A_llist$ ))(=> (and (=> (lnull$a ?v0 )false )(=> (not (lnull$a ?v0 ))false ))false )):named a93 ))
(assert (! (forall ((?v0 C_llist$ ))(=> (and (=> (lnull$ ?v0 )false )(=> (not (lnull$ ?v0 ))false ))false )):named a94 ))
(check-sat )
(get-unsat-core )
