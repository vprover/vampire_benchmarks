(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Bool_b_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_b_tllist_b_fun$ 0 )
(declare-sort A_c_bool_fun_fun$ 0 )
(declare-sort B_a_b_tllist_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort B_c_b_tllist_fun$ 0 )
(declare-sort C_b_tllist_b_fun$ 0 )
(declare-sort A_llist_b_b_fun_fun$ 0 )
(declare-sort C_b_tllist_bool_fun$ 0 )
(declare-sort A_llist_b_prod_b_fun$ 0 )
(declare-sort B_a_llist_b_prod_fun$ 0 )
(declare-sort B_c_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun$ 0 )
(declare-sort C_llist_b_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun$ 0 )
(declare-sort C_llist_b_prod_bool_fun$ 0 )
(declare-sort A_llist_b_a_b_tllist_fun_fun$ 0 )
(declare-sort B_a_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort B_c_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_b_c_b_tllist_fun_fun$ 0 )
(declare-sort B_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort B_c_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_c_llist_b_prod_fun_fun$ 0 )
(declare-sort C_llist_b_a_llist_b_prod_fun_fun$ 0 )
(declare-sort C_llist_b_c_llist_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_prod_c_b_tllist_bool_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_prod_a_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_b_prod_c_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_b_fun_fun_a_llist_b_b_fun_fun_fun$ 0 )
(declare-sort A_llist_b_b_fun_fun_a_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun_a_llist_b_b_fun_fun_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun_a_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_b_bool_fun_fun_c_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_a_b_tllist_fun_fun_a_llist_b_b_fun_fun_fun$ 0 )
(declare-sort A_llist_b_b_fun_fun_a_llist_b_a_b_tllist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_b_fun_fun_fun$ 0 )
(declare-sort A_llist_b_b_fun_fun_a_llist_b_a_llist_b_prod_fun_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_c_llist_b_prod_fun_fun_a_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_b_a_llist_b_prod_fun_fun_c_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort C_llist_b_c_llist_b_prod_fun_fun_c_llist_b_bool_fun_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_b_tllist_fun_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_llist_b_prod_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_llist_b_prod$ 0)
(declare-fun fst$ (A_llist_b_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_prod$)B$)
(declare-fun pair$ (A_llist$ B$ )A_llist_b_prod$)
(declare-sort C_b_tllist$ 0)
(declare-sort C_llist$ 0)
(declare-fun terminal$ (C_b_tllist$)B$)
(declare-fun tNil$ (B$ )C_b_tllist$)
(declare-fun thd$ (C_b_tllist$)C$)
(declare-fun ttl$ (C_b_tllist$)C_b_tllist$)
(declare-fun tCons$ (C$ C_b_tllist$ )C_b_tllist$)
(declare-fun lNil$a ()C_llist$)
(declare-fun lhd$a (C_llist$)C$)
(declare-fun ltl$a (C_llist$)C_llist$)
(declare-fun lCons$a (C$ C_llist$ )C_llist$)
(declare-sort C_llist_b_prod$ 0)
(declare-fun fst$a (C_llist_b_prod$)C_llist$)
(declare-fun snd$a (C_llist_b_prod$)B$)
(declare-fun pair$a (C_llist$ B$ )C_llist_b_prod$)
(declare-sort A_b_tllist$ 0)
(declare-fun terminal$a (A_b_tllist$)B$)
(declare-fun tNil$a (B$ )A_b_tllist$)
(declare-fun thd$a (A_b_tllist$)A$)
(declare-fun ttl$a (A_b_tllist$)A_b_tllist$)
(declare-fun tCons$a (A$ A_b_tllist$ )A_b_tllist$)
(declare-fun a$ ()A_c_bool_fun_fun$ )
(declare-fun uu$ ()B_b_bool_fun_fun$ )
(declare-fun uua$ ()A_llist_b_b_fun_fun$ )
(declare-fun uub$ ()C_b_tllist_b_fun$ )
(declare-fun uuc$ (C_llist_b_bool_fun_fun$ )C_llist_b_c_llist_b_prod_fun_fun_c_llist_b_bool_fun_fun_fun$ )
(declare-fun uud$ (C_llist_b_bool_fun_fun$ )A_llist_b_c_llist_b_prod_fun_fun_a_llist_b_bool_fun_fun_fun$ )
(declare-fun uue$ (C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ C_llist_b_c_llist_b_prod_fun_fun$ )C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuf$ (A_llist_b_a_b_tllist_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_b_tllist_fun_fun_fun$ )
(declare-fun uug$ (A_llist_b_bool_fun_fun$ )C_llist_b_a_llist_b_prod_fun_fun_c_llist_b_bool_fun_fun_fun$ )
(declare-fun uuh$ (A_llist_b_bool_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_bool_fun_fun_fun$ )
(declare-fun uui$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuj$ (A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_llist_b_prod_fun_fun_fun$ )
(declare-fun uuk$ (A_llist_b_b_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_b_fun_fun_fun$ )
(declare-fun uul$ (C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ )C_llist_b_prod_c_llist_b_bool_fun_fun_fun$ )
(declare-fun uum$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )A_llist_b_prod_a_llist_b_bool_fun_fun_fun$ )
(declare-fun uun$ (B_b_fun$ )A_llist_b_b_fun_fun_a_llist_b_b_fun_fun_fun$ )
(declare-fun uuo$ (B_a_llist_b_prod_fun$ )A_llist_b_b_fun_fun_a_llist_b_a_llist_b_prod_fun_fun_fun$ )
(declare-fun uup$ (A_llist_b_prod_b_fun$ )A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_b_fun_fun_fun$ )
(declare-fun uuq$ (A_llist_b_prod_a_llist_b_prod_fun$ )A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_llist_b_prod_fun_fun_fun$ )
(declare-fun uur$ (B_bool_fun$ )A_llist_b_b_fun_fun_a_llist_b_bool_fun_fun_fun$ )
(declare-fun uus$ (Bool_bool_fun$ )C_llist_b_bool_fun_fun_c_llist_b_bool_fun_fun_fun$ )
(declare-fun uut$ (Bool_b_fun$ )A_llist_b_bool_fun_fun_a_llist_b_b_fun_fun_fun$ )
(declare-fun uuu$ (Bool_bool_fun$ )A_llist_b_bool_fun_fun_a_llist_b_bool_fun_fun_fun$ )
(declare-fun uuv$ (B_a_b_tllist_fun$ )A_llist_b_b_fun_fun_a_llist_b_a_b_tllist_fun_fun_fun$ )
(declare-fun uuw$ (A_b_tllist_b_fun$ )A_llist_b_a_b_tllist_fun_fun_a_llist_b_b_fun_fun_fun$ )
(declare-fun uux$ ()A_b_tllist_b_fun$ )
(declare-fun uuy$ ()C_llist_b_c_b_tllist_fun_fun$ )
(declare-fun uuz$ (C_llist$ )B_c_llist_b_bool_fun_fun_fun$ )
(declare-fun uva$ ()C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uvb$ ()A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun uvc$ (A_llist$ )B_a_llist_b_bool_fun_fun_fun$ )
(declare-fun uvd$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun fun_app$ (C_b_tllist_b_fun$ C_b_tllist$ )B$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun rel_fun$ (A_llist_b_prod_c_b_tllist_bool_fun_fun$ B_b_bool_fun_fun$ A_llist_b_prod_b_fun$ C_b_tllist_b_fun$ )Bool )
(declare-fun fun_app$a (A_b_tllist_b_fun$ A_b_tllist$ )B$ )
(declare-fun fun_app$b (B_b_fun$ B$ )B$ )
(declare-fun fun_app$c (A_llist_b_b_fun_fun$ A_llist$ )B_b_fun$ )
(declare-fun fun_app$d (B_c_b_tllist_fun$ B$ )C_b_tllist$ )
(declare-fun fun_app$e (C_llist_b_c_b_tllist_fun_fun$ C_llist$ )B_c_b_tllist_fun$ )
(declare-fun fun_app$f (B_a_b_tllist_fun$ B$ )A_b_tllist$ )
(declare-fun fun_app$g (A_llist_b_a_b_tllist_fun_fun$ A_llist$ )B_a_b_tllist_fun$ )
(declare-fun fun_app$h (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$i (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$j (B_a_llist_b_prod_bool_fun_fun$ B$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$k (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist$ )B_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$l (B_a_llist_b_bool_fun_fun_fun$ B$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$m (B_c_llist_b_prod_bool_fun_fun$ B$ )C_llist_b_prod_bool_fun$ )
(declare-fun fun_app$n (C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ C_llist$ )B_c_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$o (B_c_llist_b_bool_fun_fun_fun$ B$ )C_llist_b_bool_fun_fun$ )
(declare-fun fun_app$p (C_llist_b_bool_fun_fun$ C_llist$ )B_bool_fun$ )
(declare-fun fun_app$q (C_llist_b_prod_c_llist_b_bool_fun_fun_fun$ C_llist_b_prod$ )C_llist_b_bool_fun_fun$ )
(declare-fun fun_app$r (C_llist_b_prod_bool_fun$ C_llist_b_prod$ )Bool )
(declare-fun fun_app$s (A_llist_b_bool_fun_fun$ A_llist$ )B_bool_fun$ )
(declare-fun fun_app$t (A_llist_b_prod_a_llist_b_bool_fun_fun_fun$ A_llist_b_prod$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$u (A_llist_b_prod_bool_fun$ A_llist_b_prod$ )Bool )
(declare-fun fun_app$v (C_llist_b_c_llist_b_prod_fun_fun_c_llist_b_bool_fun_fun_fun$ C_llist_b_c_llist_b_prod_fun_fun$ )C_llist_b_bool_fun_fun$ )
(declare-fun fun_app$w (B_c_llist_b_prod_fun$ B$ )C_llist_b_prod$ )
(declare-fun fun_app$x (C_llist_b_c_llist_b_prod_fun_fun$ C_llist$ )B_c_llist_b_prod_fun$ )
(declare-fun fun_app$y (A_llist_b_c_llist_b_prod_fun_fun_a_llist_b_bool_fun_fun_fun$ A_llist_b_c_llist_b_prod_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$z (A_llist_b_c_llist_b_prod_fun_fun$ A_llist$ )B_c_llist_b_prod_fun$ )
(declare-fun lfinite$a (C_llist$ )Bool )
(declare-fun case_prod$ (A_llist_b_bool_fun_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$aa (A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_b_tllist_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun fun_app$ab (B_a_llist_b_prod_fun$ B$ )A_llist_b_prod$ )
(declare-fun fun_app$ac (A_llist_b_a_llist_b_prod_fun_fun$ A_llist$ )B_a_llist_b_prod_fun$ )
(declare-fun fun_app$ad (A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_a_llist_b_prod_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun fun_app$ae (A_llist_b_prod_a_llist_b_prod_fun$ A_llist_b_prod$ )A_llist_b_prod$ )
(declare-fun fun_app$af (C_llist_b_a_llist_b_prod_fun_fun_c_llist_b_bool_fun_fun_fun$ C_llist_b_a_llist_b_prod_fun_fun$ )C_llist_b_bool_fun_fun$ )
(declare-fun fun_app$ag (C_llist_b_a_llist_b_prod_fun_fun$ C_llist$ )B_a_llist_b_prod_fun$ )
(declare-fun fun_app$ah (A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_bool_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$ai (A_llist_b_a_llist_b_prod_fun_fun_a_llist_b_b_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_b_fun_fun$ )
(declare-fun fun_app$aj (A_llist_b_prod_b_fun$ A_llist_b_prod$ )B$ )
(declare-fun fun_app$ak (A_llist_b_a_b_tllist_fun_fun_a_llist_b_b_fun_fun_fun$ A_llist_b_a_b_tllist_fun_fun$ )A_llist_b_b_fun_fun$ )
(declare-fun fun_app$al (C_llist_b_bool_fun_fun_c_llist_b_bool_fun_fun_fun$ C_llist_b_bool_fun_fun$ )C_llist_b_bool_fun_fun$ )
(declare-fun fun_app$am (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$an (A_llist_b_bool_fun_fun_a_llist_b_bool_fun_fun_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$ao (A_llist_b_bool_fun_fun_a_llist_b_b_fun_fun_fun$ A_llist_b_bool_fun_fun$ )A_llist_b_b_fun_fun$ )
(declare-fun fun_app$ap (Bool_b_fun$ Bool )B$ )
(declare-fun fun_app$aq (A_llist_b_b_fun_fun_a_llist_b_a_b_tllist_fun_fun_fun$ A_llist_b_b_fun_fun$ )A_llist_b_a_b_tllist_fun_fun$ )
(declare-fun fun_app$ar (A_llist_b_b_fun_fun_a_llist_b_a_llist_b_prod_fun_fun_fun$ A_llist_b_b_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun fun_app$as (A_llist_b_b_fun_fun_a_llist_b_bool_fun_fun_fun$ A_llist_b_b_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun_app$at (A_llist_b_b_fun_fun_a_llist_b_b_fun_fun_fun$ A_llist_b_b_fun_fun$ )A_llist_b_b_fun_fun$ )
(declare-fun fun_app$au (C_b_tllist_bool_fun$ C_b_tllist$ )Bool )
(declare-fun fun_app$av (A_llist_b_prod_c_b_tllist_bool_fun_fun$ A_llist_b_prod$ )C_b_tllist_bool_fun$ )
(declare-fun terminal0$ ()A_b_tllist_b_fun$ )
(declare-fun undefined$ ()B$ )
(declare-fun case_prod$a (C_llist_b_bool_fun_fun$ )C_llist_b_prod_bool_fun$ )
(declare-fun case_prod$b (C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ C_llist_b_prod$ )C_llist_b_prod_bool_fun$ )
(declare-fun case_prod$c (A_llist_b_a_b_tllist_fun_fun$ A_llist_b_prod$ )A_b_tllist$ )
(declare-fun case_prod$d (A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_prod_a_llist_b_prod_fun$ )
(declare-fun case_prod$e (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$ )A_llist_b_prod_bool_fun$ )
(declare-fun case_prod$f (A_llist_b_b_fun_fun$ )A_llist_b_prod_b_fun$ )
(declare-fun case_prod$g (C_llist_b_c_llist_b_prod_fun_fun$ C_llist_b_prod$ )C_llist_b_prod$ )
(declare-fun case_prod$h (A_llist_b_c_llist_b_prod_fun_fun$ A_llist_b_prod$ )C_llist_b_prod$ )
(declare-fun case_prod$i (C_llist_b_a_llist_b_prod_fun_fun$ C_llist_b_prod$ )A_llist_b_prod$ )
(declare-fun case_prod$j (C_llist_b_c_b_tllist_fun_fun$ C_llist_b_prod$ )C_b_tllist$ )
(declare-fun pcr_tllist$ (A_c_bool_fun_fun$ B_b_bool_fun_fun$ )A_llist_b_prod_c_b_tllist_bool_fun_fun$ )
(declare-fun terminal0$a ()C_b_tllist_b_fun$ )
(declare-fun llist_of_tllist$ (A_b_tllist$ )A_llist$ )
(declare-fun tllist_of_llist$ (B$ C_llist$ )C_b_tllist$ )
(declare-fun llist_of_tllist$a (C_b_tllist$ )C_llist$ )
(declare-fun tllist_of_llist$a (B$ A_llist$ )A_b_tllist$ )
(assert (! (forall ((?v0 C_b_tllist$ ))(! (= (fun_app$ uub$ ?v0 )(terminal$ ?v0 )):pattern ((fun_app$ uub$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (= (fun_app$a uux$ ?v0 )(terminal$a ?v0 )):pattern ((fun_app$a uux$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(ite (lfinite$ ?v0 )?v1 undefined$ )):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 B$ ))(! (= (fun_app$d (fun_app$e uuy$ ?v0 )?v1 )(tllist_of_llist$ ?v1 ?v0 )):pattern ((fun_app$d (fun_app$e uuy$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$f (fun_app$g uvb$ ?v0 )?v1 )(tllist_of_llist$a ?v1 ?v0 )):pattern ((fun_app$f (fun_app$g uvb$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ ))(! (= (fun_app$h (fun_app$i uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$h (fun_app$i uu$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$j (fun_app$k uvd$ ?v0 )?v1 )(case_prod$ (fun_app$l (uvc$ ?v0 )?v1 ))):pattern ((fun_app$j (fun_app$k uvd$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 B$ ))(! (= (fun_app$m (fun_app$n uva$ ?v0 )?v1 )(case_prod$a (fun_app$o (uuz$ ?v0 )?v1 ))):pattern ((fun_app$m (fun_app$n uva$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ )(?v1 C_llist_b_prod$ )(?v2 C_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$p (fun_app$q (uul$ ?v0 )?v1 )?v2 )?v3 )(fun_app$r (fun_app$m (fun_app$n ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$h (fun_app$p (fun_app$q (uul$ ?v0 )?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$s (fun_app$t (uum$ ?v0 )?v1 )?v2 )?v3 )(fun_app$u (fun_app$j (fun_app$k ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$h (fun_app$s (fun_app$t (uum$ ?v0 )?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 B$ )(?v2 C_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$p (fun_app$o (uuz$ ?v0 )?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$a ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$h (fun_app$p (fun_app$o (uuz$ ?v0 )?v1 )?v2 )?v3 )))):named a10 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$s (fun_app$l (uvc$ ?v0 )?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$ ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$h (fun_app$s (fun_app$l (uvc$ ?v0 )?v1 )?v2 )?v3 )))):named a11 ))
(assert (! (forall ((?v0 C_llist_b_bool_fun_fun$ )(?v1 C_llist_b_c_llist_b_prod_fun_fun$ )(?v2 C_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$p (fun_app$v (uuc$ ?v0 )?v1 )?v2 )?v3 )(fun_app$r (case_prod$a ?v0 )(fun_app$w (fun_app$x ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$p (fun_app$v (uuc$ ?v0 )?v1 )?v2 )?v3 )))):named a12 ))
(assert (! (forall ((?v0 C_llist_b_bool_fun_fun$ )(?v1 A_llist_b_c_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$s (fun_app$y (uud$ ?v0 )?v1 )?v2 )?v3 )(fun_app$r (case_prod$a ?v0 )(fun_app$w (fun_app$z ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$s (fun_app$y (uud$ ?v0 )?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ )(?v1 C_llist_b_c_llist_b_prod_fun_fun$ )(?v2 C_llist$ )(?v3 B$ ))(! (= (fun_app$m (fun_app$n (uue$ ?v0 ?v1 )?v2 )?v3 )(case_prod$b ?v0 (fun_app$w (fun_app$x ?v1 ?v2 )?v3 ))):pattern ((fun_app$m (fun_app$n (uue$ ?v0 ?v1 )?v2 )?v3 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$f (fun_app$g (fun_app$aa (uuf$ ?v0 )?v1 )?v2 )?v3 )(case_prod$c ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (fun_app$aa (uuf$ ?v0 )?v1 )?v2 )?v3 )))):named a15 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$ab (fun_app$ac (fun_app$ad (uuj$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ae (case_prod$d ?v0 )(fun_app$ab (fun_app$ac ?v1 ?v2 )?v3 ))):pattern ((fun_app$ab (fun_app$ac (fun_app$ad (uuj$ ?v0 )?v1 )?v2 )?v3 )))):named a16 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 C_llist_b_a_llist_b_prod_fun_fun$ )(?v2 C_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$p (fun_app$af (uug$ ?v0 )?v1 )?v2 )?v3 )(fun_app$u (case_prod$ ?v0 )(fun_app$ab (fun_app$ag ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$p (fun_app$af (uug$ ?v0 )?v1 )?v2 )?v3 )))):named a17 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$s (fun_app$ah (uuh$ ?v0 )?v1 )?v2 )?v3 )(fun_app$u (case_prod$ ?v0 )(fun_app$ab (fun_app$ac ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$s (fun_app$ah (uuh$ ?v0 )?v1 )?v2 )?v3 )))):named a18 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$j (fun_app$k (uui$ ?v0 ?v1 )?v2 )?v3 )(case_prod$e ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2 )?v3 ))):pattern ((fun_app$j (fun_app$k (uui$ ?v0 ?v1 )?v2 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_b_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$c (fun_app$ai (uuk$ ?v0 )?v1 )?v2 )?v3 )(fun_app$aj (case_prod$f ?v0 )(fun_app$ab (fun_app$ac ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$ai (uuk$ ?v0 )?v1 )?v2 )?v3 )))):named a20 ))
(assert (! (forall ((?v0 A_b_tllist_b_fun$ )(?v1 A_llist_b_a_b_tllist_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$c (fun_app$ak (uuw$ ?v0 )?v1 )?v2 )?v3 )(fun_app$a ?v0 (fun_app$f (fun_app$g ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$ak (uuw$ ?v0 )?v1 )?v2 )?v3 )))):named a21 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$ab (fun_app$ac (fun_app$ad (uuq$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ae ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2 )?v3 ))):pattern ((fun_app$ab (fun_app$ac (fun_app$ad (uuq$ ?v0 )?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_llist_b_prod_b_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$c (fun_app$ai (uup$ ?v0 )?v1 )?v2 )?v3 )(fun_app$aj ?v0 (fun_app$ab (fun_app$ac ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$ai (uup$ ?v0 )?v1 )?v2 )?v3 )))):named a23 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 C_llist_b_bool_fun_fun$ )(?v2 C_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$p (fun_app$al (uus$ ?v0 )?v1 )?v2 )?v3 )(fun_app$am ?v0 (fun_app$h (fun_app$p ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$p (fun_app$al (uus$ ?v0 )?v1 )?v2 )?v3 )))):named a24 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$s (fun_app$an (uuu$ ?v0 )?v1 )?v2 )?v3 )(fun_app$am ?v0 (fun_app$h (fun_app$s ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$s (fun_app$an (uuu$ ?v0 )?v1 )?v2 )?v3 )))):named a25 ))
(assert (! (forall ((?v0 Bool_b_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$c (fun_app$ao (uut$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ap ?v0 (fun_app$h (fun_app$s ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$ao (uut$ ?v0 )?v1 )?v2 )?v3 )))):named a26 ))
(assert (! (forall ((?v0 B_a_b_tllist_fun$ )(?v1 A_llist_b_b_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$f (fun_app$g (fun_app$aq (uuv$ ?v0 )?v1 )?v2 )?v3 )(fun_app$f ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$f (fun_app$g (fun_app$aq (uuv$ ?v0 )?v1 )?v2 )?v3 )))):named a27 ))
(assert (! (forall ((?v0 B_a_llist_b_prod_fun$ )(?v1 A_llist_b_b_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$ab (fun_app$ac (fun_app$ar (uuo$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ab ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$ab (fun_app$ac (fun_app$ar (uuo$ ?v0 )?v1 )?v2 )?v3 )))):named a28 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 A_llist_b_b_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$h (fun_app$s (fun_app$as (uur$ ?v0 )?v1 )?v2 )?v3 )(fun_app$h ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$h (fun_app$s (fun_app$as (uur$ ?v0 )?v1 )?v2 )?v3 )))):named a29 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_llist_b_b_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$c (fun_app$at (uun$ ?v0 )?v1 )?v2 )?v3 )(fun_app$b ?v0 (fun_app$b (fun_app$c ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (fun_app$at (uun$ ?v0 )?v1 )?v2 )?v3 )))):named a30 ))
(assert (! (not (rel_fun$ (pcr_tllist$ a$ uu$ )uu$ (case_prod$f uua$ )uub$ )):named a31 ))
(assert (! (forall ((?v0 A_llist_b_prod_c_b_tllist_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_llist_b_prod_b_fun$ )(?v3 C_b_tllist_b_fun$ ))(=> (forall ((?v4 A_llist_b_prod$ )(?v5 C_b_tllist$ ))(=> (fun_app$au (fun_app$av ?v0 ?v4 )?v5 )(fun_app$h (fun_app$i ?v1 (fun_app$aj ?v2 ?v4 ))(fun_app$ ?v3 ?v5 ))))(rel_fun$ ?v0 ?v1 ?v2 ?v3 ))):named a32 ))
(assert (! (forall ((?v0 C_llist_b_bool_fun_fun$ )(?v1 C_llist_b_c_llist_b_prod_fun_fun$ )(?v2 C_llist_b_prod$ ))(= (fun_app$r (case_prod$a ?v0 )(case_prod$g ?v1 ?v2 ))(fun_app$r (case_prod$a (fun_app$v (uuc$ ?v0 )?v1 ))?v2 ))):named a33 ))
(assert (! (forall ((?v0 C_llist_b_bool_fun_fun$ )(?v1 A_llist_b_c_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$r (case_prod$a ?v0 )(case_prod$h ?v1 ?v2 ))(fun_app$u (case_prod$ (fun_app$y (uud$ ?v0 )?v1 ))?v2 ))):named a34 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ )(?v1 C_llist_b_c_llist_b_prod_fun_fun$ )(?v2 C_llist_b_prod$ ))(= (case_prod$b ?v0 (case_prod$g ?v1 ?v2 ))(case_prod$b (uue$ ?v0 ?v1 )?v2 ))):named a35 ))
(assert (! (forall ((?v0 A_llist_b_a_b_tllist_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (case_prod$c ?v0 (fun_app$ae (case_prod$d ?v1 )?v2 ))(case_prod$c (fun_app$aa (uuf$ ?v0 )?v1 )?v2 ))):named a36 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 C_llist_b_a_llist_b_prod_fun_fun$ )(?v2 C_llist_b_prod$ ))(= (fun_app$u (case_prod$ ?v0 )(case_prod$i ?v1 ?v2 ))(fun_app$r (case_prod$a (fun_app$af (uug$ ?v0 )?v1 ))?v2 ))):named a37 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$u (case_prod$ ?v0 )(fun_app$ae (case_prod$d ?v1 )?v2 ))(fun_app$u (case_prod$ (fun_app$ah (uuh$ ?v0 )?v1 ))?v2 ))):named a38 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (case_prod$e ?v0 (fun_app$ae (case_prod$d ?v1 )?v2 ))(case_prod$e (uui$ ?v0 ?v1 )?v2 ))):named a39 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ae (case_prod$d ?v0 )(fun_app$ae (case_prod$d ?v1 )?v2 ))(fun_app$ae (case_prod$d (fun_app$ad (uuj$ ?v0 )?v1 ))?v2 ))):named a40 ))
(assert (! (forall ((?v0 A_llist_b_b_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$aj (case_prod$f ?v0 )(fun_app$ae (case_prod$d ?v1 )?v2 ))(fun_app$aj (case_prod$f (fun_app$ai (uuk$ ?v0 )?v1 ))?v2 ))):named a41 ))
(assert (! (forall ((?v0 C_llist_b_c_llist_b_prod_bool_fun_fun_fun$ )(?v1 C_llist_b_prod$ )(?v2 C_llist_b_prod$ ))(= (fun_app$r (case_prod$b ?v0 ?v1 )?v2 )(fun_app$r (case_prod$a (fun_app$q (uul$ ?v0 )?v2 ))?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_prod$ ))(= (fun_app$u (case_prod$e ?v0 ?v1 )?v2 )(fun_app$u (case_prod$ (fun_app$t (uum$ ?v0 )?v2 ))?v1 ))):named a43 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_llist_b_b_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$b ?v0 (fun_app$aj (case_prod$f ?v1 )?v2 ))(fun_app$aj (case_prod$f (fun_app$at (uun$ ?v0 )?v1 ))?v2 ))):named a44 ))
(assert (! (forall ((?v0 B_a_llist_b_prod_fun$ )(?v1 A_llist_b_b_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ab ?v0 (fun_app$aj (case_prod$f ?v1 )?v2 ))(fun_app$ae (case_prod$d (fun_app$ar (uuo$ ?v0 )?v1 ))?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_llist_b_prod_b_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$aj ?v0 (fun_app$ae (case_prod$d ?v1 )?v2 ))(fun_app$aj (case_prod$f (fun_app$ai (uup$ ?v0 )?v1 ))?v2 ))):named a46 ))
(assert (! (forall ((?v0 A_llist_b_prod_a_llist_b_prod_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ae ?v0 (fun_app$ae (case_prod$d ?v1 )?v2 ))(fun_app$ae (case_prod$d (fun_app$ad (uuq$ ?v0 )?v1 ))?v2 ))):named a47 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 A_llist_b_b_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$h ?v0 (fun_app$aj (case_prod$f ?v1 )?v2 ))(fun_app$u (case_prod$ (fun_app$as (uur$ ?v0 )?v1 ))?v2 ))):named a48 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 C_llist_b_bool_fun_fun$ )(?v2 C_llist_b_prod$ ))(= (fun_app$am ?v0 (fun_app$r (case_prod$a ?v1 )?v2 ))(fun_app$r (case_prod$a (fun_app$al (uus$ ?v0 )?v1 ))?v2 ))):named a49 ))
(assert (! (forall ((?v0 Bool_b_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$ap ?v0 (fun_app$u (case_prod$ ?v1 )?v2 ))(fun_app$aj (case_prod$f (fun_app$ao (uut$ ?v0 )?v1 ))?v2 ))):named a50 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$am ?v0 (fun_app$u (case_prod$ ?v1 )?v2 ))(fun_app$u (case_prod$ (fun_app$an (uuu$ ?v0 )?v1 ))?v2 ))):named a51 ))
(assert (! (forall ((?v0 B_a_b_tllist_fun$ )(?v1 A_llist_b_b_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$f ?v0 (fun_app$aj (case_prod$f ?v1 )?v2 ))(case_prod$c (fun_app$aq (uuv$ ?v0 )?v1 )?v2 ))):named a52 ))
(assert (! (forall ((?v0 A_b_tllist_b_fun$ )(?v1 A_llist_b_a_b_tllist_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$a ?v0 (case_prod$c ?v1 ?v2 ))(fun_app$aj (case_prod$f (fun_app$ak (uuw$ ?v0 )?v1 ))?v2 ))):named a53 ))
(assert (! (= terminal0$ uux$ ):named a54 ))
(assert (! (= terminal0$a uub$ ):named a55 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(! (=> (not (lfinite$ (llist_of_tllist$ ?v0 )))(= (terminal$a ?v0 )undefined$ )):pattern ((terminal$a ?v0 )))):named a56 ))
(assert (! (forall ((?v0 C_b_tllist$ ))(! (=> (not (lfinite$a (llist_of_tllist$a ?v0 )))(= (terminal$ ?v0 )undefined$ )):pattern ((terminal$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (terminal$a (tllist_of_llist$a ?v0 ?v1 ))(ite (lfinite$ ?v1 )?v0 undefined$ ))):named a58 ))
(assert (! (forall ((?v0 B$ )(?v1 C_llist$ ))(= (terminal$ (tllist_of_llist$ ?v0 ?v1 ))(ite (lfinite$a ?v1 )?v0 undefined$ ))):named a59 ))
(assert (! (forall ((?v0 A_llist_b_prod_c_b_tllist_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 A_llist_b_prod_b_fun$ )(?v3 C_b_tllist_b_fun$ )(?v4 A_llist_b_prod$ )(?v5 C_b_tllist$ ))(=> (and (rel_fun$ ?v0 ?v1 ?v2 ?v3 )(and (fun_app$au (fun_app$av ?v0 ?v4 )?v5 )(=> (fun_app$h (fun_app$i ?v1 (fun_app$aj ?v2 ?v4 ))(fun_app$ ?v3 ?v5 ))false )))false )):named a60 ))
(assert (! (forall ((?v0 B$ )(?v1 C_llist$ )(?v2 B$ )(?v3 C_llist$ ))(= (= (tllist_of_llist$ ?v0 ?v1 )(tllist_of_llist$ ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$a ?v3 )(= ?v0 ?v2 ))))):named a61 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ )(?v2 B$ )(?v3 A_llist$ ))(= (= (tllist_of_llist$a ?v0 ?v1 )(tllist_of_llist$a ?v2 ?v3 ))(and (= ?v1 ?v3 )(=> (lfinite$ ?v3 )(= ?v0 ?v2 ))))):named a62 ))
(assert (! (forall ((?v0 B$ )(?v1 C_llist$ ))(= (llist_of_tllist$a (tllist_of_llist$ ?v0 ?v1 ))?v1 )):named a63 ))
(assert (! (forall ((?v0 B$ )(?v1 A_llist$ ))(= (llist_of_tllist$ (tllist_of_llist$a ?v0 ?v1 ))?v1 )):named a64 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(=> (lfinite$ ?v0 )(= (terminal$a (tllist_of_llist$a ?v1 ?v0 ))?v1 ))):named a65 ))
(assert (! (forall ((?v0 C_llist$ )(?v1 B$ ))(=> (lfinite$a ?v0 )(= (terminal$ (tllist_of_llist$ ?v1 ?v0 ))?v1 ))):named a66 ))
(assert (! (forall ((?v0 A_b_tllist$ ))(= (tllist_of_llist$a (terminal$a ?v0 )(llist_of_tllist$ ?v0 ))?v0 )):named a67 ))
(assert (! (forall ((?v0 C_b_tllist$ ))(= (tllist_of_llist$ (terminal$ ?v0 )(llist_of_tllist$a ?v0 ))?v0 )):named a68 ))
(assert (! (forall ((?v0 C_llist_b_prod$ )(?v1 C_llist_b_prod$ ))(= (= (case_prod$j uuy$ ?v0 )(case_prod$j uuy$ ?v1 ))(fun_app$r (case_prod$b uva$ ?v0 )?v1 ))):named a69 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_prod$ ))(= (= (case_prod$c uvb$ ?v0 )(case_prod$c uvb$ ?v1 ))(fun_app$u (case_prod$e uvd$ ?v0 )?v1 ))):named a70 ))
(check-sat )
(get-unsat-core )
