(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort B_a_llist_b_prod_fun$ 0 )
(declare-sort A_llist_b_bool_fun_fun$ 0 )
(declare-sort A_llist_b_prod_bool_fun$ 0 )
(declare-sort B_a_llist_b_prod_bool_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_fun_fun$ 0 )
(declare-sort A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ 0 )
(declare-sort A_llist$ 0)
(declare-fun lNil$ ()A_llist$)
(declare-fun lhd$ (A_llist$)A$)
(declare-fun ltl$ (A_llist$)A_llist$)
(declare-fun lCons$ (A$ A_llist$ )A_llist$)
(declare-sort A_llist_b_prod$ 0)
(declare-fun fst$ (A_llist_b_prod$)A_llist$)
(declare-fun snd$ (A_llist_b_prod$)B$)
(declare-fun pair$ (A_llist$ B$ )A_llist_b_prod$)
(declare-fun b$ ()B$ )
(declare-fun uu$ (A_llist$ B$ )A_llist_b_bool_fun_fun$ )
(declare-fun fun$ ()A_bool_fun$ )
(declare-fun uua$ ()A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uub$ ()A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uuc$ ()A_bool_fun$ )
(declare-fun uud$ (Bool A_llist_b_bool_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uue$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )
(declare-fun uuf$ (A_llist_b_bool_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_bool_fun_fun$ )
(declare-fun uug$ (A_llist_b_a_llist_b_prod_fun_fun$ A_llist_b_a_llist_b_prod_fun_fun$ )A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uuh$ ()A_llist_b_a_llist_b_prod_fun_fun$ )
(declare-fun uui$ (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$ )A_llist_b_bool_fun_fun$ )
(declare-fun prod1$ ()A_llist_b_prod$ )
(declare-fun prod2$ ()A_llist_b_prod$ )
(declare-fun fun_app$ (B_a_llist_b_prod_fun$ B$ )A_llist_b_prod$ )
(declare-fun lfilter$ (A_bool_fun$ A_llist$ )A_llist$ )
(declare-fun lfinite$ (A_llist$ )Bool )
(declare-fun fun_app$a (A_llist_b_a_llist_b_prod_fun_fun$ A_llist$ )B_a_llist_b_prod_fun$ )
(declare-fun fun_app$b (B_a_llist_b_prod_bool_fun_fun$ B$ )A_llist_b_prod_bool_fun$ )
(declare-fun fun_app$c (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist$ )B_a_llist_b_prod_bool_fun_fun$ )
(declare-fun fun_app$d (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$e (A_llist_b_bool_fun_fun$ A_llist$ )B_bool_fun$ )
(declare-fun fun_app$f (A_llist_b_prod_bool_fun$ A_llist_b_prod$ )Bool )
(declare-fun fun_app$g (A_bool_fun$ A$ )Bool )
(declare-fun case_prod$ (A_llist_b_bool_fun_fun$ )A_llist_b_prod_bool_fun$ )
(declare-fun case_prod$a (A_llist_b_a_llist_b_prod_fun_fun$ A_llist_b_prod$ )A_llist_b_prod$ )
(declare-fun case_prod$b (A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ A_llist_b_prod$ )A_llist_b_prod_bool_fun$ )
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$ (fun_app$a uub$ ?v0 )?v1 )(pair$ (lfilter$ fun$ ?v0 )(ite (lfinite$ ?v0 )?v1 b$ ))):pattern ((fun_app$ (fun_app$a uub$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$ (fun_app$a uuh$ ?v0 )?v1 )(pair$ ?v0 ?v1 )):pattern ((fun_app$ (fun_app$a uuh$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ ))(! (= (fun_app$b (fun_app$c uua$ ?v0 )?v1 )(case_prod$ (uu$ ?v0 ?v1 ))):pattern ((fun_app$b (fun_app$c uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$d (fun_app$e (uui$ ?v0 ?v1 )?v2 )?v3 )(fun_app$f (fun_app$b (fun_app$c ?v0 ?v2 )?v3 )?v1 )):pattern ((fun_app$d (fun_app$e (uui$ ?v0 ?v1 )?v2 )?v3 )))):named a3 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$d (fun_app$e (uu$ ?v0 ?v1 )?v2 )?v3 )(and (= ?v0 ?v2 )(=> (lfinite$ ?v2 )(= ?v1 ?v3 )))):pattern ((fun_app$d (fun_app$e (uu$ ?v0 ?v1 )?v2 )?v3 )))):named a4 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$ (fun_app$a (uug$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$ (fun_app$a (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a5 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$d (fun_app$e (uuf$ ?v0 ?v1 )?v2 )?v3 )(fun_app$f (case_prod$ ?v0 )(fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a6 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$b (fun_app$c (uue$ ?v0 ?v1 )?v2 )?v3 )(case_prod$b ?v0 (fun_app$ (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$b (fun_app$c (uue$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist$ )(?v3 B$ ))(! (= (fun_app$d (fun_app$e (uud$ ?v0 ?v1 )?v2 )?v3 )(and ?v0 (fun_app$d (fun_app$e ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$e (uud$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$g uuc$ ?v0 )true ):pattern ((fun_app$g uuc$ ?v0 )))):named a9 ))
(assert (! (not (fun_app$f (case_prod$b uua$ (case_prod$a uub$ prod1$ ))(case_prod$a uub$ prod2$ ))):named a10 ))
(assert (! (fun_app$f (case_prod$b uua$ prod1$ )prod2$ ):named a11 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v2 A_llist_b_prod$ ))(=> (forall ((?v3 A_llist$ )(?v4 B$ ))(=> (= (pair$ ?v3 ?v4 )?v0 )(fun_app$f (fun_app$b (fun_app$c ?v1 ?v3 )?v4 )?v2 )))(fun_app$f (case_prod$b ?v1 ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 A_llist_b_prod$ )(?v1 A_llist_b_bool_fun_fun$ ))(=> (forall ((?v2 A_llist$ )(?v3 B$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$d (fun_app$e ?v1 ?v2 )?v3 )))(fun_app$f (case_prod$ ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(fun_app$f (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a14 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist$ )(?v2 B$ ))(=> (fun_app$d (fun_app$e ?v0 ?v1 )?v2 )(fun_app$f (case_prod$ ?v0 )(pair$ ?v1 ?v2 )))):named a15 ))
(assert (! (forall ((?v0 A_llist$ ))(= (lfilter$ uuc$ ?v0 )?v0 )):named a16 ))
(assert (! (forall ((?v0 Bool )(?v1 A_llist_b_bool_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$f (case_prod$ (uud$ ?v0 ?v1 ))?v2 )(and ?v0 (fun_app$f (case_prod$ ?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_llist$ ))(= (lfilter$ ?v0 (lfilter$ ?v0 ?v1 ))(lfilter$ ?v0 ?v1 ))):named a18 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (case_prod$b ?v0 (case_prod$a ?v1 ?v2 ))(case_prod$b (uue$ ?v0 ?v1 )?v2 ))):named a19 ))
(assert (! (forall ((?v0 A_llist_b_bool_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (fun_app$f (case_prod$ ?v0 )(case_prod$a ?v1 ?v2 ))(fun_app$f (case_prod$ (uuf$ ?v0 ?v1 ))?v2 ))):named a20 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_fun_fun$ )(?v1 A_llist_b_a_llist_b_prod_fun_fun$ )(?v2 A_llist_b_prod$ ))(= (case_prod$a ?v0 (case_prod$a ?v1 ?v2 ))(case_prod$a (uug$ ?v0 ?v1 )?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_llist_b_prod$ ))(! (= (case_prod$a uuh$ ?v0 )?v0 ):pattern ((case_prod$a uuh$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 A_llist_b_a_llist_b_prod_bool_fun_fun_fun$ )(?v1 A_llist_b_prod$ )(?v2 A_llist_b_prod$ ))(= (fun_app$f (case_prod$b ?v0 ?v1 )?v2 )(fun_app$f (case_prod$ (uui$ ?v0 ?v2 ))?v1 ))):named a25 ))
(assert (! (forall ((?v0 A_llist_b_prod$ ))(exists ((?v1 A_llist$ )(?v2 B$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a26 ))
(assert (! (forall ((?v0 A_llist$ )(?v1 B$ )(?v2 A_llist$ )(?v3 B$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a27 ))
(check-sat )
(get-unsat-core )
