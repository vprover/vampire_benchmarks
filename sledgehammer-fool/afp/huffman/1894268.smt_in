(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Natural$ 0 )
(declare-sort Bool_nat_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-sort Nibble$ 0)
(declare-sort Char$ 0)
(declare-fun select$ (A_tree$)Nat$)
(declare-fun selecta$ (A_tree$)A$)
(declare-fun leaf$ (Nat$ A$ )A_tree$)
(declare-fun selectb$ (A_tree$)Nat$)
(declare-fun selectc$ (A_tree$)A_tree$)
(declare-fun selectd$ (A_tree$)A_tree$)
(declare-fun innerNode$ (Nat$ A_tree$ A_tree$ )A_tree$)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun selecte$ (Char$)Nibble$)
(declare-fun selectf$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun t$ ()A_tree$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun cost$ (A_tree$ )Nat$ )
(declare-fun freq$ (A_tree$ A$ )Nat$ )
(declare-fun size$ (A_tree$ )Nat$ )
(declare-fun zero$ ()Nat$ )
(declare-fun size$a (Char$ )Nat$ )
(declare-fun zero$a ()Natural$ )
(declare-fun height$ (A_tree$ )Nat$ )
(declare-fun fun_app$ (Bool_nat_fun$ Bool )Nat$ )
(declare-fun rec_bool$ (Nat$ Nat$ )Bool_nat_fun$ )
(declare-fun size_bool$ ()Bool_nat_fun$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun size_natural$ (Natural$ )Nat$ )
(assert (! (not (= (cost$ t$ )zero$ )):named a0 ))
(assert (! (= (height$ t$ )zero$ ):named a1 ))
(assert (! (= zero$ zero$ ):named a2 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (cost$ (leaf$ ?v0 ?v1 ))zero$ ):pattern ((leaf$ ?v0 ?v1 )))):named a4 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a5 ))
(assert (! (forall ((?v0 Natural$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a6 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (height$ (leaf$ ?v0 ?v1 ))zero$ ):pattern ((leaf$ ?v0 ?v1 )))):named a7 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a8 ))
(assert (! (forall ((?v0 A_tree$ ))(not (= (size$ ?v0 )zero$ ))):named a9 ))
(assert (! (= (fun_app$ size_bool$ true )zero$ ):named a10 ))
(assert (! (= (fun_app$ size_bool$ false )zero$ ):named a11 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size$a ?v0 )zero$ ):pattern ((size$a ?v0 )))):named a12 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 Nat$ )(?v3 A$ ))(= (= (leaf$ ?v0 ?v1 )(leaf$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a13 ))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$ )):named a14 ))
(assert (! (= (size_natural$ zero$a )zero$ ):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ ))(! (= (size$ (leaf$ ?v0 ?v1 ))(suc$ zero$ )):pattern ((leaf$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A$ )(?v2 A$ ))(! (= (freq$ (leaf$ ?v0 ?v1 )?v2 )(ite (= ?v2 ?v1 )?v0 zero$ )):pattern ((freq$ (leaf$ ?v0 ?v1 )?v2 )))):named a17 ))
(check-sat )
(get-unsat-core )
