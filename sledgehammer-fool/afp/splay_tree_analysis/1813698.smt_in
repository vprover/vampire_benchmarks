(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort Real_set$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Real_bool_fun$ 0 )
(declare-sort A_tree$ 0)
(declare-fun leaf$ ()A_tree$)
(declare-fun left$ (A_tree$)A_tree$)
(declare-fun val$ (A_tree$)A$)
(declare-fun right$ (A_tree$)A_tree$)
(declare-fun node$ (A_tree$ A$ A_tree$ )A_tree$)
(declare-fun a$ (A$ A_tree$ )Real )
(declare-fun l$ ()A_tree$ )
(declare-fun r$ ()A_tree$ )
(declare-fun a$a ()A$ )
(declare-fun nats$ ()Real_set$ )
(declare-fun norm$ (Real )Real )
(declare-fun member$ (Real Real_set$ )Bool )
(declare-fun dbl_dec$ (Real )Real )
(declare-fun fun_app$ (A_bool_fun$ A$ )Bool )
(declare-fun of_bool$ (Bool )Real )
(declare-fun of_real$ (Real )Real )
(declare-fun fun_app$a (Real_bool_fun$ Real )Bool )
(declare-fun pred_tree$ (A_bool_fun$ A_tree$ )Bool )
(assert (! (not (= (a$ a$a (node$ l$ a$a r$ ))1.0 )):named a0 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ )(?v3 A_tree$ )(?v4 A$ )(?v5 A_tree$ ))(= (= (node$ ?v0 ?v1 ?v2 )(node$ ?v3 ?v4 ?v5 ))(and (= ?v0 ?v3 )(and (= ?v1 ?v4 )(= ?v2 ?v5 ))))):named a1 ))
(assert (! (forall ((?v0 Real ))(= (= 1.0 ?v0 )(= ?v0 1.0 ))):named a2 ))
(assert (! (= (of_real$ 1.0 )1.0 ):named a3 ))
(assert (! (= (norm$ 1.0 )1.0 ):named a4 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_tree$ )(?v2 A$ )(?v3 A_tree$ ))(! (= (pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))(and (pred_tree$ ?v0 ?v1 )(and (fun_app$ ?v0 ?v2 )(pred_tree$ ?v0 ?v3 )))):pattern ((pred_tree$ ?v0 (node$ ?v1 ?v2 ?v3 ))))):named a5 ))
(assert (! (= (of_bool$ true )1.0 ):named a6 ))
(assert (! (= (dbl_dec$ 1.0 )1.0 ):named a7 ))
(assert (! (member$ 1.0 nats$ ):named a8 ))
(assert (! (forall ((?v0 A_tree$ )(?v1 A$ )(?v2 A_tree$ ))(! (= (val$ (node$ ?v0 ?v1 ?v2 ))?v1 ):pattern ((node$ ?v0 ?v1 ?v2 )))):named a9 ))
(assert (! (forall ((?v0 Real )(?v1 Real ))(= (= (of_real$ ?v0 )(of_real$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(= (= (of_bool$ ?v0 )(of_bool$ ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Real_bool_fun$ )(?v1 Bool ))(= (fun_app$a ?v0 (of_bool$ ?v1 ))(not (or (and ?v1 (not (fun_app$a ?v0 1.0 )))(and (not ?v1 )(not (fun_app$a ?v0 0.0 ))))))):named a12 ))
(assert (! (forall ((?v0 Bool ))(! (= (of_bool$ ?v0 )(ite ?v0 1.0 0.0 )):pattern ((of_bool$ ?v0 )))):named a13 ))
(assert (! (forall ((?v0 Real_bool_fun$ )(?v1 Bool ))(= (fun_app$a ?v0 (of_bool$ ?v1 ))(and (=> ?v1 (fun_app$a ?v0 1.0 ))(=> (not ?v1 )(fun_app$a ?v0 0.0 ))))):named a14 ))
(check-sat )
(get-unsat-core )
