(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort Ref$ 0 )
(declare-sort Ref_ref_fun$ 0 )
(declare-sort Dag_bool_fun$ 0 )
(declare-sort Dag_dag_bool_fun_fun$ 0 )
(declare-sort Dag_dag_dag_bool_fun_fun_fun$ 0 )
(declare-sort Ref_ref_fun_dag_bool_fun_fun$ 0 )
(declare-sort Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ 0 )
(declare-sort Dag$ 0)
(declare-fun tip$ ()Dag$)
(declare-fun select$ (Dag$)Dag$)
(declare-fun selecta$ (Dag$)Ref$)
(declare-fun selectb$ (Dag$)Dag$)
(declare-fun node$ (Dag$ Ref$ Dag$ )Dag$)
(declare-fun l$ ()Ref_ref_fun$ )
(declare-fun p$ ()Ref$ )
(declare-fun r$ ()Ref_ref_fun$ )
(declare-fun t$ ()Dag$ )
(declare-fun uu$ (Dag$ )Dag_bool_fun$ )
(declare-fun dag$ (Ref$ )Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ )
(declare-fun the$ (Dag_bool_fun$ )Dag$ )
(declare-fun uua$ (Dag$ )Dag_bool_fun$ )
(declare-fun uub$ (Bool )Dag_dag_dag_bool_fun_fun_fun$ )
(declare-fun dag$a (Ref$ Ref_ref_fun$ Ref_ref_fun$ )Dag$ )
(declare-fun isDag$ (Ref$ Ref_ref_fun$ Ref_ref_fun$ )Bool )
(declare-fun fun_app$ (Dag_bool_fun$ Dag$ )Bool )
(declare-fun fun_app$a (Dag_dag_bool_fun_fun$ Dag$ )Dag_bool_fun$ )
(declare-fun fun_app$b (Dag_dag_dag_bool_fun_fun_fun$ Dag$ )Dag_dag_bool_fun_fun$ )
(declare-fun fun_app$c (Ref_ref_fun_dag_bool_fun_fun$ Ref_ref_fun$ )Dag_bool_fun$ )
(declare-fun fun_app$d (Ref_ref_fun_ref_ref_fun_dag_bool_fun_fun_fun$ Ref_ref_fun$ )Ref_ref_fun_dag_bool_fun_fun$ )
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 Dag$ )(?v1 Dag$ ))(! (= (fun_app$ (uua$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$ (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 Bool )(?v1 Dag$ )(?v2 Dag$ )(?v3 Dag$ ))(! (= (fun_app$ (fun_app$a (fun_app$b (uub$ ?v0 )?v1 )?v2 )?v3 )(and (=> (= ?v0 true )(= ?v3 ?v1 ))(=> (= ?v0 false )(= ?v3 ?v2 )))):pattern ((fun_app$ (fun_app$a (fun_app$b (uub$ ?v0 )?v1 )?v2 )?v3 )))):named a2 ))
(assert (! (not (= (fun_app$ (fun_app$c (fun_app$d (dag$ p$ )l$ )r$ )t$ )(and (exists ((?v0 Dag$ ))(fun_app$ (fun_app$c (fun_app$d (dag$ p$ )l$ )r$ )?v0 ))(= t$ (the$ (fun_app$c (fun_app$d (dag$ p$ )l$ )r$ )))))):named a3 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag_bool_fun$ ))(=> (fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v3 )(= (exists ((?v5 Dag$ ))(and (fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v5 )(fun_app$ ?v4 ?v5 )))(fun_app$ ?v4 ?v3 )))):named a4 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag_bool_fun$ ))(=> (fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v3 )(= (forall ((?v5 Dag$ ))(=> (fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v5 )(fun_app$ ?v4 ?v5 )))(fun_app$ ?v4 ?v3 )))):named a5 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ )(?v4 Dag$ ))(=> (and (fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v3 )(fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v4 ))(= ?v3 ?v4 ))):named a6 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ )(?v3 Dag$ ))(=> (fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v3 )(exists ((?v4 Dag$ ))(and (fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v4 )(forall ((?v5 Dag$ ))(=> (fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v5 )(= ?v5 ?v4 ))))))):named a7 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ ))(! (= (dag$a ?v0 ?v1 ?v2 )(the$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 ))):pattern ((dag$a ?v0 ?v1 ?v2 )))):named a8 ))
(assert (! (forall ((?v0 Dag$ ))(= (the$ (uu$ ?v0 ))?v0 )):named a9 ))
(assert (! (forall ((?v0 Dag$ ))(= (the$ (uua$ ?v0 ))?v0 )):named a10 ))
(assert (! (forall ((?v0 Dag_bool_fun$ )(?v1 Dag$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 Dag$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 ))))(= (the$ ?v0 )?v1 ))):named a11 ))
(assert (! (forall ((?v0 Ref$ )(?v1 Ref_ref_fun$ )(?v2 Ref_ref_fun$ ))(! (= (isDag$ ?v0 ?v1 ?v2 )(exists ((?v3 Dag$ ))(fun_app$ (fun_app$c (fun_app$d (dag$ ?v0 )?v1 )?v2 )?v3 ))):pattern ((isDag$ ?v0 ?v1 ?v2 )))):named a12 ))
(assert (! (forall ((?v0 Bool )(?v1 Dag$ )(?v2 Dag$ ))(= (ite ?v0 ?v1 ?v2 )(the$ (fun_app$a (fun_app$b (uub$ ?v0 )?v1 )?v2 )))):named a13 ))
(assert (! (forall ((?v0 Dag_bool_fun$ )(?v1 Dag_bool_fun$ ))(=> (and (exists ((?v2 Dag$ ))(and (fun_app$ ?v0 ?v2 )(forall ((?v3 Dag$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v2 )))))(forall ((?v2 Dag$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (the$ ?v0 )))):named a14 ))
(assert (! (forall ((?v0 Dag_bool_fun$ )(?v1 Dag$ ))(=> (and (exists ((?v2 Dag$ ))(and (fun_app$ ?v0 ?v2 )(forall ((?v3 Dag$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v2 )))))(fun_app$ ?v0 ?v1 ))(= (the$ ?v0 )?v1 ))):named a15 ))
(assert (! (forall ((?v0 Dag_bool_fun$ ))(=> (exists ((?v1 Dag$ ))(and (fun_app$ ?v0 ?v1 )(forall ((?v2 Dag$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 )))))(fun_app$ ?v0 (the$ ?v0 )))):named a16 ))
(assert (! (forall ((?v0 Dag_bool_fun$ )(?v1 Dag$ )(?v2 Dag_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(and (forall ((?v3 Dag$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v1 )))(forall ((?v3 Dag$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 )))))(fun_app$ ?v2 (the$ ?v0 )))):named a17 ))
(assert (! (forall ((?v0 Dag_bool_fun$ )(?v1 Dag$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 Dag$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 ))))(fun_app$ ?v0 (the$ ?v0 )))):named a18 ))
(assert (! (forall ((?v0 Dag_bool_fun$ )(?v1 Dag$ ))(=> (= ?v0 (uu$ ?v1 ))(= (the$ ?v0 )?v1 ))):named a19 ))
(assert (! (forall ((?v0 Dag_bool_fun$ )(?v1 Dag$ ))(=> (exists ((?v2 Dag$ ))(and (fun_app$ ?v0 ?v2 )(forall ((?v3 Dag$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v2 )))))(= (fun_app$ ?v0 ?v1 )(= ?v1 (the$ ?v0 ))))):named a20 ))
(check-sat )
(get-unsat-core )
