(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Bool_a_fun$ 0 )
(declare-sort Bool_option$ 0 )
(declare-sort Bool_option_b_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_a_fun_a_b_fun_fun$ 0 )
(declare-sort A_b_fun_a_a_fun_fun$ 0 )
(declare-sort A_b_fun_a_b_fun_fun$ 0 )
(declare-sort Bool_option_bool_fun$ 0 )
(declare-sort A_b_fun_bool_option_b_fun_fun$ 0 )
(declare-sort A_b_fun_bool_option_prod_a_fun$ 0 )
(declare-sort A_b_fun_bool_option_prod_b_fun$ 0 )
(declare-sort A_b_fun_bool_option_bool_fun_fun$ 0 )
(declare-sort Bool_a_b_fun_bool_option_prod_fun$ 0 )
(declare-sort Bool_option_a_b_fun_bool_option_prod_fun$ 0 )
(declare-sort A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ 0 )
(declare-sort A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ 0 )
(declare-sort A_b_fun_bool_option_prod_a_fun_a_b_fun_bool_option_prod_a_fun_fun$ 0 )
(declare-sort A_b_fun_bool_option_prod_a_fun_a_b_fun_bool_option_prod_b_fun_fun$ 0 )
(declare-sort A_b_fun_bool_option_prod_b_fun_a_b_fun_bool_option_prod_a_fun_fun$ 0 )
(declare-sort A_b_fun_bool_option_prod_b_fun_a_b_fun_bool_option_prod_b_fun_fun$ 0 )
(declare-sort B_tree$ 0)
(declare-sort A_tree$ 0)
(declare-fun root$ (B_tree$)B$)
(declare-fun left$ (B_tree$)B_tree$)
(declare-fun right$ (B_tree$)B_tree$)
(declare-fun node$ (B$ B_tree$ B_tree$ )B_tree$)
(declare-fun root$a (A_tree$)A$)
(declare-fun left$a (A_tree$)A_tree$)
(declare-fun right$a (A_tree$)A_tree$)
(declare-fun node$a (A$ A_tree$ A_tree$ )A_tree$)
(declare-sort A_b_fun_bool_option_prod$ 0)
(declare-fun select$ (A_b_fun_bool_option_prod$)A_b_fun$)
(declare-fun selecta$ (A_b_fun_bool_option_prod$)Bool_option$)
(declare-fun pair$ (A_b_fun$ Bool_option$ )A_b_fun_bool_option_prod$)
(declare-fun h$ ()A_b_fun$ )
(declare-fun t$ ()A_tree$ )
(declare-fun x$ ()A$ )
(declare-fun y$ ()A$ )
(declare-fun z$ ()A$ )
(declare-fun ll$ ()A_a_fun$ )
(declare-fun lr$ ()A_a_fun$ )
(declare-fun rl$ ()A_a_fun$ )
(declare-fun rr$ ()A_a_fun$ )
(declare-fun uu$ ()Bool_a_fun$ )
(declare-fun uua$ ()A_b_fun_bool_option_b_fun_fun$ )
(declare-fun uub$ (A_b_fun$ )Bool_a_b_fun_bool_option_prod_fun$ )
(declare-fun uuc$ ()A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )
(declare-fun uud$ (A_b_fun$ )Bool_a_b_fun_bool_option_prod_fun$ )
(declare-fun uue$ ()A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )
(declare-fun uuf$ (A_b_fun_bool_option_bool_fun_fun$ A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )A_b_fun_bool_option_bool_fun_fun$ )
(declare-fun uug$ (A_b_fun_bool_option_b_fun_fun$ A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )A_b_fun_bool_option_b_fun_fun$ )
(declare-fun uuh$ (A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )
(declare-fun uui$ ()A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )
(declare-fun comp$ (A_b_fun$ )A_a_fun_a_b_fun_fun$ )
(declare-fun comp$a (B_a_fun$ )A_b_fun_bool_option_prod_b_fun_a_b_fun_bool_option_prod_a_fun_fun$ )
(declare-fun comp$b (B_a_fun$ )A_b_fun_a_a_fun_fun$ )
(declare-fun comp$c (A_a_fun$ )A_b_fun_bool_option_prod_a_fun_a_b_fun_bool_option_prod_a_fun_fun$ )
(declare-fun comp$d (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$e (B_b_fun$ )A_b_fun_a_b_fun_fun$ )
(declare-fun comp$f (B_b_fun$ )A_b_fun_bool_option_prod_b_fun_a_b_fun_bool_option_prod_b_fun_fun$ )
(declare-fun comp$g (A_b_fun$ )A_b_fun_bool_option_prod_a_fun_a_b_fun_bool_option_prod_b_fun_fun$ )
(declare-fun left$b ()Bool_option$ )
(declare-fun root$b ()Bool_option$ )
(declare-fun right$b ()Bool_option$ )
(declare-fun fun_app$ (Bool_a_fun$ Bool )A$ )
(declare-fun fun_app$a (A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ A_b_fun$ )Bool_option_a_b_fun_bool_option_prod_fun$ )
(declare-fun fun_app$b (Bool_a_b_fun_bool_option_prod_fun$ Bool )A_b_fun_bool_option_prod$ )
(declare-fun fun_app$c (A_a_fun_a_b_fun_fun$ A_a_fun$ )A_b_fun$ )
(declare-fun fun_app$d (Bool_option_a_b_fun_bool_option_prod_fun$ Bool_option$ )A_b_fun_bool_option_prod$ )
(declare-fun fun_app$e (Bool_option_b_fun$ Bool_option$ )B$ )
(declare-fun fun_app$f (A_b_fun_bool_option_b_fun_fun$ A_b_fun$ )Bool_option_b_fun$ )
(declare-fun fun_app$g (A_b_fun$ A$ )B$ )
(declare-fun fun_app$h (A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ A_b_fun_bool_option_prod$ )A_b_fun_bool_option_prod$ )
(declare-fun fun_app$i (Bool_option_bool_fun$ Bool_option$ )Bool )
(declare-fun fun_app$j (A_b_fun_bool_option_bool_fun_fun$ A_b_fun$ )Bool_option_bool_fun$ )
(declare-fun fun_app$k (A_b_fun_bool_option_prod_b_fun$ A_b_fun_bool_option_prod$ )B$ )
(declare-fun fun_app$l (A_b_fun_bool_option_prod_b_fun_a_b_fun_bool_option_prod_a_fun_fun$ A_b_fun_bool_option_prod_b_fun$ )A_b_fun_bool_option_prod_a_fun$ )
(declare-fun fun_app$m (A_b_fun_a_a_fun_fun$ A_b_fun$ )A_a_fun$ )
(declare-fun fun_app$n (A_b_fun_bool_option_prod_a_fun_a_b_fun_bool_option_prod_a_fun_fun$ A_b_fun_bool_option_prod_a_fun$ )A_b_fun_bool_option_prod_a_fun$ )
(declare-fun fun_app$o (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$p (A_b_fun_a_b_fun_fun$ A_b_fun$ )A_b_fun$ )
(declare-fun fun_app$q (A_b_fun_bool_option_prod_b_fun_a_b_fun_bool_option_prod_b_fun_fun$ A_b_fun_bool_option_prod_b_fun$ )A_b_fun_bool_option_prod_b_fun$ )
(declare-fun fun_app$r (A_b_fun_bool_option_prod_a_fun_a_b_fun_bool_option_prod_b_fun_fun$ A_b_fun_bool_option_prod_a_fun$ )A_b_fun_bool_option_prod_b_fun$ )
(declare-fun fun_app$s (B_b_fun$ B$ )B$ )
(declare-fun fun_app$t (A_a_fun$ A$ )A$ )
(declare-fun fun_app$u (A_b_fun_bool_option_prod_a_fun$ A_b_fun_bool_option_prod$ )A$ )
(declare-fun fun_app$v (B_a_fun$ B$ )A$ )
(declare-fun map_tree$ (A_b_fun$ A_tree$ )B_tree$ )
(declare-fun case_prod$ (A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )
(declare-fun map_tree$a (A_a_fun$ A_tree$ )A_tree$ )
(declare-fun map_tree$b (B_a_fun$ B_tree$ )A_tree$ )
(declare-fun map_tree$c (B_b_fun$ B_tree$ )B_tree$ )
(declare-fun case_prod$a (A_b_fun_bool_option_bool_fun_fun$ A_b_fun_bool_option_prod$ )Bool )
(declare-fun case_prod$b (A_b_fun_bool_option_b_fun_fun$ )A_b_fun_bool_option_prod_b_fun$ )
(declare-fun case_option$ (A_b_fun_bool_option_prod$ Bool_a_b_fun_bool_option_prod_fun$ )Bool_option_a_b_fun_bool_option_prod_fun$ )
(declare-fun unfold_tree$ (A_b_fun_bool_option_prod_b_fun$ A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ A_b_fun_bool_option_prod$ )B_tree$ )
(declare-fun case_option$a (A$ Bool_a_fun$ Bool_option$ )A$ )
(declare-fun unfold_tree$a (A_b_fun_bool_option_prod_a_fun$ A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ A_b_fun_bool_option_prod$ )A_tree$ )
(declare-fun unfold_tree$b (A_b_fun$ A_a_fun$ A_a_fun$ A$ )B_tree$ )
(declare-fun unfold_tree$c (A_a_fun$ A_a_fun$ A_a_fun$ A$ )A_tree$ )
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$ uu$ ?v0 )(ite ?v0 y$ z$ )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (fun_app$a uue$ ?v0 )(case_option$ (pair$ ?v0 right$b )(uud$ ?v0 ))):pattern ((fun_app$a uue$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_b_fun$ ))(! (= (fun_app$a uuc$ ?v0 )(case_option$ (pair$ ?v0 left$b )(uub$ ?v0 ))):pattern ((fun_app$a uuc$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 Bool ))(! (= (fun_app$b (uud$ ?v0 )?v1 )(ite ?v1 (pair$ (fun_app$c (comp$ ?v0 )lr$ )root$b )(pair$ (fun_app$c (comp$ ?v0 )rr$ )root$b ))):pattern ((fun_app$b (uud$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 Bool ))(! (= (fun_app$b (uub$ ?v0 )?v1 )(ite ?v1 (pair$ (fun_app$c (comp$ ?v0 )ll$ )root$b )(pair$ (fun_app$c (comp$ ?v0 )rl$ )root$b ))):pattern ((fun_app$b (uub$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 Bool_option$ ))(! (= (fun_app$d (fun_app$a uui$ ?v0 )?v1 )(pair$ ?v0 ?v1 )):pattern ((fun_app$d (fun_app$a uui$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 Bool_option$ ))(! (= (fun_app$e (fun_app$f uua$ ?v0 )?v1 )(fun_app$g ?v0 (case_option$a x$ uu$ ?v1 ))):pattern ((fun_app$e (fun_app$f uua$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )(?v1 A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )(?v2 A_b_fun$ )(?v3 Bool_option$ ))(! (= (fun_app$d (fun_app$a (uuh$ ?v0 ?v1 )?v2 )?v3 )(fun_app$h (case_prod$ ?v0 )(fun_app$d (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$d (fun_app$a (uuh$ ?v0 ?v1 )?v2 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_bool_fun_fun$ )(?v1 A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )(?v2 A_b_fun$ )(?v3 Bool_option$ ))(! (= (fun_app$i (fun_app$j (uuf$ ?v0 ?v1 )?v2 )?v3 )(case_prod$a ?v0 (fun_app$d (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$i (fun_app$j (uuf$ ?v0 ?v1 )?v2 )?v3 )))):named a8 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_b_fun_fun$ )(?v1 A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )(?v2 A_b_fun$ )(?v3 Bool_option$ ))(! (= (fun_app$e (fun_app$f (uug$ ?v0 ?v1 )?v2 )?v3 )(fun_app$k (case_prod$b ?v0 )(fun_app$d (fun_app$a ?v1 ?v2 )?v3 ))):pattern ((fun_app$e (fun_app$f (uug$ ?v0 ?v1 )?v2 )?v3 )))):named a9 ))
(assert (! (not (exists ((?v0 A_b_fun$ ))(or (and (= (map_tree$ h$ t$ )(map_tree$ ?v0 t$ ))(= (unfold_tree$ (case_prod$b uua$ )(case_prod$ uuc$ )(case_prod$ uue$ )(pair$ h$ root$b ))(unfold_tree$ (case_prod$b uua$ )(case_prod$ uuc$ )(case_prod$ uue$ )(pair$ ?v0 root$b ))))(or (and (= (map_tree$ h$ t$ )(left$ (map_tree$ ?v0 t$ )))(= (unfold_tree$ (case_prod$b uua$ )(case_prod$ uuc$ )(case_prod$ uue$ )(pair$ h$ root$b ))(unfold_tree$ (case_prod$b uua$ )(case_prod$ uuc$ )(case_prod$ uue$ )(pair$ ?v0 left$b ))))(and (= (map_tree$ h$ t$ )(right$ (map_tree$ ?v0 t$ )))(= (unfold_tree$ (case_prod$b uua$ )(case_prod$ uuc$ )(case_prod$ uue$ )(pair$ h$ root$b ))(unfold_tree$ (case_prod$b uua$ )(case_prod$ uuc$ )(case_prod$ uue$ )(pair$ ?v0 right$b )))))))):named a10 ))
(assert (! (= t$ (node$a x$ (node$a y$ (map_tree$a ll$ t$ )(map_tree$a lr$ t$ ))(node$a z$ (map_tree$a rl$ t$ )(map_tree$a rr$ t$ )))):named a11 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a12 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$a ?v1 )))):named a15 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (right$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (right$ ?v1 )))):named a16 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (right$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (right$ ?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (right$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (right$a ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (right$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (right$a ?v1 )))):named a19 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a20 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$a ?v1 )))):named a23 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_tree$ ))(= (left$a (map_tree$b ?v0 ?v1 ))(map_tree$b ?v0 (left$ ?v1 )))):named a24 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_tree$ ))(= (left$ (map_tree$c ?v0 ?v1 ))(map_tree$c ?v0 (left$ ?v1 )))):named a25 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_tree$ ))(= (left$ (map_tree$ ?v0 ?v1 ))(map_tree$ ?v0 (left$a ?v1 )))):named a26 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_tree$ ))(= (left$a (map_tree$a ?v0 ?v1 ))(map_tree$a ?v0 (left$a ?v1 )))):named a27 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun_bool_option_prod_b_fun$ )(?v2 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v3 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v4 A_b_fun_bool_option_prod$ ))(= (map_tree$b ?v0 (unfold_tree$ ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$a (fun_app$l (comp$a ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a28 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (map_tree$b ?v0 (unfold_tree$b ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$c (fun_app$m (comp$b ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a29 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_fun_bool_option_prod_a_fun$ )(?v2 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v3 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v4 A_b_fun_bool_option_prod$ ))(= (map_tree$a ?v0 (unfold_tree$a ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$a (fun_app$n (comp$c ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a30 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (map_tree$a ?v0 (unfold_tree$c ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$c (fun_app$o (comp$d ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a31 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (map_tree$c ?v0 (unfold_tree$b ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$b (fun_app$p (comp$e ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a32 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun_bool_option_prod_b_fun$ )(?v2 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v3 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v4 A_b_fun_bool_option_prod$ ))(= (map_tree$c ?v0 (unfold_tree$ ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$ (fun_app$q (comp$f ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a33 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A_a_fun$ )(?v4 A$ ))(= (map_tree$ ?v0 (unfold_tree$c ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$b (fun_app$c (comp$ ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a34 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_bool_option_prod_a_fun$ )(?v2 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v3 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v4 A_b_fun_bool_option_prod$ ))(= (map_tree$ ?v0 (unfold_tree$a ?v1 ?v2 ?v3 ?v4 ))(unfold_tree$ (fun_app$r (comp$g ?v0 )?v1 )?v2 ?v3 ?v4 ))):named a35 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$g (fun_app$p (comp$e ?v0 )?v1 )?v2 )(fun_app$s ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$p (comp$e ?v0 )?v1 )?v2 )))):named a36 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$t (fun_app$o (comp$d ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$t ?v1 ?v2 ))):pattern ((fun_app$t (fun_app$o (comp$d ?v0 )?v1 )?v2 )))):named a37 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_b_fun_bool_option_prod_a_fun$ )(?v2 A_b_fun_bool_option_prod$ ))(! (= (fun_app$u (fun_app$n (comp$c ?v0 )?v1 )?v2 )(fun_app$t ?v0 (fun_app$u ?v1 ?v2 ))):pattern ((fun_app$u (fun_app$n (comp$c ?v0 )?v1 )?v2 )))):named a38 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun$ )(?v2 A$ ))(! (= (fun_app$t (fun_app$m (comp$b ?v0 )?v1 )?v2 )(fun_app$v ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$t (fun_app$m (comp$b ?v0 )?v1 )?v2 )))):named a39 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 A_b_fun_bool_option_prod_b_fun$ )(?v2 A_b_fun_bool_option_prod$ ))(! (= (fun_app$u (fun_app$l (comp$a ?v0 )?v1 )?v2 )(fun_app$v ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$u (fun_app$l (comp$a ?v0 )?v1 )?v2 )))):named a40 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_b_fun_bool_option_prod_a_fun$ )(?v2 A_b_fun_bool_option_prod$ ))(! (= (fun_app$k (fun_app$r (comp$g ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$u ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$r (comp$g ?v0 )?v1 )?v2 )))):named a41 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 A_b_fun_bool_option_prod_b_fun$ )(?v2 A_b_fun_bool_option_prod$ ))(! (= (fun_app$k (fun_app$q (comp$f ?v0 )?v1 )?v2 )(fun_app$s ?v0 (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$k (fun_app$q (comp$f ?v0 )?v1 )?v2 )))):named a42 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A$ ))(! (= (fun_app$g (fun_app$c (comp$ ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$t ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$c (comp$ ?v0 )?v1 )?v2 )))):named a43 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_bool_fun_fun$ )(?v1 A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )(?v2 A_b_fun_bool_option_prod$ ))(= (case_prod$a ?v0 (fun_app$h (case_prod$ ?v1 )?v2 ))(case_prod$a (uuf$ ?v0 ?v1 )?v2 ))):named a44 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_b_fun_fun$ )(?v1 A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )(?v2 A_b_fun_bool_option_prod$ ))(= (fun_app$k (case_prod$b ?v0 )(fun_app$h (case_prod$ ?v1 )?v2 ))(fun_app$k (case_prod$b (uug$ ?v0 ?v1 ))?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )(?v1 A_b_fun_bool_option_a_b_fun_bool_option_prod_fun_fun$ )(?v2 A_b_fun_bool_option_prod$ ))(= (fun_app$h (case_prod$ ?v0 )(fun_app$h (case_prod$ ?v1 )?v2 ))(fun_app$h (case_prod$ (uuh$ ?v0 ?v1 ))?v2 ))):named a46 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_prod$ ))(! (= (fun_app$h (case_prod$ uui$ )?v0 )?v0 ):pattern ((fun_app$h (case_prod$ uui$ )?v0 )))):named a47 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 Bool_option$ )(?v2 A_b_fun$ )(?v3 Bool_option$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a48 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 Bool_option$ )(?v2 A_b_fun$ )(?v3 Bool_option$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a49 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_prod_a_fun$ )(?v1 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v2 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v3 A_b_fun_bool_option_prod$ ))(= (right$a (unfold_tree$a ?v0 ?v1 ?v2 ?v3 ))(unfold_tree$a ?v0 ?v1 ?v2 (fun_app$h ?v2 ?v3 )))):named a50 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A$ ))(= (right$a (unfold_tree$c ?v0 ?v1 ?v2 ?v3 ))(unfold_tree$c ?v0 ?v1 ?v2 (fun_app$t ?v2 ?v3 )))):named a51 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_a_fun$ )(?v2 A_a_fun$ )(?v3 A$ ))(= (right$ (unfold_tree$b ?v0 ?v1 ?v2 ?v3 ))(unfold_tree$b ?v0 ?v1 ?v2 (fun_app$t ?v2 ?v3 )))):named a52 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_prod_b_fun$ )(?v1 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v2 A_b_fun_bool_option_prod_a_b_fun_bool_option_prod_fun$ )(?v3 A_b_fun_bool_option_prod$ ))(= (right$ (unfold_tree$ ?v0 ?v1 ?v2 ?v3 ))(unfold_tree$ ?v0 ?v1 ?v2 (fun_app$h ?v2 ?v3 )))):named a53 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 Bool_option$ ))(=> (fun_app$i (fun_app$j ?v0 ?v1 )?v2 )(case_prod$a ?v0 (pair$ ?v1 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_bool_fun_fun$ )(?v1 A_b_fun$ )(?v2 Bool_option$ ))(=> (fun_app$i (fun_app$j ?v0 ?v1 )?v2 )(case_prod$a ?v0 (pair$ ?v1 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 A_b_fun_bool_option_prod$ )(?v1 A_b_fun_bool_option_bool_fun_fun$ ))(=> (forall ((?v2 A_b_fun$ )(?v3 Bool_option$ ))(=> (= ?v0 (pair$ ?v2 ?v3 ))(fun_app$i (fun_app$j ?v1 ?v2 )?v3 )))(case_prod$a ?v1 ?v0 ))):named a56 ))
(check-sat )
(get-unsat-core )
