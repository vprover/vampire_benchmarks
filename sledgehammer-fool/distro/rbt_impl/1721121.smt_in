(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort Unit$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort Nat_set$ 0 )
(declare-sort Natural$ 0 )
(declare-sort Bool_set$ 0 )
(declare-sort Unit_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort B_nat_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Nibble_set$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Bool_nat_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_unit_fun$ 0 )
(declare-sort Unit_nat_fun$ 0 )
(declare-sort Unit_bool_fun$ 0 )
(declare-sort Unit_unit_fun$ 0 )
(declare-sort Nat_nibble_fun$ 0 )
(declare-sort Nibble_nat_fun$ 0 )
(declare-sort A_b_rbt_nat_fun$ 0 )
(declare-sort Nibble_bool_fun$ 0 )
(declare-sort Nibble_unit_fun$ 0 )
(declare-sort Unit_nibble_fun$ 0 )
(declare-sort Unit_option_set$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort B_b_bool_fun_fun$ 0 )
(declare-sort Nibble_nibble_fun$ 0 )
(declare-sort Nibble_option_set$ 0 )
(declare-sort A_b_rbt_a_b_rbt_fun$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0 )
(declare-sort Unit_unit_fun_unit_unit_fun_fun$ 0 )
(declare-sort Nat_nat_nat_fun_nat_nat_fun_fun_fun$ 0 )
(declare-sort Nibble_unit_fun_nibble_unit_fun_fun$ 0 )
(declare-sort Unit_nibble_fun_unit_nibble_fun_fun$ 0 )
(declare-sort Nibble_nibble_fun_nibble_nibble_fun_fun$ 0 )
(declare-sort Unit_unit_unit_fun_unit_unit_fun_fun_fun$ 0 )
(declare-sort Unit_unit_nibble_fun_unit_nibble_fun_fun_fun$ 0 )
(declare-sort Nibble_nibble_unit_fun_nibble_unit_fun_fun_fun$ 0 )
(declare-sort Nibble_nibble_nibble_fun_nibble_nibble_fun_fun_fun$ 0 )
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort Nat_nat_rbt$ 0)
(declare-sort Nibble$ 0)
(declare-sort Typerep_list$ 0)
(declare-sort Char$ 0)
(declare-sort Char_list$ 0)
(declare-sort Literal$ 0)
(declare-sort Typerep$ 0)
(declare-sort Nibble_option$ 0)
(declare-sort Unit_option$ 0)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun empty$a ()Nat_nat_rbt$)
(declare-fun selecte$ (Nat_nat_rbt$)Color$)
(declare-fun selectf$ (Nat_nat_rbt$)Nat_nat_rbt$)
(declare-fun selectg$ (Nat_nat_rbt$)Nat$)
(declare-fun selecth$ (Nat_nat_rbt$)Nat$)
(declare-fun selecti$ (Nat_nat_rbt$)Nat_nat_rbt$)
(declare-fun branch$a (Color$ Nat_nat_rbt$ Nat$ Nat$ Nat_nat_rbt$ )Nat_nat_rbt$)
(declare-fun nibble0$ ()Nibble$)
(declare-fun nibble1$ ()Nibble$)
(declare-fun nibble2$ ()Nibble$)
(declare-fun nibble3$ ()Nibble$)
(declare-fun nibble4$ ()Nibble$)
(declare-fun nibble5$ ()Nibble$)
(declare-fun nibble6$ ()Nibble$)
(declare-fun nibble7$ ()Nibble$)
(declare-fun nibble8$ ()Nibble$)
(declare-fun nibble9$ ()Nibble$)
(declare-fun nibbleA$ ()Nibble$)
(declare-fun nibbleB$ ()Nibble$)
(declare-fun nibbleC$ ()Nibble$)
(declare-fun nibbleD$ ()Nibble$)
(declare-fun nibbleE$ ()Nibble$)
(declare-fun nibbleF$ ()Nibble$)
(declare-fun nil$ ()Typerep_list$)
(declare-fun hd$ (Typerep_list$)Typerep$)
(declare-fun tl$ (Typerep_list$)Typerep_list$)
(declare-fun cons$ (Typerep$ Typerep_list$ )Typerep_list$)
(declare-fun selectl$ (Char$)Nibble$)
(declare-fun selectm$ (Char$)Nibble$)
(declare-fun char$ (Nibble$ Nibble$ )Char$)
(declare-fun nil$a ()Char_list$)
(declare-fun hd$a (Char_list$)Char$)
(declare-fun tl$a (Char_list$)Char_list$)
(declare-fun cons$a (Char$ Char_list$ )Char_list$)
(declare-fun explode$ (Literal$)Char_list$)
(declare-fun str$ (Char_list$ )Literal$)
(declare-fun selectj$ (Typerep$)Literal$)
(declare-fun selectk$ (Typerep$)Typerep_list$)
(declare-fun typerep$ (Literal$ Typerep_list$ )Typerep$)
(declare-fun none$ ()Nibble_option$)
(declare-fun the$ (Nibble_option$)Nibble$)
(declare-fun some$ (Nibble$ )Nibble_option$)
(declare-fun none$a ()Unit_option$)
(declare-fun the$a (Unit_option$)Unit$)
(declare-fun some$a (Unit$ )Unit_option$)
(declare-fun t$ ()A_b_rbt$ )
(declare-fun uu$ (Nat_set$ )Nat_bool_fun$ )
(declare-fun bot$ ()A_set$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun sup$ (B_set$ B_set$ )B_set$ )
(declare-fun top$ ()Nibble_set$ )
(declare-fun bot$a ()B_set$ )
(declare-fun bot$b ()Nat_set$ )
(declare-fun bot$c ()Nibble_set$ )
(declare-fun bot$d ()Unit_set$ )
(declare-fun bot$e ()Nibble_bool_fun$ )
(declare-fun bot$f ()Unit_bool_fun$ )
(declare-fun bot$g ()Nat$ )
(declare-fun bot$h (Nat$ )Bool )
(declare-fun bot$i ()Unit$ )
(declare-fun bot$j ()Nibble_option_set$ )
(declare-fun bot$k ()Unit_option_set$ )
(declare-fun plus$ (Nat$ )Nat_nat_fun$ )
(declare-fun size$ (Color$ )Nat$ )
(declare-fun sup$a (Nat_set$ Nat_set$ )Nat_set$ )
(declare-fun sup$b (Nibble_set$ Nibble_set$ )Nibble_set$ )
(declare-fun sup$c (Unit_set$ Unit_set$ )Unit_set$ )
(declare-fun sup$d (A_set$ A_set$ )A_set$ )
(declare-fun sup$e (Unit$ )Unit_unit_fun$ )
(declare-fun swap$ (Nat$ )Nat_nat_nat_fun_nat_nat_fun_fun_fun$ )
(declare-fun top$a ()Nat_set$ )
(declare-fun top$b ()Unit_set$ )
(declare-fun top$c ()Nibble_bool_fun$ )
(declare-fun top$d ()Unit_bool_fun$ )
(declare-fun zero$ ()Nat$ )
(declare-fun image$ (Nat_nat_fun$ Nat_set$ )Nat_set$ )
(declare-fun plus$a (Natural$ Natural$ )Natural$ )
(declare-fun size$a (A_b_rbt$ )Nat$ )
(declare-fun size$b (Typerep$ )Nat$ )
(declare-fun size$c (Literal$ )Nat$ )
(declare-fun size$d (Nibble$ )Nat$ )
(declare-fun size$e (Char$ )Nat$ )
(declare-fun size$f ()Bool_nat_fun$ )
(declare-fun size$g (Natural$ )Nat$ )
(declare-fun size$h ()Unit_nat_fun$ )
(declare-fun swap$a (Nibble$ )Nibble_nibble_nibble_fun_nibble_nibble_fun_fun_fun$ )
(declare-fun swap$b (Nibble$ )Nibble_nibble_unit_fun_nibble_unit_fun_fun_fun$ )
(declare-fun swap$c (Unit$ )Unit_unit_nibble_fun_unit_nibble_fun_fun_fun$ )
(declare-fun swap$d (Unit$ )Unit_unit_unit_fun_unit_unit_fun_fun_fun$ )
(declare-fun these$ (Nibble_option_set$ )Nibble_set$ )
(declare-fun unity$ ()Unit$ )
(declare-fun zero$a ()Natural$ )
(declare-fun image$a (Nibble_nibble_fun$ Nibble_set$ )Nibble_set$ )
(declare-fun image$b (Unit_nibble_fun$ Unit_set$ )Nibble_set$ )
(declare-fun image$c (Nibble_unit_fun$ Nibble_set$ )Unit_set$ )
(declare-fun image$d (Unit_unit_fun$ Unit_set$ )Unit_set$ )
(declare-fun image$e (Nat_bool_fun$ Nat_set$ )Bool_set$ )
(declare-fun image$f (Nat_nibble_fun$ Nat_set$ )Nibble_set$ )
(declare-fun image$g (Nat_unit_fun$ Nat_set$ )Unit_set$ )
(declare-fun image$h (Nibble_nat_fun$ Nibble_set$ )Nat_set$ )
(declare-fun image$i (Unit_nat_fun$ Unit_set$ )Nat_set$ )
(declare-fun insert$ (Nibble$ Nibble_set$ )Nibble_set$ )
(declare-fun member$ (Nat$ Nat_set$ )Bool )
(declare-fun these$a (Unit_option_set$ )Unit_set$ )
(declare-fun thesis$ ()Bool )
(declare-fun collect$ (Nat_bool_fun$ )Nat_set$ )
(declare-fun fun_app$ (Nat_bool_fun$ Nat$ )Bool )
(declare-fun insert$a (Unit$ Unit_set$ )Unit_set$ )
(declare-fun insert$b (Nat$ Nat_set$ )Nat_set$ )
(declare-fun insert$c (B$ B_set$ )B_set$ )
(declare-fun insert$d (A$ A_set$ )A_set$ )
(declare-fun insert$e (Nibble_option$ Nibble_option_set$ )Nibble_option_set$ )
(declare-fun insert$f (Unit_option$ Unit_option_set$ )Unit_option_set$ )
(declare-fun map_rbt$ (A_a_fun$ B_b_fun$ )A_b_rbt_a_b_rbt_fun$ )
(declare-fun member$a (B$ B_set$ )Bool )
(declare-fun member$b (A$ A_set$ )Bool )
(declare-fun member$c (Nibble$ Nibble_set$ )Bool )
(declare-fun member$d (Unit$ Unit_set$ )Bool )
(declare-fun member$e (Bool Bool_set$ )Bool )
(declare-fun rel_rbt$ (A_a_bool_fun_fun$ B_b_bool_fun_fun$ A_b_rbt$ A_b_rbt$ )Bool )
(declare-fun collect$a (Nibble_bool_fun$ )Nibble_set$ )
(declare-fun collect$b (Unit_bool_fun$ )Unit_set$ )
(declare-fun fun_app$a (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$b (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$c (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$d (B_b_bool_fun_fun$ B$ )B_bool_fun$ )
(declare-fun fun_app$e (A_b_rbt_a_b_rbt_fun$ A_b_rbt$ )A_b_rbt$ )
(declare-fun fun_app$f (A_a_fun$ A$ )A$ )
(declare-fun fun_app$g (B_b_fun$ B$ )B$ )
(declare-fun fun_app$h (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun fun_app$i (Nibble_bool_fun$ Nibble$ )Bool )
(declare-fun fun_app$j (Unit_bool_fun$ Unit$ )Bool )
(declare-fun fun_app$k (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$l (A_b_rbt_nat_fun$ A_b_rbt$ )Nat$ )
(declare-fun fun_app$m (Bool_nat_fun$ Bool )Nat$ )
(declare-fun fun_app$n (Nibble_nibble_fun$ Nibble$ )Nibble$ )
(declare-fun fun_app$o (Nibble_unit_fun$ Nibble$ )Unit$ )
(declare-fun fun_app$p (Unit_nibble_fun$ Unit$ )Nibble$ )
(declare-fun fun_app$q (Unit_unit_fun$ Unit$ )Unit$ )
(declare-fun fun_app$r (Nat_nibble_fun$ Nat$ )Nibble$ )
(declare-fun fun_app$s (Nat_unit_fun$ Nat$ )Unit$ )
(declare-fun fun_app$t (Nibble_nat_fun$ Nibble$ )Nat$ )
(declare-fun fun_app$u (Unit_nat_fun$ Unit$ )Nat$ )
(declare-fun fun_app$v (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$ )Nat_nat_fun$ )
(declare-fun fun_app$w (Nat_nat_nat_fun_nat_nat_fun_fun_fun$ Nat$ )Nat_nat_fun_nat_nat_fun_fun$ )
(declare-fun fun_app$x (Nibble_nibble_fun_nibble_nibble_fun_fun$ Nibble_nibble_fun$ )Nibble_nibble_fun$ )
(declare-fun fun_app$y (Nibble_nibble_nibble_fun_nibble_nibble_fun_fun_fun$ Nibble$ )Nibble_nibble_fun_nibble_nibble_fun_fun$ )
(declare-fun fun_app$z (Nibble_unit_fun_nibble_unit_fun_fun$ Nibble_unit_fun$ )Nibble_unit_fun$ )
(declare-fun is_empty$ (Nibble_set$ )Bool )
(declare-fun pred_fun$ (Nat_bool_fun$ Nat_nat_fun$ )Bool )
(declare-fun pred_rbt$ (A_bool_fun$ B_bool_fun$ A_b_rbt$ )Bool )
(declare-fun rec_bool$ (Nat$ Nat$ )Bool_nat_fun$ )
(declare-fun rec_unit$ (Nat$ )Unit_nat_fun$ )
(declare-fun rel_rbt$a (Nat_nat_bool_fun_fun$ Nat_nat_bool_fun_fun$ Nat_nat_rbt$ Nat_nat_rbt$ )Bool )
(declare-fun set1_rbt$ (A_b_rbt$ )A_set$ )
(declare-fun set2_rbt$ (A_b_rbt$ )B_set$ )
(declare-fun size_rbt$ (A_nat_fun$ B_nat_fun$ )A_b_rbt_nat_fun$ )
(declare-fun the_elem$ (Nat_set$ )Nat$ )
(declare-fun fun_app$aa (Nibble_nibble_unit_fun_nibble_unit_fun_fun_fun$ Nibble$ )Nibble_unit_fun_nibble_unit_fun_fun$ )
(declare-fun fun_app$ab (Unit_nibble_fun_unit_nibble_fun_fun$ Unit_nibble_fun$ )Unit_nibble_fun$ )
(declare-fun fun_app$ac (Unit_unit_nibble_fun_unit_nibble_fun_fun_fun$ Unit$ )Unit_nibble_fun_unit_nibble_fun_fun$ )
(declare-fun fun_app$ad (Unit_unit_fun_unit_unit_fun_fun$ Unit_unit_fun$ )Unit_unit_fun$ )
(declare-fun fun_app$ae (Unit_unit_unit_fun_unit_unit_fun_fun_fun$ Unit$ )Unit_unit_fun_unit_unit_fun_fun$ )
(declare-fun is_empty$a (Unit_set$ )Bool )
(declare-fun pred_fun$a (Nat_bool_fun$ Nibble_nat_fun$ )Bool )
(declare-fun pred_fun$b (Nat_bool_fun$ Unit_nat_fun$ )Bool )
(declare-fun pred_rbt$a (Nat_bool_fun$ Nat_bool_fun$ Nat_nat_rbt$ )Bool )
(declare-fun set1_rbt$a (Nat_nat_rbt$ )Nat_set$ )
(declare-fun set2_rbt$a (Nat_nat_rbt$ )Nat_set$ )
(declare-fun size_bool$ ()Bool_nat_fun$ )
(declare-fun size_char$ (Char$ )Nat$ )
(declare-fun size_unit$ ()Unit_nat_fun$ )
(declare-fun the_elem$a (Nibble_set$ )Nibble$ )
(declare-fun the_elem$b (Unit_set$ )Unit$ )
(declare-fun set_option$ (Nibble_option$ )Nibble_set$ )
(declare-fun size_color$ (Color$ )Nat$ )
(declare-fun set_option$a (Unit_option$ )Unit_set$ )
(declare-fun size_nibble$ (Nibble$ )Nat$ )
(declare-fun size_natural$ (Natural$ )Nat$ )
(declare-fun nat_of_nibble$ (Nibble$ )Nat$ )
(declare-fun nibble_of_nat$ (Nat$ )Nibble$ )
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (not thesis$ ):named a1 ))
(assert (! (=> (= t$ empty$ )thesis$ ):named a2 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ ))(=> (= t$ (branch$ r$ ?v0 ?v1 ?v2 ?v3 ))thesis$ )):named a3 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ ))(=> (= t$ (branch$ b$ ?v0 ?v1 ?v2 ?v3 ))thesis$ )):named a4 ))
(assert (! (=> (= t$ empty$ )thesis$ ):named a5 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ )(?v5 Color$ )(?v6 A_b_rbt$ )(?v7 A$ )(?v8 B$ )(?v9 A_b_rbt$ ))(= (= (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )(branch$ ?v5 ?v6 ?v7 ?v8 ?v9 ))(and (= ?v0 ?v5 )(and (= ?v1 ?v6 )(and (= ?v2 ?v7 )(and (= ?v3 ?v8 )(= ?v4 ?v9 ))))))):named a6 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ ))(=> (= t$ (branch$ b$ ?v0 ?v1 ?v2 ?v3 ))thesis$ )):named a7 ))
(assert (! (forall ((?v0 A_b_rbt$ )(?v1 A$ )(?v2 B$ )(?v3 A_b_rbt$ ))(=> (= t$ (branch$ r$ ?v0 ?v1 ?v2 ?v3 ))thesis$ )):named a8 ))
(assert (! (forall ((?v0 Color$ ))(=> (and (=> (= ?v0 r$ )false )(=> (= ?v0 b$ )false ))false )):named a9 ))
(assert (! (forall ((?v0 A_b_rbt$ ))(=> (and (=> (= ?v0 empty$ )false )(forall ((?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v0 (branch$ ?v1 ?v2 ?v3 ?v4 ?v5 ))false )))false )):named a10 ))
(assert (! (not (= r$ b$ )):named a11 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(not (= empty$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a12 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(and (pred_rbt$ ?v0 ?v1 ?v3 )(and (fun_app$a ?v0 ?v4 )(and (fun_app$b ?v1 ?v5 )(pred_rbt$ ?v0 ?v1 ?v6 ))))):pattern ((pred_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a13 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 B_bool_fun$ ))(pred_rbt$ ?v0 ?v1 empty$ )):named a14 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(not (rel_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 )empty$ ))):named a15 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(not (rel_rbt$ ?v0 ?v1 empty$ (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 )))):named a16 ))
(assert (! (forall ((?v0 Color$ )(?v1 Color$ )(?v2 A_a_bool_fun_fun$ )(?v3 B_b_bool_fun_fun$ )(?v4 A_b_rbt$ )(?v5 A_b_rbt$ )(?v6 A$ )(?v7 A$ )(?v8 B$ )(?v9 B$ )(?v10 A_b_rbt$ )(?v11 A_b_rbt$ ))(=> (and (= ?v0 ?v1 )(and (rel_rbt$ ?v2 ?v3 ?v4 ?v5 )(and (fun_app$a (fun_app$c ?v2 ?v6 )?v7 )(and (fun_app$b (fun_app$d ?v3 ?v8 )?v9 )(rel_rbt$ ?v2 ?v3 ?v10 ?v11 )))))(rel_rbt$ ?v2 ?v3 (branch$ ?v0 ?v4 ?v6 ?v8 ?v10 )(branch$ ?v1 ?v5 ?v7 ?v9 ?v11 )))):named a17 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ )(?v7 Color$ )(?v8 A_b_rbt$ )(?v9 A$ )(?v10 B$ )(?v11 A_b_rbt$ ))(! (= (rel_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 )(branch$ ?v7 ?v8 ?v9 ?v10 ?v11 ))(and (= ?v2 ?v7 )(and (rel_rbt$ ?v0 ?v1 ?v3 ?v8 )(and (fun_app$a (fun_app$c ?v0 ?v4 )?v9 )(and (fun_app$b (fun_app$d ?v1 ?v5 )?v10 )(rel_rbt$ ?v0 ?v1 ?v6 ?v11 )))))):pattern ((rel_rbt$ ?v0 ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 )(branch$ ?v7 ?v8 ?v9 ?v10 ?v11 ))))):named a18 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 B_b_bool_fun_fun$ ))(rel_rbt$ ?v0 ?v1 empty$ empty$ )):named a19 ))
(assert (! (forall ((?v0 B$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 A$ )(?v4 A_b_rbt$ ))(member$a ?v0 (set2_rbt$ (branch$ ?v1 ?v2 ?v3 ?v0 ?v4 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 Color$ )(?v2 A_b_rbt$ )(?v3 B$ )(?v4 A_b_rbt$ ))(member$b ?v0 (set1_rbt$ (branch$ ?v1 ?v2 ?v0 ?v3 ?v4 )))):named a21 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_rbt$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ ))(=> (member$a ?v0 (set2_rbt$ ?v1 ))(member$a ?v0 (set2_rbt$ (branch$ ?v2 ?v3 ?v4 ?v5 ?v1 ))))):named a22 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_rbt$ )(?v2 Color$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (member$a ?v0 (set2_rbt$ ?v1 ))(member$a ?v0 (set2_rbt$ (branch$ ?v2 ?v1 ?v3 ?v4 ?v5 ))))):named a23 ))
(assert (! (forall ((?v0 B$ )(?v1 A_b_rbt$ ))(=> (and (member$a ?v0 (set2_rbt$ ?v1 ))(and (forall ((?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(=> (and (= ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(member$a ?v0 (set2_rbt$ ?v3 )))false ))(and (forall ((?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 A_b_rbt$ ))(=> (= ?v1 (branch$ ?v2 ?v3 ?v4 ?v0 ?v5 ))false ))(forall ((?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(=> (and (= ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(member$a ?v0 (set2_rbt$ ?v6 )))false )))))false )):named a24 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ ))(=> (member$b ?v0 (set1_rbt$ ?v1 ))(member$b ?v0 (set1_rbt$ (branch$ ?v2 ?v3 ?v4 ?v5 ?v1 ))))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ )(?v2 Color$ )(?v3 A$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (member$b ?v0 (set1_rbt$ ?v1 ))(member$b ?v0 (set1_rbt$ (branch$ ?v2 ?v1 ?v3 ?v4 ?v5 ))))):named a26 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_rbt$ ))(=> (and (member$b ?v0 (set1_rbt$ ?v1 ))(and (forall ((?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(=> (and (= ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(member$b ?v0 (set1_rbt$ ?v3 )))false ))(and (forall ((?v2 Color$ )(?v3 A_b_rbt$ )(?v4 B$ )(?v5 A_b_rbt$ ))(=> (= ?v1 (branch$ ?v2 ?v3 ?v0 ?v4 ?v5 ))false ))(forall ((?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(=> (and (= ?v1 (branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(member$b ?v0 (set1_rbt$ ?v6 )))false )))))false )):named a27 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ ))(! (= (fun_app$e (map_rbt$ ?v0 ?v1 )empty$ )empty$ ):pattern ((map_rbt$ ?v0 ?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 B_b_fun$ )(?v2 Color$ )(?v3 A_b_rbt$ )(?v4 A$ )(?v5 B$ )(?v6 A_b_rbt$ ))(! (= (fun_app$e (map_rbt$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))(branch$ ?v2 (fun_app$e (map_rbt$ ?v0 ?v1 )?v3 )(fun_app$f ?v0 ?v4 )(fun_app$g ?v1 ?v5 )(fun_app$e (map_rbt$ ?v0 ?v1 )?v6 ))):pattern ((fun_app$e (map_rbt$ ?v0 ?v1 )(branch$ ?v2 ?v3 ?v4 ?v5 ?v6 ))))):named a29 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat_nat_bool_fun_fun$ )(?v2 Nat_nat_rbt$ )(?v3 Nat_nat_rbt$ )(?v4 Nat_nat_bool_fun_fun$ )(?v5 Nat_nat_bool_fun_fun$ ))(=> (and (rel_rbt$a ?v0 ?v1 ?v2 ?v3 )(and (forall ((?v6 Nat$ )(?v7 Nat$ ))(=> (and (member$ ?v6 (set1_rbt$a ?v2 ))(and (member$ ?v7 (set1_rbt$a ?v3 ))(fun_app$ (fun_app$h ?v0 ?v6 )?v7 )))(fun_app$ (fun_app$h ?v4 ?v6 )?v7 )))(forall ((?v6 Nat$ )(?v7 Nat$ ))(=> (and (member$ ?v6 (set2_rbt$a ?v2 ))(and (member$ ?v7 (set2_rbt$a ?v3 ))(fun_app$ (fun_app$h ?v1 ?v6 )?v7 )))(fun_app$ (fun_app$h ?v5 ?v6 )?v7 )))))(rel_rbt$a ?v4 ?v5 ?v2 ?v3 ))):named a30 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_bool_fun$ )(?v2 Nat_nat_rbt$ ))(= (pred_rbt$a ?v0 ?v1 ?v2 )(and (forall ((?v3 Nat$ ))(=> (member$ ?v3 (set1_rbt$a ?v2 ))(fun_app$ ?v0 ?v3 )))(forall ((?v3 Nat$ ))(=> (member$ ?v3 (set2_rbt$a ?v2 ))(fun_app$ ?v1 ?v3 )))))):named a31 ))
(assert (! (= (set1_rbt$ empty$ )bot$ ):named a32 ))
(assert (! (= (set2_rbt$ empty$ )bot$a ):named a33 ))
(assert (! (= (size_color$ b$ )zero$ ):named a34 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (collect$ (uu$ ?v0 ))?v0 )):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a36 ))
(assert (! (= (size_color$ r$ )zero$ ):named a37 ))
(assert (! (= (size$ b$ )zero$ ):named a38 ))
(assert (! (= (size$ r$ )zero$ ):named a39 ))
(assert (! (forall ((?v0 Nat_bool_fun$ ))(= (forall ((?v1 Nat$ ))(=> (member$ ?v1 bot$b )(fun_app$ ?v0 ?v1 )))true )):named a40 ))
(assert (! (forall ((?v0 Nibble_bool_fun$ ))(= (forall ((?v1 Nibble$ ))(=> (member$c ?v1 bot$c )(fun_app$i ?v0 ?v1 )))true )):named a41 ))
(assert (! (forall ((?v0 Unit_bool_fun$ ))(= (forall ((?v1 Unit$ ))(=> (member$d ?v1 bot$d )(fun_app$j ?v0 ?v1 )))true )):named a42 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_set$ ))(= (= (image$ ?v0 ?v1 )bot$b )(= ?v1 bot$b ))):named a43 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ )(?v1 Nibble_set$ ))(= (= (image$a ?v0 ?v1 )bot$c )(= ?v1 bot$c ))):named a44 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ )(?v1 Unit_set$ ))(= (= (image$b ?v0 ?v1 )bot$c )(= ?v1 bot$d ))):named a45 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ )(?v1 Nibble_set$ ))(= (= (image$c ?v0 ?v1 )bot$d )(= ?v1 bot$c ))):named a46 ))
(assert (! (forall ((?v0 Unit_unit_fun$ )(?v1 Unit_set$ ))(= (= (image$d ?v0 ?v1 )bot$d )(= ?v1 bot$d ))):named a47 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_set$ ))(= (= bot$b (image$ ?v0 ?v1 ))(= ?v1 bot$b ))):named a48 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ )(?v1 Nibble_set$ ))(= (= bot$c (image$a ?v0 ?v1 ))(= ?v1 bot$c ))):named a49 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ )(?v1 Unit_set$ ))(= (= bot$c (image$b ?v0 ?v1 ))(= ?v1 bot$d ))):named a50 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ )(?v1 Nibble_set$ ))(= (= bot$d (image$c ?v0 ?v1 ))(= ?v1 bot$c ))):named a51 ))
(assert (! (forall ((?v0 Unit_unit_fun$ )(?v1 Unit_set$ ))(= (= bot$d (image$d ?v0 ?v1 ))(= ?v1 bot$d ))):named a52 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (image$ ?v0 bot$b )bot$b )):named a53 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ ))(= (image$a ?v0 bot$c )bot$c )):named a54 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ ))(= (image$c ?v0 bot$c )bot$d )):named a55 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ ))(= (image$b ?v0 bot$d )bot$c )):named a56 ))
(assert (! (forall ((?v0 Unit_unit_fun$ ))(= (image$d ?v0 bot$d )bot$d )):named a57 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_set$ ))(= (not (member$e false (image$e ?v0 ?v1 )))(forall ((?v2 Nat$ ))(=> (member$ ?v2 ?v1 )(fun_app$ ?v0 ?v2 ))))):named a58 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a59 ))
(assert (! (forall ((?v0 Nibble_bool_fun$ ))(= (= (collect$a ?v0 )bot$c )(forall ((?v1 Nibble$ ))(not (fun_app$i ?v0 ?v1 ))))):named a60 ))
(assert (! (forall ((?v0 Unit_bool_fun$ ))(= (= (collect$b ?v0 )bot$d )(forall ((?v1 Unit$ ))(not (fun_app$j ?v0 ?v1 ))))):named a61 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (forall ((?v1 Nat$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$b ))):named a62 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (forall ((?v1 Nibble$ ))(not (member$c ?v1 ?v0 )))(= ?v0 bot$c ))):named a63 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (forall ((?v1 Unit$ ))(not (member$d ?v1 ?v0 )))(= ?v0 bot$d ))):named a64 ))
(assert (! (forall ((?v0 Nat$ ))(= (member$ ?v0 bot$b )false )):named a65 ))
(assert (! (forall ((?v0 Nibble$ ))(= (member$c ?v0 bot$c )false )):named a66 ))
(assert (! (forall ((?v0 Unit$ ))(= (member$d ?v0 bot$d )false )):named a67 ))
(assert (! (forall ((?v0 Nibble_bool_fun$ ))(= (= bot$c (collect$a ?v0 ))(forall ((?v1 Nibble$ ))(not (fun_app$i ?v0 ?v1 ))))):named a68 ))
(assert (! (forall ((?v0 Unit_bool_fun$ ))(= (= bot$d (collect$b ?v0 ))(forall ((?v1 Unit$ ))(not (fun_app$j ?v0 ?v1 ))))):named a69 ))
(assert (! (forall ((?v0 Nat$ ))(=> (member$ ?v0 bot$b )false )):named a70 ))
(assert (! (forall ((?v0 Nibble$ ))(=> (member$c ?v0 bot$c )false )):named a71 ))
(assert (! (forall ((?v0 Unit$ ))(=> (member$d ?v0 bot$d )false )):named a72 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat$ ))(=> (= ?v0 bot$b )(not (member$ ?v1 ?v0 )))):named a73 ))
(assert (! (forall ((?v0 Nibble_set$ )(?v1 Nibble$ ))(=> (= ?v0 bot$c )(not (member$c ?v1 ?v0 )))):named a74 ))
(assert (! (forall ((?v0 Unit_set$ )(?v1 Unit$ ))(=> (= ?v0 bot$d )(not (member$d ?v1 ?v0 )))):named a75 ))
(assert (! (forall ((?v0 Nat_set$ ))(=> (forall ((?v1 Nat$ ))(=> (member$ ?v1 ?v0 )false ))(= ?v0 bot$b ))):named a76 ))
(assert (! (forall ((?v0 Nibble_set$ ))(=> (forall ((?v1 Nibble$ ))(=> (member$c ?v1 ?v0 )false ))(= ?v0 bot$c ))):named a77 ))
(assert (! (forall ((?v0 Unit_set$ ))(=> (forall ((?v1 Unit$ ))(=> (member$d ?v1 ?v0 )false ))(= ?v0 bot$d ))):named a78 ))
(assert (! (forall ((?v0 Nat_set$ ))(= (exists ((?v1 Nat$ ))(member$ ?v1 ?v0 ))(not (= ?v0 bot$b )))):named a79 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (exists ((?v1 Nibble$ ))(member$c ?v1 ?v0 ))(not (= ?v0 bot$c )))):named a80 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (exists ((?v1 Unit$ ))(member$d ?v1 ?v0 ))(not (= ?v0 bot$d )))):named a81 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_nat_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$k ?v2 ?v0 )(image$ ?v2 ?v1 )))):named a82 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ )(?v3 Nat_nat_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$k ?v3 ?v0 )))(member$ ?v2 (image$ ?v3 ?v1 )))):named a83 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_set$ )(?v2 Nat_bool_fun$ ))(=> (forall ((?v3 Nat$ ))(=> (member$ ?v3 (image$ ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 Nat$ ))(=> (member$ ?v3 ?v1 )(fun_app$ ?v2 (fun_app$k ?v0 ?v3 )))))):named a84 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_set$ )(?v2 Nat_bool_fun$ ))(=> (exists ((?v3 Nat$ ))(and (member$ ?v3 (image$ ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 Nat$ ))(and (member$ ?v3 ?v1 )(fun_app$ ?v2 (fun_app$k ?v0 ?v3 )))))):named a85 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 Nat$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$k ?v2 ?v4 )(fun_app$k ?v3 ?v4 )))))(= (image$ ?v2 ?v0 )(image$ ?v3 ?v1 )))):named a86 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat_set$ ))(= (member$ ?v0 (image$ ?v1 ?v2 ))(exists ((?v3 Nat$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$k ?v1 ?v3 )))))):named a87 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ ))(= (forall ((?v2 Nat$ ))(=> (member$ ?v2 ?v0 )(fun_app$ ?v1 ?v2 )))(forall ((?v2 Nat$ ))(=> (member$ ?v2 ?v0 )(fun_app$ ?v1 ?v2 ))))):named a88 ))
(assert (! (= (size$a empty$ )zero$ ):named a89 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(=> (and (not (= ?v0 bot$b ))(forall ((?v3 Nat$ ))(=> (member$ ?v3 ?v0 )(= (fun_app$k ?v1 ?v3 )(fun_app$k ?v1 ?v2 )))))(= (the_elem$ (image$ ?v1 ?v0 ))(fun_app$k ?v1 ?v2 )))):named a90 ))
(assert (! (forall ((?v0 A_nat_fun$ )(?v1 B_nat_fun$ ))(! (= (fun_app$l (size_rbt$ ?v0 ?v1 )empty$ )zero$ ):pattern ((size_rbt$ ?v0 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 Nibble_set$ ))(! (= (is_empty$ ?v0 )(= ?v0 bot$c )):pattern ((is_empty$ ?v0 )))):named a92 ))
(assert (! (forall ((?v0 Unit_set$ ))(! (= (is_empty$a ?v0 )(= ?v0 bot$d )):pattern ((is_empty$a ?v0 )))):named a93 ))
(assert (! (= bot$c (collect$a bot$e )):named a94 ))
(assert (! (= bot$d (collect$b bot$f )):named a95 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a96 ))
(assert (! (forall ((?v0 Natural$ ))(= (= zero$a ?v0 )(= ?v0 zero$a ))):named a97 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_bool_fun$ )(?v2 Nat_bool_fun$ ))(=> (and (forall ((?v3 Nat$ ))(=> (and (member$ ?v3 ?v0 )(fun_app$ ?v1 ?v3 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 Nat$ ))(=> (member$ ?v3 ?v0 )(fun_app$ ?v1 ?v3 ))))(forall ((?v3 Nat$ ))(=> (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 ))))):named a98 ))
(assert (! (forall ((?v0 Typerep$ )(?v1 Typerep$ ))(=> (not (= (size$b ?v0 )(size$b ?v1 )))(not (= ?v0 ?v1 )))):named a99 ))
(assert (! (forall ((?v0 Literal$ )(?v1 Literal$ ))(=> (not (= (size$c ?v0 )(size$c ?v1 )))(not (= ?v0 ?v1 )))):named a100 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ ))(=> (not (= (size$d ?v0 )(size$d ?v1 )))(not (= ?v0 ?v1 )))):named a101 ))
(assert (! (forall ((?v0 Char$ )(?v1 Char$ ))(=> (not (= (size$e ?v0 )(size$e ?v1 )))(not (= ?v0 ?v1 )))):named a102 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(=> (not (= (fun_app$m size$f ?v0 )(fun_app$m size$f ?v1 )))(not (= ?v0 ?v1 )))):named a103 ))
(assert (! (= bot$g zero$ ):named a104 ))
(assert (! (= zero$ zero$ ):named a105 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a106 ))
(assert (! (forall ((?v0 Nibble$ ))(= (the_elem$a (insert$ ?v0 bot$c ))?v0 )):named a107 ))
(assert (! (forall ((?v0 Unit$ ))(= (the_elem$b (insert$a ?v0 bot$d ))?v0 )):named a108 ))
(assert (! (= (size$g zero$a )zero$ ):named a109 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a110 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ ))(= (insert$a ?v0 (insert$a ?v0 ?v1 ))(insert$a ?v0 ?v1 ))):named a111 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ )(?v2 Nibble_set$ ))(= (member$c ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$c ?v0 ?v2 )))):named a112 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ )(?v2 Unit_set$ ))(= (member$d ?v0 (insert$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$d ?v0 ?v2 )))):named a113 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_set$ ))(= (member$ ?v0 (insert$b ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a114 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ )(?v2 Nibble$ ))(=> (=> (not (member$c ?v0 ?v1 ))(= ?v0 ?v2 ))(member$c ?v0 (insert$ ?v2 ?v1 )))):named a115 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ )(?v2 Unit$ ))(=> (=> (not (member$d ?v0 ?v1 ))(= ?v0 ?v2 ))(member$d ?v0 (insert$a ?v2 ?v1 )))):named a116 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$b ?v2 ?v1 )))):named a117 ))
(assert (! (forall ((?v0 Nat$ ))(member$ ?v0 (insert$b ?v0 bot$b ))):named a118 ))
(assert (! (forall ((?v0 Nibble$ ))(member$c ?v0 (insert$ ?v0 bot$c ))):named a119 ))
(assert (! (forall ((?v0 Unit$ ))(member$d ?v0 (insert$a ?v0 bot$d ))):named a120 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat_set$ ))(= (image$ ?v0 (insert$b ?v1 ?v2 ))(insert$b (fun_app$k ?v0 ?v1 )(image$ ?v0 ?v2 )))):named a121 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ )(?v1 Nibble$ )(?v2 Nibble_set$ ))(= (image$a ?v0 (insert$ ?v1 ?v2 ))(insert$ (fun_app$n ?v0 ?v1 )(image$a ?v0 ?v2 )))):named a122 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ )(?v1 Nibble$ )(?v2 Nibble_set$ ))(= (image$c ?v0 (insert$ ?v1 ?v2 ))(insert$a (fun_app$o ?v0 ?v1 )(image$c ?v0 ?v2 )))):named a123 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ )(?v1 Unit$ )(?v2 Unit_set$ ))(= (image$b ?v0 (insert$a ?v1 ?v2 ))(insert$ (fun_app$p ?v0 ?v1 )(image$b ?v0 ?v2 )))):named a124 ))
(assert (! (forall ((?v0 Unit_unit_fun$ )(?v1 Unit$ )(?v2 Unit_set$ ))(= (image$d ?v0 (insert$a ?v1 ?v2 ))(insert$a (fun_app$q ?v0 ?v1 )(image$d ?v0 ?v2 )))):named a125 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_nat_fun$ ))(=> (member$ ?v0 ?v1 )(= (insert$b (fun_app$k ?v2 ?v0 )(image$ ?v2 ?v1 ))(image$ ?v2 ?v1 )))):named a126 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_nibble_fun$ ))(=> (member$ ?v0 ?v1 )(= (insert$ (fun_app$r ?v2 ?v0 )(image$f ?v2 ?v1 ))(image$f ?v2 ?v1 )))):named a127 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_unit_fun$ ))(=> (member$ ?v0 ?v1 )(= (insert$a (fun_app$s ?v2 ?v0 )(image$g ?v2 ?v1 ))(image$g ?v2 ?v1 )))):named a128 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ )(?v2 Nibble_set$ ))(= (insert$ ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (insert$ ?v0 ?v2 )))):named a129 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ )(?v2 Unit_set$ ))(= (insert$a ?v0 (insert$a ?v1 ?v2 ))(insert$a ?v1 (insert$a ?v0 ?v2 )))):named a130 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ )(?v2 Nibble_set$ ))(=> (and (member$c ?v0 (insert$ ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$c ?v0 ?v2 )false )))false )):named a131 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ )(?v2 Unit_set$ ))(=> (and (member$d ?v0 (insert$a ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$d ?v0 ?v2 )false )))false )):named a132 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_set$ ))(=> (and (member$ ?v0 (insert$b ?v1 ?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a133 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ ))(=> (and (member$c ?v0 ?v1 )(forall ((?v2 Nibble_set$ ))(=> (and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$c ?v0 ?v2 )))false )))false )):named a134 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ ))(=> (and (member$d ?v0 ?v1 )(forall ((?v2 Unit_set$ ))(=> (and (= ?v1 (insert$a ?v0 ?v2 ))(not (member$d ?v0 ?v2 )))false )))false )):named a135 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v2 Nat_set$ ))(=> (and (= ?v1 (insert$b ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))false )))false )):named a136 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ ))(! (=> (member$c ?v0 ?v1 )(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a137 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ ))(! (=> (member$d ?v0 ?v1 )(= (insert$a ?v0 ?v1 )?v1 )):pattern ((insert$a ?v0 ?v1 )))):named a138 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(! (=> (member$ ?v0 ?v1 )(= (insert$b ?v0 ?v1 )?v1 )):pattern ((insert$b ?v0 ?v1 )))):named a139 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ )(?v2 Nibble$ ))(=> (member$c ?v0 ?v1 )(member$c ?v0 (insert$ ?v2 ?v1 )))):named a140 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ )(?v2 Unit$ ))(=> (member$d ?v0 ?v1 )(member$d ?v0 (insert$a ?v2 ?v1 )))):named a141 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (insert$b ?v2 ?v1 )))):named a142 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ ))(=> (member$c ?v0 ?v1 )(exists ((?v2 Nibble_set$ ))(and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$c ?v0 ?v2 )))))):named a143 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ ))(=> (member$d ?v0 ?v1 )(exists ((?v2 Unit_set$ ))(and (= ?v1 (insert$a ?v0 ?v2 ))(not (member$d ?v0 ?v2 )))))):named a144 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(=> (member$ ?v0 ?v1 )(exists ((?v2 Nat_set$ ))(and (= ?v1 (insert$b ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))))):named a145 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ )(?v2 Nibble$ )(?v3 Nibble_set$ ))(=> (and (not (member$c ?v0 ?v1 ))(not (member$c ?v2 ?v3 )))(= (= (insert$ ?v0 ?v1 )(insert$ ?v2 ?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 Nibble_set$ ))(and (= ?v1 (insert$ ?v2 ?v4 ))(and (not (member$c ?v2 ?v4 ))(and (= ?v3 (insert$ ?v0 ?v4 ))(not (member$c ?v0 ?v4 )))))))))):named a146 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ )(?v2 Unit$ )(?v3 Unit_set$ ))(=> (and (not (member$d ?v0 ?v1 ))(not (member$d ?v2 ?v3 )))(= (= (insert$a ?v0 ?v1 )(insert$a ?v2 ?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 Unit_set$ ))(and (= ?v1 (insert$a ?v2 ?v4 ))(and (not (member$d ?v2 ?v4 ))(and (= ?v3 (insert$a ?v0 ?v4 ))(not (member$d ?v0 ?v4 )))))))))):named a147 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ )(?v3 Nat_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v2 ?v3 )))(= (= (insert$b ?v0 ?v1 )(insert$b ?v2 ?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 Nat_set$ ))(and (= ?v1 (insert$b ?v2 ?v4 ))(and (not (member$ ?v2 ?v4 ))(and (= ?v3 (insert$b ?v0 ?v4 ))(not (member$ ?v0 ?v4 )))))))))):named a148 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ )(?v2 Nibble_set$ ))(=> (and (not (member$c ?v0 ?v1 ))(not (member$c ?v0 ?v2 )))(= (= (insert$ ?v0 ?v1 )(insert$ ?v0 ?v2 ))(= ?v1 ?v2 )))):named a149 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ )(?v2 Unit_set$ ))(=> (and (not (member$d ?v0 ?v1 ))(not (member$d ?v0 ?v2 )))(= (= (insert$a ?v0 ?v1 )(insert$a ?v0 ?v2 ))(= ?v1 ?v2 )))):named a150 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v0 ?v2 )))(= (= (insert$b ?v0 ?v1 )(insert$b ?v0 ?v2 ))(= ?v1 ?v2 )))):named a151 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ ))(member$c ?v0 (insert$ ?v0 ?v1 ))):named a152 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ ))(member$d ?v0 (insert$a ?v0 ?v1 ))):named a153 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ ))(member$ ?v0 (insert$b ?v0 ?v1 ))):named a154 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ )(?v2 Nibble$ )(?v3 Nibble$ ))(= (= (insert$ ?v0 (insert$ ?v1 bot$c ))(insert$ ?v2 (insert$ ?v3 bot$c )))(or (and (= ?v0 ?v2 )(= ?v1 ?v3 ))(and (= ?v0 ?v3 )(= ?v1 ?v2 ))))):named a155 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ )(?v2 Unit$ )(?v3 Unit$ ))(= (= (insert$a ?v0 (insert$a ?v1 bot$d ))(insert$a ?v2 (insert$a ?v3 bot$d )))(or (and (= ?v0 ?v2 )(= ?v1 ?v3 ))(and (= ?v0 ?v3 )(= ?v1 ?v2 ))))):named a156 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (member$ ?v0 (insert$b ?v1 bot$b ))(= ?v0 ?v1 ))):named a157 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ ))(= (member$c ?v0 (insert$ ?v1 bot$c ))(= ?v0 ?v1 ))):named a158 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ ))(= (member$d ?v0 (insert$a ?v1 bot$d ))(= ?v0 ?v1 ))):named a159 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ ))(=> (= (insert$ ?v0 bot$c )(insert$ ?v1 bot$c ))(= ?v0 ?v1 ))):named a160 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ ))(=> (= (insert$a ?v0 bot$d )(insert$a ?v1 bot$d ))(= ?v0 ?v1 ))):named a161 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (member$ ?v0 (insert$b ?v1 bot$b ))(= ?v0 ?v1 ))):named a162 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ ))(=> (member$c ?v0 (insert$ ?v1 bot$c ))(= ?v0 ?v1 ))):named a163 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ ))(=> (member$d ?v0 (insert$a ?v1 bot$d ))(= ?v0 ?v1 ))):named a164 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ ))(not (= (insert$ ?v0 ?v1 )bot$c ))):named a165 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ ))(not (= (insert$a ?v0 ?v1 )bot$d ))):named a166 ))
(assert (! (forall ((?v0 Nibble$ ))(! (= (size$d ?v0 )zero$ ):pattern ((size$d ?v0 )))):named a167 ))
(assert (! (= (fun_app$m size$f false )zero$ ):named a168 ))
(assert (! (= (fun_app$m size$f true )zero$ ):named a169 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size$e ?v0 )zero$ ):pattern ((size$e ?v0 )))):named a170 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (bot$h ?v0 )(member$ ?v0 bot$b )):pattern ((bot$h ?v0 )))):named a171 ))
(assert (! (forall ((?v0 Nibble$ ))(! (= (fun_app$i bot$e ?v0 )(member$c ?v0 bot$c )):pattern ((fun_app$i bot$e ?v0 )))):named a172 ))
(assert (! (forall ((?v0 Unit$ ))(! (= (fun_app$j bot$f ?v0 )(member$d ?v0 bot$d )):pattern ((fun_app$j bot$f ?v0 )))):named a173 ))
(assert (! (= (size_natural$ zero$a )zero$ ):named a174 ))
(assert (! (forall ((?v0 Literal$ ))(! (= (size$c ?v0 )zero$ ):pattern ((size$c ?v0 )))):named a175 ))
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$m size$f ?v0 )zero$ ):pattern ((fun_app$m size$f ?v0 )))):named a176 ))
(assert (! (forall ((?v0 Char$ ))(! (= (size_char$ ?v0 )zero$ ):pattern ((size_char$ ?v0 )))):named a177 ))
(assert (! (= (size$d nibbleA$ )zero$ ):named a178 ))
(assert (! (= (size$d nibbleB$ )zero$ ):named a179 ))
(assert (! (= (fun_app$m size_bool$ false )zero$ ):named a180 ))
(assert (! (= (fun_app$m size_bool$ true )zero$ ):named a181 ))
(assert (! (= (size$d nibble8$ )zero$ ):named a182 ))
(assert (! (= (size$d nibbleD$ )zero$ ):named a183 ))
(assert (! (= size_bool$ (rec_bool$ zero$ zero$ )):named a184 ))
(assert (! (= (size$d nibble0$ )zero$ ):named a185 ))
(assert (! (= size$f (rec_bool$ zero$ zero$ )):named a186 ))
(assert (! (= (size$d nibbleC$ )zero$ ):named a187 ))
(assert (! (= (size$d nibble1$ )zero$ ):named a188 ))
(assert (! (= (size$d nibbleF$ )zero$ ):named a189 ))
(assert (! (= (size$d nibble9$ )zero$ ):named a190 ))
(assert (! (= (size$d nibble3$ )zero$ ):named a191 ))
(assert (! (= (size$d nibble2$ )zero$ ):named a192 ))
(assert (! (= (size$d nibbleE$ )zero$ ):named a193 ))
(assert (! (= (size$d nibble4$ )zero$ ):named a194 ))
(assert (! (= top$ (insert$ nibble0$ (insert$ nibble1$ (insert$ nibble2$ (insert$ nibble3$ (insert$ nibble4$ (insert$ nibble5$ (insert$ nibble6$ (insert$ nibble7$ (insert$ nibble8$ (insert$ nibble9$ (insert$ nibbleA$ (insert$ nibbleB$ (insert$ nibbleC$ (insert$ nibbleD$ (insert$ nibbleE$ (insert$ nibbleF$ bot$c ))))))))))))))))):named a195 ))
(assert (! (= (size$d nibble5$ )zero$ ):named a196 ))
(assert (! (= (nibble_of_nat$ zero$ )nibble0$ ):named a197 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (set2_rbt$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(insert$c ?v3 (sup$ (set2_rbt$ ?v1 )(set2_rbt$ ?v4 )))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a198 ))
(assert (! (forall ((?v0 Nat$ ))(member$ ?v0 top$a )):named a199 ))
(assert (! (forall ((?v0 Nibble$ ))(member$c ?v0 top$ )):named a200 ))
(assert (! (forall ((?v0 Unit$ ))(member$d ?v0 top$b )):named a201 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(=> (=> (not (member$ ?v0 ?v1 ))(member$ ?v0 ?v2 ))(member$ ?v0 (sup$a ?v2 ?v1 )))):named a202 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (member$ ?v0 (sup$a ?v1 ?v2 ))(or (member$ ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a203 ))
(assert (! (forall ((?v0 Nibble_set$ )(?v1 Nibble_set$ ))(= (= (sup$b ?v0 ?v1 )bot$c )(and (= ?v0 bot$c )(= ?v1 bot$c )))):named a204 ))
(assert (! (forall ((?v0 Unit_set$ )(?v1 Unit_set$ ))(= (= (sup$c ?v0 ?v1 )bot$d )(and (= ?v0 bot$d )(= ?v1 bot$d )))):named a205 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ )(?v2 Nibble_set$ ))(= (sup$b (insert$ ?v0 ?v1 )?v2 )(insert$ ?v0 (sup$b ?v1 ?v2 )))):named a206 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ )(?v2 Unit_set$ ))(= (sup$c (insert$a ?v0 ?v1 )?v2 )(insert$a ?v0 (sup$c ?v1 ?v2 )))):named a207 ))
(assert (! (forall ((?v0 Nibble_set$ )(?v1 Nibble$ )(?v2 Nibble_set$ ))(= (sup$b ?v0 (insert$ ?v1 ?v2 ))(insert$ ?v1 (sup$b ?v0 ?v2 )))):named a208 ))
(assert (! (forall ((?v0 Unit_set$ )(?v1 Unit$ )(?v2 Unit_set$ ))(= (sup$c ?v0 (insert$a ?v1 ?v2 ))(insert$a ?v1 (sup$c ?v0 ?v2 )))):named a209 ))
(assert (! (= (size$d nibble6$ )zero$ ):named a210 ))
(assert (! (= (size$d nibble7$ )zero$ ):named a211 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (set1_rbt$ (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(insert$d ?v2 (sup$d (set1_rbt$ ?v1 )(set1_rbt$ ?v4 )))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a212 ))
(assert (! (exists ((?v0 Nat$ ))(member$ ?v0 top$a )):named a213 ))
(assert (! (exists ((?v0 Nibble$ ))(member$c ?v0 top$ )):named a214 ))
(assert (! (exists ((?v0 Unit$ ))(member$d ?v0 top$b )):named a215 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (sup$a ?v1 ?v2 )))):named a216 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (sup$a ?v2 ?v1 )))):named a217 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(=> (and (member$ ?v0 (sup$a ?v1 ?v2 ))(and (=> (member$ ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a218 ))
(assert (! (forall ((?v0 Nat_set$ ))(=> (forall ((?v1 Nat$ ))(member$ ?v1 ?v0 ))(= top$a ?v0 ))):named a219 ))
(assert (! (forall ((?v0 Nibble_set$ ))(=> (forall ((?v1 Nibble$ ))(member$c ?v1 ?v0 ))(= top$ ?v0 ))):named a220 ))
(assert (! (forall ((?v0 Unit_set$ ))(=> (forall ((?v1 Unit$ ))(member$d ?v1 ?v0 ))(= top$b ?v0 ))):named a221 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (sup$b top$ ?v0 )top$ )):named a222 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (sup$c top$b ?v0 )top$b )):named a223 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (sup$b ?v0 top$ )top$ )):named a224 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (sup$c ?v0 top$b )top$b )):named a225 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ )(?v2 Nat_bool_fun$ ))(= (forall ((?v3 Nat$ ))(=> (member$ ?v3 (sup$a ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(and (forall ((?v3 Nat$ ))(=> (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 )))(forall ((?v3 Nat$ ))(=> (member$ ?v3 ?v1 )(fun_app$ ?v2 ?v3 )))))):named a226 ))
(assert (! (forall ((?v0 Nat_set$ )(?v1 Nat_set$ )(?v2 Nat_bool_fun$ ))(= (exists ((?v3 Nat$ ))(and (member$ ?v3 (sup$a ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(or (exists ((?v3 Nat$ ))(and (member$ ?v3 ?v0 )(fun_app$ ?v2 ?v3 )))(exists ((?v3 Nat$ ))(and (member$ ?v3 ?v1 )(fun_app$ ?v2 ?v3 )))))):named a227 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(=> (= ?v0 (fun_app$k ?v1 ?v2 ))(member$ ?v0 (image$ ?v1 top$a )))):named a228 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nibble_nat_fun$ )(?v2 Nibble$ ))(=> (= ?v0 (fun_app$t ?v1 ?v2 ))(member$ ?v0 (image$h ?v1 top$ )))):named a229 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Unit_nat_fun$ )(?v2 Unit$ ))(=> (= ?v0 (fun_app$u ?v1 ?v2 ))(member$ ?v0 (image$i ?v1 top$b )))):named a230 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(member$ (fun_app$k ?v0 ?v1 )(image$ ?v0 top$a ))):named a231 ))
(assert (! (forall ((?v0 Nibble_nat_fun$ )(?v1 Nibble$ ))(member$ (fun_app$t ?v0 ?v1 )(image$h ?v0 top$ ))):named a232 ))
(assert (! (forall ((?v0 Unit_nat_fun$ )(?v1 Unit$ ))(member$ (fun_app$u ?v0 ?v1 )(image$i ?v0 top$b ))):named a233 ))
(assert (! (not (= bot$c top$ )):named a234 ))
(assert (! (not (= bot$d top$b )):named a235 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_set$ )(?v2 Nat_set$ ))(= (image$ ?v0 (sup$a ?v1 ?v2 ))(sup$a (image$ ?v0 ?v1 )(image$ ?v0 ?v2 )))):named a236 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (sup$b ?v0 bot$c )?v0 )):named a237 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (sup$c ?v0 bot$d )?v0 )):named a238 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (sup$b bot$c ?v0 )?v0 )):named a239 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (sup$c bot$d ?v0 )?v0 )):named a240 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ ))(= (insert$ ?v0 ?v1 )(sup$b (insert$ ?v0 bot$c )?v1 ))):named a241 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ ))(= (insert$a ?v0 ?v1 )(sup$c (insert$a ?v0 bot$d )?v1 ))):named a242 ))
(assert (! (forall ((?v0 Nibble_set$ )(?v1 Nibble_set$ )(?v2 Nibble$ ))(= (= (sup$b ?v0 ?v1 )(insert$ ?v2 bot$c ))(or (and (= ?v0 bot$c )(= ?v1 (insert$ ?v2 bot$c )))(or (and (= ?v0 (insert$ ?v2 bot$c ))(= ?v1 bot$c ))(and (= ?v0 (insert$ ?v2 bot$c ))(= ?v1 (insert$ ?v2 bot$c ))))))):named a243 ))
(assert (! (forall ((?v0 Unit_set$ )(?v1 Unit_set$ )(?v2 Unit$ ))(= (= (sup$c ?v0 ?v1 )(insert$a ?v2 bot$d ))(or (and (= ?v0 bot$d )(= ?v1 (insert$a ?v2 bot$d )))(or (and (= ?v0 (insert$a ?v2 bot$d ))(= ?v1 bot$d ))(and (= ?v0 (insert$a ?v2 bot$d ))(= ?v1 (insert$a ?v2 bot$d ))))))):named a244 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble_set$ )(?v2 Nibble_set$ ))(= (= (insert$ ?v0 bot$c )(sup$b ?v1 ?v2 ))(or (and (= ?v1 bot$c )(= ?v2 (insert$ ?v0 bot$c )))(or (and (= ?v1 (insert$ ?v0 bot$c ))(= ?v2 bot$c ))(and (= ?v1 (insert$ ?v0 bot$c ))(= ?v2 (insert$ ?v0 bot$c ))))))):named a245 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit_set$ )(?v2 Unit_set$ ))(= (= (insert$a ?v0 bot$d )(sup$c ?v1 ?v2 ))(or (and (= ?v1 bot$d )(= ?v2 (insert$a ?v0 bot$d )))(or (and (= ?v1 (insert$a ?v0 bot$d ))(= ?v2 bot$d ))(and (= ?v1 (insert$a ?v0 bot$d ))(= ?v2 (insert$a ?v0 bot$d ))))))):named a246 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (sup$b bot$c ?v0 )?v0 )):named a247 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (sup$c bot$d ?v0 )?v0 )):named a248 ))
(assert (! (forall ((?v0 Unit$ ))(= (fun_app$q (sup$e bot$i )?v0 )?v0 )):named a249 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (sup$b ?v0 bot$c )?v0 )):named a250 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (sup$c ?v0 bot$d )?v0 )):named a251 ))
(assert (! (forall ((?v0 Unit$ ))(= (fun_app$q (sup$e ?v0 )bot$i )?v0 )):named a252 ))
(assert (! (forall ((?v0 Nibble_set$ )(?v1 Nibble_set$ ))(= (= (sup$b ?v0 ?v1 )bot$c )(and (= ?v0 bot$c )(= ?v1 bot$c )))):named a253 ))
(assert (! (forall ((?v0 Unit_set$ )(?v1 Unit_set$ ))(= (= (sup$c ?v0 ?v1 )bot$d )(and (= ?v0 bot$d )(= ?v1 bot$d )))):named a254 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ ))(= (= (fun_app$q (sup$e ?v0 )?v1 )bot$i )(and (= ?v0 bot$i )(= ?v1 bot$i )))):named a255 ))
(assert (! (forall ((?v0 Nibble_set$ )(?v1 Nibble_set$ ))(= (= bot$c (sup$b ?v0 ?v1 ))(and (= ?v0 bot$c )(= ?v1 bot$c )))):named a256 ))
(assert (! (forall ((?v0 Unit_set$ )(?v1 Unit_set$ ))(= (= bot$d (sup$c ?v0 ?v1 ))(and (= ?v0 bot$d )(= ?v1 bot$d )))):named a257 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ ))(= (= bot$i (fun_app$q (sup$e ?v0 )?v1 ))(and (= ?v0 bot$i )(= ?v1 bot$i )))):named a258 ))
(assert (! (= top$ (collect$a top$c )):named a259 ))
(assert (! (= top$b (collect$b top$d )):named a260 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (sup$b ?v0 bot$c )?v0 )):named a261 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (sup$c ?v0 bot$d )?v0 )):named a262 ))
(assert (! (forall ((?v0 Unit$ ))(= (fun_app$q (sup$e ?v0 )bot$i )?v0 )):named a263 ))
(assert (! (forall ((?v0 Nibble_set$ ))(= (sup$b bot$c ?v0 )?v0 )):named a264 ))
(assert (! (forall ((?v0 Unit_set$ ))(= (sup$c bot$d ?v0 )?v0 )):named a265 ))
(assert (! (forall ((?v0 Unit$ ))(= (fun_app$q (sup$e bot$i )?v0 )?v0 )):named a266 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat_nat_fun$ ))(= (pred_fun$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(=> (member$ ?v2 (image$ ?v1 top$a ))(fun_app$ ?v0 ?v2 ))))):named a267 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nibble_nat_fun$ ))(= (pred_fun$a ?v0 ?v1 )(forall ((?v2 Nat$ ))(=> (member$ ?v2 (image$h ?v1 top$ ))(fun_app$ ?v0 ?v2 ))))):named a268 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Unit_nat_fun$ ))(= (pred_fun$b ?v0 ?v1 )(forall ((?v2 Nat$ ))(=> (member$ ?v2 (image$i ?v1 top$b ))(fun_app$ ?v0 ?v2 ))))):named a269 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(=> (= (image$ ?v0 top$a )top$a )(exists ((?v2 Nat$ ))(= ?v1 (fun_app$k ?v0 ?v2 ))))):named a270 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ )(?v1 Nibble$ ))(=> (= (image$a ?v0 top$ )top$ )(exists ((?v2 Nibble$ ))(= ?v1 (fun_app$n ?v0 ?v2 ))))):named a271 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ )(?v1 Unit$ ))(=> (= (image$c ?v0 top$ )top$b )(exists ((?v2 Nibble$ ))(= ?v1 (fun_app$o ?v0 ?v2 ))))):named a272 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ )(?v1 Nibble$ ))(=> (= (image$b ?v0 top$b )top$ )(exists ((?v2 Unit$ ))(= ?v1 (fun_app$p ?v0 ?v2 ))))):named a273 ))
(assert (! (forall ((?v0 Unit_unit_fun$ )(?v1 Unit$ ))(=> (= (image$d ?v0 top$b )top$b )(exists ((?v2 Unit$ ))(= ?v1 (fun_app$q ?v0 ?v2 ))))):named a274 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ ))(=> (and (= (image$ ?v0 top$a )top$a )(forall ((?v2 Nat$ ))(=> (= ?v1 (fun_app$k ?v0 ?v2 ))false )))false )):named a275 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ )(?v1 Nibble$ ))(=> (and (= (image$a ?v0 top$ )top$ )(forall ((?v2 Nibble$ ))(=> (= ?v1 (fun_app$n ?v0 ?v2 ))false )))false )):named a276 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ )(?v1 Unit$ ))(=> (and (= (image$c ?v0 top$ )top$b )(forall ((?v2 Nibble$ ))(=> (= ?v1 (fun_app$o ?v0 ?v2 ))false )))false )):named a277 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ )(?v1 Nibble$ ))(=> (and (= (image$b ?v0 top$b )top$ )(forall ((?v2 Unit$ ))(=> (= ?v1 (fun_app$p ?v0 ?v2 ))false )))false )):named a278 ))
(assert (! (forall ((?v0 Unit_unit_fun$ )(?v1 Unit$ ))(=> (and (= (image$d ?v0 top$b )top$b )(forall ((?v2 Unit$ ))(=> (= ?v1 (fun_app$q ?v0 ?v2 ))false )))false )):named a279 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (= (image$ ?v0 top$a )top$a )(forall ((?v1 Nat$ ))(exists ((?v2 Nat$ ))(= ?v1 (fun_app$k ?v0 ?v2 )))))):named a280 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ ))(= (= (image$a ?v0 top$ )top$ )(forall ((?v1 Nibble$ ))(exists ((?v2 Nibble$ ))(= ?v1 (fun_app$n ?v0 ?v2 )))))):named a281 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ ))(= (= (image$c ?v0 top$ )top$b )(forall ((?v1 Unit$ ))(exists ((?v2 Nibble$ ))(= ?v1 (fun_app$o ?v0 ?v2 )))))):named a282 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ ))(= (= (image$b ?v0 top$b )top$ )(forall ((?v1 Nibble$ ))(exists ((?v2 Unit$ ))(= ?v1 (fun_app$p ?v0 ?v2 )))))):named a283 ))
(assert (! (forall ((?v0 Unit_unit_fun$ ))(= (= (image$d ?v0 top$b )top$b )(forall ((?v1 Unit$ ))(exists ((?v2 Unit$ ))(= ?v1 (fun_app$q ?v0 ?v2 )))))):named a284 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ ))(=> (forall ((?v2 Nat$ ))(= (fun_app$k ?v0 (fun_app$k ?v1 ?v2 ))?v2 ))(= (image$ ?v0 top$a )top$a ))):named a285 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ )(?v1 Nibble_nibble_fun$ ))(=> (forall ((?v2 Nibble$ ))(= (fun_app$n ?v0 (fun_app$n ?v1 ?v2 ))?v2 ))(= (image$a ?v0 top$ )top$ ))):named a286 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ )(?v1 Unit_nibble_fun$ ))(=> (forall ((?v2 Unit$ ))(= (fun_app$o ?v0 (fun_app$p ?v1 ?v2 ))?v2 ))(= (image$c ?v0 top$ )top$b ))):named a287 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ )(?v1 Nibble_unit_fun$ ))(=> (forall ((?v2 Nibble$ ))(= (fun_app$p ?v0 (fun_app$o ?v1 ?v2 ))?v2 ))(= (image$b ?v0 top$b )top$ ))):named a288 ))
(assert (! (forall ((?v0 Unit_unit_fun$ )(?v1 Unit_unit_fun$ ))(=> (forall ((?v2 Unit$ ))(= (fun_app$q ?v0 (fun_app$q ?v1 ?v2 ))?v2 ))(= (image$d ?v0 top$b )top$b ))):named a289 ))
(assert (! (= (size_nibble$ nibbleB$ )zero$ ):named a290 ))
(assert (! (forall ((?v0 Nibble$ ))(! (= (size_nibble$ ?v0 )zero$ ):pattern ((size_nibble$ ?v0 )))):named a291 ))
(assert (! (= (size_nibble$ nibble6$ )zero$ ):named a292 ))
(assert (! (= (size_nibble$ nibble7$ )zero$ ):named a293 ))
(assert (! (= (size_nibble$ nibble5$ )zero$ ):named a294 ))
(assert (! (= (size_nibble$ nibble4$ )zero$ ):named a295 ))
(assert (! (= (size_nibble$ nibbleE$ )zero$ ):named a296 ))
(assert (! (= (size_nibble$ nibble2$ )zero$ ):named a297 ))
(assert (! (= (size_nibble$ nibble3$ )zero$ ):named a298 ))
(assert (! (= (size_nibble$ nibble9$ )zero$ ):named a299 ))
(assert (! (= (size_nibble$ nibbleF$ )zero$ ):named a300 ))
(assert (! (= (size_nibble$ nibble1$ )zero$ ):named a301 ))
(assert (! (= (size_nibble$ nibbleC$ )zero$ ):named a302 ))
(assert (! (= (size_nibble$ nibble0$ )zero$ ):named a303 ))
(assert (! (= (size_nibble$ nibbleD$ )zero$ ):named a304 ))
(assert (! (= (size_nibble$ nibble8$ )zero$ ):named a305 ))
(assert (! (= (size_nibble$ nibbleA$ )zero$ ):named a306 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ ))(! (= (size$e (char$ ?v0 ?v1 ))zero$ ):pattern ((char$ ?v0 ?v1 )))):named a307 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_fun$ ))(= (= (image$ (fun_app$v (fun_app$w (swap$ ?v0 )?v1 )?v2 )top$a )top$a )(= (image$ ?v2 top$a )top$a ))):named a308 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ )(?v2 Nibble_nibble_fun$ ))(= (= (image$a (fun_app$x (fun_app$y (swap$a ?v0 )?v1 )?v2 )top$ )top$ )(= (image$a ?v2 top$ )top$ ))):named a309 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ )(?v2 Nibble_unit_fun$ ))(= (= (image$c (fun_app$z (fun_app$aa (swap$b ?v0 )?v1 )?v2 )top$ )top$b )(= (image$c ?v2 top$ )top$b ))):named a310 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ )(?v2 Unit_nibble_fun$ ))(= (= (image$b (fun_app$ab (fun_app$ac (swap$c ?v0 )?v1 )?v2 )top$b )top$ )(= (image$b ?v2 top$b )top$ ))):named a311 ))
(assert (! (forall ((?v0 Unit$ )(?v1 Unit$ )(?v2 Unit_unit_fun$ ))(= (= (image$d (fun_app$ad (fun_app$ae (swap$d ?v0 )?v1 )?v2 )top$b )top$b )(= (image$d ?v2 top$b )top$b ))):named a312 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_set$ )(?v2 Nat$ )(?v3 Nat_nat_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v2 ?v1 ))(= (image$ (fun_app$v (fun_app$w (swap$ ?v0 )?v2 )?v3 )?v1 )(image$ ?v3 ?v1 )))):named a313 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (= (image$ ?v0 top$a )top$a )(= (image$ (fun_app$v (fun_app$w (swap$ ?v1 )?v2 )?v0 )top$a )top$a ))):named a314 ))
(assert (! (forall ((?v0 Nibble_nibble_fun$ )(?v1 Nibble$ )(?v2 Nibble$ ))(=> (= (image$a ?v0 top$ )top$ )(= (image$a (fun_app$x (fun_app$y (swap$a ?v1 )?v2 )?v0 )top$ )top$ ))):named a315 ))
(assert (! (forall ((?v0 Nibble_unit_fun$ )(?v1 Nibble$ )(?v2 Nibble$ ))(=> (= (image$c ?v0 top$ )top$b )(= (image$c (fun_app$z (fun_app$aa (swap$b ?v1 )?v2 )?v0 )top$ )top$b ))):named a316 ))
(assert (! (forall ((?v0 Unit_nibble_fun$ )(?v1 Unit$ )(?v2 Unit$ ))(=> (= (image$b ?v0 top$b )top$ )(= (image$b (fun_app$ab (fun_app$ac (swap$c ?v1 )?v2 )?v0 )top$b )top$ ))):named a317 ))
(assert (! (forall ((?v0 Unit_unit_fun$ )(?v1 Unit$ )(?v2 Unit$ ))(=> (= (image$d ?v0 top$b )top$b )(= (image$d (fun_app$ad (fun_app$ae (swap$d ?v1 )?v2 )?v0 )top$b )top$b ))):named a318 ))
(assert (! (forall ((?v0 Nibble$ )(?v1 Nibble$ ))(! (= (size_char$ (char$ ?v0 ?v1 ))zero$ ):pattern ((char$ ?v0 ?v1 )))):named a319 ))
(assert (! (forall ((?v0 Typerep$ ))(not (= (size$b ?v0 )zero$ ))):named a320 ))
(assert (! (= size$h (rec_unit$ zero$ )):named a321 ))
(assert (! (= size_unit$ (rec_unit$ zero$ )):named a322 ))
(assert (! (= (fun_app$u size$h unity$ )zero$ ):named a323 ))
(assert (! (= (fun_app$u size_unit$ unity$ )zero$ ):named a324 ))
(assert (! (= top$b (insert$a unity$ bot$d )):named a325 ))
(assert (! (= bot$i unity$ ):named a326 ))
(assert (! (= (nat_of_nibble$ nibble0$ )zero$ ):named a327 ))
(assert (! (= (these$ bot$j )bot$c ):named a328 ))
(assert (! (= (these$a bot$k )bot$d ):named a329 ))
(assert (! (forall ((?v0 Nibble_option_set$ ))(= (= (these$ ?v0 )bot$c )(or (= ?v0 bot$j )(= ?v0 (insert$e none$ bot$j ))))):named a330 ))
(assert (! (forall ((?v0 Unit_option_set$ ))(= (= (these$a ?v0 )bot$d )(or (= ?v0 bot$k )(= ?v0 (insert$f none$a bot$k ))))):named a331 ))
(assert (! (forall ((?v0 Nibble_option_set$ ))(= (not (= (these$ ?v0 )bot$c ))(and (not (= ?v0 bot$j ))(not (= ?v0 (insert$e none$ bot$j )))))):named a332 ))
(assert (! (forall ((?v0 Unit_option_set$ ))(= (not (= (these$a ?v0 )bot$d ))(and (not (= ?v0 bot$k ))(not (= ?v0 (insert$f none$a bot$k )))))):named a333 ))
(assert (! (forall ((?v0 Nibble_option$ ))(= (= (set_option$ ?v0 )bot$c )(= ?v0 none$ ))):named a334 ))
(assert (! (forall ((?v0 Unit_option$ ))(= (= (set_option$a ?v0 )bot$d )(= ?v0 none$a ))):named a335 ))
(assert (! (forall ((?v0 Nat$ ))(not (= zero$ (fun_app$k suc$ ?v0 )))):named a336 ))
(assert (! (forall ((?v0 Nat$ ))(not (= (fun_app$k suc$ ?v0 )zero$ ))):named a337 ))
(assert (! (forall ((?v0 Nat$ ))(not (= zero$ (fun_app$k suc$ ?v0 )))):named a338 ))
(assert (! (forall ((?v0 Nat$ ))(not (= zero$ (fun_app$k suc$ ?v0 )))):named a339 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (fun_app$ ?v0 zero$ )(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v0 (fun_app$k suc$ ?v2 )))))(fun_app$ ?v0 ?v1 ))):named a340 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 Nat$ ))(=> (fun_app$ ?v0 (fun_app$k suc$ ?v2 ))(fun_app$ ?v0 ?v2 ))))(fun_app$ ?v0 zero$ ))):named a341 ))
(assert (! (forall ((?v0 Nat$ ))(=> (not (= ?v0 zero$ ))(exists ((?v1 Nat$ ))(= ?v0 (fun_app$k suc$ ?v1 ))))):named a342 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= zero$ (fun_app$k suc$ ?v0 ))false )):named a343 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 (fun_app$k suc$ ?v1 ))(not (= ?v0 zero$ )))):named a344 ))
(assert (! (forall ((?v0 Nat$ ))(=> (= (fun_app$k suc$ ?v0 )zero$ )false )):named a345 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$ (fun_app$h ?v0 ?v3 )zero$ ))(and (forall ((?v3 Nat$ ))(fun_app$ (fun_app$h ?v0 zero$ )(fun_app$k suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$ (fun_app$h ?v0 ?v3 )?v4 )(fun_app$ (fun_app$h ?v0 (fun_app$k suc$ ?v3 ))(fun_app$k suc$ ?v4 ))))))(fun_app$ (fun_app$h ?v0 ?v1 )?v2 ))):named a346 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(forall ((?v1 Nat$ ))(=> (= ?v0 (fun_app$k suc$ ?v1 ))false )))false )):named a347 ))
(assert (! (= (set_option$ none$ )bot$c ):named a348 ))
(assert (! (= (set_option$a none$a )bot$d ):named a349 ))
(assert (! (forall ((?v0 Nat_set$ ))(not (member$ zero$ (image$ suc$ ?v0 )))):named a350 ))
(assert (! (forall ((?v0 Color$ )(?v1 A_b_rbt$ )(?v2 A$ )(?v3 B$ )(?v4 A_b_rbt$ ))(! (= (size$a (branch$ ?v0 ?v1 ?v2 ?v3 ?v4 ))(fun_app$k (plus$ (fun_app$k (plus$ (size$a ?v1 ))(size$a ?v4 )))(fun_app$k suc$ zero$ ))):pattern ((branch$ ?v0 ?v1 ?v2 ?v3 ?v4 )))):named a351 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$k (plus$ zero$ )?v0 )?v0 )):named a352 ))
(assert (! (forall ((?v0 Natural$ ))(= (plus$a zero$a ?v0 )?v0 )):named a353 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$k (plus$ zero$ )?v0 )?v0 )):named a354 ))
(assert (! (forall ((?v0 Natural$ ))(= (plus$a zero$a ?v0 )?v0 )):named a355 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$k (plus$ ?v0 )zero$ )?v0 )):named a356 ))
(assert (! (forall ((?v0 Natural$ ))(= (plus$a ?v0 zero$a )?v0 )):named a357 ))
(check-sat )
(get-unsat-core )
