(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort A_nat_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_a_list_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_list_bool_fun$ 0 )
(declare-sort A_b_bool_fun_fun$ 0 )
(declare-sort A_b_prod_nat_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_list_a_list_fun$ 0 )
(declare-sort A_a_b_prod_list_fun$ 0 )
(declare-sort A_a_b_prod_prod_set$ 0 )
(declare-sort A_b_prod_a_list_fun$ 0 )
(declare-sort A_b_prod_a_prod_set$ 0 )
(declare-sort Nat_nat_bool_fun_fun$ 0 )
(declare-sort A_b_prod_list_bool_fun$ 0 )
(declare-sort A_a_b_prod_prod_bool_fun$ 0 )
(declare-sort A_b_prod_a_prod_bool_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_list_fun$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_set$ 0 )
(declare-sort A_b_prod_a_b_prod_prod_bool_fun$ 0 )
(declare-sort A_b_prod_list_a_b_prod_list_fun$ 0 )
(declare-sort A_list$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-sort A_b_prod$ 0)
(declare-sort A_b_prod_list$ 0)
(declare-sort A_b_prod_a_b_prod_prod$ 0)
(declare-sort A_b_prod_a_b_prod_prod_list$ 0)
(declare-sort A_a_prod$ 0)
(declare-sort A_a_prod_list$ 0)
(declare-sort B_list$ 0)
(declare-sort A_b_prod_a_prod$ 0)
(declare-sort A_b_prod_a_prod_list$ 0)
(declare-sort A_a_b_prod_prod$ 0)
(declare-sort A_a_b_prod_prod_list$ 0)
(declare-sort A_b_prod_a_b_prod_prod_option$ 0)
(declare-sort A_a_prod_option$ 0)
(declare-sort B_option$ 0)
(declare-sort A_b_prod_a_prod_option$ 0)
(declare-sort A_a_b_prod_prod_option$ 0)
(declare-sort A_option$ 0)
(declare-sort A_b_prod_option$ 0)
(declare-sort A_b_prod_nat_fun_list$ 0)
(declare-sort A_nat_fun_list$ 0)
(declare-fun nil$ ()A_list$)
(declare-fun hd$ (A_list$)A$)
(declare-fun tl$ (A_list$)A_list$)
(declare-fun cons$ (A$ A_list$ )A_list$)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun fst$ (A_b_prod$)A$)
(declare-fun snd$ (A_b_prod$)B$)
(declare-fun pair$ (A$ B$ )A_b_prod$)
(declare-fun nil$a ()A_b_prod_list$)
(declare-fun hd$a (A_b_prod_list$)A_b_prod$)
(declare-fun tl$a (A_b_prod_list$)A_b_prod_list$)
(declare-fun cons$a (A_b_prod$ A_b_prod_list$ )A_b_prod_list$)
(declare-fun fst$a (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun snd$a (A_b_prod_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$a (A_b_prod$ A_b_prod$ )A_b_prod_a_b_prod_prod$)
(declare-fun nil$b ()A_b_prod_a_b_prod_prod_list$)
(declare-fun hd$b (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod$)
(declare-fun tl$b (A_b_prod_a_b_prod_prod_list$)A_b_prod_a_b_prod_prod_list$)
(declare-fun cons$b (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$)
(declare-fun fst$b (A_a_prod$)A$)
(declare-fun snd$b (A_a_prod$)A$)
(declare-fun pair$b (A$ A$ )A_a_prod$)
(declare-fun nil$c ()A_a_prod_list$)
(declare-fun hd$c (A_a_prod_list$)A_a_prod$)
(declare-fun tl$c (A_a_prod_list$)A_a_prod_list$)
(declare-fun cons$c (A_a_prod$ A_a_prod_list$ )A_a_prod_list$)
(declare-fun nil$d ()B_list$)
(declare-fun hd$d (B_list$)B$)
(declare-fun tl$d (B_list$)B_list$)
(declare-fun cons$d (B$ B_list$ )B_list$)
(declare-fun fst$c (A_b_prod_a_prod$)A_b_prod$)
(declare-fun snd$c (A_b_prod_a_prod$)A$)
(declare-fun pair$c (A_b_prod$ A$ )A_b_prod_a_prod$)
(declare-fun nil$e ()A_b_prod_a_prod_list$)
(declare-fun hd$e (A_b_prod_a_prod_list$)A_b_prod_a_prod$)
(declare-fun tl$e (A_b_prod_a_prod_list$)A_b_prod_a_prod_list$)
(declare-fun cons$e (A_b_prod_a_prod$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$)
(declare-fun fst$d (A_a_b_prod_prod$)A$)
(declare-fun snd$d (A_a_b_prod_prod$)A_b_prod$)
(declare-fun pair$d (A$ A_b_prod$ )A_a_b_prod_prod$)
(declare-fun nil$f ()A_a_b_prod_prod_list$)
(declare-fun hd$f (A_a_b_prod_prod_list$)A_a_b_prod_prod$)
(declare-fun tl$f (A_a_b_prod_prod_list$)A_a_b_prod_prod_list$)
(declare-fun cons$f (A_a_b_prod_prod$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$)
(declare-fun none$ ()A_b_prod_a_b_prod_prod_option$)
(declare-fun the$ (A_b_prod_a_b_prod_prod_option$)A_b_prod_a_b_prod_prod$)
(declare-fun some$ (A_b_prod_a_b_prod_prod$ )A_b_prod_a_b_prod_prod_option$)
(declare-fun none$a ()A_a_prod_option$)
(declare-fun the$a (A_a_prod_option$)A_a_prod$)
(declare-fun some$a (A_a_prod$ )A_a_prod_option$)
(declare-fun none$b ()B_option$)
(declare-fun the$b (B_option$)B$)
(declare-fun some$b (B$ )B_option$)
(declare-fun none$c ()A_b_prod_a_prod_option$)
(declare-fun the$c (A_b_prod_a_prod_option$)A_b_prod_a_prod$)
(declare-fun some$c (A_b_prod_a_prod$ )A_b_prod_a_prod_option$)
(declare-fun none$d ()A_a_b_prod_prod_option$)
(declare-fun the$d (A_a_b_prod_prod_option$)A_a_b_prod_prod$)
(declare-fun some$d (A_a_b_prod_prod$ )A_a_b_prod_prod_option$)
(declare-fun none$e ()A_option$)
(declare-fun the$e (A_option$)A$)
(declare-fun some$e (A$ )A_option$)
(declare-fun none$f ()A_b_prod_option$)
(declare-fun the$f (A_b_prod_option$)A_b_prod$)
(declare-fun some$f (A_b_prod$ )A_b_prod_option$)
(declare-fun nil$g ()A_b_prod_nat_fun_list$)
(declare-fun selecte$ (A_b_prod_nat_fun_list$)A_b_prod_nat_fun$)
(declare-fun selectf$ (A_b_prod_nat_fun_list$)A_b_prod_nat_fun_list$)
(declare-fun cons$g (A_b_prod_nat_fun$ A_b_prod_nat_fun_list$ )A_b_prod_nat_fun_list$)
(declare-fun nil$h ()A_nat_fun_list$)
(declare-fun selectg$ (A_nat_fun_list$)A_nat_fun$)
(declare-fun selecth$ (A_nat_fun_list$)A_nat_fun_list$)
(declare-fun cons$h (A_nat_fun$ A_nat_fun_list$ )A_nat_fun_list$)
(declare-fun k$ ()A$ )
(declare-fun t$ ()A_b_rbt$ )
(declare-fun v$ ()B$ )
(declare-fun uu$ (A_b_prod_a_b_prod_prod_set$ )A_b_prod_a_b_prod_prod_bool_fun$ )
(declare-fun set$ (A_list$ )A_set$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (A_a_prod_set$ )A_a_prod_bool_fun$ )
(declare-fun uub$ (B_set$ )B_bool_fun$ )
(declare-fun uuc$ (A_b_prod_a_prod_set$ )A_b_prod_a_prod_bool_fun$ )
(declare-fun uud$ (A_a_b_prod_prod_set$ )A_a_b_prod_prod_bool_fun$ )
(declare-fun uue$ (A_set$ )A_bool_fun$ )
(declare-fun uuf$ (A_b_prod_set$ )A_b_prod_bool_fun$ )
(declare-fun zip$ (A_list$ A_list$ )A_a_prod_list$ )
(declare-fun bind$ (A_list$ A_a_list_fun$ )A_list$ )
(declare-fun drop$ (Nat$ A_list$ )A_list$ )
(declare-fun find$ (A_b_prod_a_b_prod_prod_bool_fun$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_option$ )
(declare-fun keys$ (A_b_rbt$ )A_list$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun set$a (A_b_prod_list$ )A_b_prod_set$ )
(declare-fun set$b (A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_set$ )
(declare-fun set$c (A_a_prod_list$ )A_a_prod_set$ )
(declare-fun set$d (B_list$ )B_set$ )
(declare-fun set$e (A_b_prod_a_prod_list$ )A_b_prod_a_prod_set$ )
(declare-fun set$f (A_a_b_prod_prod_list$ )A_a_b_prod_prod_set$ )
(declare-fun zip$a (A_b_prod_list$ A_b_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun zip$b (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun zip$c (A_list$ A_b_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun zip$d (A_b_prod_list$ A_list$ )A_b_prod_a_prod_list$ )
(declare-fun bind$a (A_list$ A_a_b_prod_list_fun$ )A_b_prod_list$ )
(declare-fun bind$b (A_b_prod_list$ A_b_prod_a_list_fun$ )A_list$ )
(declare-fun bind$c (A_b_prod_list$ A_b_prod_a_b_prod_list_fun$ )A_b_prod_list$ )
(declare-fun coset$ (A_b_prod_list$ )A_b_prod_set$ )
(declare-fun curry$ (A_b_prod_bool_fun$ )A_b_bool_fun_fun$ )
(declare-fun drop$a (Nat$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun find$a (A_a_prod_bool_fun$ A_a_prod_list$ )A_a_prod_option$ )
(declare-fun find$b (B_bool_fun$ B_list$ )B_option$ )
(declare-fun find$c (A_b_prod_a_prod_bool_fun$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_option$ )
(declare-fun find$d (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_option$ )
(declare-fun find$e (A_bool_fun$ A_list$ )A_option$ )
(declare-fun find$f (A_b_prod_bool_fun$ A_b_prod_list$ )A_b_prod_option$ )
(declare-fun coset$a (A_list$ )A_set$ )
(declare-fun insert$ (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun member$ (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_set$ )Bool )
(declare-fun remove$ (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_set$ )A_b_prod_a_b_prod_prod_set$ )
(declare-fun rotate$ (Nat$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun collect$ (A_b_prod_bool_fun$ )A_b_prod_set$ )
(declare-fun entries$ (A_b_rbt$ )A_b_prod_list$ )
(declare-fun fun_app$ (A_b_prod_a_b_prod_prod_bool_fun$ A_b_prod_a_b_prod_prod$ )Bool )
(declare-fun insert$a (A_a_prod$ A_a_prod_list$ )A_a_prod_list$ )
(declare-fun insert$b (B$ B_list$ )B_list$ )
(declare-fun insert$c (A_b_prod_a_prod$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$ )
(declare-fun insert$d (A_a_b_prod_prod$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun insert$e (A$ A_list$ )A_list$ )
(declare-fun insert$f (A_b_prod$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun less_eq$ (A_set$ A_set$ )Bool )
(declare-fun listMem$ (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_list$ )Bool )
(declare-fun member$a (A_b_prod_a_prod$ A_b_prod_a_prod_set$ )Bool )
(declare-fun member$b (A_a_b_prod_prod$ A_a_b_prod_prod_set$ )Bool )
(declare-fun member$c (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$d (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$e (B$ B_set$ )Bool )
(declare-fun member$f (A$ A_set$ )Bool )
(declare-fun member$g (A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_bool_fun$ )
(declare-fun member$h (A_a_prod_list$ )A_a_prod_bool_fun$ )
(declare-fun member$i (B_list$ )B_bool_fun$ )
(declare-fun member$j (A_b_prod_a_prod_list$ )A_b_prod_a_prod_bool_fun$ )
(declare-fun member$k (A_a_b_prod_prod_list$ )A_a_b_prod_prod_bool_fun$ )
(declare-fun member$l (A_list$ )A_bool_fun$ )
(declare-fun member$m (A_b_prod_list$ )A_b_prod_bool_fun$ )
(declare-fun product$ (A_list$ B_list$ )A_b_prod_list$ )
(declare-fun remove$a (A_a_prod$ A_a_prod_set$ )A_a_prod_set$ )
(declare-fun remove$b (B$ B_set$ )B_set$ )
(declare-fun remove$c (A_b_prod_a_prod$ A_b_prod_a_prod_set$ )A_b_prod_a_prod_set$ )
(declare-fun remove$d (A_a_b_prod_prod$ A_a_b_prod_prod_set$ )A_a_b_prod_prod_set$ )
(declare-fun remove$e (A$ A_set$ )A_set$ )
(declare-fun remove$f (A_b_prod$ A_b_prod_set$ )A_b_prod_set$ )
(declare-fun rotate$a (Nat$ A_a_prod_list$ )A_a_prod_list$ )
(declare-fun rotate$b (Nat$ B_list$ )B_list$ )
(declare-fun rotate$c (Nat$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$ )
(declare-fun rotate$d (Nat$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun rotate$e (Nat$ A_list$ )A_list$ )
(declare-fun rotate$f (Nat$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun rotate1$ (A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun antimono$ (Nat_nat_fun$ )Bool )
(declare-fun collect$a (A_bool_fun$ )A_set$ )
(declare-fun collect$b (A_b_prod_a_b_prod_prod_bool_fun$ )A_b_prod_a_b_prod_prod_set$ )
(declare-fun collect$c (A_a_prod_bool_fun$ )A_a_prod_set$ )
(declare-fun collect$d (B_bool_fun$ )B_set$ )
(declare-fun collect$e (A_b_prod_a_prod_bool_fun$ )A_b_prod_a_prod_set$ )
(declare-fun collect$f (A_a_b_prod_prod_bool_fun$ )A_a_b_prod_prod_set$ )
(declare-fun fun_app$a (A_b_prod_a_prod_bool_fun$ A_b_prod_a_prod$ )Bool )
(declare-fun fun_app$b (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod$ )Bool )
(declare-fun fun_app$c (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$d (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$e (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$f (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$g (A_list_bool_fun$ A_list$ )Bool )
(declare-fun fun_app$h (A_b_prod_list_bool_fun$ A_b_prod_list$ )Bool )
(declare-fun fun_app$i (A_list_a_list_fun$ A_list$ )A_list$ )
(declare-fun fun_app$j (A_b_prod_list_a_b_prod_list_fun$ A_b_prod_list$ )A_b_prod_list$ )
(declare-fun fun_app$k (A_b_bool_fun_fun$ A$ )B_bool_fun$ )
(declare-fun fun_app$l (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$m (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$n (Nat_nat_bool_fun_fun$ Nat$ )Nat_bool_fun$ )
(declare-fun less_eq$a (A_b_prod_set$ A_b_prod_set$ )Bool )
(declare-fun less_eq$b (Nat$ )Nat_bool_fun$ )
(declare-fun listMem$a (A_a_prod$ A_a_prod_list$ )Bool )
(declare-fun listMem$b (B$ B_list$ )Bool )
(declare-fun listMem$c (A_b_prod_a_prod$ A_b_prod_a_prod_list$ )Bool )
(declare-fun listMem$d (A_a_b_prod_prod$ A_a_b_prod_prod_list$ )Bool )
(declare-fun listMem$e (A$ A_list$ )Bool )
(declare-fun listMem$f (A_b_prod$ A_b_prod_list$ )Bool )
(declare-fun list_ex1$ (A_b_prod_a_b_prod_prod_bool_fun$ A_b_prod_a_b_prod_prod_list$ )Bool )
(declare-fun measures$ (A_b_prod_nat_fun_list$ )A_b_prod_a_b_prod_prod_set$ )
(declare-fun rotate1$a (A_a_prod_list$ )A_a_prod_list$ )
(declare-fun rotate1$b (B_list$ )B_list$ )
(declare-fun rotate1$c (A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$ )
(declare-fun rotate1$d (A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun rotate1$e (A_list$ )A_list$ )
(declare-fun rotate1$f (A_b_prod_list$ )A_b_prod_list$ )
(declare-fun the_elem$ (A_set$ )A$ )
(declare-fun list_ex1$a (A_a_prod_bool_fun$ A_a_prod_list$ )Bool )
(declare-fun list_ex1$b (B_bool_fun$ B_list$ )Bool )
(declare-fun list_ex1$c (A_b_prod_a_prod_bool_fun$ A_b_prod_a_prod_list$ )Bool )
(declare-fun list_ex1$d (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_list$ )Bool )
(declare-fun list_ex1$e (A_bool_fun$ )A_list_bool_fun$ )
(declare-fun list_ex1$f (A_b_prod_bool_fun$ )A_b_prod_list_bool_fun$ )
(declare-fun measures$a (A_nat_fun_list$ )A_a_prod_set$ )
(declare-fun removeAll$ (A_b_prod_a_b_prod_prod$ A_b_prod_a_b_prod_prod_list$ )A_b_prod_a_b_prod_prod_list$ )
(declare-fun the_elem$a (A_b_prod_set$ )A_b_prod$ )
(declare-fun can_select$ (A_b_prod_a_b_prod_prod_bool_fun$ A_b_prod_a_b_prod_prod_set$ )Bool )
(declare-fun removeAll$a (A_a_prod$ A_a_prod_list$ )A_a_prod_list$ )
(declare-fun removeAll$b (B$ B_list$ )B_list$ )
(declare-fun removeAll$c (A_b_prod_a_prod$ A_b_prod_a_prod_list$ )A_b_prod_a_prod_list$ )
(declare-fun removeAll$d (A_a_b_prod_prod$ A_a_b_prod_prod_list$ )A_a_b_prod_prod_list$ )
(declare-fun removeAll$e (A$ )A_list_a_list_fun$ )
(declare-fun removeAll$f (A_b_prod$ )A_b_prod_list_a_b_prod_list_fun$ )
(declare-fun can_select$a (A_a_prod_bool_fun$ A_a_prod_set$ )Bool )
(declare-fun can_select$b (B_bool_fun$ B_set$ )Bool )
(declare-fun can_select$c (A_b_prod_a_prod_bool_fun$ A_b_prod_a_prod_set$ )Bool )
(declare-fun can_select$d (A_a_b_prod_prod_bool_fun$ A_a_b_prod_prod_set$ )Bool )
(declare-fun can_select$e (A_bool_fun$ A_set$ )Bool )
(declare-fun can_select$f (A_b_prod_bool_fun$ A_b_prod_set$ )Bool )
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_set$ )(?v1 A_b_prod_a_b_prod_prod$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_set$ )(?v1 A_b_prod_a_prod$ ))(! (= (fun_app$a (uuc$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uuc$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$ )(?v1 A_a_b_prod_prod$ ))(! (= (fun_app$b (uud$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$b (uud$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod$ ))(! (= (fun_app$c (uuf$ ?v0 )?v1 )(member$c ?v1 ?v0 )):pattern ((fun_app$c (uuf$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_a_prod_set$ )(?v1 A_a_prod$ ))(! (= (fun_app$d (uua$ ?v0 )?v1 )(member$d ?v1 ?v0 )):pattern ((fun_app$d (uua$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 B_set$ )(?v1 B$ ))(! (= (fun_app$e (uub$ ?v0 )?v1 )(member$e ?v1 ?v0 )):pattern ((fun_app$e (uub$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(! (= (fun_app$f (uue$ ?v0 )?v1 )(member$f ?v1 ?v0 )):pattern ((fun_app$f (uue$ ?v0 )?v1 )))):named a6 ))
(assert (! (not (member$f k$ (set$ (keys$ t$ )))):named a7 ))
(assert (! (member$c (pair$ k$ v$ )(set$a (entries$ t$ ))):named a8 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (member$ ?v0 (set$b ?v1 ))(fun_app$ (member$g ?v1 )?v0 ))):named a9 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_list$ ))(= (member$d ?v0 (set$c ?v1 ))(fun_app$d (member$h ?v1 )?v0 ))):named a10 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ ))(= (member$e ?v0 (set$d ?v1 ))(fun_app$e (member$i ?v1 )?v0 ))):named a11 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ )(?v1 A_b_prod_a_prod_list$ ))(= (member$a ?v0 (set$e ?v1 ))(fun_app$a (member$j ?v1 )?v0 ))):named a12 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_list$ ))(= (member$b ?v0 (set$f ?v1 ))(fun_app$b (member$k ?v1 )?v0 ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (member$f ?v0 (set$ ?v1 ))(fun_app$f (member$l ?v1 )?v0 ))):named a14 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(= (member$c ?v0 (set$a ?v1 ))(fun_app$c (member$m ?v1 )?v0 ))):named a15 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(! (=> (member$ ?v0 (set$b ?v1 ))(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_list$ ))(! (=> (member$d ?v0 (set$c ?v1 ))(= (insert$a ?v0 ?v1 )?v1 )):pattern ((insert$a ?v0 ?v1 )))):named a17 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ ))(! (=> (member$e ?v0 (set$d ?v1 ))(= (insert$b ?v0 ?v1 )?v1 )):pattern ((insert$b ?v0 ?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ )(?v1 A_b_prod_a_prod_list$ ))(! (=> (member$a ?v0 (set$e ?v1 ))(= (insert$c ?v0 ?v1 )?v1 )):pattern ((insert$c ?v0 ?v1 )))):named a19 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_list$ ))(! (=> (member$b ?v0 (set$f ?v1 ))(= (insert$d ?v0 ?v1 )?v1 )):pattern ((insert$d ?v0 ?v1 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (member$f ?v0 (set$ ?v1 ))(= (insert$e ?v0 ?v1 )?v1 )):pattern ((insert$e ?v0 ?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (=> (member$c ?v0 (set$a ?v1 ))(= (insert$f ?v0 ?v1 )?v1 )):pattern ((insert$f ?v0 ?v1 )))):named a22 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_bool_fun$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (list_ex1$ ?v0 ?v1 )(exists ((?v2 A_b_prod_a_b_prod_prod$ ))(and (and (member$ ?v2 (set$b ?v1 ))(fun_app$ ?v0 ?v2 ))(forall ((?v3 A_b_prod_a_b_prod_prod$ ))(=> (and (member$ ?v3 (set$b ?v1 ))(fun_app$ ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a23 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_list$ ))(= (list_ex1$a ?v0 ?v1 )(exists ((?v2 A_a_prod$ ))(and (and (member$d ?v2 (set$c ?v1 ))(fun_app$d ?v0 ?v2 ))(forall ((?v3 A_a_prod$ ))(=> (and (member$d ?v3 (set$c ?v1 ))(fun_app$d ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a24 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_list$ ))(= (list_ex1$b ?v0 ?v1 )(exists ((?v2 B$ ))(and (and (member$e ?v2 (set$d ?v1 ))(fun_app$e ?v0 ?v2 ))(forall ((?v3 B$ ))(=> (and (member$e ?v3 (set$d ?v1 ))(fun_app$e ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a25 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_bool_fun$ )(?v1 A_b_prod_a_prod_list$ ))(= (list_ex1$c ?v0 ?v1 )(exists ((?v2 A_b_prod_a_prod$ ))(and (and (member$a ?v2 (set$e ?v1 ))(fun_app$a ?v0 ?v2 ))(forall ((?v3 A_b_prod_a_prod$ ))(=> (and (member$a ?v3 (set$e ?v1 ))(fun_app$a ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a26 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod_list$ ))(= (list_ex1$d ?v0 ?v1 )(exists ((?v2 A_a_b_prod_prod$ ))(and (and (member$b ?v2 (set$f ?v1 ))(fun_app$b ?v0 ?v2 ))(forall ((?v3 A_a_b_prod_prod$ ))(=> (and (member$b ?v3 (set$f ?v1 ))(fun_app$b ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a27 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (fun_app$g (list_ex1$e ?v0 )?v1 )(exists ((?v2 A$ ))(and (and (member$f ?v2 (set$ ?v1 ))(fun_app$f ?v0 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$f ?v3 (set$ ?v1 ))(fun_app$f ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a28 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_list$ ))(= (fun_app$h (list_ex1$f ?v0 )?v1 )(exists ((?v2 A_b_prod$ ))(and (and (member$c ?v2 (set$a ?v1 ))(fun_app$c ?v0 ?v2 ))(forall ((?v3 A_b_prod$ ))(=> (and (member$c ?v3 (set$a ?v1 ))(fun_app$c ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a29 ))
(assert (! (= (keys$ empty$ )nil$ ):named a30 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ ))(= (set$b (rotate1$ ?v0 ))(set$b ?v0 ))):named a31 ))
(assert (! (forall ((?v0 A_a_prod_list$ ))(= (set$c (rotate1$a ?v0 ))(set$c ?v0 ))):named a32 ))
(assert (! (forall ((?v0 B_list$ ))(= (set$d (rotate1$b ?v0 ))(set$d ?v0 ))):named a33 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$ ))(= (set$e (rotate1$c ?v0 ))(set$e ?v0 ))):named a34 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ ))(= (set$f (rotate1$d ?v0 ))(set$f ?v0 ))):named a35 ))
(assert (! (forall ((?v0 A_list$ ))(= (set$ (rotate1$e ?v0 ))(set$ ?v0 ))):named a36 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (set$a (rotate1$f ?v0 ))(set$a ?v0 ))):named a37 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(! (= (listMem$ ?v0 ?v1 )(member$ ?v0 (set$b ?v1 ))):pattern ((listMem$ ?v0 ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_list$ ))(! (= (listMem$a ?v0 ?v1 )(member$d ?v0 (set$c ?v1 ))):pattern ((listMem$a ?v0 ?v1 )))):named a39 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ ))(! (= (listMem$b ?v0 ?v1 )(member$e ?v0 (set$d ?v1 ))):pattern ((listMem$b ?v0 ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ )(?v1 A_b_prod_a_prod_list$ ))(! (= (listMem$c ?v0 ?v1 )(member$a ?v0 (set$e ?v1 ))):pattern ((listMem$c ?v0 ?v1 )))):named a41 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_list$ ))(! (= (listMem$d ?v0 ?v1 )(member$b ?v0 (set$f ?v1 ))):pattern ((listMem$d ?v0 ?v1 )))):named a42 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (listMem$e ?v0 ?v1 )(member$f ?v0 (set$ ?v1 ))):pattern ((listMem$e ?v0 ?v1 )))):named a43 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (= (listMem$f ?v0 ?v1 )(member$c ?v0 (set$a ?v1 ))):pattern ((listMem$f ?v0 ?v1 )))):named a44 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(! (=> (not (member$ ?v0 (set$b ?v1 )))(= (removeAll$ ?v0 ?v1 )?v1 )):pattern ((removeAll$ ?v0 ?v1 )))):named a45 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_list$ ))(! (=> (not (member$d ?v0 (set$c ?v1 )))(= (removeAll$a ?v0 ?v1 )?v1 )):pattern ((removeAll$a ?v0 ?v1 )))):named a46 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ ))(! (=> (not (member$e ?v0 (set$d ?v1 )))(= (removeAll$b ?v0 ?v1 )?v1 )):pattern ((removeAll$b ?v0 ?v1 )))):named a47 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ )(?v1 A_b_prod_a_prod_list$ ))(! (=> (not (member$a ?v0 (set$e ?v1 )))(= (removeAll$c ?v0 ?v1 )?v1 )):pattern ((removeAll$c ?v0 ?v1 )))):named a48 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_list$ ))(! (=> (not (member$b ?v0 (set$f ?v1 )))(= (removeAll$d ?v0 ?v1 )?v1 )):pattern ((removeAll$d ?v0 ?v1 )))):named a49 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (not (member$f ?v0 (set$ ?v1 )))(= (fun_app$i (removeAll$e ?v0 )?v1 )?v1 )):pattern ((fun_app$i (removeAll$e ?v0 )?v1 )))):named a50 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (=> (not (member$c ?v0 (set$a ?v1 )))(= (fun_app$j (removeAll$f ?v0 )?v1 )?v1 )):pattern ((fun_app$j (removeAll$f ?v0 )?v1 )))):named a51 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_list$ )(?v1 A_b_prod_a_b_prod_prod_list$ )(?v2 A_b_prod_a_b_prod_prod_bool_fun$ )(?v3 A_b_prod_a_b_prod_prod_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_b_prod_a_b_prod_prod$ ))(=> (member$ ?v4 (set$b ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (find$ ?v2 ?v0 )(find$ ?v3 ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_a_prod_list$ )(?v1 A_a_prod_list$ )(?v2 A_a_prod_bool_fun$ )(?v3 A_a_prod_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_a_prod$ ))(=> (member$d ?v4 (set$c ?v1 ))(= (fun_app$d ?v2 ?v4 )(fun_app$d ?v3 ?v4 )))))(= (find$a ?v2 ?v0 )(find$a ?v3 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 B_list$ )(?v1 B_list$ )(?v2 B_bool_fun$ )(?v3 B_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 B$ ))(=> (member$e ?v4 (set$d ?v1 ))(= (fun_app$e ?v2 ?v4 )(fun_app$e ?v3 ?v4 )))))(= (find$b ?v2 ?v0 )(find$b ?v3 ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_list$ )(?v1 A_b_prod_a_prod_list$ )(?v2 A_b_prod_a_prod_bool_fun$ )(?v3 A_b_prod_a_prod_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_b_prod_a_prod$ ))(=> (member$a ?v4 (set$e ?v1 ))(= (fun_app$a ?v2 ?v4 )(fun_app$a ?v3 ?v4 )))))(= (find$c ?v2 ?v0 )(find$c ?v3 ?v1 )))):named a55 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_list$ )(?v1 A_a_b_prod_prod_list$ )(?v2 A_a_b_prod_prod_bool_fun$ )(?v3 A_a_b_prod_prod_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_a_b_prod_prod$ ))(=> (member$b ?v4 (set$f ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (find$d ?v2 ?v0 )(find$d ?v3 ?v1 )))):named a56 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_list$ )(?v2 A_bool_fun$ )(?v3 A_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A$ ))(=> (member$f ?v4 (set$ ?v1 ))(= (fun_app$f ?v2 ?v4 )(fun_app$f ?v3 ?v4 )))))(= (find$e ?v2 ?v0 )(find$e ?v3 ?v1 )))):named a57 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod_bool_fun$ )(?v3 A_b_prod_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_b_prod$ ))(=> (member$c ?v4 (set$a ?v1 ))(= (fun_app$c ?v2 ?v4 )(fun_app$c ?v3 ?v4 )))))(= (find$f ?v2 ?v0 )(find$f ?v3 ?v1 )))):named a58 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (set$b (rotate$ ?v0 ?v1 ))(set$b ?v1 ))):named a59 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_prod_list$ ))(= (set$c (rotate$a ?v0 ?v1 ))(set$c ?v1 ))):named a60 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_list$ ))(= (set$d (rotate$b ?v0 ?v1 ))(set$d ?v1 ))):named a61 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_a_prod_list$ ))(= (set$e (rotate$c ?v0 ?v1 ))(set$e ?v1 ))):named a62 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_a_b_prod_prod_list$ ))(= (set$f (rotate$d ?v0 ?v1 ))(set$f ?v1 ))):named a63 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (set$ (rotate$e ?v0 ?v1 ))(set$ ?v1 ))):named a64 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(= (set$a (rotate$f ?v0 ?v1 ))(set$a ?v1 ))):named a65 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (= (rotate$e ?v0 ?v1 )nil$ )(= ?v1 nil$ ))):named a66 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(= (= (rotate$f ?v0 ?v1 )nil$a )(= ?v1 nil$a ))):named a67 ))
(assert (! (forall ((?v0 A_list$ ))(= (= (rotate1$e ?v0 )nil$ )(= ?v0 nil$ ))):named a68 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(= (= (rotate1$f ?v0 )nil$a )(= ?v0 nil$a ))):named a69 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ ))(! (= (fun_app$h (list_ex1$f ?v0 )nil$a )false ):pattern ((list_ex1$f ?v0 )))):named a70 ))
(assert (! (forall ((?v0 A_bool_fun$ ))(! (= (fun_app$g (list_ex1$e ?v0 )nil$ )false ):pattern ((list_ex1$e ?v0 )))):named a71 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(= (rotate1$f (rotate$f ?v0 ?v1 ))(rotate$f ?v0 (rotate1$f ?v1 )))):named a72 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(= (rotate1$e (rotate$e ?v0 ?v1 ))(rotate$e ?v0 (rotate1$e ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$f (member$l nil$ )?v0 )false ):pattern ((fun_app$f (member$l nil$ )?v0 )))):named a74 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$c (member$m nil$a )?v0 )false ):pattern ((fun_app$c (member$m nil$a )?v0 )))):named a75 ))
(assert (! (forall ((?v0 A_b_prod$ ))(! (= (fun_app$j (removeAll$f ?v0 )nil$a )nil$a ):pattern ((removeAll$f ?v0 )))):named a76 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$i (removeAll$e ?v0 )nil$ )nil$ ):pattern ((removeAll$e ?v0 )))):named a77 ))
(assert (! (= (rotate1$e nil$ )nil$ ):named a78 ))
(assert (! (= (rotate1$f nil$a )nil$a ):named a79 ))
(assert (! (= (entries$ empty$ )nil$a ):named a80 ))
(assert (! (forall ((?v0 A_list$ ))(=> (and (=> (= ?v0 nil$ )false )(=> (not (= ?v0 nil$ ))false ))false )):named a81 ))
(assert (! (forall ((?v0 A_b_prod_list$ ))(=> (and (=> (= ?v0 nil$a )false )(=> (not (= ?v0 nil$a ))false ))false )):named a82 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_bool_fun$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (can_select$ ?v0 (set$b ?v1 ))(list_ex1$ ?v0 ?v1 ))):named a83 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_list$ ))(= (can_select$a ?v0 (set$c ?v1 ))(list_ex1$a ?v0 ?v1 ))):named a84 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_list$ ))(= (can_select$b ?v0 (set$d ?v1 ))(list_ex1$b ?v0 ?v1 ))):named a85 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_bool_fun$ )(?v1 A_b_prod_a_prod_list$ ))(= (can_select$c ?v0 (set$e ?v1 ))(list_ex1$c ?v0 ?v1 ))):named a86 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod_list$ ))(= (can_select$d ?v0 (set$f ?v1 ))(list_ex1$d ?v0 ?v1 ))):named a87 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_list$ ))(= (can_select$e ?v0 (set$ ?v1 ))(fun_app$g (list_ex1$e ?v0 )?v1 ))):named a88 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_list$ ))(= (can_select$f ?v0 (set$a ?v1 ))(fun_app$h (list_ex1$f ?v0 )?v1 ))):named a89 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod$ )(?v3 A_b_prod$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a90 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a91 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ )(?v2 A_b_prod$ )(?v3 A$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a92 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a93 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a94 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod$ )(?v3 A_b_prod$ ))(= (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a95 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(= (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a96 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ )(?v2 A_b_prod$ )(?v3 A$ ))(= (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a97 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(= (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a98 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(= (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a99 ))
(assert (! (forall ((?v0 A_a_list_fun$ ))(! (= (bind$ nil$ ?v0 )nil$ ):pattern ((bind$ nil$ ?v0 )))):named a100 ))
(assert (! (forall ((?v0 A_a_b_prod_list_fun$ ))(! (= (bind$a nil$ ?v0 )nil$a ):pattern ((bind$a nil$ ?v0 )))):named a101 ))
(assert (! (forall ((?v0 A_b_prod_a_list_fun$ ))(! (= (bind$b nil$a ?v0 )nil$ ):pattern ((bind$b nil$a ?v0 )))):named a102 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_list_fun$ ))(! (= (bind$c nil$a ?v0 )nil$a ):pattern ((bind$c nil$a ?v0 )))):named a103 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod_list$ ))(= (remove$ ?v0 (set$b ?v1 ))(set$b (removeAll$ ?v0 ?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_list$ ))(= (remove$a ?v0 (set$c ?v1 ))(set$c (removeAll$a ?v0 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 B$ )(?v1 B_list$ ))(= (remove$b ?v0 (set$d ?v1 ))(set$d (removeAll$b ?v0 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ )(?v1 A_b_prod_a_prod_list$ ))(= (remove$c ?v0 (set$e ?v1 ))(set$e (removeAll$c ?v0 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_list$ ))(= (remove$d ?v0 (set$f ?v1 ))(set$f (removeAll$d ?v0 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (remove$e ?v0 (set$ ?v1 ))(set$ (fun_app$i (removeAll$e ?v0 )?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(= (remove$f ?v0 (set$a ?v1 ))(set$a (fun_app$j (removeAll$f ?v0 )?v1 )))):named a110 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ ))(=> (forall ((?v1 A_b_prod$ )(?v2 A_b_prod$ ))(=> (= ?v0 (pair$a ?v1 ?v2 ))false ))false )):named a111 ))
(assert (! (forall ((?v0 A_a_prod$ ))(=> (forall ((?v1 A$ )(?v2 A$ ))(=> (= ?v0 (pair$b ?v1 ?v2 ))false ))false )):named a112 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ ))(=> (forall ((?v1 A_b_prod$ )(?v2 A$ ))(=> (= ?v0 (pair$c ?v1 ?v2 ))false ))false )):named a113 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 A_b_prod$ ))(=> (= ?v0 (pair$d ?v1 ?v2 ))false ))false )):named a114 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a115 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_bool_fun$ )(?v1 A_b_prod_a_b_prod_prod_set$ ))(= (can_select$ ?v0 ?v1 )(exists ((?v2 A_b_prod_a_b_prod_prod$ ))(and (and (member$ ?v2 ?v1 )(fun_app$ ?v0 ?v2 ))(forall ((?v3 A_b_prod_a_b_prod_prod$ ))(=> (and (member$ ?v3 ?v1 )(fun_app$ ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a116 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_set$ ))(= (can_select$a ?v0 ?v1 )(exists ((?v2 A_a_prod$ ))(and (and (member$d ?v2 ?v1 )(fun_app$d ?v0 ?v2 ))(forall ((?v3 A_a_prod$ ))(=> (and (member$d ?v3 ?v1 )(fun_app$d ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a117 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_set$ ))(= (can_select$b ?v0 ?v1 )(exists ((?v2 B$ ))(and (and (member$e ?v2 ?v1 )(fun_app$e ?v0 ?v2 ))(forall ((?v3 B$ ))(=> (and (member$e ?v3 ?v1 )(fun_app$e ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a118 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_bool_fun$ )(?v1 A_b_prod_a_prod_set$ ))(= (can_select$c ?v0 ?v1 )(exists ((?v2 A_b_prod_a_prod$ ))(and (and (member$a ?v2 ?v1 )(fun_app$a ?v0 ?v2 ))(forall ((?v3 A_b_prod_a_prod$ ))(=> (and (member$a ?v3 ?v1 )(fun_app$a ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a119 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod_set$ ))(= (can_select$d ?v0 ?v1 )(exists ((?v2 A_a_b_prod_prod$ ))(and (and (member$b ?v2 ?v1 )(fun_app$b ?v0 ?v2 ))(forall ((?v3 A_a_b_prod_prod$ ))(=> (and (member$b ?v3 ?v1 )(fun_app$b ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a120 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_set$ ))(= (can_select$e ?v0 ?v1 )(exists ((?v2 A$ ))(and (and (member$f ?v2 ?v1 )(fun_app$f ?v0 ?v2 ))(forall ((?v3 A$ ))(=> (and (member$f ?v3 ?v1 )(fun_app$f ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a121 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_set$ ))(= (can_select$f ?v0 ?v1 )(exists ((?v2 A_b_prod$ ))(and (and (member$c ?v2 ?v1 )(fun_app$c ?v0 ?v2 ))(forall ((?v3 A_b_prod$ ))(=> (and (member$c ?v3 ?v1 )(fun_app$c ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a122 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ ))(exists ((?v1 A_b_prod$ )(?v2 A_b_prod$ ))(= ?v0 (pair$a ?v1 ?v2 )))):named a123 ))
(assert (! (forall ((?v0 A_a_prod$ ))(exists ((?v1 A$ )(?v2 A$ ))(= ?v0 (pair$b ?v1 ?v2 )))):named a124 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ ))(exists ((?v1 A_b_prod$ )(?v2 A$ ))(= ?v0 (pair$c ?v1 ?v2 )))):named a125 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ ))(exists ((?v1 A$ )(?v2 A_b_prod$ ))(= ?v0 (pair$d ?v1 ?v2 )))):named a126 ))
(assert (! (forall ((?v0 A_b_prod$ ))(exists ((?v1 A$ )(?v2 B$ ))(= ?v0 (pair$ ?v1 ?v2 )))):named a127 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod$ )(?v3 A_b_prod$ ))(=> (and (= (pair$a ?v0 ?v1 )(pair$a ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a128 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ )(?v3 A$ ))(=> (and (= (pair$b ?v0 ?v1 )(pair$b ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a129 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ )(?v2 A_b_prod$ )(?v3 A$ ))(=> (and (= (pair$c ?v0 ?v1 )(pair$c ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a130 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A$ )(?v3 A_b_prod$ ))(=> (and (= (pair$d ?v0 ?v1 )(pair$d ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a131 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A$ )(?v3 B$ ))(=> (and (= (pair$ ?v0 ?v1 )(pair$ ?v2 ?v3 ))(=> (and (= ?v0 ?v2 )(= ?v1 ?v3 ))false ))false )):named a132 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ ))(=> (forall ((?v1 A_b_prod$ )(?v2 A_b_prod$ ))(=> (= ?v0 (pair$a ?v1 ?v2 ))false ))false )):named a133 ))
(assert (! (forall ((?v0 A_a_prod$ ))(=> (forall ((?v1 A$ )(?v2 A$ ))(=> (= ?v0 (pair$b ?v1 ?v2 ))false ))false )):named a134 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ ))(=> (forall ((?v1 A_b_prod$ )(?v2 A$ ))(=> (= ?v0 (pair$c ?v1 ?v2 ))false ))false )):named a135 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 A_b_prod$ ))(=> (= ?v0 (pair$d ?v1 ?v2 ))false ))false )):named a136 ))
(assert (! (forall ((?v0 A_b_prod$ ))(=> (forall ((?v1 A$ )(?v2 B$ ))(=> (= ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a137 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_bool_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(=> (forall ((?v2 A_b_prod$ )(?v3 A_b_prod$ ))(fun_app$ ?v0 (pair$a ?v2 ?v3 )))(fun_app$ ?v0 ?v1 ))):named a138 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ ))(=> (forall ((?v2 A$ )(?v3 A$ ))(fun_app$d ?v0 (pair$b ?v2 ?v3 )))(fun_app$d ?v0 ?v1 ))):named a139 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_bool_fun$ )(?v1 A_b_prod_a_prod$ ))(=> (forall ((?v2 A_b_prod$ )(?v3 A$ ))(fun_app$a ?v0 (pair$c ?v2 ?v3 )))(fun_app$a ?v0 ?v1 ))):named a140 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 A_b_prod$ ))(fun_app$b ?v0 (pair$d ?v2 ?v3 )))(fun_app$b ?v0 ?v1 ))):named a141 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(fun_app$c ?v0 (pair$ ?v2 ?v3 )))(fun_app$c ?v0 ?v1 ))):named a142 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ ))(=> (forall ((?v1 A_b_prod$ )(?v2 A$ )(?v3 B$ ))(=> (= ?v0 (pair$a ?v1 (pair$ ?v2 ?v3 )))false ))false )):named a143 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ ))(=> (forall ((?v1 A$ )(?v2 A$ )(?v3 B$ ))(=> (= ?v0 (pair$d ?v1 (pair$ ?v2 ?v3 )))false ))false )):named a144 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_bool_fun$ ))(=> (forall ((?v2 A_b_prod$ ))(= (fun_app$c ?v0 ?v2 )(fun_app$c ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a145 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_bool_fun$ ))(=> (forall ((?v2 A$ ))(= (fun_app$f ?v0 ?v2 )(fun_app$f ?v1 ?v2 )))(= (collect$a ?v0 )(collect$a ?v1 )))):named a146 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_set$ ))(= (collect$b (uu$ ?v0 ))?v0 )):named a147 ))
(assert (! (forall ((?v0 A_a_prod_set$ ))(= (collect$c (uua$ ?v0 ))?v0 )):named a148 ))
(assert (! (forall ((?v0 B_set$ ))(= (collect$d (uub$ ?v0 ))?v0 )):named a149 ))
(assert (! (forall ((?v0 A_b_prod_a_prod_set$ ))(= (collect$e (uuc$ ?v0 ))?v0 )):named a150 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_set$ ))(= (collect$f (uud$ ?v0 ))?v0 )):named a151 ))
(assert (! (forall ((?v0 A_set$ ))(= (collect$a (uue$ ?v0 ))?v0 )):named a152 ))
(assert (! (forall ((?v0 A_b_prod_set$ ))(= (collect$ (uuf$ ?v0 ))?v0 )):named a153 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod_bool_fun$ ))(= (member$ ?v0 (collect$b ?v1 ))(fun_app$ ?v1 ?v0 ))):named a154 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_bool_fun$ ))(= (member$d ?v0 (collect$c ?v1 ))(fun_app$d ?v1 ?v0 ))):named a155 ))
(assert (! (forall ((?v0 B$ )(?v1 B_bool_fun$ ))(= (member$e ?v0 (collect$d ?v1 ))(fun_app$e ?v1 ?v0 ))):named a156 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ )(?v1 A_b_prod_a_prod_bool_fun$ ))(= (member$a ?v0 (collect$e ?v1 ))(fun_app$a ?v1 ?v0 ))):named a157 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod_bool_fun$ ))(= (member$b ?v0 (collect$f ?v1 ))(fun_app$b ?v1 ?v0 ))):named a158 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ ))(= (member$f ?v0 (collect$a ?v1 ))(fun_app$f ?v1 ?v0 ))):named a159 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_bool_fun$ ))(= (member$c ?v0 (collect$ ?v1 ))(fun_app$c ?v1 ?v0 ))):named a160 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod_bool_fun$ )(?v1 A_b_prod_a_b_prod_prod$ ))(=> (forall ((?v2 A_b_prod$ )(?v3 A$ )(?v4 B$ ))(fun_app$ ?v0 (pair$a ?v2 (pair$ ?v3 ?v4 ))))(fun_app$ ?v0 ?v1 ))):named a161 ))
(assert (! (forall ((?v0 A_a_b_prod_prod_bool_fun$ )(?v1 A_a_b_prod_prod$ ))(=> (forall ((?v2 A$ )(?v3 A$ )(?v4 B$ ))(fun_app$b ?v0 (pair$d ?v2 (pair$ ?v3 ?v4 ))))(fun_app$b ?v0 ?v1 ))):named a162 ))
(assert (! (forall ((?v0 A_b_prod_a_b_prod_prod$ )(?v1 A_b_prod_a_b_prod_prod$ )(?v2 A_b_prod_a_b_prod_prod_set$ ))(= (member$ ?v0 (remove$ ?v1 ?v2 ))(and (member$ ?v0 ?v2 )(not (= ?v0 ?v1 ))))):named a163 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod$ )(?v2 A_a_prod_set$ ))(= (member$d ?v0 (remove$a ?v1 ?v2 ))(and (member$d ?v0 ?v2 )(not (= ?v0 ?v1 ))))):named a164 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_set$ ))(= (member$e ?v0 (remove$b ?v1 ?v2 ))(and (member$e ?v0 ?v2 )(not (= ?v0 ?v1 ))))):named a165 ))
(assert (! (forall ((?v0 A_b_prod_a_prod$ )(?v1 A_b_prod_a_prod$ )(?v2 A_b_prod_a_prod_set$ ))(= (member$a ?v0 (remove$c ?v1 ?v2 ))(and (member$a ?v0 ?v2 )(not (= ?v0 ?v1 ))))):named a166 ))
(assert (! (forall ((?v0 A_a_b_prod_prod$ )(?v1 A_a_b_prod_prod$ )(?v2 A_a_b_prod_prod_set$ ))(= (member$b ?v0 (remove$d ?v1 ?v2 ))(and (member$b ?v0 ?v2 )(not (= ?v0 ?v1 ))))):named a167 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_set$ ))(= (member$f ?v0 (remove$e ?v1 ?v2 ))(and (member$f ?v0 ?v2 )(not (= ?v0 ?v1 ))))):named a168 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_set$ ))(= (member$c ?v0 (remove$f ?v1 ?v2 ))(and (member$c ?v0 ?v2 )(not (= ?v0 ?v1 ))))):named a169 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(= (remove$f ?v0 (coset$ ?v1 ))(coset$ (insert$f ?v0 ?v1 )))):named a170 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (remove$e ?v0 (coset$a ?v1 ))(coset$a (insert$e ?v0 ?v1 )))):named a171 ))
(assert (! (forall ((?v0 B_list$ ))(! (= (product$ nil$ ?v0 )nil$a ):pattern ((product$ nil$ ?v0 )))):named a172 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_a_b_prod_prod_set$ )(?v3 A_b_prod$ ))(=> (and (member$ (pair$a ?v0 ?v1 )?v2 )(= ?v3 ?v1 ))(member$ (pair$a ?v0 ?v3 )?v2 ))):named a173 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_a_prod_set$ )(?v3 A$ ))(=> (and (member$d (pair$b ?v0 ?v1 )?v2 )(= ?v3 ?v1 ))(member$d (pair$b ?v0 ?v3 )?v2 ))):named a174 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ )(?v2 A_b_prod_a_prod_set$ )(?v3 A$ ))(=> (and (member$a (pair$c ?v0 ?v1 )?v2 )(= ?v3 ?v1 ))(member$a (pair$c ?v0 ?v3 )?v2 ))):named a175 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A_a_b_prod_prod_set$ )(?v3 A_b_prod$ ))(=> (and (member$b (pair$d ?v0 ?v1 )?v2 )(= ?v3 ?v1 ))(member$b (pair$d ?v0 ?v3 )?v2 ))):named a176 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_b_prod_set$ )(?v3 B$ ))(=> (and (member$c (pair$ ?v0 ?v1 )?v2 )(= ?v3 ?v1 ))(member$c (pair$ ?v0 ?v3 )?v2 ))):named a177 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A$ )(?v2 B$ ))(! (= (fun_app$e (fun_app$k (curry$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (pair$ ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$k (curry$ ?v0 )?v1 )?v2 )))):named a178 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ ))(= (member$ (pair$a ?v0 ?v1 )(measures$ nil$g ))false )):named a179 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (member$d (pair$b ?v0 ?v1 )(measures$a nil$h ))false )):named a180 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$c ?v0 (pair$ ?v1 ?v2 ))(fun_app$e (fun_app$k (curry$ ?v0 )?v1 )?v2 ))):named a181 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A$ )(?v2 B$ ))(=> (and (fun_app$e (fun_app$k (curry$ ?v0 )?v1 )?v2 )(=> (fun_app$c ?v0 (pair$ ?v1 ?v2 ))false ))false )):named a182 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A$ )(?v2 B$ ))(=> (fun_app$e (fun_app$k (curry$ ?v0 )?v1 )?v2 )(fun_app$c ?v0 (pair$ ?v1 ?v2 )))):named a183 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a184 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a185 ))
(assert (! (= (less_eq$ (coset$a nil$ )(set$ nil$ ))false ):named a186 ))
(assert (! (= (less_eq$a (coset$ nil$a )(set$a nil$a ))false ):named a187 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (suc$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):named a188 ))
(assert (! (forall ((?v0 Nat$ ))(not (= ?v0 (suc$ ?v0 )))):named a189 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_list$ ))(= (member$d (pair$b ?v0 ?v1 )(set$c (zip$ ?v2 ?v2 )))(and (member$f ?v0 (set$ ?v2 ))(= ?v0 ?v1 )))):named a190 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_list$ ))(= (member$ (pair$a ?v0 ?v1 )(set$b (zip$a ?v2 ?v2 )))(and (member$c ?v0 (set$a ?v2 ))(= ?v0 ?v1 )))):named a191 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(=> (forall ((?v2 A$ ))(=> (member$f ?v2 ?v0 )(member$f ?v2 ?v1 )))(less_eq$ ?v0 ?v1 ))):named a192 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ ))(=> (forall ((?v2 A_b_prod$ ))(=> (member$c ?v2 ?v0 )(member$c ?v2 ?v1 )))(less_eq$a ?v0 ?v1 ))):named a193 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$f ?v2 ?v0 )(member$f ?v2 ?v1 ))))):named a194 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ ))(= (less_eq$a ?v0 ?v1 )(forall ((?v2 A_b_prod$ ))(=> (member$c ?v2 ?v0 )(member$c ?v2 ?v1 ))))):named a195 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ ))(= (less_eq$ ?v0 ?v1 )(forall ((?v2 A$ ))(=> (member$f ?v2 ?v0 )(member$f ?v2 ?v1 ))))):named a196 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ ))(= (less_eq$a ?v0 ?v1 )(forall ((?v2 A_b_prod$ ))(=> (member$c ?v2 ?v0 )(member$c ?v2 ?v1 ))))):named a197 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$l (less_eq$b (fun_app$m ?v0 (suc$ ?v3 )))(fun_app$m ?v0 ?v3 )))(fun_app$l (less_eq$b ?v1 )?v2 ))(fun_app$l (less_eq$b (fun_app$m ?v0 ?v2 ))(fun_app$m ?v0 ?v1 )))):named a198 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$l (less_eq$b (fun_app$m ?v0 ?v3 ))(fun_app$m ?v0 (suc$ ?v3 ))))(fun_app$l (less_eq$b ?v1 )?v2 ))(fun_app$l (less_eq$b (fun_app$m ?v0 ?v1 ))(fun_app$m ?v0 ?v2 )))):named a199 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$f ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(member$f ?v0 ?v2 ))):named a200 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod_set$ ))(=> (and (member$c ?v0 ?v1 )(less_eq$a ?v1 ?v2 ))(member$c ?v0 ?v2 ))):named a201 ))
(assert (! (forall ((?v0 A$ )(?v1 A_set$ )(?v2 A_set$ ))(=> (and (member$f ?v0 ?v1 )(less_eq$ ?v1 ?v2 ))(member$f ?v0 ?v2 ))):named a202 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod_set$ ))(=> (and (member$c ?v0 ?v1 )(less_eq$a ?v1 ?v2 ))(member$c ?v0 ?v2 ))):named a203 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(and (=> (not (member$f ?v2 ?v0 ))false )(=> (member$f ?v2 ?v1 )false )))false )):named a204 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod$ ))(=> (and (less_eq$a ?v0 ?v1 )(and (=> (not (member$c ?v2 ?v0 ))false )(=> (member$c ?v2 ?v1 )false )))false )):named a205 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(member$f ?v2 ?v0 ))(member$f ?v2 ?v1 ))):named a206 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod$ ))(=> (and (less_eq$a ?v0 ?v1 )(member$c ?v2 ?v0 ))(member$c ?v2 ?v1 ))):named a207 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(member$f ?v2 ?v0 ))(member$f ?v2 ?v1 ))):named a208 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod$ ))(=> (and (less_eq$a ?v0 ?v1 )(member$c ?v2 ?v0 ))(member$c ?v2 ?v1 ))):named a209 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(not (member$f ?v2 ?v1 )))(not (member$f ?v2 ?v0 )))):named a210 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod$ ))(=> (and (less_eq$a ?v0 ?v1 )(not (member$c ?v2 ?v1 )))(not (member$c ?v2 ?v0 )))):named a211 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_set$ )(?v2 A$ ))(=> (and (less_eq$ ?v0 ?v1 )(member$f ?v2 ?v0 ))(member$f ?v2 ?v1 ))):named a212 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ )(?v2 A_b_prod$ ))(=> (and (less_eq$a ?v0 ?v1 )(member$c ?v2 ?v0 ))(member$c ?v2 ?v1 ))):named a213 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A_set$ ))(= (less_eq$ (set$ ?v0 )?v1 )(forall ((?v2 A$ ))(=> (member$f ?v2 (set$ ?v0 ))(member$f ?v2 ?v1 ))))):named a214 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod_set$ ))(= (less_eq$a (set$a ?v0 )?v1 )(forall ((?v2 A_b_prod$ ))(=> (member$c ?v2 (set$a ?v0 ))(member$c ?v2 ?v1 ))))):named a215 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A_list$ ))(= (less_eq$ ?v0 (coset$a ?v1 ))(forall ((?v2 A$ ))(=> (member$f ?v2 (set$ ?v1 ))(not (member$f ?v2 ?v0 )))))):named a216 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_list$ ))(= (less_eq$a ?v0 (coset$ ?v1 ))(forall ((?v2 A_b_prod$ ))(=> (member$c ?v2 (set$a ?v1 ))(not (member$c ?v2 ?v0 )))))):named a217 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_list$ )(?v3 B_list$ ))(=> (member$c (pair$ ?v0 ?v1 )(set$a (zip$b ?v2 ?v3 )))(member$f ?v0 (set$ ?v2 )))):named a218 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_list$ )(?v3 B_list$ ))(=> (member$c (pair$ ?v0 ?v1 )(set$a (zip$b ?v2 ?v3 )))(member$e ?v1 (set$d ?v3 )))):named a219 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_list$ )(?v3 A_list$ ))(=> (and (member$d (pair$b ?v0 ?v1 )(set$c (zip$ ?v2 ?v3 )))(=> (and (member$f ?v0 (set$ ?v2 ))(member$f ?v1 (set$ ?v3 )))false ))false )):named a220 ))
(assert (! (forall ((?v0 A$ )(?v1 A_b_prod$ )(?v2 A_list$ )(?v3 A_b_prod_list$ ))(=> (and (member$b (pair$d ?v0 ?v1 )(set$f (zip$c ?v2 ?v3 )))(=> (and (member$f ?v0 (set$ ?v2 ))(member$c ?v1 (set$a ?v3 )))false ))false )):named a221 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A$ )(?v2 A_b_prod_list$ )(?v3 A_list$ ))(=> (and (member$a (pair$c ?v0 ?v1 )(set$e (zip$d ?v2 ?v3 )))(=> (and (member$c ?v0 (set$a ?v2 ))(member$f ?v1 (set$ ?v3 )))false ))false )):named a222 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_list$ )(?v3 A_b_prod_list$ ))(=> (and (member$ (pair$a ?v0 ?v1 )(set$b (zip$a ?v2 ?v3 )))(=> (and (member$c ?v0 (set$a ?v2 ))(member$c ?v1 (set$a ?v3 )))false ))false )):named a223 ))
(assert (! (forall ((?v0 A$ )(?v1 B$ )(?v2 A_list$ )(?v3 B_list$ ))(=> (and (member$c (pair$ ?v0 ?v1 )(set$a (zip$b ?v2 ?v3 )))(=> (and (member$f ?v0 (set$ ?v2 ))(member$e ?v1 (set$d ?v3 )))false ))false )):named a224 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$l (less_eq$b ?v0 )?v0 )):named a225 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (antimono$ ?v0 )(forall ((?v1 Nat$ ))(fun_app$l (less_eq$b (fun_app$m ?v0 (suc$ ?v1 )))(fun_app$m ?v0 ?v1 ))))):named a226 ))
(assert (! (forall ((?v0 A_b_prod_set$ )(?v1 A_b_prod_set$ ))(=> (forall ((?v2 A$ )(?v3 B$ ))(=> (member$c (pair$ ?v2 ?v3 )?v0 )(member$c (pair$ ?v2 ?v3 )?v1 )))(less_eq$a ?v0 ?v1 ))):named a227 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$l (less_eq$b ?v0 )?v0 )):named a228 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(or (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v0 ))):named a229 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less_eq$b (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$l (less_eq$b ?v0 )?v1 )):pattern ((fun_app$l (less_eq$b (suc$ ?v0 ))(suc$ ?v1 ))))):named a230 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$l (less_eq$b ?v0 )?v0 )):named a231 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(or (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v0 ))):named a232 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v2 ))(fun_app$l (less_eq$b ?v0 )?v2 ))):named a233 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v0 ))(= ?v0 ?v1 ))):named a234 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(fun_app$l (less_eq$b ?v0 )?v1 ))):named a235 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (antimono$ ?v0 )(forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (fun_app$l (less_eq$b ?v1 )?v2 )(fun_app$l (less_eq$b (fun_app$m ?v0 ?v2 ))(fun_app$m ?v0 ?v1 )))))):named a236 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(=> (forall ((?v1 Nat$ )(?v2 Nat$ ))(=> (fun_app$l (less_eq$b ?v1 )?v2 )(fun_app$l (less_eq$b (fun_app$m ?v0 ?v2 ))(fun_app$m ?v0 ?v1 ))))(antimono$ ?v0 ))):named a237 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (antimono$ ?v0 )(and (fun_app$l (less_eq$b ?v1 )?v2 )(=> (fun_app$l (less_eq$b (fun_app$m ?v0 ?v2 ))(fun_app$m ?v0 ?v1 ))false )))false )):named a238 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (antimono$ ?v0 )(fun_app$l (less_eq$b ?v1 )?v2 ))(fun_app$l (less_eq$b (fun_app$m ?v0 ?v2 ))(fun_app$m ?v0 ?v1 )))):named a239 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$l (less_eq$b (suc$ ?v0 ))?v0 ))):named a240 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v0 )(suc$ ?v1 )))):named a241 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )(suc$ ?v1 ))(and (=> (fun_app$l (less_eq$b ?v0 )?v1 )false )(=> (= ?v0 (suc$ ?v1 ))false )))false )):named a242 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less_eq$b (suc$ ?v0 ))?v1 )(exists ((?v2 Nat$ ))(= ?v1 (suc$ ?v2 ))))):named a243 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less_eq$b (suc$ ?v0 ))?v1 )(fun_app$l (less_eq$b ?v0 )?v1 ))):named a244 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$l (less_eq$b (suc$ ?v3 ))?v2 )(fun_app$l ?v0 ?v3 )))(fun_app$l ?v0 ?v2 )))(fun_app$l ?v0 ?v1 ))):named a245 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$l (less_eq$b ?v0 )?v1 ))(fun_app$l (less_eq$b (suc$ ?v1 ))?v0 ))):named a246 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less_eq$b ?v0 )(suc$ ?v1 ))(or (fun_app$l (less_eq$b ?v0 )?v1 )(= ?v0 (suc$ ?v1 )))):pattern ((fun_app$l (less_eq$b ?v0 )(suc$ ?v1 ))))):named a247 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= ?v0 ?v1 )(and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v0 )))):named a248 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (fun_app$l (less_eq$b ?v0 )?v1 )false )(=> (fun_app$l (less_eq$b ?v1 )?v0 )false ))false )):named a249 ))
(assert (! (forall ((?v0 Nat_nat_bool_fun_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$l (less_eq$b ?v3 )?v4 )(fun_app$l (fun_app$n ?v0 ?v3 )?v4 )))(forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$l (fun_app$n ?v0 ?v4 )?v3 )(fun_app$l (fun_app$n ?v0 ?v3 )?v4 ))))(fun_app$l (fun_app$n ?v0 ?v1 )?v2 ))):named a250 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(and (fun_app$l (less_eq$b ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$l (less_eq$b ?v4 )?v5 )(fun_app$l (less_eq$b (fun_app$m ?v1 ?v4 ))(fun_app$m ?v1 ?v5 ))))))(fun_app$l (less_eq$b ?v0 )(fun_app$m ?v1 ?v3 )))):named a251 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (= ?v0 ?v1 )(fun_app$l (less_eq$b ?v1 )?v2 ))(fun_app$l (less_eq$b ?v0 )?v2 ))):named a252 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 ?v1 )(fun_app$l (less_eq$b ?v0 )?v1 ))):named a253 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_fun$ )(?v3 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(and (= (fun_app$m ?v2 ?v1 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$l (less_eq$b ?v4 )?v5 )(fun_app$l (less_eq$b (fun_app$m ?v2 ?v4 ))(fun_app$m ?v2 ?v5 ))))))(fun_app$l (less_eq$b (fun_app$m ?v2 ?v0 ))?v3 ))):named a254 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$l (less_eq$b ?v0 )?v2 ))):named a255 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_fun$ )(?v3 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(and (fun_app$l (less_eq$b (fun_app$m ?v2 ?v1 ))?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$l (less_eq$b ?v4 )?v5 )(fun_app$l (less_eq$b (fun_app$m ?v2 ?v4 ))(fun_app$m ?v2 ?v5 ))))))(fun_app$l (less_eq$b (fun_app$m ?v2 ?v0 ))?v3 ))):named a256 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )(fun_app$m ?v1 ?v2 ))(and (fun_app$l (less_eq$b ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$l (less_eq$b ?v4 )?v5 )(fun_app$l (less_eq$b (fun_app$m ?v1 ?v4 ))(fun_app$m ?v1 ?v5 ))))))(fun_app$l (less_eq$b ?v0 )(fun_app$m ?v1 ?v3 )))):named a257 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v0 ))(= ?v1 ?v0 ))):named a258 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v0 ))(= ?v0 ?v1 ))):named a259 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v0 ))(= ?v0 ?v1 ))):named a260 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v2 )?v0 ))(fun_app$l (less_eq$b ?v2 )?v1 ))):named a261 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v2 ))(fun_app$l (less_eq$b ?v0 )?v2 ))):named a262 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(fun_app$l (less_eq$b ?v1 )?v2 ))(fun_app$l (less_eq$b ?v0 )?v2 ))):named a263 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (=> (fun_app$l (less_eq$b ?v0 )?v1 )(= (fun_app$l (less_eq$b ?v1 )?v0 )(= ?v1 ?v0 ))):pattern ((fun_app$l (less_eq$b ?v1 )?v0 )))):named a264 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_list$ ))(=> (fun_app$l (less_eq$b ?v0 )?v1 )(less_eq$ (set$ (drop$ ?v1 ?v2 ))(set$ (drop$ ?v0 ?v2 ))))):named a265 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 A_b_prod_list$ ))(=> (fun_app$l (less_eq$b ?v0 )?v1 )(less_eq$a (set$a (drop$a ?v1 ?v2 ))(set$a (drop$a ?v0 ?v2 ))))):named a266 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 B$ )(?v3 B_list$ ))(! (= (zip$b (cons$ ?v0 ?v1 )(cons$d ?v2 ?v3 ))(cons$a (pair$ ?v0 ?v2 )(zip$b ?v1 ?v3 ))):pattern ((zip$b (cons$ ?v0 ?v1 )(cons$d ?v2 ?v3 ))))):named a267 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (=> (not (member$f ?v0 (set$ ?v1 )))(= (insert$e ?v0 ?v1 )(cons$ ?v0 ?v1 ))):pattern ((insert$e ?v0 ?v1 )))):named a268 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (=> (not (member$c ?v0 (set$a ?v1 )))(= (insert$f ?v0 ?v1 )(cons$a ?v0 ?v1 ))):pattern ((insert$f ?v0 ?v1 )))):named a269 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(member$f ?v0 (set$ (cons$ ?v0 ?v1 )))):named a270 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(member$c ?v0 (set$a (cons$a ?v0 ?v1 )))):named a271 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ )(?v2 A$ ))(=> (member$f ?v0 (set$ ?v1 ))(member$f ?v0 (set$ (cons$ ?v2 ?v1 ))))):named a272 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ )(?v2 A_b_prod$ ))(=> (member$c ?v0 (set$a ?v1 ))(member$c ?v0 (set$a (cons$a ?v2 ?v1 ))))):named a273 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(=> (and (member$f ?v0 (set$ ?v1 ))(and (forall ((?v2 A_list$ ))(=> (= ?v1 (cons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_list$ ))(=> (and (= ?v1 (cons$ ?v2 ?v3 ))(member$f ?v0 (set$ ?v3 )))false ))))false )):named a274 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(=> (and (member$c ?v0 (set$a ?v1 ))(and (forall ((?v2 A_b_prod_list$ ))(=> (= ?v1 (cons$a ?v0 ?v2 ))false ))(forall ((?v2 A_b_prod$ )(?v3 A_b_prod_list$ ))(=> (and (= ?v1 (cons$a ?v2 ?v3 ))(member$c ?v0 (set$a ?v3 )))false ))))false )):named a275 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_list$ ))(=> (member$f ?v0 (set$ (cons$ ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$f ?v0 (set$ ?v2 ))))):named a276 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_list$ ))(=> (member$c ?v0 (set$a (cons$a ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$c ?v0 (set$a ?v2 ))))):named a277 ))
(assert (! (forall ((?v0 A$ )(?v1 Nat$ )(?v2 A_list$ ))(=> (member$f ?v0 (set$ (drop$ ?v1 ?v2 )))(member$f ?v0 (set$ ?v2 )))):named a278 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 Nat$ )(?v2 A_b_prod_list$ ))(=> (member$c ?v0 (set$a (drop$a ?v1 ?v2 )))(member$c ?v0 (set$a ?v2 )))):named a279 ))
(assert (! (forall ((?v0 A_list$ )(?v1 A$ ))(less_eq$ (set$ ?v0 )(set$ (cons$ ?v1 ?v0 )))):named a280 ))
(assert (! (forall ((?v0 A_b_prod_list$ )(?v1 A_b_prod$ ))(less_eq$a (set$a ?v0 )(set$a (cons$a ?v1 ?v0 )))):named a281 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_list$ ))(less_eq$ (set$ (drop$ ?v0 ?v1 ))(set$ ?v1 ))):named a282 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_b_prod_list$ ))(less_eq$a (set$a (drop$a ?v0 ?v1 ))(set$a ?v1 ))):named a283 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(! (= (insert$e ?v0 ?v1 )(ite (member$f ?v0 (set$ ?v1 ))?v1 (cons$ ?v0 ?v1 ))):pattern ((insert$e ?v0 ?v1 )))):named a284 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_list$ ))(! (= (insert$f ?v0 ?v1 )(ite (member$c ?v0 (set$a ?v1 ))?v1 (cons$a ?v0 ?v1 ))):pattern ((insert$f ?v0 ?v1 )))):named a285 ))
(assert (! (forall ((?v0 A$ ))(= (the_elem$ (set$ (cons$ ?v0 nil$ )))?v0 )):named a286 ))
(assert (! (forall ((?v0 A_b_prod$ ))(= (the_elem$a (set$a (cons$a ?v0 nil$a )))?v0 )):named a287 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less$ (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$l (less$ ?v0 )?v1 )):pattern ((fun_app$l (less$ (suc$ ?v0 ))(suc$ ?v1 ))))):named a288 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ (suc$ ?v0 ))(suc$ ?v1 )))):named a289 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$l (less$ ?v0 )(suc$ ?v0 ))):named a290 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less$ ?v0 )(suc$ ?v1 ))(or (fun_app$l (less$ ?v0 )?v1 )(= ?v0 ?v1 ))):pattern ((fun_app$l (less$ ?v0 )(suc$ ?v1 ))))):named a291 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$l (less$ (suc$ ?v0 ))?v1 )(exists ((?v2 Nat$ ))(and (= ?v1 (suc$ ?v2 ))(fun_app$l (less$ ?v0 )?v2 ))))):named a292 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$l (less$ ?v0 )?v1 ))(fun_app$l (less$ ?v1 )(suc$ ?v0 )))):named a293 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ (suc$ ?v0 ))(suc$ ?v1 ))(fun_app$l (less$ ?v0 )?v1 ))):named a294 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less$ (suc$ ?v0 ))?v1 )(forall ((?v2 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v2 )(= ?v1 (suc$ ?v2 )))false )))false )):named a295 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ (suc$ ?v0 ))?v1 )(fun_app$l (less$ ?v0 )?v1 ))):named a296 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )(suc$ ?v1 ))(and (=> (fun_app$l (less$ ?v0 )?v1 )false )(=> (= ?v0 ?v1 )false )))false )):named a297 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(and (=> (= ?v1 (suc$ ?v0 ))false )(forall ((?v2 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v2 )(= ?v1 (suc$ ?v2 )))false ))))false )):named a298 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_bool_fun$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(and (forall ((?v3 Nat$ ))(=> (= ?v1 (suc$ ?v3 ))(fun_app$l ?v2 ?v3 )))(forall ((?v3 Nat$ ))(=> (and (fun_app$l (less$ ?v3 )?v1 )(fun_app$l ?v2 (suc$ ?v3 )))(fun_app$l ?v2 ?v3 )))))(fun_app$l ?v2 ?v0 ))):named a299 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(and (forall ((?v3 Nat$ ))(fun_app$l (fun_app$n ?v2 ?v3 )(suc$ ?v3 )))(forall ((?v3 Nat$ )(?v4 Nat$ )(?v5 Nat$ ))(=> (and (fun_app$l (less$ ?v3 )?v4 )(and (fun_app$l (less$ ?v4 )?v5 )(and (fun_app$l (fun_app$n ?v2 ?v3 )?v4 )(fun_app$l (fun_app$n ?v2 ?v4 )?v5 ))))(fun_app$l (fun_app$n ?v2 ?v3 )?v5 )))))(fun_app$l (fun_app$n ?v2 ?v0 )?v1 ))):named a300 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v1 )?v2 ))(fun_app$l (less$ (suc$ ?v0 ))?v2 ))):named a301 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(not (= (suc$ ?v0 )?v1 )))(fun_app$l (less$ (suc$ ?v0 ))?v1 ))):named a302 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v0 )(suc$ ?v1 )))):named a303 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (fun_app$l (less$ ?v0 )?v1 ))(fun_app$l (less$ ?v0 )(suc$ ?v1 )))(= ?v1 ?v0 ))):named a304 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (=> (not (fun_app$l (less$ ?v0 )?v1 ))(= (fun_app$l (less$ ?v0 )(suc$ ?v1 ))(= ?v0 ?v1 ))):pattern ((fun_app$l (less$ ?v0 )(suc$ ?v1 ))))):named a305 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less$ ?v0 )?v1 )(and (fun_app$l (less_eq$b ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((fun_app$l (less$ ?v0 )?v1 )))):named a306 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less_eq$b ?v0 )?v1 )(or (fun_app$l (less$ ?v0 )?v1 )(= ?v0 ?v1 ))):pattern ((fun_app$l (less_eq$b ?v0 )?v1 )))):named a307 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ )(?v4 Nat$ ))(=> (fun_app$l (less$ ?v3 )?v4 )(fun_app$l (less$ (fun_app$m ?v0 ?v3 ))(fun_app$m ?v0 ?v4 ))))(fun_app$l (less_eq$b ?v1 )?v2 ))(fun_app$l (less_eq$b (fun_app$m ?v0 ?v1 ))(fun_app$m ?v0 ?v2 )))):named a308 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (or (fun_app$l (less$ ?v0 )?v1 )(= ?v0 ?v1 ))(fun_app$l (less_eq$b ?v0 )?v1 ))):named a309 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less_eq$b ?v0 )?v1 ))):named a310 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less_eq$b ?v0 )?v1 )(not (= ?v0 ?v1 )))(fun_app$l (less$ ?v0 )?v1 ))):named a311 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (forall ((?v3 Nat$ ))(fun_app$l (less$ (fun_app$m ?v0 ?v3 ))(fun_app$m ?v0 (suc$ ?v3 ))))(fun_app$l (less$ ?v1 )?v2 ))(fun_app$l (less$ (fun_app$m ?v0 ?v1 ))(fun_app$m ?v0 ?v2 )))):named a312 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(fun_app$l (less$ (fun_app$m ?v0 ?v3 ))(fun_app$m ?v0 (suc$ ?v3 ))))(= (fun_app$l (less$ (fun_app$m ?v0 ?v1 ))(fun_app$m ?v0 ?v2 ))(fun_app$l (less$ ?v1 )?v2 )))):named a313 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$l (less$ ?v0 )?v0 ))):named a314 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (= ?v0 ?v1 ))(and (=> (fun_app$l (less$ ?v0 )?v1 )false )(=> (fun_app$l (less$ ?v1 )?v0 )false )))false )):named a315 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v0 )false )):named a316 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(not (= ?v1 ?v0 )))):named a317 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a318 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$l (less$ ?v3 )?v2 )(fun_app$l ?v0 ?v3 )))(fun_app$l ?v0 ?v2 )))(fun_app$l ?v0 ?v1 ))):named a319 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (not (fun_app$l ?v0 ?v2 ))(exists ((?v3 Nat$ ))(and (fun_app$l (less$ ?v3 )?v2 )(not (fun_app$l ?v0 ?v3 ))))))(fun_app$l ?v0 ?v1 ))):named a320 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_bool_fun_fun$ ))(=> (and (=> (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (fun_app$n ?v2 ?v1 )?v0 ))(and (=> (= ?v0 ?v1 )(fun_app$l (fun_app$n ?v2 ?v1 )?v0 ))(=> (fun_app$l (less$ ?v1 )?v0 )(fun_app$l (fun_app$n ?v2 ?v1 )?v0 ))))(fun_app$l (fun_app$n ?v2 ?v1 )?v0 ))):named a321 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v1 )?v0 )))):named a322 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$l (less$ ?v0 )?v0 ))):named a323 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$l (less$ ?v0 )?v0 ))):named a324 ))
(assert (! (forall ((?v0 Nat$ ))(exists ((?v1 Nat$ ))(fun_app$l (less$ ?v0 )?v1 ))):named a325 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(or (fun_app$l (less$ ?v0 )?v1 )(or (= ?v0 ?v1 )(fun_app$l (less$ ?v1 )?v0 )))):named a326 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (not (fun_app$l (less$ ?v0 )?v1 ))(= (not (fun_app$l (less$ ?v1 )?v0 ))(= ?v1 ?v0 )))):named a327 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (= ?v0 ?v1 ))(and (=> (fun_app$l (less$ ?v0 )?v1 )false )(=> (fun_app$l (less$ ?v1 )?v0 )false )))false )):named a328 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(not (fun_app$l (less$ ?v1 )?v0 )))):named a329 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a330 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a331 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(not (= ?v1 ?v0 )))):named a332 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(= (not (fun_app$l (less$ ?v1 )?v0 ))true ))):named a333 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Bool ))(=> (fun_app$l (less$ ?v0 )?v1 )(= (=> (fun_app$l (less$ ?v1 )?v0 )?v2 )true ))):named a334 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(= (= ?v0 ?v1 )false ))):named a335 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$l (less$ ?v0 )?v1 )(= (= ?v1 ?v0 )false ))):named a336 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v1 )?v0 ))false )):named a337 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v1 )?v0 ))false )):named a338 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v1 )?v0 ))false )):named a339 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v1 )?v2 ))(fun_app$l (less$ ?v0 )?v2 ))):named a340 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v1 )?v2 ))(fun_app$l (less$ ?v0 )?v2 ))):named a341 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v2 )?v0 ))(fun_app$l (less$ ?v2 )?v1 ))):named a342 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )(fun_app$m ?v1 ?v2 ))(and (fun_app$l (less$ ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$l (less$ ?v4 )?v5 )(fun_app$l (less$ (fun_app$m ?v1 ?v4 ))(fun_app$m ?v1 ?v5 ))))))(fun_app$l (less$ ?v0 )(fun_app$m ?v1 ?v3 )))):named a343 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_fun$ )(?v3 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(and (fun_app$l (less$ (fun_app$m ?v2 ?v1 ))?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$l (less$ ?v4 )?v5 )(fun_app$l (less$ (fun_app$m ?v2 ?v4 ))(fun_app$m ?v2 ?v5 ))))))(fun_app$l (less$ (fun_app$m ?v2 ?v0 ))?v3 ))):named a344 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$l (less$ ?v0 )?v2 ))):named a345 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat_nat_fun$ )(?v3 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(and (= (fun_app$m ?v2 ?v1 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$l (less$ ?v4 )?v5 )(fun_app$l (less$ (fun_app$m ?v2 ?v4 ))(fun_app$m ?v2 ?v5 ))))))(fun_app$l (less$ (fun_app$m ?v2 ?v0 ))?v3 ))):named a346 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$l (less$ ?v0 )?v1 )(=> (not false )(fun_app$l (less$ ?v1 )?v0 )))false )):named a347 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (= ?v0 ?v1 )(fun_app$l (less$ ?v1 )?v2 ))(fun_app$l (less$ ?v0 )?v2 ))):named a348 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(and (fun_app$l (less$ ?v2 )?v3 )(forall ((?v4 Nat$ )(?v5 Nat$ ))(=> (fun_app$l (less$ ?v4 )?v5 )(fun_app$l (less$ (fun_app$m ?v1 ?v4 ))(fun_app$m ?v1 ?v5 ))))))(fun_app$l (less$ ?v0 )(fun_app$m ?v1 ?v3 )))):named a349 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (forall ((?v2 Nat$ ))(=> (forall ((?v3 Nat$ ))(=> (fun_app$l (less$ ?v3 )?v2 )(fun_app$l ?v0 ?v3 )))(fun_app$l ?v0 ?v2 )))(fun_app$l ?v0 ?v1 ))):named a350 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (=> (fun_app$l (less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$l (less$ ?v1 )?v0 )false )))false )):named a351 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (fun_app$l (less$ ?v0 )?v1 ))(or (fun_app$l (less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a352 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$l (less$ ?v0 )?v1 )(fun_app$l (less$ ?v1 )?v0 )))):named a353 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less$ ?v0 )?v1 )(and (fun_app$l (less_eq$b ?v0 )?v1 )(not (= ?v1 ?v0 )))):pattern ((fun_app$l (less$ ?v0 )?v1 )))):named a354 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less$ ?v0 )?v1 )(and (fun_app$l (less_eq$b ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((fun_app$l (less$ ?v0 )?v1 )))):named a355 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$l (less$ ?v0 )?v1 )(and (fun_app$l (less_eq$b ?v0 )?v1 )(not (= ?v0 ?v1 )))):pattern ((fun_app$l (less$ ?v0 )?v1 )))):named a356 ))
(check-sat )
(get-unsat-core )
