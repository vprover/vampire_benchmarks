(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort A_b_option_fun$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_b_b_b_fun_fun_fun$ 0 )
(declare-sort B_option$ 0)
(declare-sort Color$ 0)
(declare-sort A_b_rbt$ 0)
(declare-fun none$ ()B_option$)
(declare-fun the$ (B_option$)B$)
(declare-fun some$ (B$ )B_option$)
(declare-fun r$ ()Color$)
(declare-fun b$ ()Color$)
(declare-fun empty$ ()A_b_rbt$)
(declare-fun select$ (A_b_rbt$)Color$)
(declare-fun selecta$ (A_b_rbt$)A_b_rbt$)
(declare-fun selectb$ (A_b_rbt$)A$)
(declare-fun selectc$ (A_b_rbt$)B$)
(declare-fun selectd$ (A_b_rbt$)A_b_rbt$)
(declare-fun branch$ (Color$ A_b_rbt$ A$ B$ A_b_rbt$ )A_b_rbt$)
(declare-fun f$ ()B_b_b_fun_fun$ )
(declare-fun k$ ()A$ )
(declare-fun t$ ()A_b_rbt$ )
(declare-fun v$ ()B$ )
(declare-fun uu$ ()A_b_b_b_fun_fun_fun$ )
(declare-fun dom$ (A_b_option_fun$ )A_set$ )
(declare-fun less$ ()A_a_bool_fun_fun$ )
(declare-fun member$ (A$ A_set$ )Bool )
(declare-fun fun_app$ (A_b_b_b_fun_fun_fun$ A$ )B_b_b_fun_fun$ )
(declare-fun fun_upd$ (A_b_option_fun$ A$ B_option$ )A_b_option_fun$ )
(declare-fun fun_app$a (B_b_fun$ B$ )B$ )
(declare-fun fun_app$b (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$c (A_b_option_fun$ A$ )B_option$ )
(declare-fun fun_app$d (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$e (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun rbt_lookup$ (A_a_bool_fun_fun$ A_b_rbt$ )A_b_option_fun$ )
(declare-fun rbt_insert_with_key$ (A_a_bool_fun_fun$ A_b_b_b_fun_fun_fun$ A$ B$ A_b_rbt$ )A_b_rbt$ )
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$ uu$ ?v0 )f$ ):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (not (= (rbt_lookup$ less$ (rbt_insert_with_key$ less$ uu$ k$ v$ t$ ))(fun_upd$ (rbt_lookup$ less$ t$ )k$ (some$ (ite (member$ k$ (dom$ (rbt_lookup$ less$ t$ )))(fun_app$a (fun_app$b f$ (the$ (fun_app$c (rbt_lookup$ less$ t$ )k$ )))v$ )v$ ))))):named a1 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (fun_app$d (fun_app$e less$ ?v0 )?v1 ))(or (fun_app$d (fun_app$e less$ ?v1 )?v0 )(= ?v0 ?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(= (not (= ?v0 ?v1 ))(or (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v0 )))):named a3 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )false )(and (=> (= ?v0 ?v1 )false )(=> (fun_app$d (fun_app$e less$ ?v1 )?v0 )false )))false )):named a4 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(=> (not false )(fun_app$d (fun_app$e less$ ?v1 )?v0 )))false )):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v2 ))(fun_app$d (fun_app$e less$ ?v0 )?v2 ))):named a6 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v2 ))(fun_app$d (fun_app$e less$ ?v0 )?v2 ))):named a7 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v2 )?v0 ))(fun_app$d (fun_app$e less$ ?v2 )?v1 ))):named a8 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v0 ))false )):named a9 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v0 ))false )):named a10 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(fun_app$d (fun_app$e less$ ?v1 )?v0 ))false )):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A$ ))(=> (and (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= ?v1 ?v2 ))(fun_app$d (fun_app$e less$ ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= (= ?v1 ?v0 )false ))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= (= ?v0 ?v1 )false ))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 Bool ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= (=> (fun_app$d (fun_app$e less$ ?v1 )?v0 )?v2 )true ))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(= (not (fun_app$d (fun_app$e less$ ?v1 )?v0 ))true ))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(not (fun_app$d (fun_app$e less$ ?v1 )?v0 )))):named a17 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ ))(=> (fun_app$d (fun_app$e less$ ?v0 )?v1 )(not (= ?v0 ?v1 )))):named a18 ))
(check-sat )
(get-unsat-core )
