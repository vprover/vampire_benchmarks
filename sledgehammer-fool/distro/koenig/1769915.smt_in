(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort Nat$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort Int_bool_fun$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort Nat_stream$ 0)
(declare-fun shd$ (Nat_stream$)Nat$)
(declare-fun stl$ (Nat_stream$)Nat_stream$)
(declare-fun sCons$ (Nat$ Nat_stream$ )Nat_stream$)
(declare-fun m$ ()Nat$ )
(declare-fun n$ ()Nat$ )
(declare-fun ns$ (Nat$ )Nat_stream$ )
(declare-fun xs$ ()Nat_stream$ )
(declare-fun one$ ()Nat$ )
(declare-fun less$ (Nat$ )Nat_bool_fun$ )
(declare-fun ones$ ()Nat_stream$ )
(declare-fun plus$ (Nat_stream$ Nat_stream$ )Nat_stream$ )
(declare-fun twos$ ()Nat_stream$ )
(declare-fun zero$ ()Nat$ )
(declare-fun times$ (Nat$ )Nat_nat_fun$ )
(declare-fun of_nat$ (Nat$ )Nat$ )
(declare-fun scalar$ (Nat$ Nat_stream$ )Nat_stream$ )
(declare-fun times$a (Int Int )Int )
(declare-fun fun_app$ (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun less_eq$ (Nat$ )Nat_bool_fun$ )
(declare-fun of_bool$ (Bool )Nat$ )
(declare-fun of_nat$a (Nat$ )Int )
(declare-fun fun_app$a (Nat_bool_fun$ Nat$ )Bool )
(declare-fun fun_app$b (Int_bool_fun$ Int )Bool )
(declare-fun of_bool$a (Bool )Int )
(assert (! (not (= (scalar$ (fun_app$ (times$ n$ )m$ )xs$ )(scalar$ n$ (scalar$ m$ xs$ )))):named a0 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (ns$ ?v0 )(scalar$ ?v0 ones$ )):pattern ((ns$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v2 )?v3 ))(fun_app$ (times$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v3 )))):named a2 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(= (times$a (times$a ?v0 ?v1 )(times$a ?v2 ?v3 ))(times$a (times$a ?v0 ?v2 )(times$a ?v1 ?v3 )))):named a3 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))?v2 )(fun_app$ (times$ (fun_app$ (times$ ?v0 )?v2 ))?v1 ))):named a4 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (times$a (times$a ?v0 ?v1 )?v2 )(times$a (times$a ?v0 ?v2 )?v1 ))):named a5 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v2 )?v3 ))(fun_app$ (times$ ?v2 )(fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))?v3 )))):named a6 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(= (times$a (times$a ?v0 ?v1 )(times$a ?v2 ?v3 ))(times$a ?v2 (times$a (times$a ?v0 ?v1 )?v3 )))):named a7 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(= (fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v2 )?v3 ))(fun_app$ (times$ ?v0 )(fun_app$ (times$ ?v1 )(fun_app$ (times$ ?v2 )?v3 ))))):named a8 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(= (times$a (times$a ?v0 ?v1 )(times$a ?v2 ?v3 ))(times$a ?v0 (times$a ?v1 (times$a ?v2 ?v3 ))))):named a9 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))?v2 )(fun_app$ (times$ ?v0 )(fun_app$ (times$ ?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (times$a (times$a ?v0 ?v1 )?v2 )(times$a ?v0 (times$a ?v1 ?v2 )))):named a11 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))?v2 )(fun_app$ (times$ ?v0 )(fun_app$ (times$ ?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (times$a (times$a ?v0 ?v1 )?v2 )(times$a ?v0 (times$a ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (times$ ?v0 )(fun_app$ (times$ ?v1 )?v2 ))(fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))?v2 ))):named a14 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (times$a ?v0 (times$a ?v1 ?v2 ))(times$a (times$a ?v0 ?v1 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (times$ (fun_app$ (times$ ?v0 )?v1 ))?v2 )(fun_app$ (times$ ?v0 )(fun_app$ (times$ ?v1 )?v2 )))):named a16 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (times$a (times$a ?v0 ?v1 )?v2 )(times$a ?v0 (times$a ?v1 ?v2 )))):named a17 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (times$ ?v0 )(fun_app$ (times$ ?v1 )?v2 ))(fun_app$ (times$ ?v1 )(fun_app$ (times$ ?v0 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (times$a ?v0 (times$a ?v1 ?v2 ))(times$a ?v1 (times$a ?v0 ?v2 )))):named a19 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$ (times$ ?v0 )(fun_app$ (times$ ?v1 )?v2 ))(fun_app$ (times$ ?v1 )(fun_app$ (times$ ?v0 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (times$a ?v0 (times$a ?v1 ?v2 ))(times$a ?v1 (times$a ?v0 ?v2 )))):named a21 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$ (times$ ?v0 )?v1 )(fun_app$ (times$ ?v1 )?v0 ))):named a22 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (times$a ?v0 ?v1 )(times$a ?v1 ?v0 ))):named a23 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$ (times$ ?v0 )?v1 )(fun_app$ (times$ ?v1 )?v0 ))):named a24 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (times$a ?v0 ?v1 )(times$a ?v1 ?v0 ))):named a25 ))
(assert (! (= (stl$ ones$ )ones$ ):named a26 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ one$ )?v0 )?v0 )):named a27 ))
(assert (! (forall ((?v0 Int ))(= (* 1 ?v0 )?v0 )):named a28 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ one$ )?v0 )?v0 )):named a29 ))
(assert (! (forall ((?v0 Int ))(= (* 1 ?v0 )?v0 )):named a30 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )one$ )?v0 )):named a31 ))
(assert (! (forall ((?v0 Int ))(= (* ?v0 1 )?v0 )):named a32 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )one$ )?v0 )):named a33 ))
(assert (! (forall ((?v0 Int ))(= (* ?v0 1 )?v0 )):named a34 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (of_nat$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ (of_nat$ ?v0 ))(of_nat$ ?v1 )))):named a35 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (of_nat$a (fun_app$ (times$ ?v0 )?v1 ))(times$a (of_nat$a ?v0 )(of_nat$a ?v1 )))):named a36 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$ ?v0 )(of_nat$ ?v1 ))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$a ?v0 )(of_nat$a ?v1 ))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= one$ (fun_app$ (times$ ?v0 )?v1 ))(and (= ?v0 one$ )(= ?v1 one$ )))):named a39 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ (times$ ?v0 )?v1 )one$ )(and (= ?v0 one$ )(= ?v1 one$ )))):named a40 ))
(assert (! (= (of_nat$ one$ )one$ ):named a41 ))
(assert (! (= (of_nat$a one$ )1 ):named a42 ))
(assert (! (forall ((?v0 Nat$ ))(= (= one$ ?v0 )(= ?v0 one$ ))):named a43 ))
(assert (! (forall ((?v0 Int ))(= (= 1 ?v0 )(= ?v0 1 ))):named a44 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )one$ )?v0 )):named a45 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ one$ )?v0 )?v0 )):named a46 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )one$ )?v0 )):named a47 ))
(assert (! (forall ((?v0 Int ))(= (* ?v0 1 )?v0 )):named a48 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ one$ )?v0 )?v0 )):named a49 ))
(assert (! (forall ((?v0 Int ))(= (* 1 ?v0 )?v0 )):named a50 ))
(assert (! (= (stl$ twos$ )twos$ ):named a51 ))
(assert (! (forall ((?v0 Nat_stream$ )(?v1 Nat_stream$ ))(= (stl$ (plus$ ?v0 ?v1 ))(plus$ (stl$ ?v0 )(stl$ ?v1 )))):named a52 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (times$a (of_nat$a ?v0 )(of_nat$a ?v1 ))(of_nat$a (fun_app$ (times$ ?v0 )?v1 )))):named a53 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (times$a (of_nat$a ?v0 )(of_nat$a ?v1 ))(of_nat$a (fun_app$ (times$ ?v0 )?v1 )))):named a54 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (times$ ?v0 )zero$ )zero$ ):pattern ((times$ ?v0 )))):named a55 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ (times$ ?v0 )?v1 )zero$ )(or (= ?v0 zero$ )(= ?v1 zero$ )))):named a56 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$ (times$ ?v0 )?v1 )(fun_app$ (times$ ?v0 )?v2 ))(or (= ?v1 ?v2 )(= ?v0 zero$ )))):named a57 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$ (times$ ?v0 )?v1 )(fun_app$ (times$ ?v2 )?v1 ))(or (= ?v0 ?v2 )(= ?v1 zero$ )))):named a58 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$ ?v0 )zero$ )(= ?v0 zero$ ))):named a59 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$a ?v0 )0 )(= ?v0 zero$ ))):named a60 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ (of_nat$ ?v0 ))(= zero$ ?v0 ))):named a61 ))
(assert (! (forall ((?v0 Nat$ ))(= (= 0 (of_nat$a ?v0 ))(= zero$ ?v0 ))):named a62 ))
(assert (! (= (of_nat$ zero$ )zero$ ):named a63 ))
(assert (! (= (of_nat$a zero$ )0 ):named a64 ))
(assert (! (= (of_nat$a zero$ )0 ):named a65 ))
(assert (! (= (of_nat$a one$ )1 ):named a66 ))
(assert (! (forall ((?v0 Bool )(?v1 Nat$ )(?v2 Nat$ ))(= (ite ?v0 (of_nat$a ?v1 )(of_nat$a ?v2 ))(of_nat$a (ite ?v0 ?v1 ?v2 )))):named a67 ))
(assert (! (forall ((?v0 Nat$ ))(= (= (of_nat$a ?v0 )0 )(= ?v0 zero$ ))):named a68 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$a ?v0 )(of_nat$a ?v1 ))(= ?v0 ?v1 ))):named a69 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (of_nat$a ?v0 )(of_nat$a ?v1 ))(= ?v0 ?v1 ))):named a70 ))
(assert (! (forall ((?v0 Int ))(= (* 0 ?v0 )0 )):named a71 ))
(assert (! (forall ((?v0 Int ))(= (* ?v0 0 )0 )):named a72 ))
(assert (! (forall ((?v0 Nat$ ))(= (= zero$ ?v0 )(= ?v0 zero$ ))):named a73 ))
(assert (! (forall ((?v0 Int ))(= (= 0 ?v0 )(= ?v0 0 ))):named a74 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ zero$ )?v0 )zero$ )):named a75 ))
(assert (! (forall ((?v0 Int ))(= (* 0 ?v0 )0 )):named a76 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )zero$ )zero$ )):named a77 ))
(assert (! (forall ((?v0 Int ))(= (* ?v0 0 )0 )):named a78 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$ (times$ zero$ )?v0 )zero$ ):pattern ((fun_app$ (times$ zero$ )?v0 )))):named a79 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= ?v0 (fun_app$ (times$ ?v0 )?v1 ))(or (= ?v1 one$ )(= ?v0 zero$ )))):named a80 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (= (times$a ?v0 ?v1 )?v0 )(or (= ?v0 0 )(= ?v1 1 )))):named a81 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (= (times$a ?v0 ?v1 )?v1 )(or (= ?v1 0 )(= ?v0 1 )))):named a82 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (= ?v0 (times$a ?v0 ?v1 ))(or (= ?v0 0 )(= ?v1 1 )))):named a83 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (= ?v0 (times$a ?v1 ?v0 ))(or (= ?v0 0 )(= ?v1 1 )))):named a84 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ zero$ )?v0 )zero$ )):named a85 ))
(assert (! (forall ((?v0 Int ))(= (* 0 ?v0 )0 )):named a86 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$ (times$ ?v0 )zero$ )zero$ )):named a87 ))
(assert (! (forall ((?v0 Int ))(= (* ?v0 0 )0 )):named a88 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (= (fun_app$ (times$ ?v0 )?v1 )zero$ )(or (= ?v0 zero$ )(= ?v1 zero$ )))):named a89 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (= (times$a ?v0 ?v1 )0 )(or (= ?v0 0 )(= ?v1 0 )))):named a90 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (= (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(or (= ?v0 0 )(= ?v1 ?v2 )))):named a91 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (= (times$a ?v0 ?v1 )(times$a ?v2 ?v1 ))(or (= ?v1 0 )(= ?v0 ?v2 )))):named a92 ))
(assert (! (forall ((?v0 Nat$ ))(=> (and (=> (= ?v0 zero$ )false )(=> (not (= ?v0 zero$ ))false ))false )):named a93 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (= (fun_app$ (times$ ?v0 )?v1 )zero$ )(or (= ?v0 zero$ )(= ?v1 zero$ )))):named a94 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (= (times$a ?v0 ?v1 )0 )(or (= ?v0 0 )(= ?v1 0 )))):named a95 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (not (= (fun_app$ (times$ ?v0 )?v1 )zero$ ))(and (not (= ?v0 zero$ ))(not (= ?v1 zero$ ))))):named a96 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (not (= (times$a ?v0 ?v1 )0 ))(and (not (= ?v0 0 ))(not (= ?v1 0 ))))):named a97 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (not (= ?v0 zero$ ))(not (= ?v1 zero$ )))(not (= (fun_app$ (times$ ?v0 )?v1 )zero$ )))):named a98 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (not (= ?v0 0 ))(not (= ?v1 0 )))(not (= (times$a ?v0 ?v1 )0 )))):named a99 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (not (= ?v0 0 ))(= (= (times$a ?v1 ?v0 )(times$a ?v2 ?v0 ))(= ?v1 ?v2 )))):named a100 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (not (= ?v0 0 ))(= (= (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(= ?v1 ?v2 )))):named a101 ))
(assert (! (not (= zero$ one$ )):named a102 ))
(assert (! (not (= 0 1 )):named a103 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (= (fun_app$ (times$ ?v0 )?v1 )(fun_app$ (times$ ?v0 )?v2 ))(or (= ?v0 zero$ )(= ?v1 ?v2 )))):named a104 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Bool ))(= (fun_app$a ?v0 (of_bool$ ?v1 ))(not (or (and ?v1 (not (fun_app$a ?v0 one$ )))(and (not ?v1 )(not (fun_app$a ?v0 zero$ ))))))):named a105 ))
(assert (! (forall ((?v0 Int_bool_fun$ )(?v1 Bool ))(= (fun_app$b ?v0 (of_bool$a ?v1 ))(not (or (and ?v1 (not (fun_app$b ?v0 1 )))(and (not ?v1 )(not (fun_app$b ?v0 0 ))))))):named a106 ))
(assert (! (forall ((?v0 Bool ))(! (= (of_bool$ ?v0 )(ite ?v0 one$ zero$ )):pattern ((of_bool$ ?v0 )))):named a107 ))
(assert (! (forall ((?v0 Bool ))(! (= (of_bool$a ?v0 )(ite ?v0 1 0 )):pattern ((of_bool$a ?v0 )))):named a108 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Bool ))(= (fun_app$a ?v0 (of_bool$ ?v1 ))(and (=> ?v1 (fun_app$a ?v0 one$ ))(=> (not ?v1 )(fun_app$a ?v0 zero$ ))))):named a109 ))
(assert (! (forall ((?v0 Int_bool_fun$ )(?v1 Bool ))(= (fun_app$b ?v0 (of_bool$a ?v1 ))(and (=> ?v1 (fun_app$b ?v0 1 ))(=> (not ?v1 )(fun_app$b ?v0 0 ))))):named a110 ))
(assert (! (= (of_bool$ true )one$ ):named a111 ))
(assert (! (= (of_bool$a true )1 ):named a112 ))
(assert (! (= (of_bool$ false )zero$ ):named a113 ))
(assert (! (= (of_bool$a false )0 ):named a114 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(= (= (of_bool$a ?v0 )(of_bool$a ?v1 ))(= ?v0 ?v1 ))):named a115 ))
(assert (! (forall ((?v0 Bool )(?v1 Bool ))(= (= (of_bool$ ?v0 )(of_bool$ ?v1 ))(= ?v0 ?v1 ))):named a116 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (less_eq$ (of_nat$ ?v0 ))zero$ )(= ?v0 zero$ ))):named a117 ))
(assert (! (forall ((?v0 Nat$ ))(= (<= (of_nat$a ?v0 )0 )(= ?v0 zero$ ))):named a118 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less$ ?v0 )zero$ )false ):pattern ((less$ ?v0 )))):named a119 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (fun_app$a (less$ zero$ )?v0 ))(= ?v0 zero$ ))):named a120 ))
(assert (! (forall ((?v0 Nat$ ))(= (not (= ?v0 zero$ ))(fun_app$a (less$ zero$ )?v0 ))):named a121 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less_eq$ zero$ )?v0 )):named a122 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less_eq$ ?v0 )zero$ )(= ?v0 zero$ )):pattern ((less_eq$ ?v0 )))):named a123 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$a (less_eq$ (of_nat$ ?v0 ))(of_nat$ ?v1 ))(fun_app$a (less_eq$ ?v0 )?v1 ))):named a124 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (<= (of_nat$a ?v0 )(of_nat$a ?v1 ))(fun_app$a (less_eq$ ?v0 )?v1 ))):named a125 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$a (less$ (of_nat$ ?v0 ))(of_nat$ ?v1 ))(fun_app$a (less$ ?v0 )?v1 ))):named a126 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (< (of_nat$a ?v0 )(of_nat$a ?v1 ))(fun_app$a (less$ ?v0 )?v1 ))):named a127 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v0 )?v2 ))(=> (fun_app$a (less$ zero$ )?v0 )(fun_app$a (less_eq$ ?v1 )?v2 )))):named a128 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v2 )?v1 ))(=> (fun_app$a (less$ zero$ )?v1 )(fun_app$a (less_eq$ ?v0 )?v2 )))):named a129 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$a (less$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v2 )?v1 ))(and (fun_app$a (less$ zero$ )?v1 )(fun_app$a (less$ ?v0 )?v2 )))):named a130 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (fun_app$a (less$ zero$ )(fun_app$ (times$ ?v0 )?v1 ))(and (fun_app$a (less$ zero$ )?v0 )(fun_app$a (less$ zero$ )?v1 )))):named a131 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(= (fun_app$a (less$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v0 )?v2 ))(and (fun_app$a (less$ zero$ )?v0 )(fun_app$a (less$ ?v1 )?v2 )))):named a132 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (less$ ?v0 )one$ )(= ?v0 zero$ ))):named a133 ))
(assert (! (forall ((?v0 Nat$ ))(= (fun_app$a (less$ zero$ )(of_nat$ ?v0 ))(fun_app$a (less$ zero$ )?v0 ))):named a134 ))
(assert (! (forall ((?v0 Nat$ ))(= (< 0 (of_nat$a ?v0 ))(fun_app$a (less$ zero$ )?v0 ))):named a135 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (fun_app$a (less$ zero$ )?v0 )(= (fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v0 )?v2 ))(fun_app$a (less_eq$ ?v1 )?v2 )))):named a136 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$a (less$ ?v0 )?v1 )(fun_app$a (less$ (of_nat$ ?v0 ))(of_nat$ ?v1 )))):named a137 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$a (less$ ?v0 )?v1 )(< (of_nat$a ?v0 )(of_nat$a ?v1 )))):named a138 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$a (less$ (of_nat$ ?v0 ))(of_nat$ ?v1 ))(fun_app$a (less$ ?v0 )?v1 ))):named a139 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (< (of_nat$a ?v0 )(of_nat$a ?v1 ))(fun_app$a (less$ ?v0 )?v1 ))):named a140 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (<= (of_nat$a ?v0 )(of_nat$a ?v1 ))(fun_app$a (less_eq$ ?v0 )?v1 ))):named a141 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (<= (of_nat$a ?v0 )(of_nat$a ?v1 ))(fun_app$a (less_eq$ ?v0 )?v1 ))):named a142 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (< (of_nat$a ?v0 )(of_nat$a ?v1 ))(fun_app$a (less$ ?v0 )?v1 ))):named a143 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(= (< (of_nat$a ?v0 )(of_nat$a ?v1 ))(fun_app$a (less$ ?v0 )?v1 ))):named a144 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less_eq$ ?v0 )(fun_app$ (times$ ?v0 )?v0 ))):named a145 ))
(assert (! (forall ((?v0 Nat$ ))(fun_app$a (less_eq$ ?v0 )(fun_app$ (times$ ?v0 )(fun_app$ (times$ ?v0 )?v0 )))):named a146 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (fun_app$a (less_eq$ ?v0 )?v1 )(fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v2 )))):named a147 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (fun_app$a (less_eq$ ?v0 )?v1 )(fun_app$a (less_eq$ (fun_app$ (times$ ?v2 )?v0 ))(fun_app$ (times$ ?v2 )?v1 )))):named a148 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$a (less_eq$ ?v0 )?v1 )(fun_app$a (less_eq$ ?v2 )?v3 ))(fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v3 )))):named a149 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (not (= ?v0 ?v1 ))(and (=> (< ?v0 ?v1 )false )(=> (< ?v1 ?v0 )false )))false )):named a150 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (< (times$a ?v0 ?v1 )(times$a ?v2 ?v1 ))(and (=> (<= 0 ?v1 )(< ?v0 ?v2 ))(=> (<= ?v1 0 )(< ?v2 ?v0 ))))):named a151 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (< (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(and (=> (<= 0 ?v0 )(< ?v1 ?v2 ))(=> (<= ?v0 0 )(< ?v2 ?v1 ))))):named a152 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (<= (times$a ?v0 ?v1 )(times$a ?v2 ?v1 ))(and (=> (< 0 ?v1 )(<= ?v0 ?v2 ))(=> (< ?v1 0 )(<= ?v2 ?v0 ))))):named a153 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (<= (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(and (=> (< 0 ?v0 )(<= ?v1 ?v2 ))(=> (< ?v0 0 )(<= ?v2 ?v1 ))))):named a154 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v2 )?v1 ))(fun_app$a (less_eq$ zero$ )?v1 ))(fun_app$a (less$ ?v0 )?v2 ))):named a155 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< (times$a ?v0 ?v1 )(times$a ?v2 ?v1 ))(<= 0 ?v1 ))(< ?v0 ?v2 ))):named a156 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v0 )?v2 ))(fun_app$a (less_eq$ zero$ )?v0 ))(fun_app$a (less$ ?v1 )?v2 ))):named a157 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(<= 0 ?v0 ))(< ?v1 ?v2 ))):named a158 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v2 )?v1 ))(fun_app$a (less_eq$ zero$ )?v1 ))(fun_app$a (less$ ?v0 )?v2 ))):named a159 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< (times$a ?v0 ?v1 )(times$a ?v2 ?v1 ))(<= 0 ?v1 ))(< ?v0 ?v2 ))):named a160 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v0 )?v2 ))(fun_app$a (less_eq$ zero$ )?v0 ))(fun_app$a (less$ ?v1 )?v2 ))):named a161 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(<= 0 ?v0 ))(< ?v1 ?v2 ))):named a162 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$a (less$ ?v0 )?v1 )(and (fun_app$a (less$ ?v2 )?v3 )(and (fun_app$a (less$ zero$ )?v1 )(fun_app$a (less_eq$ zero$ )?v2 ))))(fun_app$a (less$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v3 )))):named a163 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(=> (and (< ?v0 ?v1 )(and (< ?v2 ?v3 )(and (< 0 ?v1 )(<= 0 ?v2 ))))(< (times$a ?v0 ?v2 )(times$a ?v1 ?v3 )))):named a164 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$a (less$ ?v0 )?v1 )(and (fun_app$a (less$ ?v2 )?v3 )(and (fun_app$a (less_eq$ zero$ )?v0 )(fun_app$a (less_eq$ zero$ )?v2 ))))(fun_app$a (less$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v3 )))):named a165 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(=> (and (< ?v0 ?v1 )(and (< ?v2 ?v3 )(and (<= 0 ?v0 )(<= 0 ?v2 ))))(< (times$a ?v0 ?v2 )(times$a ?v1 ?v3 )))):named a166 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$a (less$ ?v0 )?v1 )(and (fun_app$a (less_eq$ ?v2 )?v3 )(and (fun_app$a (less_eq$ zero$ )?v0 )(fun_app$a (less$ zero$ )?v2 ))))(fun_app$a (less$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v3 )))):named a167 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(=> (and (< ?v0 ?v1 )(and (<= ?v2 ?v3 )(and (<= 0 ?v0 )(< 0 ?v2 ))))(< (times$a ?v0 ?v2 )(times$a ?v1 ?v3 )))):named a168 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (< ?v0 0 )(= (<= (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(<= ?v2 ?v1 )))):named a169 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (< 0 ?v0 )(= (<= (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(<= ?v1 ?v2 )))):named a170 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v2 )?v1 ))(fun_app$a (less$ zero$ )?v1 ))(fun_app$a (less_eq$ ?v0 )?v2 ))):named a171 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (<= (times$a ?v0 ?v1 )(times$a ?v2 ?v1 ))(< 0 ?v1 ))(<= ?v0 ?v2 ))):named a172 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v1 ))(fun_app$ (times$ ?v0 )?v2 ))(fun_app$a (less$ zero$ )?v0 ))(fun_app$a (less_eq$ ?v1 )?v2 ))):named a173 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (<= (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(< 0 ?v0 ))(<= ?v1 ?v2 ))):named a174 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$a (less_eq$ ?v0 )?v1 )(and (fun_app$a (less$ ?v2 )?v3 )(and (fun_app$a (less$ zero$ )?v0 )(fun_app$a (less_eq$ zero$ )?v2 ))))(fun_app$a (less$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v3 )))):named a175 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(=> (and (<= ?v0 ?v1 )(and (< ?v2 ?v3 )(and (< 0 ?v0 )(<= 0 ?v2 ))))(< (times$a ?v0 ?v2 )(times$a ?v1 ?v3 )))):named a176 ))
(assert (! (<= 0 0 ):named a177 ))
(assert (! (= (< 0 0 )false ):named a178 ))
(assert (! (= (<= 0 0 )true ):named a179 ))
(assert (! (forall ((?v0 Int ))(= (<= 1 ?v0 )(< 0 ?v0 ))):named a180 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$a (less_eq$ zero$ )?v0 )true ):pattern ((fun_app$a (less_eq$ zero$ )?v0 )))):named a181 ))
(assert (! (forall ((?v0 Nat$ ))(=> (=> (= ?v0 zero$ )false )(fun_app$a (less$ zero$ )?v0 ))):named a182 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (fun_app$a (less$ ?v0 )?v1 )(not (= ?v1 zero$ )))):named a183 ))
(assert (! (forall ((?v0 Nat$ ))(=> (fun_app$a (less$ ?v0 )zero$ )false )):named a184 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (not (fun_app$a ?v0 zero$ ))(fun_app$a ?v0 ?v1 ))(exists ((?v2 Nat$ ))(and (fun_app$a (less_eq$ ?v2 )?v1 )(and (forall ((?v3 Nat$ ))(=> (fun_app$a (less$ ?v3 )?v2 )(not (fun_app$a ?v0 ?v3 ))))(fun_app$a ?v0 ?v2 )))))):named a185 ))
(assert (! (forall ((?v0 Nat_bool_fun$ )(?v1 Nat$ ))(=> (and (fun_app$a ?v0 zero$ )(forall ((?v2 Nat$ ))(=> (and (fun_app$a (less$ zero$ )?v2 )(not (fun_app$a ?v0 ?v2 )))(exists ((?v3 Nat$ ))(and (fun_app$a (less$ ?v3 )?v2 )(not (fun_app$a ?v0 ?v3 )))))))(fun_app$a ?v0 ?v1 ))):named a186 ))
(assert (! (forall ((?v0 Nat$ ))(not (fun_app$a (less$ ?v0 )zero$ ))):named a187 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (<= ?v0 (times$a ?v0 ?v1 ))(and (=> (< 0 ?v0 )(<= 1 ?v1 ))(=> (< ?v0 0 )(<= ?v1 1 ))))):named a188 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (<= ?v0 (times$a ?v1 ?v0 ))(and (=> (< 0 ?v0 )(<= 1 ?v1 ))(=> (< ?v0 0 )(<= ?v1 1 ))))):named a189 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (<= (times$a ?v0 ?v1 )?v0 )(and (=> (< 0 ?v0 )(<= ?v1 1 ))(=> (< ?v0 0 )(<= 1 ?v1 ))))):named a190 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (<= (times$a ?v0 ?v1 )?v1 )(and (=> (< 0 ?v1 )(<= ?v0 1 ))(=> (< ?v1 0 )(<= 1 ?v0 ))))):named a191 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (< ?v0 (times$a ?v0 ?v1 ))(and (=> (<= 0 ?v0 )(< 1 ?v1 ))(=> (<= ?v0 0 )(< ?v1 1 ))))):named a192 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (< ?v0 (times$a ?v1 ?v0 ))(and (=> (<= 0 ?v0 )(< 1 ?v1 ))(=> (<= ?v0 0 )(< ?v1 1 ))))):named a193 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (< (times$a ?v0 ?v1 )?v0 )(and (=> (<= 0 ?v0 )(< ?v1 1 ))(=> (<= ?v0 0 )(< 1 ?v1 ))))):named a194 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (< (times$a ?v0 ?v1 )?v1 )(and (=> (<= 0 ?v1 )(< ?v0 1 ))(=> (<= ?v1 0 )(< 1 ?v0 ))))):named a195 ))
(assert (! (forall ((?v0 Int ))(=> (< 0 ?v0 )(exists ((?v1 Nat$ ))(and (fun_app$a (less$ zero$ )?v1 )(= ?v0 (of_nat$a ?v1 )))))):named a196 ))
(assert (! (forall ((?v0 Nat$ ))(= (< 0 (of_nat$a ?v0 ))(fun_app$a (less$ zero$ )?v0 ))):named a197 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Nat$ ))(=> (and (< ?v0 ?v1 )(fun_app$a (less$ zero$ )?v2 ))(< (times$a (of_nat$a ?v2 )?v0 )(times$a (of_nat$a ?v2 )?v1 )))):named a198 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (< (times$a ?v0 ?v1 )(times$a ?v2 ?v1 ))(or (and (< 0 ?v1 )(< ?v0 ?v2 ))(and (< ?v1 0 )(< ?v2 ?v0 ))))):named a199 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(= (< (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(or (and (< 0 ?v0 )(< ?v1 ?v2 ))(and (< ?v0 0 )(< ?v2 ?v1 ))))):named a200 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (< (times$a ?v0 ?v1 )0 )(or (and (< 0 ?v0 )(< ?v1 0 ))(and (< ?v0 0 )(< 0 ?v1 ))))):named a201 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (< 0 (times$a ?v0 ?v1 ))(or (and (< 0 ?v0 )(< 0 ?v1 ))(and (< ?v0 0 )(< ?v1 0 ))))):named a202 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< ?v0 ?v1 )(< ?v2 0 ))(< (times$a ?v1 ?v2 )(times$a ?v0 ?v2 )))):named a203 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< ?v0 ?v1 )(< ?v2 0 ))(< (times$a ?v2 ?v1 )(times$a ?v2 ?v0 )))):named a204 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less$ ?v0 )?v1 )(fun_app$a (less$ zero$ )?v2 ))(fun_app$a (less$ (fun_app$ (times$ ?v2 )?v0 ))(fun_app$ (times$ ?v2 )?v1 )))):named a205 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< ?v0 ?v1 )(< 0 ?v2 ))(< (times$a ?v2 ?v0 )(times$a ?v2 ?v1 )))):named a206 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less$ ?v0 )?v1 )(fun_app$a (less$ zero$ )?v2 ))(fun_app$a (less$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v2 )))):named a207 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< ?v0 ?v1 )(< 0 ?v2 ))(< (times$a ?v0 ?v2 )(times$a ?v1 ?v2 )))):named a208 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less$ ?v0 )?v1 )(fun_app$a (less$ zero$ )?v2 ))(fun_app$a (less$ (fun_app$ (times$ ?v2 )?v0 ))(fun_app$ (times$ ?v2 )?v1 )))):named a209 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (< ?v0 ?v1 )(< 0 ?v2 ))(< (times$a ?v2 ?v0 )(times$a ?v2 ?v1 )))):named a210 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (< ?v0 0 )(< ?v1 0 ))(< 0 (times$a ?v0 ?v1 )))):named a211 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$a (less$ ?v0 )zero$ )(fun_app$a (less$ zero$ )?v1 ))(fun_app$a (less$ (fun_app$ (times$ ?v0 )?v1 ))zero$ ))):named a212 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (< ?v0 0 )(< 0 ?v1 ))(< (times$a ?v0 ?v1 )0 ))):named a213 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (< ?v0 0 )(= (< (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(< ?v2 ?v1 )))):named a214 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$a (less$ zero$ )(fun_app$ (times$ ?v0 )?v1 ))(fun_app$a (less$ zero$ )?v1 ))(fun_app$a (less$ zero$ )?v0 ))):named a215 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (< 0 (times$a ?v0 ?v1 ))(< 0 ?v1 ))(< 0 ?v0 ))):named a216 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$a (less$ zero$ )(fun_app$ (times$ ?v0 )?v1 ))(fun_app$a (less$ zero$ )?v0 ))(fun_app$a (less$ zero$ )?v1 ))):named a217 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (< 0 (times$a ?v0 ?v1 ))(< 0 ?v0 ))(< 0 ?v1 ))):named a218 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$a (less$ zero$ )?v0 )(fun_app$a (less$ ?v1 )zero$ ))(fun_app$a (less$ (fun_app$ (times$ ?v1 )?v0 ))zero$ ))):named a219 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (< 0 ?v0 )(< ?v1 0 ))(< (times$a ?v1 ?v0 )0 ))):named a220 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$a (less$ zero$ )?v0 )(fun_app$a (less$ ?v1 )zero$ ))(fun_app$a (less$ (fun_app$ (times$ ?v0 )?v1 ))zero$ ))):named a221 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (< 0 ?v0 )(< ?v1 0 ))(< (times$a ?v0 ?v1 )0 ))):named a222 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (and (fun_app$a (less$ zero$ )?v0 )(fun_app$a (less$ zero$ )?v1 ))(fun_app$a (less$ zero$ )(fun_app$ (times$ ?v0 )?v1 )))):named a223 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (and (< 0 ?v0 )(< 0 ?v1 ))(< 0 (times$a ?v0 ?v1 )))):named a224 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (< 0 ?v0 )(= (< (times$a ?v0 ?v1 )(times$a ?v0 ?v2 ))(< ?v1 ?v2 )))):named a225 ))
(assert (! (forall ((?v0 Int ))(not (< (times$a ?v0 ?v0 )0 ))):named a226 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (<= (times$a ?v0 ?v1 )0 )(or (and (<= 0 ?v0 )(<= ?v1 0 ))(and (<= ?v0 0 )(<= 0 ?v1 ))))):named a227 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(= (<= 0 (times$a ?v0 ?v1 ))(or (and (<= 0 ?v0 )(<= 0 ?v1 ))(and (<= ?v0 0 )(<= ?v1 0 ))))):named a228 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(=> (or (and (fun_app$a (less_eq$ zero$ )?v0 )(fun_app$a (less_eq$ ?v1 )zero$ ))(and (fun_app$a (less_eq$ ?v0 )zero$ )(fun_app$a (less_eq$ zero$ )?v1 )))(fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v1 ))zero$ ))):named a229 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (or (and (<= 0 ?v0 )(<= ?v1 0 ))(and (<= ?v0 0 )(<= 0 ?v1 )))(<= (times$a ?v0 ?v1 )0 ))):named a230 ))
(assert (! (forall ((?v0 Int )(?v1 Int ))(=> (or (and (<= 0 ?v0 )(<= 0 ?v1 ))(and (<= ?v0 0 )(<= ?v1 0 )))(<= 0 (times$a ?v0 ?v1 )))):named a231 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$a (less_eq$ ?v0 )?v1 )(and (fun_app$a (less_eq$ ?v2 )?v3 )(and (fun_app$a (less_eq$ zero$ )?v0 )(fun_app$a (less_eq$ zero$ )?v2 ))))(fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v3 )))):named a232 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(=> (and (<= ?v0 ?v1 )(and (<= ?v2 ?v3 )(and (<= 0 ?v0 )(<= 0 ?v2 ))))(<= (times$a ?v0 ?v2 )(times$a ?v1 ?v3 )))):named a233 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ )(?v3 Nat$ ))(=> (and (fun_app$a (less_eq$ ?v0 )?v1 )(and (fun_app$a (less_eq$ ?v2 )?v3 )(and (fun_app$a (less_eq$ zero$ )?v1 )(fun_app$a (less_eq$ zero$ )?v2 ))))(fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v3 )))):named a234 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int )(?v3 Int ))(=> (and (<= ?v0 ?v1 )(and (<= ?v2 ?v3 )(and (<= 0 ?v1 )(<= 0 ?v2 ))))(<= (times$a ?v0 ?v2 )(times$a ?v1 ?v3 )))):named a235 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (<= ?v0 ?v1 )(<= ?v2 0 ))(<= (times$a ?v1 ?v2 )(times$a ?v0 ?v2 )))):named a236 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (<= ?v0 ?v1 )(<= ?v2 0 ))(<= (times$a ?v2 ?v1 )(times$a ?v2 ?v0 )))):named a237 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less_eq$ ?v0 )?v1 )(fun_app$a (less_eq$ zero$ )?v2 ))(fun_app$a (less_eq$ (fun_app$ (times$ ?v2 )?v0 ))(fun_app$ (times$ ?v2 )?v1 )))):named a238 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (<= ?v0 ?v1 )(<= 0 ?v2 ))(<= (times$a ?v2 ?v0 )(times$a ?v2 ?v1 )))):named a239 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less_eq$ ?v0 )?v1 )(fun_app$a (less_eq$ zero$ )?v2 ))(fun_app$a (less_eq$ (fun_app$ (times$ ?v0 )?v2 ))(fun_app$ (times$ ?v1 )?v2 )))):named a240 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (<= ?v0 ?v1 )(<= 0 ?v2 ))(<= (times$a ?v0 ?v2 )(times$a ?v1 ?v2 )))):named a241 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ )(?v2 Nat$ ))(=> (and (fun_app$a (less_eq$ ?v0 )?v1 )(fun_app$a (less_eq$ zero$ )?v2 ))(fun_app$a (less_eq$ (fun_app$ (times$ ?v2 )?v0 ))(fun_app$ (times$ ?v2 )?v1 )))):named a242 ))
(assert (! (forall ((?v0 Int )(?v1 Int )(?v2 Int ))(=> (and (<= ?v0 ?v1 )(<= 0 ?v2 ))(<= (times$a ?v2 ?v0 )(times$a ?v2 ?v1 )))):named a243 ))
(check-sat )
(get-unsat-core )
