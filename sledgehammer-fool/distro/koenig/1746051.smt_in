(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_treeFI$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Nat_nat_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_treeFI_set$ 0 )
(declare-sort Nat_bool_fun$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_a_treeFI_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_treeFI_a_fun$ 0 )
(declare-sort A_a_prod_treeFI$ 0 )
(declare-sort A_stream_treeFI$ 0 )
(declare-sort A_treeFI_treeFI$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_treeFI_bool_fun$ 0 )
(declare-sort Nat_nat_stream_fun$ 0 )
(declare-sort A_a_prod_stream_set$ 0 )
(declare-sort A_a_prod_treeFI_set$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_stream_treeFI_set$ 0 )
(declare-sort A_treeFI_list_a_fun$ 0 )
(declare-sort A_treeFI_stream_set$ 0 )
(declare-sort A_treeFI_treeFI_set$ 0 )
(declare-sort A_a_a_a_prod_fun_fun$ 0 )
(declare-sort A_a_a_prod_a_fun_fun$ 0 )
(declare-sort A_a_a_treeFI_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_fun_fun$ 0 )
(declare-sort A_a_stream_a_fun_fun$ 0 )
(declare-sort A_a_treeFI_a_fun_fun$ 0 )
(declare-sort A_treeFI_a_a_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_treeFI_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_treeFI_a_a_prod_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_fun$ 0 )
(declare-sort Nat_list_nat_list_fun$ 0 )
(declare-sort A_treeFI_list_bool_fun$ 0 )
(declare-sort A_treeFI_stream_treeFI$ 0 )
(declare-sort A_treeFI_treeFI_treeFI$ 0 )
(declare-sort A_a_stream_bool_fun_fun$ 0 )
(declare-sort A_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_bool_fun$ 0 )
(declare-sort A_a_prod_treeFI_bool_fun$ 0 )
(declare-sort A_stream_stream_bool_fun$ 0 )
(declare-sort A_stream_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_stream_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_bool_fun$ 0 )
(declare-sort A_a_treeFI_list_a_fun_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_set_fun$ 0 )
(declare-sort Nat_stream_nat_stream_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_prod_set$ 0 )
(declare-sort A_treeFI_stream_stream_set$ 0 )
(declare-sort A_treeFI_stream_treeFI_set$ 0 )
(declare-sort A_treeFI_treeFI_stream_set$ 0 )
(declare-sort A_treeFI_treeFI_treeFI_set$ 0 )
(declare-sort A_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_a_treeFI_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_a_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_a_fun_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_fun_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_fun$ 0 )
(declare-sort A_treeFI_stream_stream_bool_fun$ 0 )
(declare-sort A_treeFI_stream_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_stream_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_treeFI_bool_fun$ 0 )
(declare-sort Nat_nat_fun_nat_nat_stream_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_a_treeFI_prod_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_set$ 0 )
(declare-sort A_a_treeFI_list_a_treeFI_list_fun_fun$ 0 )
(declare-sort A_stream_a_stream_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_stream_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_a_prod_bool_fun_a_a_prod_bool_fun_fun$ 0 )
(declare-sort A_treeFI_bool_fun_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_treeFI$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_bool_fun$ 0 )
(declare-sort Nat_nat_stream_fun_nat_nat_stream_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_stream_set$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_treeFI_set$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_stream_bool_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort Nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun$ 0 )
(declare-sort Nat_bool_fun_nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_a_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$a (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$a (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$a (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-sort A_a_prod_treeFI_list$ 0)
(declare-fun nil$ ()A_a_prod_treeFI_list$)
(declare-fun hd$ (A_a_prod_treeFI_list$)A_a_prod_treeFI$)
(declare-fun tl$ (A_a_prod_treeFI_list$)A_a_prod_treeFI_list$)
(declare-fun cons$ (A_a_prod_treeFI$ A_a_prod_treeFI_list$ )A_a_prod_treeFI_list$)
(declare-sort A_treeFI_stream$ 0)
(declare-fun shd$b (A_treeFI_stream$)A_treeFI$)
(declare-fun stl$b (A_treeFI_stream$)A_treeFI_stream$)
(declare-fun sCons$b (A_treeFI$ A_treeFI_stream$ )A_treeFI_stream$)
(declare-sort A_treeFI_treeFI_list$ 0)
(declare-sort A_treeFI_list$ 0)
(declare-sort A_treeFI_list_a_treeFI_list_prod$ 0)
(declare-sort A_treeFI_list_a_treeFI_list_prod_treeFI_list$ 0)
(declare-sort A_treeFI_treeFI_treeFI_list$ 0)
(declare-sort A_treeFI_stream_treeFI_list$ 0)
(declare-sort A_stream_treeFI_list$ 0)
(declare-fun nil$a ()A_treeFI_treeFI_list$)
(declare-fun hd$a (A_treeFI_treeFI_list$)A_treeFI_treeFI$)
(declare-fun tl$a (A_treeFI_treeFI_list$)A_treeFI_treeFI_list$)
(declare-fun cons$a (A_treeFI_treeFI$ A_treeFI_treeFI_list$ )A_treeFI_treeFI_list$)
(declare-fun nil$b ()A_treeFI_list$)
(declare-fun hd$b (A_treeFI_list$)A_treeFI$)
(declare-fun tl$b (A_treeFI_list$)A_treeFI_list$)
(declare-fun cons$b (A_treeFI$ A_treeFI_list$ )A_treeFI_list$)
(declare-fun fst$a (A_treeFI_list_a_treeFI_list_prod$)A_treeFI_list$)
(declare-fun snd$a (A_treeFI_list_a_treeFI_list_prod$)A_treeFI_list$)
(declare-fun pair$a (A_treeFI_list$ A_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod$)
(declare-fun nil$c ()A_treeFI_list_a_treeFI_list_prod_treeFI_list$)
(declare-fun hd$c (A_treeFI_list_a_treeFI_list_prod_treeFI_list$)A_treeFI_list_a_treeFI_list_prod_treeFI$)
(declare-fun tl$c (A_treeFI_list_a_treeFI_list_prod_treeFI_list$)A_treeFI_list_a_treeFI_list_prod_treeFI_list$)
(declare-fun cons$c (A_treeFI_list_a_treeFI_list_prod_treeFI$ A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod_treeFI_list$)
(declare-fun nil$d ()A_treeFI_treeFI_treeFI_list$)
(declare-fun hd$d (A_treeFI_treeFI_treeFI_list$)A_treeFI_treeFI_treeFI$)
(declare-fun tl$d (A_treeFI_treeFI_treeFI_list$)A_treeFI_treeFI_treeFI_list$)
(declare-fun cons$d (A_treeFI_treeFI_treeFI$ A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI_list$)
(declare-fun nil$e ()A_treeFI_stream_treeFI_list$)
(declare-fun hd$e (A_treeFI_stream_treeFI_list$)A_treeFI_stream_treeFI$)
(declare-fun tl$e (A_treeFI_stream_treeFI_list$)A_treeFI_stream_treeFI_list$)
(declare-fun cons$e (A_treeFI_stream_treeFI$ A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI_list$)
(declare-fun nil$f ()A_stream_treeFI_list$)
(declare-fun hd$f (A_stream_treeFI_list$)A_stream_treeFI$)
(declare-fun tl$f (A_stream_treeFI_list$)A_stream_treeFI_list$)
(declare-fun cons$f (A_stream_treeFI$ A_stream_treeFI_list$ )A_stream_treeFI_list$)
(declare-sort A_treeFI_list_a_treeFI_list_prod_stream$ 0)
(declare-sort A_treeFI_treeFI_stream$ 0)
(declare-sort A_treeFI_stream_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort Nat_stream$ 0)
(declare-fun shd$c (A_treeFI_list_a_treeFI_list_prod_stream$)A_treeFI_list_a_treeFI_list_prod$)
(declare-fun stl$c (A_treeFI_list_a_treeFI_list_prod_stream$)A_treeFI_list_a_treeFI_list_prod_stream$)
(declare-fun sCons$c (A_treeFI_list_a_treeFI_list_prod$ A_treeFI_list_a_treeFI_list_prod_stream$ )A_treeFI_list_a_treeFI_list_prod_stream$)
(declare-fun shd$d (A_treeFI_treeFI_stream$)A_treeFI_treeFI$)
(declare-fun stl$d (A_treeFI_treeFI_stream$)A_treeFI_treeFI_stream$)
(declare-fun sCons$d (A_treeFI_treeFI$ A_treeFI_treeFI_stream$ )A_treeFI_treeFI_stream$)
(declare-fun shd$e (A_treeFI_stream_stream$)A_treeFI_stream$)
(declare-fun stl$e (A_treeFI_stream_stream$)A_treeFI_stream_stream$)
(declare-fun sCons$e (A_treeFI_stream$ A_treeFI_stream_stream$ )A_treeFI_stream_stream$)
(declare-fun shd$f (A_stream_stream$)A_stream$)
(declare-fun stl$f (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$f (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$g (Nat_stream$)Nat$)
(declare-fun stl$g (Nat_stream$)Nat_stream$)
(declare-fun sCons$g (Nat$ Nat_stream$ )Nat_stream$)
(declare-sort A_bool_fun_a_stream_prod$ 0)
(declare-sort A_treeFI_a_treeFI_prod$ 0)
(declare-sort A_treeFI_a_treeFI_prod_list$ 0)
(declare-sort A_list$ 0)
(declare-sort Nat_list$ 0)
(declare-fun select$ (A_bool_fun_a_stream_prod$)A_bool_fun$)
(declare-fun selecta$ (A_bool_fun_a_stream_prod$)A_stream$)
(declare-fun pair$b (A_bool_fun$ A_stream$ )A_bool_fun_a_stream_prod$)
(declare-fun fst$b (A_treeFI_a_treeFI_prod$)A_treeFI$)
(declare-fun snd$b (A_treeFI_a_treeFI_prod$)A_treeFI$)
(declare-fun pair$c (A_treeFI$ A_treeFI$ )A_treeFI_a_treeFI_prod$)
(declare-fun nil$g ()A_treeFI_a_treeFI_prod_list$)
(declare-fun hd$g (A_treeFI_a_treeFI_prod_list$)A_treeFI_a_treeFI_prod$)
(declare-fun tl$g (A_treeFI_a_treeFI_prod_list$)A_treeFI_a_treeFI_prod_list$)
(declare-fun cons$g (A_treeFI_a_treeFI_prod$ A_treeFI_a_treeFI_prod_list$ )A_treeFI_a_treeFI_prod_list$)
(declare-fun nil$h ()A_list$)
(declare-fun hd$h (A_list$)A$)
(declare-fun tl$h (A_list$)A_list$)
(declare-fun cons$h (A$ A_list$ )A_list$)
(declare-fun nil$i ()Nat_list$)
(declare-fun hd$i (Nat_list$)Nat$)
(declare-fun tl$i (Nat_list$)Nat_list$)
(declare-fun cons$i (Nat$ Nat_list$ )Nat_list$)
(declare-fun as$ ()A_stream$ )
(declare-fun tr$ ()A_treeFI$ )
(declare-fun uu$ (A_treeFI_list_a_treeFI_list_prod_set$ )A_treeFI_list_a_treeFI_list_prod_bool_fun$ )
(declare-fun eps$ (A_treeFI_bool_fun$ )A_treeFI$ )
(declare-fun lab$ (A_a_prod_treeFI$ )A_a_prod$ )
(declare-fun map$ (Nat_nat_fun$ )Nat_list_nat_list_fun$ )
(declare-fun phi$ (A_stream$ )A_treeFI_bool_fun$ )
(declare-fun rev$ (A_treeFI_list$ )A_treeFI_list$ )
(declare-fun set$ (A_treeFI_list$ )A_treeFI_set$ )
(declare-fun sub$ (A_treeFI$ )A_treeFI_list$ )
(declare-fun suc$ ()Nat_nat_fun$ )
(declare-fun sup$ (A_treeFI_set$ A_treeFI_set$ )A_treeFI_set$ )
(declare-fun uua$ (A_treeFI_treeFI_set$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun uub$ (A_treeFI_stream_set$ )A_treeFI_stream_bool_fun$ )
(declare-fun uuc$ (A_stream_set$ )A_stream_bool_fun$ )
(declare-fun uud$ (A_set$ )A_bool_fun$ )
(declare-fun uue$ (A_treeFI_set$ )A_treeFI_bool_fun$ )
(declare-fun uuf$ ()Bool_bool_fun$ )
(declare-fun uug$ (A_treeFI$ )A_treeFI_bool_fun$ )
(declare-fun uuh$ ()Nat_nat_fun$ )
(declare-fun uui$ ()A_a_stream_a_stream_fun_fun$ )
(declare-fun uuj$ ()A_a_treeFI_list_a_treeFI_list_fun_fun$ )
(declare-fun uuk$ ()A_a_stream_a_fun_fun$ )
(declare-fun uul$ ()A_a_treeFI_list_a_fun_fun$ )
(declare-fun uum$ (Nat$ )Nat_nat_fun$ )
(declare-fun uun$ (A_treeFI_list$ )A_treeFI_a_treeFI_set_fun$ )
(declare-fun uuo$ (A_treeFI_bool_fun$ )A_treeFI_list_a_treeFI_bool_fun_fun$ )
(declare-fun uup$ ()A_treeFI_a_treeFI_a_treeFI_prod_fun$ )
(declare-fun zip$ (A_treeFI_list$ A_treeFI_list$ )A_treeFI_a_treeFI_prod_list$ )
(declare-fun comp$ (Bool_bool_fun$ )A_treeFI_bool_fun_a_treeFI_bool_fun_fun$ )
(declare-fun lab$a (A_treeFI_treeFI$ )A_treeFI$ )
(declare-fun lab$b (A_treeFI$ )A$ )
(declare-fun lab$c (A_treeFI_list_a_treeFI_list_prod_treeFI$ )A_treeFI_list_a_treeFI_list_prod$ )
(declare-fun lab$d (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI$ )
(declare-fun lab$e (A_treeFI_stream_treeFI$ )A_treeFI_stream$ )
(declare-fun lab$f (A_stream_treeFI$ )A_stream$ )
(declare-fun map$a (A_treeFI_a_treeFI_fun$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun map$b (A_treeFI_a_treeFI_a_treeFI_prod_fun$ A_treeFI_list$ )A_treeFI_a_treeFI_prod_list$ )
(declare-fun set$a (A_a_prod_treeFI_list$ )A_a_prod_treeFI_set$ )
(declare-fun set$b (A_treeFI_treeFI_list$ )A_treeFI_treeFI_set$ )
(declare-fun set$c (A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod_treeFI_set$ )
(declare-fun set$d (A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI_set$ )
(declare-fun set$e (A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI_set$ )
(declare-fun set$f (A_stream_treeFI_list$ )A_stream_treeFI_set$ )
(declare-fun set$g (A_treeFI_a_treeFI_prod_list$ )A_treeFI_a_treeFI_prod_set$ )
(declare-fun smap$ (Nat_nat_fun$ )Nat_stream_nat_stream_fun$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (A_treeFI_stream$ )A_treeFI_set$ )
(declare-fun sub$a (A_a_prod_treeFI$ )A_a_prod_treeFI_list$ )
(declare-fun sub$b (A_treeFI_treeFI$ )A_treeFI_treeFI_list$ )
(declare-fun sub$c (A_treeFI_list_a_treeFI_list_prod_treeFI$ )A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )
(declare-fun sub$d (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI_treeFI_list$ )
(declare-fun sub$e (A_treeFI_stream_treeFI$ )A_treeFI_stream_treeFI_list$ )
(declare-fun sub$f (A_stream_treeFI$ )A_stream_treeFI_list$ )
(declare-fun szip$ (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun tree$ (A_treeFI$ A_treeFI_treeFI_list$ )A_treeFI_treeFI$ )
(declare-fun trev$ (A_treeFI_treeFI$ )A_treeFI_treeFI$ )
(declare-fun comp$a (Bool_bool_fun$ )A_a_prod_bool_fun_a_a_prod_bool_fun_fun$ )
(declare-fun comp$b (Bool_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun comp$c (Nat_nat_fun$ )Nat_nat_fun_nat_nat_fun_fun$ )
(declare-fun comp$d (Nat_stream_nat_stream_fun$ )Nat_nat_stream_fun_nat_nat_stream_fun_fun$ )
(declare-fun comp$e (Nat_list_nat_list_fun$ Nat_list_nat_list_fun$ )Nat_list_nat_list_fun$ )
(declare-fun id_on$ (A_treeFI_set$ )A_treeFI_a_treeFI_prod_set$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_treeFI_list$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun sigma$ (A_treeFI_set$ A_treeFI_a_treeFI_set_fun$ )A_treeFI_a_treeFI_prod_set$ )
(declare-fun smap$a (A_treeFI_a_fun$ A_treeFI_stream$ )A_stream$ )
(declare-fun smap$b (A_a_prod_a_fun$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap$c (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$d (A_a_treeFI_fun$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap$e (A_a_prod_a_treeFI_fun$ A_a_prod_stream$ )A_treeFI_stream$ )
(declare-fun smap$f (A_treeFI_a_treeFI_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun smap$g (A_a_a_prod_fun$ A_stream$ )A_a_prod_stream$ )
(declare-fun smap$h (A_treeFI_a_a_prod_fun$ A_treeFI_stream$ )A_a_prod_stream$ )
(declare-fun smap$i (A_a_prod_a_a_prod_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun snth$a (A_treeFI_stream$ Nat$ )A_treeFI$ )
(declare-fun snth$b (A_treeFI_stream_stream$ Nat$ )A_treeFI_stream$ )
(declare-fun sset$a (A_stream$ )A_set$ )
(declare-fun stake$ (Nat$ A_stream$ )A_list$ )
(declare-fun tree$a (A$ A_treeFI_list$ )A_treeFI$ )
(declare-fun tree$b (A_treeFI_list_a_treeFI_list_prod$ A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod_treeFI$ )
(declare-fun tree$c (A_treeFI_treeFI$ A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI$ )
(declare-fun tree$d (A_treeFI_stream$ A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI$ )
(declare-fun tree$e (A_stream$ A_stream_treeFI_list$ )A_stream_treeFI$ )
(declare-fun trev$a ()A_treeFI_a_treeFI_fun$ )
(declare-fun union$ (A_treeFI_list$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun filter$ (A_treeFI_bool_fun$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun insert$ (A_treeFI$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun lexord$ (A_treeFI_a_treeFI_prod_set$ )A_treeFI_list_a_treeFI_list_prod_set$ )
(declare-fun member$ (A_treeFI$ A_treeFI_set$ )Bool )
(declare-fun smap2$a (A_a_treeFI_a_fun_fun$ A_stream$ A_treeFI_stream$ )A_stream$ )
(declare-fun smap2$b (A_treeFI_a_a_fun_fun$ A_treeFI_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$c (A_a_a_treeFI_fun_fun$ A_stream$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap2$d (A_a_a_prod_a_fun_fun$ A_stream$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap2$e (A_treeFI_a_treeFI_a_fun_fun$ A_treeFI_stream$ A_treeFI_stream$ )A_stream$ )
(declare-fun smap2$f (A_a_prod_a_a_fun_fun$ A_a_prod_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$g (A_a_treeFI_a_treeFI_fun_fun$ A_stream$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun smap2$h (A_treeFI_a_a_treeFI_fun_fun$ A_treeFI_stream$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap2$i (A_a_a_a_prod_fun_fun$ A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun smerge$ (A_treeFI_stream_stream$ )A_treeFI_stream$ )
(declare-fun collect$ (A_treeFI_bool_fun$ )A_treeFI_set$ )
(declare-fun filter$a (A_treeFI_bool_fun$ A_treeFI_set$ )A_treeFI_set$ )
(declare-fun fun_app$ (A_treeFI_a_treeFI_a_treeFI_prod_fun$ A_treeFI$ )A_treeFI_a_treeFI_prod$ )
(declare-fun member$a (A_treeFI_list_a_treeFI_list_prod$ A_treeFI_list_a_treeFI_list_prod_set$ )Bool )
(declare-fun member$b (A_treeFI_treeFI$ A_treeFI_treeFI_set$ )Bool )
(declare-fun member$c (A_treeFI_stream$ A_treeFI_stream_set$ )Bool )
(declare-fun member$d (A_stream$ A_stream_set$ )Bool )
(declare-fun member$e (A$ A_set$ )Bool )
(declare-fun member$f (A_a_prod_treeFI$ A_a_prod_treeFI_set$ )Bool )
(declare-fun member$g (A_treeFI_list_a_treeFI_list_prod_treeFI$ A_treeFI_list_a_treeFI_list_prod_treeFI_set$ )Bool )
(declare-fun member$h (A_treeFI_treeFI_treeFI$ A_treeFI_treeFI_treeFI_set$ )Bool )
(declare-fun member$i (A_treeFI_stream_treeFI$ A_treeFI_stream_treeFI_set$ )Bool )
(declare-fun member$j (A_stream_treeFI$ A_stream_treeFI_set$ )Bool )
(declare-fun member$k (A_treeFI_list_a_treeFI_list_prod_stream$ A_treeFI_list_a_treeFI_list_prod_stream_set$ )Bool )
(declare-fun member$l (A_treeFI_treeFI_stream$ A_treeFI_treeFI_stream_set$ )Bool )
(declare-fun member$m (A_treeFI_stream_stream$ A_treeFI_stream_stream_set$ )Bool )
(declare-fun member$n (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$o (A_a_prod_stream$ A_a_prod_stream_set$ )Bool )
(declare-fun member$p (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$q (A_treeFI_list$ )A_treeFI_bool_fun$ )
(declare-fun member$r (A_treeFI_a_treeFI_prod$ A_treeFI_a_treeFI_prod_set$ )Bool )
(declare-fun product$ (A_treeFI_list$ A_treeFI_list$ )A_treeFI_a_treeFI_prod_list$ )
(declare-fun sfilter$ (A_treeFI_bool_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun smember$ (A$ )A_stream_bool_fun$ )
(declare-fun streams$ (A_treeFI_list_a_treeFI_list_prod_set$ )A_treeFI_list_a_treeFI_list_prod_stream_set$ )
(declare-fun collect$a (A_treeFI_list_a_treeFI_list_prod_bool_fun$ )A_treeFI_list_a_treeFI_list_prod_set$ )
(declare-fun collect$b (A_treeFI_treeFI_bool_fun$ )A_treeFI_treeFI_set$ )
(declare-fun collect$c (A_treeFI_stream_bool_fun$ )A_treeFI_stream_set$ )
(declare-fun collect$d (A_stream_bool_fun$ )A_stream_set$ )
(declare-fun collect$e (A_bool_fun$ )A_set$ )
(declare-fun fun_app$a (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$b (A_treeFI_bool_fun$ A_treeFI$ )Bool )
(declare-fun fun_app$c (A_treeFI_list_a_treeFI_list_prod_bool_fun$ A_treeFI_list_a_treeFI_list_prod$ )Bool )
(declare-fun fun_app$d (A_treeFI_treeFI_bool_fun$ A_treeFI_treeFI$ )Bool )
(declare-fun fun_app$e (A_treeFI_stream_bool_fun$ A_treeFI_stream$ )Bool )
(declare-fun fun_app$f (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$g (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$h (A_treeFI_a_treeFI_set_fun$ A_treeFI$ )A_treeFI_set$ )
(declare-fun fun_app$i (A_treeFI_list_a_treeFI_bool_fun_fun$ A_treeFI_list$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$j (Nat_nat_fun$ Nat$ )Nat$ )
(declare-fun fun_app$k (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$l (A_a_stream_a_fun_fun$ A$ )A_stream_a_fun$ )
(declare-fun fun_app$m (A_treeFI_list_a_fun$ A_treeFI_list$ )A$ )
(declare-fun fun_app$n (A_a_treeFI_list_a_fun_fun$ A$ )A_treeFI_list_a_fun$ )
(declare-fun fun_app$o (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$p (A_a_stream_a_stream_fun_fun$ A$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$q (A_treeFI_list_a_treeFI_list_fun$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun fun_app$r (A_a_treeFI_list_a_treeFI_list_fun_fun$ A$ )A_treeFI_list_a_treeFI_list_fun$ )
(declare-fun fun_app$s (A_a_prod_treeFI_bool_fun$ A_a_prod_treeFI$ )Bool )
(declare-fun fun_app$t (A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ A_a_prod_stream$ )A_a_prod_treeFI_bool_fun$ )
(declare-fun fun_app$u (A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$v (A_stream_a_treeFI_bool_fun_fun$ A_stream$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$w (A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_stream_bool_fun$ )
(declare-fun fun_app$x (A_a_prod_stream_bool_fun$ A_a_prod_stream$ )Bool )
(declare-fun fun_app$y (A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ A_a_prod_stream$ )A_a_prod_stream_bool_fun$ )
(declare-fun fun_app$z (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun sfilter$a (A_a_prod_bool_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sfilter$b (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun smember$a (A_treeFI$ )A_treeFI_stream_bool_fun$ )
(declare-fun smember$b (A_a_prod$ )A_a_prod_stream_bool_fun$ )
(declare-fun streams$a (A_treeFI_treeFI_set$ )A_treeFI_treeFI_stream_set$ )
(declare-fun streams$b (A_treeFI_stream_set$ )A_treeFI_stream_stream_set$ )
(declare-fun streams$c (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$d (A_a_prod_set$ )A_a_prod_stream_set$ )
(declare-fun streams$e (A_treeFI_set$ )A_treeFI_stream_set$ )
(declare-fun streams$f (A_set$ )A_stream_set$ )
(declare-fun streamsp$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun fun_app$aa (A_treeFI_a_fun$ A_treeFI$ )A$ )
(declare-fun fun_app$ab (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$ac (A_treeFI_a_treeFI_fun$ A_treeFI$ )A_treeFI$ )
(declare-fun fun_app$ad (A_treeFI_list_a_treeFI_list_prod_stream_bool_fun$ A_treeFI_list_a_treeFI_list_prod_stream$ )Bool )
(declare-fun fun_app$ae (A_treeFI_treeFI_stream_bool_fun$ A_treeFI_treeFI_stream$ )Bool )
(declare-fun fun_app$af (A_treeFI_stream_stream_bool_fun$ A_treeFI_stream_stream$ )Bool )
(declare-fun fun_app$ag (A_stream_stream_bool_fun$ A_stream_stream$ )Bool )
(declare-fun fun_app$ah (A_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun$ A_treeFI_list_a_treeFI_list_prod_treeFI$ )Bool )
(declare-fun fun_app$ai (A_treeFI_list_a_treeFI_list_prod_a_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun_fun$ A_treeFI_list_a_treeFI_list_prod$ )A_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun$ )
(declare-fun fun_app$aj (A_treeFI_treeFI_treeFI_bool_fun$ A_treeFI_treeFI_treeFI$ )Bool )
(declare-fun fun_app$ak (A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ A_treeFI_treeFI$ )A_treeFI_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$al (A_treeFI_stream_treeFI_bool_fun$ A_treeFI_stream_treeFI$ )Bool )
(declare-fun fun_app$am (A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_stream_treeFI_bool_fun$ )
(declare-fun fun_app$an (A_stream_treeFI_bool_fun$ A_stream_treeFI$ )Bool )
(declare-fun fun_app$ao (A_stream_a_stream_treeFI_bool_fun_fun$ A_stream$ )A_stream_treeFI_bool_fun$ )
(declare-fun fun_app$ap (A_treeFI_a_treeFI_treeFI_bool_fun_fun$ A_treeFI$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$aq (A_a_treeFI_bool_fun_fun$ A$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$ar (A_treeFI_list_bool_fun$ A_treeFI_list$ )Bool )
(declare-fun fun_app$as (A_a_fun$ A$ )A$ )
(declare-fun fun_app$at (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$au (A_a_treeFI_a_fun_fun$ A$ )A_treeFI_a_fun$ )
(declare-fun fun_app$av (A_treeFI_a_a_fun_fun$ A_treeFI$ )A_a_fun$ )
(declare-fun fun_app$aw (A_a_treeFI_fun$ A$ )A_treeFI$ )
(declare-fun fun_app$ax (A_a_a_treeFI_fun_fun$ A$ )A_a_treeFI_fun$ )
(declare-fun fun_app$ay (A_a_prod_a_fun$ A_a_prod$ )A$ )
(declare-fun fun_app$az (A_a_a_prod_a_fun_fun$ A$ )A_a_prod_a_fun$ )
(declare-fun fun_app$ba (A_treeFI_a_treeFI_a_fun_fun$ A_treeFI$ )A_treeFI_a_fun$ )
(declare-fun fun_app$bb (A_a_prod_a_a_fun_fun$ A_a_prod$ )A_a_fun$ )
(declare-fun fun_app$bc (A_a_treeFI_a_treeFI_fun_fun$ A$ )A_treeFI_a_treeFI_fun$ )
(declare-fun fun_app$bd (A_treeFI_a_a_treeFI_fun_fun$ A_treeFI$ )A_a_treeFI_fun$ )
(declare-fun fun_app$be (A_a_a_prod_fun$ A$ )A_a_prod$ )
(declare-fun fun_app$bf (A_a_a_a_prod_fun_fun$ A$ )A_a_a_prod_fun$ )
(declare-fun fun_app$bg (Nat_stream_nat_stream_fun$ Nat_stream$ )Nat_stream$ )
(declare-fun fun_app$bh (A_a_prod_a_treeFI_fun$ A_a_prod$ )A_treeFI$ )
(declare-fun fun_app$bi (A_treeFI_a_a_prod_fun$ A_treeFI$ )A_a_prod$ )
(declare-fun fun_app$bj (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod$ )
(declare-fun fun_app$bk (A_treeFI_bool_fun_a_treeFI_bool_fun_fun$ A_treeFI_bool_fun$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$bl (A_a_prod_bool_fun_a_a_prod_bool_fun_fun$ A_a_prod_bool_fun$ )A_a_prod_bool_fun$ )
(declare-fun fun_app$bm (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$bn (Nat_nat_fun_nat_nat_fun_fun$ Nat_nat_fun$ )Nat_nat_fun$ )
(declare-fun fun_app$bo (Nat_nat_stream_fun_nat_nat_stream_fun_fun$ Nat_nat_stream_fun$ )Nat_nat_stream_fun$ )
(declare-fun fun_app$bp (Nat_nat_fun_nat_nat_stream_fun_fun$ Nat_nat_fun$ )Nat_nat_stream_fun$ )
(declare-fun fun_app$bq (Nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun$ Nat_nat_stream_fun$ )Nat_nat_fun_nat_nat_stream_fun_fun$ )
(declare-fun fun_app$br (Nat_bool_fun_nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun_fun$ Nat_bool_fun$ )Nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun$ )
(declare-fun fun_app$bs (A_treeFI_a_treeFI_stream_bool_fun_fun$ A_treeFI$ )A_treeFI_stream_bool_fun$ )
(declare-fun fun_app$bt (A_a_stream_bool_fun_fun$ A$ )A_stream_bool_fun$ )
(declare-fun fun_app$bu (A_bool_fun_a_stream_a_stream_fun_fun$ A_bool_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$bv (A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ A_bool_fun_a_stream_prod$ )A_stream_bool_fun$ )
(declare-fun fun_app$bw (Nat_list_nat_list_fun$ Nat_list$ )Nat_list$ )
(declare-fun konigPath$ (A_a_prod_treeFI$ )A_a_prod_stream$ )
(declare-fun partition$ (A_treeFI_bool_fun$ A_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod$ )
(declare-fun pred_list$ (A_treeFI_bool_fun$ )A_treeFI_list_bool_fun$ )
(declare-fun size_list$ (Nat_nat_fun$ Nat_list$ )Nat$ )
(declare-fun streamsp$a (A_treeFI_bool_fun$ )A_treeFI_stream_bool_fun$ )
(declare-fun streamsp$b (A_a_prod_bool_fun$ )A_a_prod_stream_bool_fun$ )
(declare-fun undefined$ ()A_stream$ )
(declare-fun infiniteTr$ (A_treeFI$ )Bool )
(declare-fun konigPath$a (A_treeFI_treeFI$ )A_treeFI_stream$ )
(declare-fun konigPath$b (A_treeFI$ )A_stream$ )
(declare-fun properPath$ (A_stream$ )A_treeFI_bool_fun$ )
(declare-fun set_treeFI$ (A_treeFI_list_a_treeFI_list_prod_treeFI$ )A_treeFI_list_a_treeFI_list_prod_set$ )
(declare-fun stream_all$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun case_stream$ (A_a_stream_a_stream_fun_fun$ A_stream$ )A_stream$ )
(declare-fun case_treeFI$ (A_a_treeFI_list_a_treeFI_list_fun_fun$ A_treeFI$ )A_treeFI_list$ )
(declare-fun infiniteTr$a (A_treeFI_treeFI$ )Bool )
(declare-fun pred_stream$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun pred_treeFI$ (A_treeFI_bool_fun$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun properPath$a (A_a_prod_stream$ A_a_prod_treeFI$ )Bool )
(declare-fun properPath$b (A_treeFI_stream$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun sdrop_while$ (A_treeFI_bool_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun set_treeFI$a (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI_set$ )
(declare-fun set_treeFI$b (A_treeFI_stream_treeFI$ )A_treeFI_stream_set$ )
(declare-fun set_treeFI$c (A_stream_treeFI$ )A_stream_set$ )
(declare-fun set_treeFI$d (A_treeFI_treeFI$ )A_treeFI_set$ )
(declare-fun set_treeFI$e (A_treeFI$ )A_set$ )
(declare-fun sinterleave$ (A_treeFI_stream$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun stream_all$a (A_treeFI_bool_fun$ )A_treeFI_stream_bool_fun$ )
(declare-fun stream_all$b (A_a_prod_bool_fun$ )A_a_prod_stream_bool_fun$ )
(declare-fun case_stream$a (A_a_stream_a_fun_fun$ A_stream$ )A$ )
(declare-fun case_treeFI$a (A_a_treeFI_list_a_fun_fun$ )A_treeFI_a_fun$ )
(declare-fun corec_stream$ (Nat_nat_fun$ )Nat_bool_fun_nat_nat_stream_fun_nat_nat_fun_nat_nat_stream_fun_fun_fun_fun$ )
(declare-fun pred_stream$a (A_treeFI_bool_fun$ )A_treeFI_stream_bool_fun$ )
(declare-fun pred_stream$b (A_a_prod_bool_fun$ )A_a_prod_stream_bool_fun$ )
(declare-fun sdrop_while$a (A_a_prod_bool_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sdrop_while$b (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun sinterleave$a (A_a_prod_stream$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sinterleave$b (A_stream$ A_stream$ )A_stream$ )
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ uup$ ?v0 )(pair$c ?v0 ?v0 )):pattern ((fun_app$ uup$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$a uuf$ ?v0 )(not ?v0 )):pattern ((fun_app$a uuf$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(! (= (fun_app$b (uug$ ?v0 )?v1 )(and (member$ ?v1 (set$ (sub$ ?v0 )))(infiniteTr$ ?v1 ))):pattern ((fun_app$b (uug$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_set$ )(?v1 A_treeFI_list_a_treeFI_list_prod$ ))(! (= (fun_app$c (uu$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$c (uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ )(?v1 A_treeFI_treeFI$ ))(! (= (fun_app$d (uua$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$d (uua$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI$ ))(! (= (fun_app$b (uue$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$b (uue$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$e (uub$ ?v0 )?v1 )(member$c ?v1 ?v0 )):pattern ((fun_app$e (uub$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream$ ))(! (= (fun_app$f (uuc$ ?v0 )?v1 )(member$d ?v1 ?v0 )):pattern ((fun_app$f (uuc$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(! (= (fun_app$g (uud$ ?v0 )?v1 )(member$e ?v1 ?v0 )):pattern ((fun_app$g (uud$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI$ ))(! (= (fun_app$h (uun$ ?v0 )?v1 )(set$ ?v0 )):pattern ((fun_app$h (uun$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI$ ))(! (= (fun_app$b (fun_app$i (uuo$ ?v0 )?v1 )?v2 )(and (member$ ?v2 (set$ ?v1 ))(fun_app$b ?v0 ?v2 ))):pattern ((fun_app$b (fun_app$i (uuo$ ?v0 )?v1 )?v2 )))):named a10 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat$ ))(! (= (fun_app$j (uum$ ?v0 )?v1 )?v0 ):pattern ((fun_app$j (uum$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (fun_app$k (fun_app$l uuk$ ?v0 )?v1 )?v0 ):pattern ((fun_app$k (fun_app$l uuk$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$m (fun_app$n uul$ ?v0 )?v1 )?v0 ):pattern ((fun_app$m (fun_app$n uul$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (fun_app$o (fun_app$p uui$ ?v0 )?v1 )?v1 ):pattern ((fun_app$o (fun_app$p uui$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$q (fun_app$r uuj$ ?v0 )?v1 )?v1 ):pattern ((fun_app$q (fun_app$r uuj$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 Nat$ ))(! (= (fun_app$j uuh$ ?v0 )?v0 ):pattern ((fun_app$j uuh$ ?v0 )))):named a16 ))
(assert (! (not (fun_app$b (properPath$ as$ )tr$ )):named a17 ))
(assert (! (fun_app$b (phi$ as$ )tr$ ):named a18 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_treeFI$ ))(= (properPath$a ?v0 ?v1 )(exists ((?v2 A_a_prod_stream$ )(?v3 A_a_prod_treeFI$ )(?v4 A_a_prod_treeFI$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$a ?v2 )(lab$ ?v3 ))(and (member$f ?v4 (set$a (sub$a ?v3 )))(properPath$a (stl$a ?v2 )?v4 )))))))):named a19 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ ))(= (fun_app$d (properPath$b ?v0 )?v1 )(exists ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$b ?v2 )(lab$a ?v3 ))(and (member$b ?v4 (set$b (sub$b ?v3 )))(fun_app$d (properPath$b (stl$b ?v2 ))?v4 )))))))):named a20 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(= (fun_app$b (properPath$ ?v0 )?v1 )(exists ((?v2 A_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$ ?v2 )(lab$b ?v3 ))(and (member$ ?v4 (set$ (sub$ ?v3 )))(fun_app$b (properPath$ (stl$ ?v2 ))?v4 )))))))):named a21 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_treeFI$ )(?v2 A_a_prod_treeFI$ ))(=> (and (= (shd$a ?v0 )(lab$ ?v1 ))(and (member$f ?v2 (set$a (sub$a ?v1 )))(properPath$a (stl$a ?v0 )?v2 )))(properPath$a ?v0 ?v1 ))):named a22 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (= (shd$b ?v0 )(lab$a ?v1 ))(and (member$b ?v2 (set$b (sub$b ?v1 )))(fun_app$d (properPath$b (stl$b ?v0 ))?v2 )))(fun_app$d (properPath$b ?v0 )?v1 ))):named a23 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (= (shd$ ?v0 )(lab$b ?v1 ))(and (member$ ?v2 (set$ (sub$ ?v1 )))(fun_app$b (properPath$ (stl$ ?v0 ))?v2 )))(fun_app$b (properPath$ ?v0 )?v1 ))):named a24 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_treeFI$ ))(=> (and (properPath$a ?v0 ?v1 )(forall ((?v2 A_a_prod_stream$ )(?v3 A_a_prod_treeFI$ )(?v4 A_a_prod_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$a ?v2 )(lab$ ?v3 ))(and (member$f ?v4 (set$a (sub$a ?v3 )))(properPath$a (stl$a ?v2 )?v4 )))))false )))false )):named a25 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$d (properPath$b ?v0 )?v1 )(forall ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$b ?v2 )(lab$a ?v3 ))(and (member$b ?v4 (set$b (sub$b ?v3 )))(fun_app$d (properPath$b (stl$b ?v2 ))?v4 )))))false )))false )):named a26 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(=> (and (fun_app$b (properPath$ ?v0 )?v1 )(forall ((?v2 A_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$ ?v2 )(lab$b ?v3 ))(and (member$ ?v4 (set$ (sub$ ?v3 )))(fun_app$b (properPath$ (stl$ ?v2 ))?v4 )))))false )))false )):named a27 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_treeFI$ ))(=> (and (fun_app$s (fun_app$t ?v0 ?v1 )?v2 )(and (forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_treeFI$ ))(=> (fun_app$s (fun_app$t ?v0 ?v3 )?v4 )(= (shd$a ?v3 )(lab$ ?v4 ))))(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_treeFI$ ))(=> (fun_app$s (fun_app$t ?v0 ?v3 )?v4 )(exists ((?v5 A_a_prod_treeFI$ ))(and (member$f ?v5 (set$a (sub$a ?v4 )))(or (fun_app$s (fun_app$t ?v0 (stl$a ?v3 ))?v5 )(properPath$a (stl$a ?v3 )?v5 ))))))))(properPath$a ?v1 ?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_treeFI$ ))(=> (and (fun_app$d (fun_app$u ?v0 ?v1 )?v2 )(and (forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$d (fun_app$u ?v0 ?v3 )?v4 )(= (shd$b ?v3 )(lab$a ?v4 ))))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$d (fun_app$u ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI_treeFI$ ))(and (member$b ?v5 (set$b (sub$b ?v4 )))(or (fun_app$d (fun_app$u ?v0 (stl$b ?v3 ))?v5 )(fun_app$d (properPath$b (stl$b ?v3 ))?v5 ))))))))(fun_app$d (properPath$b ?v1 )?v2 ))):named a29 ))
(assert (! (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ ))(=> (and (fun_app$b (fun_app$v ?v0 ?v1 )?v2 )(and (forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$b (fun_app$v ?v0 ?v3 )?v4 )(= (shd$ ?v3 )(lab$b ?v4 ))))(forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$b (fun_app$v ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI$ ))(and (member$ ?v5 (set$ (sub$ ?v4 )))(or (fun_app$b (fun_app$v ?v0 (stl$ ?v3 ))?v5 )(fun_app$b (properPath$ (stl$ ?v3 ))?v5 ))))))))(fun_app$b (properPath$ ?v1 )?v2 ))):named a30 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_treeFI$ ))(=> (and (fun_app$s (fun_app$t ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_treeFI$ ))(=> (fun_app$s (fun_app$t ?v0 ?v3 )?v4 )(exists ((?v5 A_a_prod_stream$ )(?v6 A_a_prod_treeFI$ )(?v7 A_a_prod_treeFI$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (shd$a ?v5 )(lab$ ?v6 ))(and (member$f ?v7 (set$a (sub$a ?v6 )))(or (fun_app$s (fun_app$t ?v0 (stl$a ?v5 ))?v7 )(properPath$a (stl$a ?v5 )?v7 ))))))))))(properPath$a ?v1 ?v2 ))):named a31 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_treeFI$ ))(=> (and (fun_app$d (fun_app$u ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$d (fun_app$u ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI_stream$ )(?v6 A_treeFI_treeFI$ )(?v7 A_treeFI_treeFI$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (shd$b ?v5 )(lab$a ?v6 ))(and (member$b ?v7 (set$b (sub$b ?v6 )))(or (fun_app$d (fun_app$u ?v0 (stl$b ?v5 ))?v7 )(fun_app$d (properPath$b (stl$b ?v5 ))?v7 ))))))))))(fun_app$d (properPath$b ?v1 )?v2 ))):named a32 ))
(assert (! (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ ))(=> (and (fun_app$b (fun_app$v ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$b (fun_app$v ?v0 ?v3 )?v4 )(exists ((?v5 A_stream$ )(?v6 A_treeFI$ )(?v7 A_treeFI$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (shd$ ?v5 )(lab$b ?v6 ))(and (member$ ?v7 (set$ (sub$ ?v6 )))(or (fun_app$b (fun_app$v ?v0 (stl$ ?v5 ))?v7 )(fun_app$b (properPath$ (stl$ ?v5 ))?v7 ))))))))))(fun_app$b (properPath$ ?v1 )?v2 ))):named a33 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(=> (fun_app$b (phi$ ?v0 )?v1 )(exists ((?v2 A_treeFI$ ))(and (member$ ?v2 (set$ (sub$ ?v1 )))(fun_app$b (phi$ (stl$ ?v0 ))?v2 ))))):named a34 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(=> (fun_app$b (phi$ ?v0 )?v1 )(= (shd$ ?v0 )(lab$b ?v1 )))):named a35 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (= (lab$a ?v0 )(lab$a ?v1 ))(= (sub$b ?v0 )(sub$b ?v1 )))(= ?v0 ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(=> (and (= (lab$b ?v0 )(lab$b ?v1 ))(= (sub$ ?v0 )(sub$ ?v1 )))(= ?v0 ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(=> (and (= (shd$b ?v0 )(shd$b ?v1 ))(= (stl$b ?v0 )(stl$b ?v1 )))(= ?v0 ?v1 ))):named a38 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a39 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(=> (and (fun_app$e (fun_app$w ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream$ ))(=> (fun_app$e (fun_app$w ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(or (fun_app$e (fun_app$w ?v0 (stl$b ?v3 ))(stl$b ?v4 ))(= (stl$b ?v3 )(stl$b ?v4 )))))))(= ?v1 ?v2 ))):named a41 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$x (fun_app$y ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_stream$ ))(=> (fun_app$x (fun_app$y ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$x (fun_app$y ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a42 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$f (fun_app$z ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$f (fun_app$z ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$f (fun_app$z ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a43 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(=> (and (fun_app$e (fun_app$w ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream$ ))(=> (fun_app$e (fun_app$w ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(fun_app$e (fun_app$w ?v0 (stl$b ?v3 ))(stl$b ?v4 ))))))(= ?v1 ?v2 ))):named a44 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$x (fun_app$y ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_stream$ ))(=> (fun_app$x (fun_app$y ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$x (fun_app$y ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a45 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$f (fun_app$z ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$f (fun_app$z ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$f (fun_app$z ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a46 ))
(assert (! (forall ((?v0 A_a_prod_treeFI$ ))(= (shd$a (konigPath$ ?v0 ))(lab$ ?v0 ))):named a47 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (shd$b (konigPath$a ?v0 ))(lab$a ?v0 ))):named a48 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (shd$ (konigPath$b ?v0 ))(lab$b ?v0 ))):named a49 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (infiniteTr$a ?v0 )(exists ((?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(and (= ?v0 ?v2 )(and (member$b ?v1 (set$b (sub$b ?v2 )))(infiniteTr$a ?v1 )))))):named a50 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (infiniteTr$ ?v0 )(exists ((?v1 A_treeFI$ )(?v2 A_treeFI$ ))(and (= ?v0 ?v2 )(and (member$ ?v1 (set$ (sub$ ?v2 )))(infiniteTr$ ?v1 )))))):named a51 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (member$b ?v0 (set$b (sub$b ?v1 )))(infiniteTr$a ?v0 ))(infiniteTr$a ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(=> (and (member$ ?v0 (set$ (sub$ ?v1 )))(infiniteTr$ ?v0 ))(infiniteTr$ ?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (and (infiniteTr$a ?v0 )(forall ((?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (member$b ?v1 (set$b (sub$b ?v2 )))(infiniteTr$a ?v1 )))false )))false )):named a54 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (and (infiniteTr$ ?v0 )(forall ((?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (member$ ?v1 (set$ (sub$ ?v2 )))(infiniteTr$ ?v1 )))false )))false )):named a55 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (infiniteTr$a ?v0 )(exists ((?v1 A_treeFI_treeFI$ ))(and (member$b ?v1 (set$b (sub$b ?v0 )))(infiniteTr$a ?v1 ))))):named a56 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (infiniteTr$ ?v0 )(exists ((?v1 A_treeFI$ ))(and (member$ ?v1 (set$ (sub$ ?v0 )))(infiniteTr$ ?v1 ))))):named a57 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$d ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$d ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ ))(and (member$b ?v3 (set$b (sub$b ?v2 )))(or (fun_app$d ?v0 ?v3 )(infiniteTr$a ?v3 )))))))(infiniteTr$a ?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$b ?v0 ?v2 )(exists ((?v3 A_treeFI$ ))(and (member$ ?v3 (set$ (sub$ ?v2 )))(or (fun_app$b ?v0 ?v3 )(infiniteTr$ ?v3 )))))))(infiniteTr$ ?v1 ))):named a59 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$d ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$d ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(and (= ?v2 ?v4 )(and (member$b ?v3 (set$b (sub$b ?v4 )))(or (fun_app$d ?v0 ?v3 )(infiniteTr$a ?v3 ))))))))(infiniteTr$a ?v1 ))):named a60 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$b ?v0 ?v2 )(exists ((?v3 A_treeFI$ )(?v4 A_treeFI$ ))(and (= ?v2 ?v4 )(and (member$ ?v3 (set$ (sub$ ?v4 )))(or (fun_app$b ?v0 ?v3 )(infiniteTr$ ?v3 ))))))))(infiniteTr$ ?v1 ))):named a61 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$d ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$d ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ ))(and (member$b ?v3 (set$b (sub$b ?v2 )))(fun_app$d ?v0 ?v3 ))))))(infiniteTr$a ?v1 ))):named a62 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$b ?v0 ?v2 )(exists ((?v3 A_treeFI$ ))(and (member$ ?v3 (set$ (sub$ ?v2 )))(fun_app$b ?v0 ?v3 ))))))(infiniteTr$ ?v1 ))):named a63 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v1 A_treeFI$ ))(! (= (case_treeFI$ ?v0 ?v1 )(fun_app$q (fun_app$r ?v0 (lab$b ?v1 ))(sub$ ?v1 ))):pattern ((case_treeFI$ ?v0 ?v1 )))):named a64 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_fun_fun$ )(?v1 A_treeFI$ ))(! (= (fun_app$aa (case_treeFI$a ?v0 )?v1 )(fun_app$m (fun_app$n ?v0 (lab$b ?v1 ))(sub$ ?v1 ))):pattern ((fun_app$aa (case_treeFI$a ?v0 )?v1 )))):named a65 ))
(assert (! (forall ((?v0 A_a_stream_a_stream_fun_fun$ )(?v1 A_stream$ ))(! (= (case_stream$ ?v0 ?v1 )(fun_app$o (fun_app$p ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((case_stream$ ?v0 ?v1 )))):named a66 ))
(assert (! (forall ((?v0 A_a_stream_a_fun_fun$ )(?v1 A_stream$ ))(! (= (case_stream$a ?v0 ?v1 )(fun_app$k (fun_app$l ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((case_stream$a ?v0 ?v1 )))):named a67 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (sdrop_while$ ?v0 ?v1 )(ite (fun_app$b ?v0 (shd$b ?v1 ))(sdrop_while$ ?v0 (stl$b ?v1 ))?v1 ))):named a68 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(= (sdrop_while$a ?v0 ?v1 )(ite (fun_app$ab ?v0 (shd$a ?v1 ))(sdrop_while$a ?v0 (stl$a ?v1 ))?v1 ))):named a69 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sdrop_while$b ?v0 ?v1 )(ite (fun_app$g ?v0 (shd$ ?v1 ))(sdrop_while$b ?v0 (stl$ ?v1 ))?v1 ))):named a70 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (tree$ (lab$a ?v0 )(sub$b ?v0 ))?v0 )):named a71 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (tree$a (lab$b ?v0 )(sub$ ?v0 ))?v0 )):named a72 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v2 A_treeFI_list_a_treeFI_list_prod$ ))(=> (and (member$g ?v0 (set$c (sub$c ?v1 )))(member$a ?v2 (set_treeFI$ ?v0 )))(member$a ?v2 (set_treeFI$ ?v1 )))):named a73 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (member$h ?v0 (set$d (sub$d ?v1 )))(member$b ?v2 (set_treeFI$a ?v0 )))(member$b ?v2 (set_treeFI$a ?v1 )))):named a74 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ )(?v1 A_treeFI_stream_treeFI$ )(?v2 A_treeFI_stream$ ))(=> (and (member$i ?v0 (set$e (sub$e ?v1 )))(member$c ?v2 (set_treeFI$b ?v0 )))(member$c ?v2 (set_treeFI$b ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_stream_treeFI$ )(?v1 A_stream_treeFI$ )(?v2 A_stream$ ))(=> (and (member$j ?v0 (set$f (sub$f ?v1 )))(member$d ?v2 (set_treeFI$c ?v0 )))(member$d ?v2 (set_treeFI$c ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI$ ))(=> (and (member$b ?v0 (set$b (sub$b ?v1 )))(member$ ?v2 (set_treeFI$d ?v0 )))(member$ ?v2 (set_treeFI$d ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A$ ))(=> (and (member$ ?v0 (set$ (sub$ ?v1 )))(member$e ?v2 (set_treeFI$e ?v0 )))(member$e ?v2 (set_treeFI$e ?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (=> (= ?v0 (tree$ (lab$a ?v0 )(sub$b ?v0 )))false )false )):named a79 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (=> (= ?v0 (tree$a (lab$b ?v0 )(sub$ ?v0 )))false )false )):named a80 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (lab$a (trev$ ?v0 ))(lab$a ?v0 ))):named a81 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (lab$b (fun_app$ac trev$a ?v0 ))(lab$b ?v0 ))):named a82 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (sCons$b (shd$b ?v0 )(stl$b ?v0 ))?v0 )):named a83 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a84 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a85 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v1 A_treeFI_list_a_treeFI_list_prod_set$ ))(=> (and (member$k ?v0 (streams$ ?v1 ))(=> (and (member$a (shd$c ?v0 )?v1 )(member$k (stl$c ?v0 )(streams$ ?v1 )))false ))false )):named a86 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (and (member$l ?v0 (streams$a ?v1 ))(=> (and (member$b (shd$d ?v0 )?v1 )(member$l (stl$d ?v0 )(streams$a ?v1 )))false ))false )):named a87 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (and (member$m ?v0 (streams$b ?v1 ))(=> (and (member$c (shd$e ?v0 )?v1 )(member$m (stl$e ?v0 )(streams$b ?v1 )))false ))false )):named a88 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$n ?v0 (streams$c ?v1 ))(=> (and (member$d (shd$f ?v0 )?v1 )(member$n (stl$f ?v0 )(streams$c ?v1 )))false ))false )):named a89 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (and (member$o ?v0 (streams$d ?v1 ))(=> (and (member$p (shd$a ?v0 )?v1 )(member$o (stl$a ?v0 )(streams$d ?v1 )))false ))false )):named a90 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$c ?v0 (streams$e ?v1 ))(=> (and (member$ (shd$b ?v0 )?v1 )(member$c (stl$b ?v0 )(streams$e ?v1 )))false ))false )):named a91 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$d ?v0 (streams$f ?v1 ))(=> (and (member$e (shd$ ?v0 )?v1 )(member$d (stl$ ?v0 )(streams$f ?v1 )))false ))false )):named a92 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v1 A_treeFI_list_a_treeFI_list_prod_set$ ))(=> (and (member$k (stl$c ?v0 )(streams$ ?v1 ))(member$a (shd$c ?v0 )?v1 ))(member$k ?v0 (streams$ ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (and (member$l (stl$d ?v0 )(streams$a ?v1 ))(member$b (shd$d ?v0 )?v1 ))(member$l ?v0 (streams$a ?v1 )))):named a94 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (and (member$m (stl$e ?v0 )(streams$b ?v1 ))(member$c (shd$e ?v0 )?v1 ))(member$m ?v0 (streams$b ?v1 )))):named a95 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$n (stl$f ?v0 )(streams$c ?v1 ))(member$d (shd$f ?v0 )?v1 ))(member$n ?v0 (streams$c ?v1 )))):named a96 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (and (member$o (stl$a ?v0 )(streams$d ?v1 ))(member$p (shd$a ?v0 )?v1 ))(member$o ?v0 (streams$d ?v1 )))):named a97 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$c (stl$b ?v0 )(streams$e ?v1 ))(member$ (shd$b ?v0 )?v1 ))(member$c ?v0 (streams$e ?v1 )))):named a98 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$d (stl$ ?v0 )(streams$f ?v1 ))(member$e (shd$ ?v0 )?v1 ))(member$d ?v0 (streams$f ?v1 )))):named a99 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a100 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a101 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a102 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ )(?v2 A$ )(?v3 A_treeFI_list$ ))(= (= (tree$a ?v0 ?v1 )(tree$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a103 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ )(?v2 A_treeFI$ )(?v3 A_treeFI_treeFI_list$ ))(= (= (tree$ ?v0 ?v1 )(tree$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a104 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ ))(member$a ?v0 (set_treeFI$ (tree$b ?v0 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI_list$ ))(member$b ?v0 (set_treeFI$a (tree$c ?v0 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI_list$ ))(member$c ?v0 (set_treeFI$b (tree$d ?v0 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI_list$ ))(member$d ?v0 (set_treeFI$c (tree$e ?v0 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(member$e ?v0 (set_treeFI$e (tree$a ?v0 ?v1 )))):named a109 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(member$ ?v0 (set_treeFI$d (tree$ ?v0 ?v1 )))):named a110 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_stream_bool_fun$ )(?v1 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v2 A_treeFI_list_a_treeFI_list_prod_set$ ))(=> (and (fun_app$ad ?v0 ?v1 )(forall ((?v3 A_treeFI_list_a_treeFI_list_prod_stream$ ))(=> (fun_app$ad ?v0 ?v3 )(exists ((?v4 A_treeFI_list_a_treeFI_list_prod$ )(?v5 A_treeFI_list_a_treeFI_list_prod_stream$ ))(and (= ?v3 (sCons$c ?v4 ?v5 ))(and (member$a ?v4 ?v2 )(or (fun_app$ad ?v0 ?v5 )(member$k ?v5 (streams$ ?v2 )))))))))(member$k ?v1 (streams$ ?v2 )))):named a111 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream_bool_fun$ )(?v1 A_treeFI_treeFI_stream$ )(?v2 A_treeFI_treeFI_set$ ))(=> (and (fun_app$ae ?v0 ?v1 )(forall ((?v3 A_treeFI_treeFI_stream$ ))(=> (fun_app$ae ?v0 ?v3 )(exists ((?v4 A_treeFI_treeFI$ )(?v5 A_treeFI_treeFI_stream$ ))(and (= ?v3 (sCons$d ?v4 ?v5 ))(and (member$b ?v4 ?v2 )(or (fun_app$ae ?v0 ?v5 )(member$l ?v5 (streams$a ?v2 )))))))))(member$l ?v1 (streams$a ?v2 )))):named a112 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream_bool_fun$ )(?v1 A_treeFI_stream_stream$ )(?v2 A_treeFI_stream_set$ ))(=> (and (fun_app$af ?v0 ?v1 )(forall ((?v3 A_treeFI_stream_stream$ ))(=> (fun_app$af ?v0 ?v3 )(exists ((?v4 A_treeFI_stream$ )(?v5 A_treeFI_stream_stream$ ))(and (= ?v3 (sCons$e ?v4 ?v5 ))(and (member$c ?v4 ?v2 )(or (fun_app$af ?v0 ?v5 )(member$m ?v5 (streams$b ?v2 )))))))))(member$m ?v1 (streams$b ?v2 )))):named a113 ))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(=> (and (fun_app$ag ?v0 ?v1 )(forall ((?v3 A_stream_stream$ ))(=> (fun_app$ag ?v0 ?v3 )(exists ((?v4 A_stream$ )(?v5 A_stream_stream$ ))(and (= ?v3 (sCons$f ?v4 ?v5 ))(and (member$d ?v4 ?v2 )(or (fun_app$ag ?v0 ?v5 )(member$n ?v5 (streams$c ?v2 )))))))))(member$n ?v1 (streams$c ?v2 )))):named a114 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_set$ ))(=> (and (fun_app$f ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$f ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (member$e ?v4 ?v2 )(or (fun_app$f ?v0 ?v5 )(member$d ?v5 (streams$f ?v2 )))))))))(member$d ?v1 (streams$f ?v2 )))):named a115 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_set$ ))(=> (and (fun_app$x ?v0 ?v1 )(forall ((?v3 A_a_prod_stream$ ))(=> (fun_app$x ?v0 ?v3 )(exists ((?v4 A_a_prod$ )(?v5 A_a_prod_stream$ ))(and (= ?v3 (sCons$a ?v4 ?v5 ))(and (member$p ?v4 ?v2 )(or (fun_app$x ?v0 ?v5 )(member$o ?v5 (streams$d ?v2 )))))))))(member$o ?v1 (streams$d ?v2 )))):named a116 ))
(assert (! (forall ((?v0 A_treeFI_stream_bool_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_set$ ))(=> (and (fun_app$e ?v0 ?v1 )(forall ((?v3 A_treeFI_stream$ ))(=> (fun_app$e ?v0 ?v3 )(exists ((?v4 A_treeFI$ )(?v5 A_treeFI_stream$ ))(and (= ?v3 (sCons$b ?v4 ?v5 ))(and (member$ ?v4 ?v2 )(or (fun_app$e ?v0 ?v5 )(member$c ?v5 (streams$e ?v2 )))))))))(member$c ?v1 (streams$e ?v2 )))):named a117 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v1 A_treeFI_list_a_treeFI_list_prod_set$ ))(=> (and (member$k ?v0 (streams$ ?v1 ))(forall ((?v2 A_treeFI_list_a_treeFI_list_prod$ )(?v3 A_treeFI_list_a_treeFI_list_prod_stream$ ))(=> (and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$k ?v3 (streams$ ?v1 ))))false )))false )):named a118 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (and (member$l ?v0 (streams$a ?v1 ))(forall ((?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI_stream$ ))(=> (and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$l ?v3 (streams$a ?v1 ))))false )))false )):named a119 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (and (member$m ?v0 (streams$b ?v1 ))(forall ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream_stream$ ))(=> (and (= ?v0 (sCons$e ?v2 ?v3 ))(and (member$c ?v2 ?v1 )(member$m ?v3 (streams$b ?v1 ))))false )))false )):named a120 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$n ?v0 (streams$c ?v1 ))(forall ((?v2 A_stream$ )(?v3 A_stream_stream$ ))(=> (and (= ?v0 (sCons$f ?v2 ?v3 ))(and (member$d ?v2 ?v1 )(member$n ?v3 (streams$c ?v1 ))))false )))false )):named a121 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$d ?v0 (streams$f ?v1 ))(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$e ?v2 ?v1 )(member$d ?v3 (streams$f ?v1 ))))false )))false )):named a122 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (and (member$o ?v0 (streams$d ?v1 ))(forall ((?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(=> (and (= ?v0 (sCons$a ?v2 ?v3 ))(and (member$p ?v2 ?v1 )(member$o ?v3 (streams$d ?v1 ))))false )))false )):named a123 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$c ?v0 (streams$e ?v1 ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(=> (and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$c ?v3 (streams$e ?v1 ))))false )))false )):named a124 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a125 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(=> (forall ((?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(=> (= ?v0 (sCons$b ?v1 ?v2 ))false ))false )):named a126 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(=> (forall ((?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a127 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (forall ((?v1 A$ )(?v2 A_treeFI_list$ ))(=> (= ?v0 (tree$a ?v1 ?v2 ))false ))false )):named a128 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (forall ((?v1 A_treeFI$ )(?v2 A_treeFI_treeFI_list$ ))(=> (= ?v0 (tree$ ?v1 ?v2 ))false ))false )):named a129 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v1 A_treeFI_list_a_treeFI_list_prod_set$ ))(= (member$k ?v0 (streams$ ?v1 ))(exists ((?v2 A_treeFI_list_a_treeFI_list_prod$ )(?v3 A_treeFI_list_a_treeFI_list_prod_stream$ ))(and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$k ?v3 (streams$ ?v1 ))))))):named a130 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(= (member$l ?v0 (streams$a ?v1 ))(exists ((?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI_stream$ ))(and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$l ?v3 (streams$a ?v1 ))))))):named a131 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(= (member$m ?v0 (streams$b ?v1 ))(exists ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream_stream$ ))(and (= ?v0 (sCons$e ?v2 ?v3 ))(and (member$c ?v2 ?v1 )(member$m ?v3 (streams$b ?v1 ))))))):named a132 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(= (member$n ?v0 (streams$c ?v1 ))(exists ((?v2 A_stream$ )(?v3 A_stream_stream$ ))(and (= ?v0 (sCons$f ?v2 ?v3 ))(and (member$d ?v2 ?v1 )(member$n ?v3 (streams$c ?v1 ))))))):named a133 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$d ?v0 (streams$f ?v1 ))(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$e ?v2 ?v1 )(member$d ?v3 (streams$f ?v1 ))))))):named a134 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(= (member$o ?v0 (streams$d ?v1 ))(exists ((?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(and (= ?v0 (sCons$a ?v2 ?v3 ))(and (member$p ?v2 ?v1 )(member$o ?v3 (streams$d ?v1 ))))))):named a135 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(= (member$c ?v0 (streams$e ?v1 ))(exists ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$c ?v3 (streams$e ?v1 ))))))):named a136 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v1 A$ )(?v2 A_treeFI_list$ ))(! (= (case_treeFI$ ?v0 (tree$a ?v1 ?v2 ))(fun_app$q (fun_app$r ?v0 ?v1 )?v2 )):pattern ((case_treeFI$ ?v0 (tree$a ?v1 ?v2 ))))):named a137 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_fun_fun$ )(?v1 A$ )(?v2 A_treeFI_list$ ))(! (= (fun_app$aa (case_treeFI$a ?v0 )(tree$a ?v1 ?v2 ))(fun_app$m (fun_app$n ?v0 ?v1 )?v2 )):pattern ((fun_app$aa (case_treeFI$a ?v0 )(tree$a ?v1 ?v2 ))))):named a138 ))
(assert (! (forall ((?v0 A_a_stream_a_stream_fun_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (case_stream$ ?v0 (sCons$ ?v1 ?v2 ))(fun_app$o (fun_app$p ?v0 ?v1 )?v2 )):pattern ((case_stream$ ?v0 (sCons$ ?v1 ?v2 ))))):named a139 ))
(assert (! (forall ((?v0 A_a_stream_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (case_stream$a ?v0 (sCons$ ?v1 ?v2 ))(fun_app$k (fun_app$l ?v0 ?v1 )?v2 )):pattern ((case_stream$a ?v0 (sCons$ ?v1 ?v2 ))))):named a140 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sdrop_while$b ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$g ?v0 ?v1 )(sdrop_while$b ?v0 ?v2 )(sCons$ ?v1 ?v2 ))):pattern ((sdrop_while$b ?v0 (sCons$ ?v1 ?v2 ))))):named a141 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (sdrop_while$ ?v0 (sCons$b ?v1 ?v2 ))(ite (fun_app$b ?v0 ?v1 )(sdrop_while$ ?v0 ?v2 )(sCons$b ?v1 ?v2 ))):pattern ((sdrop_while$ ?v0 (sCons$b ?v1 ?v2 ))))):named a142 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (sdrop_while$a ?v0 (sCons$a ?v1 ?v2 ))(ite (fun_app$ab ?v0 ?v1 )(sdrop_while$a ?v0 ?v2 )(sCons$a ?v1 ?v2 ))):pattern ((sdrop_while$a ?v0 (sCons$a ?v1 ?v2 ))))):named a143 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v2 A_treeFI_list_a_treeFI_list_prod_set$ ))(= (member$k (sCons$c ?v0 ?v1 )(streams$ ?v2 ))(and (member$a ?v0 ?v2 )(member$k ?v1 (streams$ ?v2 ))))):named a144 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_stream$ )(?v2 A_treeFI_treeFI_set$ ))(= (member$l (sCons$d ?v0 ?v1 )(streams$a ?v2 ))(and (member$b ?v0 ?v2 )(member$l ?v1 (streams$a ?v2 ))))):named a145 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_stream$ )(?v2 A_treeFI_stream_set$ ))(= (member$m (sCons$e ?v0 ?v1 )(streams$b ?v2 ))(and (member$c ?v0 ?v2 )(member$m ?v1 (streams$b ?v2 ))))):named a146 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(= (member$n (sCons$f ?v0 ?v1 )(streams$c ?v2 ))(and (member$d ?v0 ?v2 )(member$n ?v1 (streams$c ?v2 ))))):named a147 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_set$ ))(= (member$d (sCons$ ?v0 ?v1 )(streams$f ?v2 ))(and (member$e ?v0 ?v2 )(member$d ?v1 (streams$f ?v2 ))))):named a148 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_set$ ))(= (member$o (sCons$a ?v0 ?v1 )(streams$d ?v2 ))(and (member$p ?v0 ?v2 )(member$o ?v1 (streams$d ?v2 ))))):named a149 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_set$ ))(= (member$c (sCons$b ?v0 ?v1 )(streams$e ?v2 ))(and (member$ ?v0 ?v2 )(member$c ?v1 (streams$e ?v2 ))))):named a150 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (fun_app$ac trev$a (fun_app$ac trev$a ?v0 ))?v0 )):named a151 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )(?v2 A_treeFI_list_a_treeFI_list_prod$ )(?v3 A_treeFI_list_a_treeFI_list_prod$ ))(=> (and (member$g ?v0 (set$c ?v1 ))(member$a ?v2 (set_treeFI$ ?v0 )))(member$a ?v2 (set_treeFI$ (tree$b ?v3 ?v1 ))))):named a152 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI_list$ )(?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI$ ))(=> (and (member$h ?v0 (set$d ?v1 ))(member$b ?v2 (set_treeFI$a ?v0 )))(member$b ?v2 (set_treeFI$a (tree$c ?v3 ?v1 ))))):named a153 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ )(?v1 A_treeFI_stream_treeFI_list$ )(?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream$ ))(=> (and (member$i ?v0 (set$e ?v1 ))(member$c ?v2 (set_treeFI$b ?v0 )))(member$c ?v2 (set_treeFI$b (tree$d ?v3 ?v1 ))))):named a154 ))
(assert (! (forall ((?v0 A_stream_treeFI$ )(?v1 A_stream_treeFI_list$ )(?v2 A_stream$ )(?v3 A_stream$ ))(=> (and (member$j ?v0 (set$f ?v1 ))(member$d ?v2 (set_treeFI$c ?v0 )))(member$d ?v2 (set_treeFI$c (tree$e ?v3 ?v1 ))))):named a155 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_list$ )(?v2 A_treeFI$ )(?v3 A_treeFI$ ))(=> (and (member$b ?v0 (set$b ?v1 ))(member$ ?v2 (set_treeFI$d ?v0 )))(member$ ?v2 (set_treeFI$d (tree$ ?v3 ?v1 ))))):named a156 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ )(?v2 A$ )(?v3 A$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(member$e ?v2 (set_treeFI$e ?v0 )))(member$e ?v2 (set_treeFI$e (tree$a ?v3 ?v1 ))))):named a157 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v2 A_treeFI_list_a_treeFI_list_prod_a_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun_fun$ ))(=> (and (member$a ?v0 (set_treeFI$ ?v1 ))(and (forall ((?v3 A_treeFI_list_a_treeFI_list_prod$ )(?v4 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ ))(fun_app$ah (fun_app$ai ?v2 ?v3 )(tree$b ?v3 ?v4 )))(forall ((?v3 A_treeFI_list_a_treeFI_list_prod$ )(?v4 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )(?v5 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v6 A_treeFI_list_a_treeFI_list_prod$ ))(=> (and (member$g ?v5 (set$c ?v4 ))(and (member$a ?v6 (set_treeFI$ ?v5 ))(fun_app$ah (fun_app$ai ?v2 ?v6 )?v5 )))(fun_app$ah (fun_app$ai ?v2 ?v6 )(tree$b ?v3 ?v4 ))))))(fun_app$ah (fun_app$ai ?v2 ?v0 )?v1 ))):named a158 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ )(?v2 A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ ))(=> (and (member$b ?v0 (set_treeFI$a ?v1 ))(and (forall ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI_treeFI_list$ ))(fun_app$aj (fun_app$ak ?v2 ?v3 )(tree$c ?v3 ?v4 )))(forall ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI_treeFI_list$ )(?v5 A_treeFI_treeFI_treeFI$ )(?v6 A_treeFI_treeFI$ ))(=> (and (member$h ?v5 (set$d ?v4 ))(and (member$b ?v6 (set_treeFI$a ?v5 ))(fun_app$aj (fun_app$ak ?v2 ?v6 )?v5 )))(fun_app$aj (fun_app$ak ?v2 ?v6 )(tree$c ?v3 ?v4 ))))))(fun_app$aj (fun_app$ak ?v2 ?v0 )?v1 ))):named a159 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI$ )(?v2 A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ ))(=> (and (member$c ?v0 (set_treeFI$b ?v1 ))(and (forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream_treeFI_list$ ))(fun_app$al (fun_app$am ?v2 ?v3 )(tree$d ?v3 ?v4 )))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream_treeFI_list$ )(?v5 A_treeFI_stream_treeFI$ )(?v6 A_treeFI_stream$ ))(=> (and (member$i ?v5 (set$e ?v4 ))(and (member$c ?v6 (set_treeFI$b ?v5 ))(fun_app$al (fun_app$am ?v2 ?v6 )?v5 )))(fun_app$al (fun_app$am ?v2 ?v6 )(tree$d ?v3 ?v4 ))))))(fun_app$al (fun_app$am ?v2 ?v0 )?v1 ))):named a160 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI$ )(?v2 A_stream_a_stream_treeFI_bool_fun_fun$ ))(=> (and (member$d ?v0 (set_treeFI$c ?v1 ))(and (forall ((?v3 A_stream$ )(?v4 A_stream_treeFI_list$ ))(fun_app$an (fun_app$ao ?v2 ?v3 )(tree$e ?v3 ?v4 )))(forall ((?v3 A_stream$ )(?v4 A_stream_treeFI_list$ )(?v5 A_stream_treeFI$ )(?v6 A_stream$ ))(=> (and (member$j ?v5 (set$f ?v4 ))(and (member$d ?v6 (set_treeFI$c ?v5 ))(fun_app$an (fun_app$ao ?v2 ?v6 )?v5 )))(fun_app$an (fun_app$ao ?v2 ?v6 )(tree$e ?v3 ?v4 ))))))(fun_app$an (fun_app$ao ?v2 ?v0 )?v1 ))):named a161 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_a_treeFI_treeFI_bool_fun_fun$ ))(=> (and (member$ ?v0 (set_treeFI$d ?v1 ))(and (forall ((?v3 A_treeFI$ )(?v4 A_treeFI_treeFI_list$ ))(fun_app$d (fun_app$ap ?v2 ?v3 )(tree$ ?v3 ?v4 )))(forall ((?v3 A_treeFI$ )(?v4 A_treeFI_treeFI_list$ )(?v5 A_treeFI_treeFI$ )(?v6 A_treeFI$ ))(=> (and (member$b ?v5 (set$b ?v4 ))(and (member$ ?v6 (set_treeFI$d ?v5 ))(fun_app$d (fun_app$ap ?v2 ?v6 )?v5 )))(fun_app$d (fun_app$ap ?v2 ?v6 )(tree$ ?v3 ?v4 ))))))(fun_app$d (fun_app$ap ?v2 ?v0 )?v1 ))):named a162 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI$ )(?v2 A_a_treeFI_bool_fun_fun$ ))(=> (and (member$e ?v0 (set_treeFI$e ?v1 ))(and (forall ((?v3 A$ )(?v4 A_treeFI_list$ ))(fun_app$b (fun_app$aq ?v2 ?v3 )(tree$a ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_treeFI_list$ )(?v5 A_treeFI$ )(?v6 A$ ))(=> (and (member$ ?v5 (set$ ?v4 ))(and (member$e ?v6 (set_treeFI$e ?v5 ))(fun_app$b (fun_app$aq ?v2 ?v6 )?v5 )))(fun_app$b (fun_app$aq ?v2 ?v6 )(tree$a ?v3 ?v4 ))))))(fun_app$b (fun_app$aq ?v2 ?v0 )?v1 ))):named a163 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_bool_fun$ ))(=> (forall ((?v2 A_treeFI$ ))(= (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a164 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_set$ ))(= (collect$a (uu$ ?v0 ))?v0 )):named a165 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ ))(= (collect$b (uua$ ?v0 ))?v0 )):named a166 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ ))(= (collect$c (uub$ ?v0 ))?v0 )):named a167 ))
(assert (! (forall ((?v0 A_stream_set$ ))(= (collect$d (uuc$ ?v0 ))?v0 )):named a168 ))
(assert (! (forall ((?v0 A_set$ ))(= (collect$e (uud$ ?v0 ))?v0 )):named a169 ))
(assert (! (forall ((?v0 A_treeFI_set$ ))(= (collect$ (uue$ ?v0 ))?v0 )):named a170 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$c ?v1 ?v0 ))):named a171 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_bool_fun$ ))(= (member$b ?v0 (collect$b ?v1 ))(fun_app$d ?v1 ?v0 ))):named a172 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_bool_fun$ ))(= (member$c ?v0 (collect$c ?v1 ))(fun_app$e ?v1 ?v0 ))):named a173 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_bool_fun$ ))(= (member$d ?v0 (collect$d ?v1 ))(fun_app$f ?v1 ?v0 ))):named a174 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ ))(= (member$e ?v0 (collect$e ?v1 ))(fun_app$g ?v1 ?v0 ))):named a175 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$b ?v1 ?v0 ))):named a176 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI$ ))(=> (and (member$a ?v0 (set_treeFI$ ?v1 ))(and (forall ((?v2 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ ))(=> (= ?v1 (tree$b ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI_list_a_treeFI_list_prod$ )(?v3 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )(?v4 A_treeFI_list_a_treeFI_list_prod_treeFI$ ))(=> (and (= ?v1 (tree$b ?v2 ?v3 ))(and (member$g ?v4 (set$c ?v3 ))(member$a ?v0 (set_treeFI$ ?v4 ))))false ))))false )):named a177 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ ))(=> (and (member$b ?v0 (set_treeFI$a ?v1 ))(and (forall ((?v2 A_treeFI_treeFI_treeFI_list$ ))(=> (= ?v1 (tree$c ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI_treeFI_list$ )(?v4 A_treeFI_treeFI_treeFI$ ))(=> (and (= ?v1 (tree$c ?v2 ?v3 ))(and (member$h ?v4 (set$d ?v3 ))(member$b ?v0 (set_treeFI$a ?v4 ))))false ))))false )):named a178 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI$ ))(=> (and (member$c ?v0 (set_treeFI$b ?v1 ))(and (forall ((?v2 A_treeFI_stream_treeFI_list$ ))(=> (= ?v1 (tree$d ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream_treeFI_list$ )(?v4 A_treeFI_stream_treeFI$ ))(=> (and (= ?v1 (tree$d ?v2 ?v3 ))(and (member$i ?v4 (set$e ?v3 ))(member$c ?v0 (set_treeFI$b ?v4 ))))false ))))false )):named a179 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI$ ))(=> (and (member$d ?v0 (set_treeFI$c ?v1 ))(and (forall ((?v2 A_stream_treeFI_list$ ))(=> (= ?v1 (tree$e ?v0 ?v2 ))false ))(forall ((?v2 A_stream$ )(?v3 A_stream_treeFI_list$ )(?v4 A_stream_treeFI$ ))(=> (and (= ?v1 (tree$e ?v2 ?v3 ))(and (member$j ?v4 (set$f ?v3 ))(member$d ?v0 (set_treeFI$c ?v4 ))))false ))))false )):named a180 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (member$ ?v0 (set_treeFI$d ?v1 ))(and (forall ((?v2 A_treeFI_treeFI_list$ ))(=> (= ?v1 (tree$ ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_treeFI_list$ )(?v4 A_treeFI_treeFI$ ))(=> (and (= ?v1 (tree$ ?v2 ?v3 ))(and (member$b ?v4 (set$b ?v3 ))(member$ ?v0 (set_treeFI$d ?v4 ))))false ))))false )):named a181 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI$ ))(=> (and (member$e ?v0 (set_treeFI$e ?v1 ))(and (forall ((?v2 A_treeFI_list$ ))(=> (= ?v1 (tree$a ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_treeFI_list$ )(?v4 A_treeFI$ ))(=> (and (= ?v1 (tree$a ?v2 ?v3 ))(and (member$ ?v4 (set$ ?v3 ))(member$e ?v0 (set_treeFI$e ?v4 ))))false ))))false )):named a182 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (stl$b (sCons$b ?v0 ?v1 ))?v1 ):pattern ((sCons$b ?v0 ?v1 )))):named a183 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (stl$a (sCons$a ?v0 ?v1 ))?v1 ):pattern ((sCons$a ?v0 ?v1 )))):named a184 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a185 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (shd$b (sCons$b ?v0 ?v1 ))?v0 ):pattern ((sCons$b ?v0 ?v1 )))):named a186 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (shd$a (sCons$a ?v0 ?v1 ))?v0 ):pattern ((sCons$a ?v0 ?v1 )))):named a187 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a188 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_a_stream_a_stream_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$f ?v0 (case_stream$ ?v1 ?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$f ?v0 (fun_app$o (fun_app$p ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a189 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_stream_a_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$g ?v0 (case_stream$a ?v1 ?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$g ?v0 (fun_app$k (fun_app$l ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a190 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_a_stream_a_stream_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$f ?v0 (case_stream$ ?v1 ?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$f ?v0 (fun_app$o (fun_app$p ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a191 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_stream_a_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$g ?v0 (case_stream$a ?v1 ?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$g ?v0 (fun_app$k (fun_app$l ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a192 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (member$c ?v0 (streams$e ?v1 ))(member$c (stl$b ?v0 )(streams$e ?v1 )))):named a193 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (member$o ?v0 (streams$d ?v1 ))(member$o (stl$a ?v0 )(streams$d ?v1 )))):named a194 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$d ?v0 (streams$f ?v1 ))(member$d (stl$ ?v0 )(streams$f ?v1 )))):named a195 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v1 A_treeFI_list_a_treeFI_list_prod_set$ ))(=> (member$k ?v0 (streams$ ?v1 ))(member$a (shd$c ?v0 )?v1 ))):named a196 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (member$l ?v0 (streams$a ?v1 ))(member$b (shd$d ?v0 )?v1 ))):named a197 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (member$m ?v0 (streams$b ?v1 ))(member$c (shd$e ?v0 )?v1 ))):named a198 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (member$n ?v0 (streams$c ?v1 ))(member$d (shd$f ?v0 )?v1 ))):named a199 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (member$o ?v0 (streams$d ?v1 ))(member$p (shd$a ?v0 )?v1 ))):named a200 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (member$c ?v0 (streams$e ?v1 ))(member$ (shd$b ?v0 )?v1 ))):named a201 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$d ?v0 (streams$f ?v1 ))(member$e (shd$ ?v0 )?v1 ))):named a202 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (sub$b (tree$ ?v0 ?v1 ))?v1 ):pattern ((tree$ ?v0 ?v1 )))):named a203 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (sub$ (tree$a ?v0 ?v1 ))?v1 ):pattern ((tree$a ?v0 ?v1 )))):named a204 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (lab$a (tree$ ?v0 ?v1 ))?v0 ):pattern ((tree$ ?v0 ?v1 )))):named a205 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (lab$b (tree$a ?v0 ?v1 ))?v0 ):pattern ((tree$a ?v0 ?v1 )))):named a206 ))
(assert (! (forall ((?v0 A_treeFI_list_bool_fun$ )(?v1 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$ar ?v0 (case_treeFI$ ?v1 ?v2 ))(not (and (= ?v2 (tree$a (lab$b ?v2 )(sub$ ?v2 )))(not (fun_app$ar ?v0 (fun_app$q (fun_app$r ?v1 (lab$b ?v2 ))(sub$ ?v2 )))))))):named a207 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_treeFI_list_a_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$g ?v0 (fun_app$aa (case_treeFI$a ?v1 )?v2 ))(not (and (= ?v2 (tree$a (lab$b ?v2 )(sub$ ?v2 )))(not (fun_app$g ?v0 (fun_app$m (fun_app$n ?v1 (lab$b ?v2 ))(sub$ ?v2 )))))))):named a208 ))
(assert (! (forall ((?v0 A_treeFI_list_bool_fun$ )(?v1 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$ar ?v0 (case_treeFI$ ?v1 ?v2 ))(=> (= ?v2 (tree$a (lab$b ?v2 )(sub$ ?v2 )))(fun_app$ar ?v0 (fun_app$q (fun_app$r ?v1 (lab$b ?v2 ))(sub$ ?v2 )))))):named a209 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_treeFI_list_a_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$g ?v0 (fun_app$aa (case_treeFI$a ?v1 )?v2 ))(=> (= ?v2 (tree$a (lab$b ?v2 )(sub$ ?v2 )))(fun_app$g ?v0 (fun_app$m (fun_app$n ?v1 (lab$b ?v2 ))(sub$ ?v2 )))))):named a210 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_treeFI$ ))(member$a (lab$c ?v0 )(set_treeFI$ ?v0 ))):named a211 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ ))(member$b (lab$d ?v0 )(set_treeFI$a ?v0 ))):named a212 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ ))(member$c (lab$e ?v0 )(set_treeFI$b ?v0 ))):named a213 ))
(assert (! (forall ((?v0 A_stream_treeFI$ ))(member$d (lab$f ?v0 )(set_treeFI$c ?v0 ))):named a214 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(member$ (lab$a ?v0 )(set_treeFI$d ?v0 ))):named a215 ))
(assert (! (forall ((?v0 A_treeFI$ ))(member$e (lab$b ?v0 )(set_treeFI$e ?v0 ))):named a216 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(=> (=> (= ?v0 (sCons$b (shd$b ?v0 )(stl$b ?v0 )))false )false )):named a217 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(=> (=> (= ?v0 (sCons$a (shd$a ?v0 )(stl$a ?v0 )))false )false )):named a218 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a219 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$f (smember$ ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$f (smember$ ?v0 )?v2 ))):pattern ((fun_app$f (smember$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a220 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (fun_app$e (smember$a ?v0 )(sCons$b ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$e (smember$a ?v0 )?v2 ))):pattern ((fun_app$e (smember$a ?v0 )(sCons$b ?v1 ?v2 ))))):named a221 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (fun_app$x (smember$b ?v0 )(sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$x (smember$b ?v0 )?v2 ))):pattern ((fun_app$x (smember$b ?v0 )(sCons$a ?v1 ?v2 ))))):named a222 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(= (sinterleave$ ?v0 ?v1 )(sCons$b (shd$b ?v0 )(sinterleave$ ?v1 (stl$b ?v0 ))))):named a223 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (sinterleave$a ?v0 ?v1 )(sCons$a (shd$a ?v0 )(sinterleave$a ?v1 (stl$a ?v0 ))))):named a224 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (sinterleave$b ?v0 ?v1 )(sCons$ (shd$ ?v0 )(sinterleave$b ?v1 (stl$ ?v0 ))))):named a225 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$as (fun_app$at ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a226 ))
(assert (! (forall ((?v0 A_a_treeFI_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$a ?v0 ?v1 ?v2 )(sCons$ (fun_app$aa (fun_app$au ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a227 ))
(assert (! (forall ((?v0 A_treeFI_a_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (smap2$b ?v0 ?v1 ?v2 )(sCons$ (fun_app$as (fun_app$av ?v0 (shd$b ?v1 ))(shd$ ?v2 ))(smap2$b ?v0 (stl$b ?v1 )(stl$ ?v2 ))))):named a228 ))
(assert (! (forall ((?v0 A_a_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$c ?v0 ?v1 ?v2 )(sCons$b (fun_app$aw (fun_app$ax ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$c ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a229 ))
(assert (! (forall ((?v0 A_a_a_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (smap2$d ?v0 ?v1 ?v2 )(sCons$ (fun_app$ay (fun_app$az ?v0 (shd$ ?v1 ))(shd$a ?v2 ))(smap2$d ?v0 (stl$ ?v1 )(stl$a ?v2 ))))):named a230 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$e ?v0 ?v1 ?v2 )(sCons$ (fun_app$aa (fun_app$ba ?v0 (shd$b ?v1 ))(shd$b ?v2 ))(smap2$e ?v0 (stl$b ?v1 )(stl$b ?v2 ))))):named a231 ))
(assert (! (forall ((?v0 A_a_prod_a_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ ))(= (smap2$f ?v0 ?v1 ?v2 )(sCons$ (fun_app$as (fun_app$bb ?v0 (shd$a ?v1 ))(shd$ ?v2 ))(smap2$f ?v0 (stl$a ?v1 )(stl$ ?v2 ))))):named a232 ))
(assert (! (forall ((?v0 A_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$g ?v0 ?v1 ?v2 )(sCons$b (fun_app$ac (fun_app$bc ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$g ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a233 ))
(assert (! (forall ((?v0 A_treeFI_a_a_treeFI_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (smap2$h ?v0 ?v1 ?v2 )(sCons$b (fun_app$aw (fun_app$bd ?v0 (shd$b ?v1 ))(shd$ ?v2 ))(smap2$h ?v0 (stl$b ?v1 )(stl$ ?v2 ))))):named a234 ))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$i ?v0 ?v1 ?v2 )(sCons$a (fun_app$be (fun_app$bf ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$i ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a235 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$f (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(fun_app$f (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$f (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a236 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (fun_app$e (pred_stream$a ?v0 )(sCons$b ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$e (pred_stream$a ?v0 )?v2 ))):pattern ((fun_app$e (pred_stream$a ?v0 )(sCons$b ?v1 ?v2 ))))):named a237 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (fun_app$x (pred_stream$b ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$ab ?v0 ?v1 )(fun_app$x (pred_stream$b ?v0 )?v2 ))):pattern ((fun_app$x (pred_stream$b ?v0 )(sCons$a ?v1 ?v2 ))))):named a238 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ )(?v2 Nat$ )(?v3 Nat_stream$ ))(= (= (fun_app$bg (smap$ ?v0 )?v1 )(sCons$g ?v2 ?v3 ))(and (= (fun_app$j ?v0 (shd$g ?v1 ))?v2 )(= (fun_app$bg (smap$ ?v0 )(stl$g ?v1 ))?v3 )))):named a239 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$aa ?v0 (shd$b ?v1 ))?v2 )(= (smap$a ?v0 (stl$b ?v1 ))?v3 )))):named a240 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$ay ?v0 (shd$a ?v1 ))?v2 )(= (smap$b ?v0 (stl$a ?v1 ))?v3 )))):named a241 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$as ?v0 (shd$ ?v1 ))?v2 )(= (smap$c ?v0 (stl$ ?v1 ))?v3 )))):named a242 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (smap$d ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$aw ?v0 (shd$ ?v1 ))?v2 )(= (smap$d ?v0 (stl$ ?v1 ))?v3 )))):named a243 ))
(assert (! (forall ((?v0 A_a_prod_a_treeFI_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (smap$e ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$bh ?v0 (shd$a ?v1 ))?v2 )(= (smap$e ?v0 (stl$a ?v1 ))?v3 )))):named a244 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (smap$f ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$ac ?v0 (shd$b ?v1 ))?v2 )(= (smap$f ?v0 (stl$b ?v1 ))?v3 )))):named a245 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 A_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (smap$g ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$be ?v0 (shd$ ?v1 ))?v2 )(= (smap$g ?v0 (stl$ ?v1 ))?v3 )))):named a246 ))
(assert (! (forall ((?v0 A_treeFI_a_a_prod_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (smap$h ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$bi ?v0 (shd$b ?v1 ))?v2 )(= (smap$h ?v0 (stl$b ?v1 ))?v3 )))):named a247 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (smap$i ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$bj ?v0 (shd$a ?v1 ))?v2 )(= (smap$i ?v0 (stl$a ?v1 ))?v3 )))):named a248 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (sfilter$ ?v0 ?v1 )(sCons$b (shd$b (sdrop_while$ (fun_app$bk (comp$ uuf$ )?v0 )?v1 ))(sfilter$ ?v0 (stl$b (sdrop_while$ (fun_app$bk (comp$ uuf$ )?v0 )?v1 )))))):named a249 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(= (sfilter$a ?v0 ?v1 )(sCons$a (shd$a (sdrop_while$a (fun_app$bl (comp$a uuf$ )?v0 )?v1 ))(sfilter$a ?v0 (stl$a (sdrop_while$a (fun_app$bl (comp$a uuf$ )?v0 )?v1 )))))):named a250 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sfilter$b ?v0 ?v1 )(sCons$ (shd$ (sdrop_while$b (fun_app$bm (comp$b uuf$ )?v0 )?v1 ))(sfilter$b ?v0 (stl$ (sdrop_while$b (fun_app$bm (comp$b uuf$ )?v0 )?v1 )))))):named a251 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$f (stream_all$ ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$g ?v0 ?v1 )(fun_app$f (stream_all$ ?v0 )?v2 ))):pattern ((fun_app$f (stream_all$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a252 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (fun_app$e (stream_all$a ?v0 )(sCons$b ?v1 ?v2 ))(and (fun_app$b ?v0 ?v1 )(fun_app$e (stream_all$a ?v0 )?v2 ))):pattern ((fun_app$e (stream_all$a ?v0 )(sCons$b ?v1 ?v2 ))))):named a253 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (fun_app$x (stream_all$b ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$ab ?v0 ?v1 )(fun_app$x (stream_all$b ?v0 )?v2 ))):pattern ((fun_app$x (stream_all$b ?v0 )(sCons$a ?v1 ?v2 ))))):named a254 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_bool_fun$ ))(=> (and (fun_app$f ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$f ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (fun_app$g ?v2 ?v4 )(or (fun_app$f ?v0 ?v5 )(fun_app$f (streamsp$ ?v2 )?v5 ))))))))(fun_app$f (streamsp$ ?v2 )?v1 ))):named a255 ))
(assert (! (forall ((?v0 A_treeFI_stream_bool_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_bool_fun$ ))(=> (and (fun_app$e ?v0 ?v1 )(forall ((?v3 A_treeFI_stream$ ))(=> (fun_app$e ?v0 ?v3 )(exists ((?v4 A_treeFI$ )(?v5 A_treeFI_stream$ ))(and (= ?v3 (sCons$b ?v4 ?v5 ))(and (fun_app$b ?v2 ?v4 )(or (fun_app$e ?v0 ?v5 )(fun_app$e (streamsp$a ?v2 )?v5 ))))))))(fun_app$e (streamsp$a ?v2 )?v1 ))):named a256 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_bool_fun$ ))(=> (and (fun_app$x ?v0 ?v1 )(forall ((?v3 A_a_prod_stream$ ))(=> (fun_app$x ?v0 ?v3 )(exists ((?v4 A_a_prod$ )(?v5 A_a_prod_stream$ ))(and (= ?v3 (sCons$a ?v4 ?v5 ))(and (fun_app$ab ?v2 ?v4 )(or (fun_app$x ?v0 ?v5 )(fun_app$x (streamsp$b ?v2 )?v5 ))))))))(fun_app$x (streamsp$b ?v2 )?v1 ))):named a257 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (and (fun_app$f (streamsp$ ?v0 )?v1 )(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$g ?v0 ?v2 )(fun_app$f (streamsp$ ?v0 )?v3 )))false )))false )):named a258 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(=> (and (fun_app$e (streamsp$a ?v0 )?v1 )(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(=> (and (= ?v1 (sCons$b ?v2 ?v3 ))(and (fun_app$b ?v0 ?v2 )(fun_app$e (streamsp$a ?v0 )?v3 )))false )))false )):named a259 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(=> (and (fun_app$x (streamsp$b ?v0 )?v1 )(forall ((?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(=> (and (= ?v1 (sCons$a ?v2 ?v3 ))(and (fun_app$ab ?v0 ?v2 )(fun_app$x (streamsp$b ?v0 )?v3 )))false )))false )):named a260 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$b ?v1 )))):named a261 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_stream$ ))(= (stl$ (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$a ?v1 )))):named a262 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A_stream$ ))(= (stl$b (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$ ?v1 )))):named a263 ))
(assert (! (forall ((?v0 A_a_prod_a_treeFI_fun$ )(?v1 A_a_prod_stream$ ))(= (stl$b (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$a ?v1 )))):named a264 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$ ?v1 )))):named a265 ))
(assert (! (forall ((?v0 A_treeFI_a_a_prod_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$a (smap$h ?v0 ?v1 ))(smap$h ?v0 (stl$b ?v1 )))):named a266 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod_stream$ ))(= (stl$a (smap$i ?v0 ?v1 ))(smap$i ?v0 (stl$a ?v1 )))):named a267 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ ))(= (stl$g (fun_app$bg (smap$ ?v0 )?v1 ))(fun_app$bg (smap$ ?v0 )(stl$g ?v1 )))):named a268 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$b (smap$f ?v0 ?v1 ))(smap$f ?v0 (stl$b ?v1 )))):named a269 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$ ?v1 )))):named a270 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$g ?v0 ?v1 ))(fun_app$be ?v0 (shd$ ?v1 )))):named a271 ))
(assert (! (forall ((?v0 A_treeFI_a_a_prod_fun$ )(?v1 A_treeFI_stream$ ))(= (shd$a (smap$h ?v0 ?v1 ))(fun_app$bi ?v0 (shd$b ?v1 )))):named a272 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod_stream$ ))(= (shd$a (smap$i ?v0 ?v1 ))(fun_app$bj ?v0 (shd$a ?v1 )))):named a273 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_stream$ ))(= (shd$g (fun_app$bg (smap$ ?v0 )?v1 ))(fun_app$j ?v0 (shd$g ?v1 )))):named a274 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ ))(= (shd$b (smap$f ?v0 ?v1 ))(fun_app$ac ?v0 (shd$b ?v1 )))):named a275 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$c ?v0 ?v1 ))(fun_app$as ?v0 (shd$ ?v1 )))):named a276 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_stream$ ))(= (fun_app$bg (smap$ ?v0 )(fun_app$bg (smap$ ?v1 )?v2 ))(fun_app$bg (smap$ (fun_app$bn (comp$c ?v0 )?v1 ))?v2 ))):named a277 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_treeFI_fun$ )(?v3 A_treeFI_set$ ))(=> (and (member$c ?v0 (streams$e ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 ?v1 )(member$ (fun_app$ac ?v2 ?v4 )?v3 ))))(member$c (smap$f ?v2 ?v0 )(streams$e ?v3 )))):named a278 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (stl$ (sfilter$b ?v0 ?v1 ))(sfilter$b ?v0 (stl$ (sdrop_while$b (fun_app$bm (comp$b uuf$ )?v0 )?v1 ))))):named a279 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (shd$ (sfilter$b ?v0 ?v1 ))(shd$ (sdrop_while$b (fun_app$bm (comp$b uuf$ )?v0 )?v1 )))):named a280 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$ ?v0 ?v1 ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a281 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$as (fun_app$at ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a282 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$ (sinterleave$b ?v0 ?v1 ))(sinterleave$b ?v1 (stl$ ?v0 )))):named a283 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (sinterleave$b ?v0 ?v1 ))(shd$ ?v0 ))):named a284 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(! (= (fun_app$j (fun_app$bn (comp$c ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$bn (comp$c ?v0 )?v1 )?v2 )))):named a285 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_bool_fun$ )(?v3 Nat_nat_stream_fun$ )(?v4 Nat_nat_fun$ ))(= (fun_app$bo (comp$d (smap$ ?v0 ))(fun_app$bp (fun_app$bq (fun_app$br (corec_stream$ ?v1 )?v2 )?v3 )?v4 ))(fun_app$bp (fun_app$bq (fun_app$br (corec_stream$ (fun_app$bn (comp$c ?v0 )?v1 ))?v2 )(fun_app$bo (comp$d (smap$ ?v0 ))?v3 ))?v4 ))):named a286 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat_nat_fun$ )(?v4 Nat_nat_fun$ )(?v5 Nat$ ))(=> (= (fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))(fun_app$j ?v3 (fun_app$j ?v4 ?v5 )))(= (fun_app$j (fun_app$bn (comp$c ?v0 )?v1 )?v2 )(fun_app$j (fun_app$bn (comp$c ?v3 )?v4 )?v5 )))):named a287 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat_nat_fun$ )(?v4 Nat_nat_fun$ ))(=> (= (fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))(fun_app$j ?v3 (fun_app$j ?v4 ?v2 )))(= (fun_app$j (fun_app$bn (comp$c ?v0 )?v1 )?v2 )(fun_app$j (fun_app$bn (comp$c ?v3 )?v4 )?v2 )))):named a288 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ )(?v3 Nat_nat_fun$ )(?v4 Nat_nat_fun$ )(?v5 Nat_nat_fun$ ))(=> (= (fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))(fun_app$j ?v3 (fun_app$j ?v4 ?v2 )))(= (fun_app$j (fun_app$bn (comp$c (fun_app$bn (comp$c ?v5 )?v0 ))?v1 )?v2 )(fun_app$j (fun_app$bn (comp$c (fun_app$bn (comp$c ?v5 )?v3 ))?v4 )?v2 )))):named a289 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat$ ))(=> (= (fun_app$bn (comp$c ?v0 )?v1 )?v2 )(= (fun_app$j ?v0 (fun_app$j ?v1 ?v3 ))(fun_app$j ?v2 ?v3 )))):named a290 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (= (fun_app$bn (comp$c ?v0 )?v1 )?v2 )(= (fun_app$bn (comp$c ?v0 )(fun_app$bn (comp$c ?v1 )?v3 ))(fun_app$bn (comp$c ?v2 )?v3 )))):named a291 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ ))(= (fun_app$bn (comp$c (fun_app$bn (comp$c ?v0 )?v1 ))?v2 )(fun_app$bn (comp$c ?v0 )(fun_app$bn (comp$c ?v1 )?v2 )))):named a292 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(! (= (fun_app$j (fun_app$bn (comp$c ?v0 )?v1 )?v2 )(fun_app$j ?v0 (fun_app$j ?v1 ?v2 ))):pattern ((fun_app$j (fun_app$bn (comp$c ?v0 )?v1 )?v2 )))):named a293 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (and (= (fun_app$bn (comp$c ?v0 )?v1 )(fun_app$bn (comp$c ?v2 )?v3 ))(=> (forall ((?v4 Nat$ ))(= (fun_app$j ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$j ?v3 ?v4 ))))false ))false )):named a294 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ )(?v4 Nat_nat_fun$ )(?v5 Nat_nat_fun$ ))(=> (and (= (fun_app$bn (comp$c ?v0 )?v1 )(fun_app$bn (comp$c ?v2 )?v3 ))(= (fun_app$bn (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$bn (comp$c (fun_app$bn (comp$c ?v4 )?v0 ))?v1 )(fun_app$bn (comp$c ?v5 )?v3 )))):named a295 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ )(?v4 Nat_nat_fun$ )(?v5 Nat_nat_fun$ ))(=> (and (= (fun_app$bn (comp$c ?v0 )?v1 )(fun_app$bn (comp$c ?v2 )?v3 ))(= (fun_app$bn (comp$c ?v3 )?v4 )?v5 ))(= (fun_app$bn (comp$c ?v0 )(fun_app$bn (comp$c ?v1 )?v4 ))(fun_app$bn (comp$c ?v2 )?v5 )))):named a296 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ )(?v4 Nat$ ))(=> (= (fun_app$bn (comp$c ?v0 )?v1 )(fun_app$bn (comp$c ?v2 )?v3 ))(= (fun_app$j ?v0 (fun_app$j ?v1 ?v4 ))(fun_app$j ?v2 (fun_app$j ?v3 ?v4 ))))):named a297 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ )(?v3 Nat_nat_fun$ ))(=> (= (fun_app$bn (comp$c ?v0 )?v1 )?v2 )(= (fun_app$bn (comp$c (fun_app$bn (comp$c ?v3 )?v0 ))?v1 )(fun_app$bn (comp$c ?v3 )?v2 )))):named a298 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_nat_fun$ ))(= (fun_app$bn (comp$c ?v0 )(fun_app$bn (comp$c ?v1 )?v2 ))(fun_app$bn (comp$c (fun_app$bn (comp$c ?v0 )?v1 ))?v2 ))):named a299 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_a_treeFI_stream_bool_fun_fun$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v3 A_treeFI_stream$ ))(fun_app$e (fun_app$bs ?v2 (shd$b ?v3 ))?v3 ))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI$ ))(=> (and (member$ ?v4 (sset$ (stl$b ?v3 )))(fun_app$e (fun_app$bs ?v2 ?v4 )(stl$b ?v3 )))(fun_app$e (fun_app$bs ?v2 ?v4 )?v3 )))))(fun_app$e (fun_app$bs ?v2 ?v0 )?v1 ))):named a300 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_a_stream_bool_fun_fun$ ))(=> (and (member$e ?v0 (sset$a ?v1 ))(and (forall ((?v3 A_stream$ ))(fun_app$f (fun_app$bt ?v2 (shd$ ?v3 ))?v3 ))(forall ((?v3 A_stream$ )(?v4 A$ ))(=> (and (member$e ?v4 (sset$a (stl$ ?v3 )))(fun_app$f (fun_app$bt ?v2 ?v4 )(stl$ ?v3 )))(fun_app$f (fun_app$bt ?v2 ?v4 )?v3 )))))(fun_app$f (fun_app$bt ?v2 ?v0 )?v1 ))):named a301 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (konigPath$b ?v0 )(sCons$ (lab$b ?v0 )(konigPath$b (eps$ (uug$ ?v0 )))))):named a302 ))
(assert (! (forall ((?v0 Nat_nat_fun$ ))(= (fun_app$bn (comp$c uuh$ )?v0 )?v0 )):named a303 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stl$ ?v0 )(case_stream$ uui$ ?v0 ))):named a304 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (sub$ ?v0 )(case_treeFI$ uuj$ ?v0 ))):named a305 ))
(assert (! (forall ((?v0 A_stream$ ))(= (shd$ ?v0 )(case_stream$a uuk$ ?v0 ))):named a306 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (lab$b ?v0 )(fun_app$aa (case_treeFI$a uul$ )?v0 ))):named a307 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI_stream$ ))(= (fun_app$e (streamsp$a (uue$ ?v0 ))?v1 )(member$c ?v1 (streams$e ?v0 )))):named a308 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(=> (member$ ?v0 (sset$ (stl$b ?v1 )))(member$ ?v0 (sset$ ?v1 )))):named a309 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (member$e ?v0 (sset$a (stl$ ?v1 )))(member$e ?v0 (sset$a ?v1 )))):named a310 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(member$ (shd$b ?v0 )(sset$ ?v0 ))):named a311 ))
(assert (! (forall ((?v0 A_stream$ ))(member$e (shd$ ?v0 )(sset$a ?v0 ))):named a312 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_a_treeFI_stream_bool_fun_fun$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v3 A_treeFI$ )(?v4 A_treeFI_stream$ ))(fun_app$e (fun_app$bs ?v2 ?v3 )(sCons$b ?v3 ?v4 )))(forall ((?v3 A_treeFI$ )(?v4 A_treeFI_stream$ )(?v5 A_treeFI$ ))(=> (and (member$ ?v5 (sset$ ?v4 ))(fun_app$e (fun_app$bs ?v2 ?v5 )?v4 ))(fun_app$e (fun_app$bs ?v2 ?v5 )(sCons$b ?v3 ?v4 ))))))(fun_app$e (fun_app$bs ?v2 ?v0 )?v1 ))):named a313 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(=> (and (member$ ?v0 (sset$ ?v1 ))(and (forall ((?v2 A_treeFI_stream$ ))(=> (= ?v1 (sCons$b ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(=> (and (= ?v1 (sCons$b ?v2 ?v3 ))(member$ ?v0 (sset$ ?v3 )))false ))))false )):named a314 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI$ ))(=> (member$ ?v0 (sset$ ?v1 ))(member$ ?v0 (sset$ (sCons$b ?v2 ?v1 ))))):named a315 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(member$ ?v0 (sset$ (sCons$b ?v0 ?v1 )))):named a316 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a317 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (stl$ (konigPath$b ?v0 ))(konigPath$b (eps$ (uug$ ?v0 ))))):named a318 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$e (smember$a ?v0 )?v1 )(member$ ?v0 (sset$ ?v1 ))):pattern ((fun_app$e (smember$a ?v0 )?v1 )))):named a319 ))
(assert (! (forall ((?v0 Nat$ )(?v1 Nat_nat_fun$ )(?v2 Nat$ ))(= (fun_app$j (fun_app$bn (comp$c (uum$ ?v0 ))?v1 )?v2 )?v0 )):named a320 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a321 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (fun_app$e (stream_all$a ?v0 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$ ?v2 (sset$ ?v1 ))(fun_app$b ?v0 ?v2 ))))):named a322 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (stl$ (sdrop$ ?v0 ?v1 ))(sdrop$ (fun_app$j suc$ ?v0 )?v1 ))):named a323 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 Nat$ ))(! (= (snth$ ?v0 (fun_app$j suc$ ?v1 ))(snth$ (stl$ ?v0 )?v1 )):pattern ((snth$ ?v0 (fun_app$j suc$ ?v1 ))))):named a324 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 Nat$ ))(member$ (snth$a ?v0 ?v1 )(sset$ ?v0 ))):named a325 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 Nat$ ))(=> (member$c ?v0 (streams$e ?v1 ))(member$ (snth$a ?v0 ?v2 )?v1 ))):named a326 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(= (member$c ?v0 (streams$e ?v1 ))(forall ((?v2 Nat$ ))(member$ (snth$a ?v0 ?v2 )?v1 )))):named a327 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$a (szip$ ?v0 ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 )))):named a328 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(! (= (sdrop$ (fun_app$j suc$ ?v0 )?v1 )(sdrop$ ?v0 (stl$ ?v1 ))):pattern ((sdrop$ (fun_app$j suc$ ?v0 )?v1 )))):named a329 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (fun_app$e (pred_stream$a ?v0 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$ ?v2 (sset$ ?v1 ))(fun_app$b ?v0 ?v2 ))))):named a330 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$ (snth$a (snth$b ?v0 ?v1 )?v2 )(sset$ (smerge$ ?v0 )))):named a331 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(= (fun_app$d (pred_treeFI$ ?v0 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$ ?v2 (set_treeFI$d ?v1 ))(fun_app$b ?v0 ?v2 ))))):named a332 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (szip$ ?v0 ?v1 )(sCons$a (pair$ (shd$ ?v0 )(shd$ ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 ))))):named a333 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$a (szip$ ?v0 ?v1 ))(pair$ (shd$ ?v0 )(shd$ ?v1 )))):named a334 ))
(assert (! (forall ((?v0 A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ )(?v1 A_bool_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(=> (and (forall ((?v4 A_bool_fun_a_stream_a_stream_fun_fun$ )(?v5 A_bool_fun$ )(?v6 A_stream$ )(?v7 A_stream$ ))(=> (and (forall ((?v8 A_bool_fun$ )(?v9 A_stream$ )(?v10 A_stream$ ))(=> (and (= (fun_app$o (fun_app$bu ?v4 ?v8 )?v9 )?v10 )(not (= ?v10 undefined$ )))(fun_app$f (fun_app$bv ?v0 (pair$b ?v8 ?v9 ))?v10 )))(and (= (ite (fun_app$g ?v5 (shd$ ?v6 ))(fun_app$o (fun_app$bu ?v4 ?v5 )(stl$ ?v6 ))?v6 )?v7 )(not (= ?v7 undefined$ ))))(fun_app$f (fun_app$bv ?v0 (pair$b ?v5 ?v6 ))?v7 )))(and (= (sdrop_while$b ?v1 ?v2 )?v3 )(not (= ?v3 undefined$ ))))(fun_app$f (fun_app$bv ?v0 (pair$b ?v1 ?v2 ))?v3 ))):named a335 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (fun_app$ar (pred_list$ ?v0 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$ ?v2 (set$ ?v1 ))(fun_app$b ?v0 ?v2 ))))):named a336 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_bool_fun$ ))(= (forall ((?v2 A_treeFI$ ))(=> (member$ ?v2 (set$ ?v0 ))(fun_app$b ?v1 ?v2 )))(fun_app$ar (pred_list$ ?v1 )?v0 ))):named a337 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_bool_fun$ )(?v3 A_treeFI_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 (set$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (fun_app$ar (pred_list$ ?v2 )?v0 )(fun_app$ar (pred_list$ ?v3 )?v1 )))):named a338 ))
(assert (! (= (fun_app$bn (comp$c suc$ )suc$ )(fun_app$bn (comp$c suc$ )suc$ )):named a339 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ ))(= (set$g (product$ ?v0 ?v1 ))(sigma$ (set$ ?v0 )(uun$ ?v1 )))):named a340 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(! (= (stake$ (fun_app$j suc$ ?v0 )?v1 )(cons$h (shd$ ?v1 )(stake$ ?v0 (stl$ ?v1 )))):pattern ((stake$ (fun_app$j suc$ ?v0 )?v1 )))):named a341 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_stream$ ))(= (sset$ (shift$ ?v0 ?v1 ))(sup$ (set$ ?v0 )(sset$ ?v1 )))):named a342 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(= (member$ ?v0 (set$ ?v1 ))(fun_app$b (member$q ?v1 )?v0 ))):named a343 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(member$ ?v0 (set$ (cons$b ?v0 ?v1 )))):named a344 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI$ ))(=> (member$ ?v0 (set$ ?v1 ))(member$ ?v0 (set$ (cons$b ?v2 ?v1 ))))):named a345 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(and (forall ((?v2 A_treeFI_list$ ))(=> (= ?v1 (cons$b ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_list$ ))(=> (and (= ?v1 (cons$b ?v2 ?v3 ))(member$ ?v0 (set$ ?v3 )))false ))))false )):named a346 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_list$ ))(=> (member$ ?v0 (set$ (cons$b ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$ ?v0 (set$ ?v2 ))))):named a347 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ ))(= (set$ (union$ ?v0 ?v1 ))(sup$ (set$ ?v0 )(set$ ?v1 )))):named a348 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(! (=> (not (member$ ?v0 (set$ ?v1 )))(= (insert$ ?v0 ?v1 )(cons$b ?v0 ?v1 ))):pattern ((insert$ ?v0 ?v1 )))):named a349 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_list$ )(?v3 A_treeFI_list$ ))(=> (= (partition$ ?v0 ?v1 )(pair$a ?v2 ?v3 ))(= (sup$ (set$ ?v2 )(set$ ?v3 ))(set$ ?v1 )))):named a350 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(! (=> (member$ ?v0 (set$ ?v1 ))(= (insert$ ?v0 ?v1 )?v1 )):pattern ((insert$ ?v0 ?v1 )))):named a351 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_list$ )(?v3 A_treeFI_list$ ))(=> (= (partition$ ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 (set$ ?v2 ))(fun_app$b ?v0 ?v4 )))(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 (set$ ?v3 ))(not (fun_app$b ?v0 ?v4 ))))))):named a352 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(! (= (insert$ ?v0 ?v1 )(ite (member$ ?v0 (set$ ?v1 ))?v1 (cons$b ?v0 ?v1 ))):pattern ((insert$ ?v0 ?v1 )))):named a353 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_a_treeFI_prod_set$ )(?v2 A_treeFI_list$ )(?v3 A_treeFI_list$ ))(=> (and (forall ((?v4 A_treeFI$ )(?v5 A_treeFI$ )(?v6 A_treeFI$ ))(=> (and (member$ ?v4 (set$ ?v0 ))(and (member$r (pair$c ?v4 ?v5 )?v1 )(member$r (pair$c ?v5 ?v6 )?v1 )))(member$r (pair$c ?v4 ?v6 )?v1 )))(and (member$a (pair$a ?v0 ?v2 )(lexord$ ?v1 ))(member$a (pair$a ?v2 ?v3 )(lexord$ ?v1 ))))(member$a (pair$a ?v0 ?v3 )(lexord$ ?v1 )))):named a354 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_bool_fun$ ))(! (=> (forall ((?v2 A_treeFI$ ))(=> (member$ ?v2 (set$ ?v0 ))(fun_app$b ?v1 ?v2 )))(= (filter$ ?v1 ?v0 )?v0 )):pattern ((filter$ ?v1 ?v0 )))):named a355 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (set$ (filter$ ?v0 ?v1 ))(collect$ (fun_app$i (uuo$ ?v0 )?v1 )))):named a356 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_bool_fun$ )(?v3 A_treeFI_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 (set$ ?v1 ))(= (fun_app$b ?v2 ?v4 )(fun_app$b ?v3 ?v4 )))))(= (filter$ ?v2 ?v0 )(filter$ ?v3 ?v1 )))):named a357 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (= (filter$ ?v0 ?v1 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$ ?v2 (set$ ?v1 ))(fun_app$b ?v0 ?v2 ))))):named a358 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_list$ ))(= (member$r (pair$c ?v0 ?v1 )(set$g (zip$ ?v2 ?v2 )))(and (member$ ?v0 (set$ ?v2 ))(= ?v0 ?v1 )))):named a359 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_list$ )(?v3 A_treeFI_list$ ))(=> (and (member$r (pair$c ?v0 ?v1 )(set$g (zip$ ?v2 ?v3 )))(=> (and (member$ ?v0 (set$ ?v2 ))(member$ ?v1 (set$ ?v3 )))false ))false )):named a360 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (filter$a ?v0 (set$ ?v1 ))(set$ (filter$ ?v0 ?v1 )))):named a361 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_list$ ))(= (fun_app$bw (map$ ?v0 )(fun_app$bw (map$ ?v1 )?v2 ))(fun_app$bw (map$ (fun_app$bn (comp$c ?v0 )?v1 ))?v2 ))):named a362 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_list$ ))(= (fun_app$bw (map$ ?v0 )(fun_app$bw (map$ ?v1 )?v2 ))(fun_app$bw (map$ (fun_app$bn (comp$c ?v0 )?v1 ))?v2 ))):named a363 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_list$ ))(= (fun_app$bw (map$ ?v0 )(fun_app$bw (map$ ?v1 )?v2 ))(fun_app$bw (map$ (fun_app$bn (comp$c ?v0 )?v1 ))?v2 ))):named a364 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ ))(= (comp$e (map$ ?v0 )(map$ ?v1 ))(map$ (fun_app$bn (comp$c ?v0 )?v1 )))):named a365 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ ))(= (comp$e (map$ ?v0 )(map$ ?v1 ))(map$ (fun_app$bn (comp$c ?v0 )?v1 )))):named a366 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_a_treeFI_fun$ ))(! (=> (forall ((?v2 A_treeFI$ ))(=> (member$ ?v2 (set$ ?v0 ))(= (fun_app$ac ?v1 ?v2 )?v2 )))(= (map$a ?v1 ?v0 )?v0 )):pattern ((map$a ?v1 ?v0 )))):named a367 ))
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ac trev$a ?v0 )(tree$a (lab$b ?v0 )(map$a trev$a (rev$ (sub$ ?v0 ))))):pattern ((fun_app$ac trev$a ?v0 )))):named a368 ))
(assert (! (forall ((?v0 A_treeFI_list$ ))(= (id_on$ (set$ ?v0 ))(set$g (map$b uup$ ?v0 )))):named a369 ))
(assert (! (forall ((?v0 A_treeFI_list$ ))(= (set$ (rev$ ?v0 ))(set$ ?v0 ))):named a370 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (sub$ (fun_app$ac trev$a ?v0 ))(map$a trev$a (rev$ (sub$ ?v0 ))))):named a371 ))
(assert (! (forall ((?v0 Nat_nat_fun$ )(?v1 Nat_nat_fun$ )(?v2 Nat_list$ ))(= (size_list$ ?v0 (fun_app$bw (map$ ?v1 )?v2 ))(size_list$ (fun_app$bn (comp$c ?v0 )?v1 )?v2 ))):named a372 ))
(check-sat )
(get-unsat-core )
