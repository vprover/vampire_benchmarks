(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_treeFI$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_treeFI_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_fun$ 0 )
(declare-sort A_a_treeFI_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_treeFI_a_fun$ 0 )
(declare-sort A_a_prod_treeFI$ 0 )
(declare-sort A_stream_treeFI$ 0 )
(declare-sort A_treeFI_treeFI$ 0 )
(declare-sort A_a_bool_fun_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_treeFI_bool_fun$ 0 )
(declare-sort A_a_prod_stream_set$ 0 )
(declare-sort A_a_prod_treeFI_set$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_stream_treeFI_set$ 0 )
(declare-sort A_treeFI_list_a_fun$ 0 )
(declare-sort A_treeFI_stream_set$ 0 )
(declare-sort A_treeFI_treeFI_set$ 0 )
(declare-sort A_a_a_a_prod_fun_fun$ 0 )
(declare-sort A_a_a_prod_a_fun_fun$ 0 )
(declare-sort A_a_a_treeFI_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_fun_fun$ 0 )
(declare-sort A_a_stream_a_fun_fun$ 0 )
(declare-sort A_a_treeFI_a_fun_fun$ 0 )
(declare-sort A_treeFI_a_a_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_fun$ 0 )
(declare-sort A_a_prod_a_treeFI_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_treeFI_a_a_prod_fun$ 0 )
(declare-sort A_treeFI_a_stream_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_fun$ 0 )
(declare-sort A_treeFI_list_bool_fun$ 0 )
(declare-sort A_treeFI_stream_treeFI$ 0 )
(declare-sort A_treeFI_treeFI_treeFI$ 0 )
(declare-sort A_a_stream_bool_fun_fun$ 0 )
(declare-sort A_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_bool_fun$ 0 )
(declare-sort A_a_prod_treeFI_bool_fun$ 0 )
(declare-sort A_stream_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_stream_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_bool_fun$ 0 )
(declare-sort A_a_treeFI_list_a_fun_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_set_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_list_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_prod_set$ 0 )
(declare-sort A_treeFI_stream_stream_set$ 0 )
(declare-sort A_treeFI_stream_treeFI_set$ 0 )
(declare-sort A_treeFI_treeFI_stream_set$ 0 )
(declare-sort A_treeFI_treeFI_treeFI_set$ 0 )
(declare-sort A_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_a_treeFI_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_a_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_a_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_stream_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_treeFI_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun_bool_fun$ 0 )
(declare-sort A_stream_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_fun$ 0 )
(declare-sort A_treeFI_stream_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_list_a_treeFI_fun$ 0 )
(declare-sort A_treeFI_set_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_stream_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_stream_fun$ 0 )
(declare-sort A_bool_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_set$ 0 )
(declare-sort A_a_treeFI_list_a_treeFI_list_fun_fun$ 0 )
(declare-sort A_stream_a_stream_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_stream_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_treeFI$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_bool_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_stream_a_a_prod_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_stream_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_bool_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_stream_set$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_treeFI_set$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_treeFI_a_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_treeFI_list_a_treeFI_treeFI_list_fun$ 0 )
(declare-sort A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_treeFI_list_a_treeFI_fun_fun$ 0 )
(declare-sort A_a_prod_a_a_prod_stream_a_a_prod_stream_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_stream_a_treeFI_stream_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun_a_stream_a_stream_fun_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_treeFI_list_a_treeFI_treeFI_list_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_prod_a_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_stream$ 0)
(declare-sort A_treeFI_stream$ 0)
(declare-fun shd$a (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$a (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$a (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-fun shd$b (A_treeFI_stream$)A_treeFI$)
(declare-fun stl$b (A_treeFI_stream$)A_treeFI_stream$)
(declare-fun sCons$b (A_treeFI$ A_treeFI_stream$ )A_treeFI_stream$)
(declare-sort A_a_prod_treeFI_list$ 0)
(declare-sort A_treeFI_treeFI_list$ 0)
(declare-sort A_treeFI_list$ 0)
(declare-sort A_treeFI_list_a_treeFI_list_prod$ 0)
(declare-sort A_treeFI_list_a_treeFI_list_prod_treeFI_list$ 0)
(declare-sort A_treeFI_treeFI_treeFI_list$ 0)
(declare-sort A_treeFI_stream_treeFI_list$ 0)
(declare-sort A_stream_treeFI_list$ 0)
(declare-fun nil$ ()A_a_prod_treeFI_list$)
(declare-fun hd$ (A_a_prod_treeFI_list$)A_a_prod_treeFI$)
(declare-fun tl$ (A_a_prod_treeFI_list$)A_a_prod_treeFI_list$)
(declare-fun cons$ (A_a_prod_treeFI$ A_a_prod_treeFI_list$ )A_a_prod_treeFI_list$)
(declare-fun nil$a ()A_treeFI_treeFI_list$)
(declare-fun hd$a (A_treeFI_treeFI_list$)A_treeFI_treeFI$)
(declare-fun tl$a (A_treeFI_treeFI_list$)A_treeFI_treeFI_list$)
(declare-fun cons$a (A_treeFI_treeFI$ A_treeFI_treeFI_list$ )A_treeFI_treeFI_list$)
(declare-fun nil$b ()A_treeFI_list$)
(declare-fun hd$b (A_treeFI_list$)A_treeFI$)
(declare-fun tl$b (A_treeFI_list$)A_treeFI_list$)
(declare-fun cons$b (A_treeFI$ A_treeFI_list$ )A_treeFI_list$)
(declare-fun fst$a (A_treeFI_list_a_treeFI_list_prod$)A_treeFI_list$)
(declare-fun snd$a (A_treeFI_list_a_treeFI_list_prod$)A_treeFI_list$)
(declare-fun pair$a (A_treeFI_list$ A_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod$)
(declare-fun nil$c ()A_treeFI_list_a_treeFI_list_prod_treeFI_list$)
(declare-fun hd$c (A_treeFI_list_a_treeFI_list_prod_treeFI_list$)A_treeFI_list_a_treeFI_list_prod_treeFI$)
(declare-fun tl$c (A_treeFI_list_a_treeFI_list_prod_treeFI_list$)A_treeFI_list_a_treeFI_list_prod_treeFI_list$)
(declare-fun cons$c (A_treeFI_list_a_treeFI_list_prod_treeFI$ A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod_treeFI_list$)
(declare-fun nil$d ()A_treeFI_treeFI_treeFI_list$)
(declare-fun hd$d (A_treeFI_treeFI_treeFI_list$)A_treeFI_treeFI_treeFI$)
(declare-fun tl$d (A_treeFI_treeFI_treeFI_list$)A_treeFI_treeFI_treeFI_list$)
(declare-fun cons$d (A_treeFI_treeFI_treeFI$ A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI_list$)
(declare-fun nil$e ()A_treeFI_stream_treeFI_list$)
(declare-fun hd$e (A_treeFI_stream_treeFI_list$)A_treeFI_stream_treeFI$)
(declare-fun tl$e (A_treeFI_stream_treeFI_list$)A_treeFI_stream_treeFI_list$)
(declare-fun cons$e (A_treeFI_stream_treeFI$ A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI_list$)
(declare-fun nil$f ()A_stream_treeFI_list$)
(declare-fun hd$f (A_stream_treeFI_list$)A_stream_treeFI$)
(declare-fun tl$f (A_stream_treeFI_list$)A_stream_treeFI_list$)
(declare-fun cons$f (A_stream_treeFI$ A_stream_treeFI_list$ )A_stream_treeFI_list$)
(declare-sort A_treeFI_list_a_treeFI_list_prod_stream$ 0)
(declare-sort A_treeFI_treeFI_stream$ 0)
(declare-sort A_treeFI_stream_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-fun shd$c (A_treeFI_list_a_treeFI_list_prod_stream$)A_treeFI_list_a_treeFI_list_prod$)
(declare-fun stl$c (A_treeFI_list_a_treeFI_list_prod_stream$)A_treeFI_list_a_treeFI_list_prod_stream$)
(declare-fun sCons$c (A_treeFI_list_a_treeFI_list_prod$ A_treeFI_list_a_treeFI_list_prod_stream$ )A_treeFI_list_a_treeFI_list_prod_stream$)
(declare-fun shd$d (A_treeFI_treeFI_stream$)A_treeFI_treeFI$)
(declare-fun stl$d (A_treeFI_treeFI_stream$)A_treeFI_treeFI_stream$)
(declare-fun sCons$d (A_treeFI_treeFI$ A_treeFI_treeFI_stream$ )A_treeFI_treeFI_stream$)
(declare-fun shd$e (A_treeFI_stream_stream$)A_treeFI_stream$)
(declare-fun stl$e (A_treeFI_stream_stream$)A_treeFI_stream_stream$)
(declare-fun sCons$e (A_treeFI_stream$ A_treeFI_stream_stream$ )A_treeFI_stream_stream$)
(declare-fun shd$f (A_stream_stream$)A_stream$)
(declare-fun stl$f (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$f (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-sort A_bool_fun_a_stream_prod$ 0)
(declare-sort A_treeFI_a_treeFI_prod$ 0)
(declare-sort A_treeFI_a_treeFI_prod_list$ 0)
(declare-fun select$ (A_bool_fun_a_stream_prod$)A_bool_fun$)
(declare-fun selecta$ (A_bool_fun_a_stream_prod$)A_stream$)
(declare-fun pair$b (A_bool_fun$ A_stream$ )A_bool_fun_a_stream_prod$)
(declare-fun fst$b (A_treeFI_a_treeFI_prod$)A_treeFI$)
(declare-fun snd$b (A_treeFI_a_treeFI_prod$)A_treeFI$)
(declare-fun pair$c (A_treeFI$ A_treeFI$ )A_treeFI_a_treeFI_prod$)
(declare-fun nil$g ()A_treeFI_a_treeFI_prod_list$)
(declare-fun hd$g (A_treeFI_a_treeFI_prod_list$)A_treeFI_a_treeFI_prod$)
(declare-fun tl$g (A_treeFI_a_treeFI_prod_list$)A_treeFI_a_treeFI_prod_list$)
(declare-fun cons$g (A_treeFI_a_treeFI_prod$ A_treeFI_a_treeFI_prod_list$ )A_treeFI_a_treeFI_prod_list$)
(declare-fun as$ ()A_stream$ )
(declare-fun tr$ ()A_treeFI$ )
(declare-fun uu$ (A_a_prod_treeFI$ )A_a_prod_treeFI_bool_fun$ )
(declare-fun eps$ (A_a_prod_treeFI_bool_fun$ )A_a_prod_treeFI$ )
(declare-fun lab$ (A_a_prod_treeFI$ )A_a_prod$ )
(declare-fun set$ (A_a_prod_treeFI_list$ )A_a_prod_treeFI_set$ )
(declare-fun sub$ (A_a_prod_treeFI$ )A_a_prod_treeFI_list$ )
(declare-fun sup$ (A_treeFI_set$ A_treeFI_set$ )A_treeFI_set$ )
(declare-fun uua$ (A_treeFI_treeFI$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun uub$ (A_treeFI$ )A_treeFI_bool_fun$ )
(declare-fun uuc$ ()A_treeFI_a_treeFI_stream_a_treeFI_fun_fun$ )
(declare-fun uud$ ()A_a_prod_a_a_prod_stream_a_a_prod_fun_fun$ )
(declare-fun uue$ ()A_a_stream_a_fun_fun$ )
(declare-fun uuf$ ()A_treeFI_a_treeFI_stream_a_treeFI_stream_fun_fun$ )
(declare-fun uug$ ()A_a_prod_a_a_prod_stream_a_a_prod_stream_fun_fun$ )
(declare-fun uuh$ ()A_a_stream_a_stream_fun_fun$ )
(declare-fun uui$ ()A_treeFI_a_treeFI_treeFI_list_a_treeFI_fun_fun$ )
(declare-fun uuj$ ()A_a_treeFI_list_a_fun_fun$ )
(declare-fun uuk$ ()A_treeFI_a_treeFI_treeFI_list_a_treeFI_treeFI_list_fun_fun$ )
(declare-fun uul$ ()A_a_treeFI_list_a_treeFI_list_fun_fun$ )
(declare-fun uum$ (A_treeFI_list_a_treeFI_list_prod_set$ )A_treeFI_list_a_treeFI_list_prod_bool_fun$ )
(declare-fun uun$ (A_treeFI_treeFI_set$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun uuo$ (A_treeFI_stream_set$ )A_treeFI_stream_bool_fun$ )
(declare-fun uup$ (A_stream_set$ )A_stream_bool_fun$ )
(declare-fun uuq$ (A_set$ )A_bool_fun$ )
(declare-fun uur$ (A_treeFI_set$ )A_treeFI_bool_fun$ )
(declare-fun uus$ (A_treeFI$ )A_treeFI_bool_fun$ )
(declare-fun uut$ (A_treeFI$ )A_treeFI_bool_fun$ )
(declare-fun uuu$ (A_a_fun$ )A_a_a_fun_fun_a_a_a_fun_fun_fun$ )
(declare-fun uuv$ ()A_a_fun$ )
(declare-fun uuw$ ()A_treeFI_a_treeFI_fun$ )
(declare-fun uux$ ()Bool_bool_fun$ )
(declare-fun uuy$ (A_treeFI_a_treeFI_bool_fun_fun$ )A_treeFI_a_treeFI_bool_fun_fun$ )
(declare-fun uuz$ ()A_a_stream_a_stream_fun_fun$ )
(declare-fun uva$ ()A_stream_a_fun$ )
(declare-fun uvb$ ()A_stream_a_stream_fun$ )
(declare-fun uvc$ (A_treeFI_set$ )A_treeFI_set_a_treeFI_bool_fun_fun$ )
(declare-fun uvd$ (A_treeFI_list$ )A_treeFI_a_treeFI_set_fun$ )
(declare-fun uve$ (A_treeFI_bool_fun$ )A_treeFI_list_a_treeFI_bool_fun_fun$ )
(declare-fun uvf$ (A_treeFI_bool_fun$ )A_treeFI_set_a_treeFI_bool_fun_fun$ )
(declare-fun uvg$ (A_treeFI_set$ )A_treeFI_bool_fun$ )
(declare-fun uvh$ (A_treeFI_set$ )A_treeFI_set_a_treeFI_bool_fun_fun$ )
(declare-fun comp$ (Bool_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun eps$a (A_treeFI_treeFI_bool_fun$ )A_treeFI_treeFI$ )
(declare-fun eps$b (A_treeFI_bool_fun$ )A_treeFI$ )
(declare-fun lab$a (A_treeFI_treeFI$ )A_treeFI$ )
(declare-fun lab$b ()A_treeFI_a_fun$ )
(declare-fun lab$c (A_treeFI_list_a_treeFI_list_prod_treeFI$ )A_treeFI_list_a_treeFI_list_prod$ )
(declare-fun lab$d (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI$ )
(declare-fun lab$e (A_treeFI_stream_treeFI$ )A_treeFI_stream$ )
(declare-fun lab$f (A_stream_treeFI$ )A_stream$ )
(declare-fun powp$ (A_treeFI_bool_fun$ A_treeFI_set$ )Bool )
(declare-fun set$a (A_treeFI_treeFI_list$ )A_treeFI_treeFI_set$ )
(declare-fun set$b (A_treeFI_list$ )A_treeFI_set$ )
(declare-fun set$c (A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod_treeFI_set$ )
(declare-fun set$d (A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI_set$ )
(declare-fun set$e (A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI_set$ )
(declare-fun set$f (A_stream_treeFI_list$ )A_stream_treeFI_set$ )
(declare-fun set$g (A_treeFI_a_treeFI_prod_list$ )A_treeFI_a_treeFI_prod_set$ )
(declare-fun smap$ (A_treeFI_a_fun$ A_treeFI_stream$ )A_stream$ )
(declare-fun snth$ (A_stream$ Nat$ )A$ )
(declare-fun sset$ (A_treeFI_stream$ )A_treeFI_set$ )
(declare-fun sub$a (A_treeFI_treeFI$ )A_treeFI_treeFI_list$ )
(declare-fun sub$b ()A_treeFI_a_treeFI_list_fun$ )
(declare-fun sub$c (A_treeFI_list_a_treeFI_list_prod_treeFI$ )A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )
(declare-fun sub$d (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI_treeFI_list$ )
(declare-fun sub$e (A_treeFI_stream_treeFI$ )A_treeFI_stream_treeFI_list$ )
(declare-fun sub$f (A_stream_treeFI$ )A_stream_treeFI_list$ )
(declare-fun szip$ (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun tree$ (A_treeFI$ A_treeFI_treeFI_list$ )A_treeFI_treeFI$ )
(declare-fun trev$ (A_treeFI_treeFI$ )A_treeFI_treeFI$ )
(declare-fun coset$ (A_treeFI_list$ )A_treeFI_set$ )
(declare-fun minus$ (A_treeFI_set$ A_treeFI_set$ )A_treeFI_set$ )
(declare-fun sdrop$ (Nat$ A_stream$ )A_stream$ )
(declare-fun shift$ (A_treeFI_list$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun sigma$ (A_treeFI_set$ A_treeFI_a_treeFI_set_fun$ )A_treeFI_a_treeFI_prod_set$ )
(declare-fun smap$a (A_a_prod_a_fun$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap$b (A_a_treeFI_fun$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap$c (A_a_prod_a_treeFI_fun$ A_a_prod_stream$ )A_treeFI_stream$ )
(declare-fun smap$d (A_treeFI_a_treeFI_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun smap$e (A_a_a_prod_fun$ A_stream$ )A_a_prod_stream$ )
(declare-fun smap$f (A_treeFI_a_a_prod_fun$ A_treeFI_stream$ )A_a_prod_stream$ )
(declare-fun smap$g (A_a_prod_a_a_prod_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun smap$h (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$i (A_treeFI_a_treeFI_treeFI_fun$ A_treeFI_stream$ )A_treeFI_treeFI_stream$ )
(declare-fun smap$j (A_treeFI_a_treeFI_stream_fun$ A_treeFI_stream$ )A_treeFI_stream_stream$ )
(declare-fun smap$k (A_treeFI_a_stream_fun$ A_treeFI_stream$ )A_stream_stream$ )
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun snth$a (A_treeFI_stream$ Nat$ )A_treeFI$ )
(declare-fun snth$b (A_treeFI_stream_stream$ Nat$ )A_treeFI_stream$ )
(declare-fun sset$a (A_stream$ )A_set$ )
(declare-fun tree$a (A$ A_treeFI_list$ )A_treeFI$ )
(declare-fun tree$b (A_treeFI_list_a_treeFI_list_prod$ A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod_treeFI$ )
(declare-fun tree$c (A_treeFI_treeFI$ A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI$ )
(declare-fun tree$d (A_treeFI_stream$ A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI$ )
(declare-fun tree$e (A_stream$ A_stream_treeFI_list$ )A_stream_treeFI$ )
(declare-fun trev$a (A_treeFI$ )A_treeFI$ )
(declare-fun union$ (A_treeFI_list$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun filter$ (A_treeFI_bool_fun$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun lexord$ (A_treeFI_a_treeFI_prod_set$ )A_treeFI_list_a_treeFI_list_prod_set$ )
(declare-fun member$ (A_a_prod_treeFI$ A_a_prod_treeFI_set$ )Bool )
(declare-fun smap2$a (A_a_treeFI_a_fun_fun$ A_stream$ A_treeFI_stream$ )A_stream$ )
(declare-fun smap2$b (A_treeFI_a_a_fun_fun$ A_treeFI_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$c (A_a_a_treeFI_fun_fun$ A_stream$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap2$d (A_a_a_prod_a_fun_fun$ A_stream$ A_a_prod_stream$ )A_stream$ )
(declare-fun smap2$e (A_treeFI_a_treeFI_a_fun_fun$ A_treeFI_stream$ A_treeFI_stream$ )A_stream$ )
(declare-fun smap2$f (A_a_prod_a_a_fun_fun$ A_a_prod_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$g (A_a_treeFI_a_treeFI_fun_fun$ A_stream$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun smap2$h (A_treeFI_a_a_treeFI_fun_fun$ A_treeFI_stream$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap2$i (A_a_a_a_prod_fun_fun$ A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun smerge$ (A_treeFI_stream_stream$ )A_treeFI_stream$ )
(declare-fun collect$ (A_treeFI_bool_fun$ )A_treeFI_set$ )
(declare-fun filter$a (A_treeFI_bool_fun$ A_treeFI_set$ )A_treeFI_set$ )
(declare-fun fun_app$ (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun member$a (A_treeFI_treeFI$ A_treeFI_treeFI_set$ )Bool )
(declare-fun member$b (A_treeFI$ A_treeFI_set$ )Bool )
(declare-fun member$c (A_treeFI_list_a_treeFI_list_prod$ A_treeFI_list_a_treeFI_list_prod_set$ )Bool )
(declare-fun member$d (A_treeFI_stream$ A_treeFI_stream_set$ )Bool )
(declare-fun member$e (A_stream$ A_stream_set$ )Bool )
(declare-fun member$f (A$ A_set$ )Bool )
(declare-fun member$g (A_treeFI_list_a_treeFI_list_prod_treeFI$ A_treeFI_list_a_treeFI_list_prod_treeFI_set$ )Bool )
(declare-fun member$h (A_treeFI_treeFI_treeFI$ A_treeFI_treeFI_treeFI_set$ )Bool )
(declare-fun member$i (A_treeFI_stream_treeFI$ A_treeFI_stream_treeFI_set$ )Bool )
(declare-fun member$j (A_stream_treeFI$ A_stream_treeFI_set$ )Bool )
(declare-fun member$k (A_treeFI_list_a_treeFI_list_prod_stream$ A_treeFI_list_a_treeFI_list_prod_stream_set$ )Bool )
(declare-fun member$l (A_treeFI_treeFI_stream$ A_treeFI_treeFI_stream_set$ )Bool )
(declare-fun member$m (A_treeFI_stream_stream$ A_treeFI_stream_stream_set$ )Bool )
(declare-fun member$n (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$o (A_a_prod_stream$ A_a_prod_stream_set$ )Bool )
(declare-fun member$p (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$q (A_treeFI_list$ )A_treeFI_bool_fun$ )
(declare-fun member$r (A_treeFI_a_treeFI_prod$ A_treeFI_a_treeFI_prod_set$ )Bool )
(declare-fun product$ (A_treeFI_list$ A_treeFI_list$ )A_treeFI_a_treeFI_prod_list$ )
(declare-fun rel_fun$ (A_treeFI_a_treeFI_bool_fun_fun$ A_treeFI_list_a_treeFI_list_bool_fun_fun$ A_treeFI_a_treeFI_list_fun$ A_treeFI_a_treeFI_list_fun$ )Bool )
(declare-fun sfilter$ (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun smember$ (A_treeFI$ )A_treeFI_stream_bool_fun$ )
(declare-fun streams$ (A_treeFI_list_a_treeFI_list_prod_set$ )A_treeFI_list_a_treeFI_list_prod_stream_set$ )
(declare-fun collect$a (A_treeFI_list_a_treeFI_list_prod_bool_fun$ )A_treeFI_list_a_treeFI_list_prod_set$ )
(declare-fun collect$b (A_treeFI_treeFI_bool_fun$ )A_treeFI_treeFI_set$ )
(declare-fun collect$c (A_treeFI_stream_bool_fun$ )A_treeFI_stream_set$ )
(declare-fun collect$d (A_stream_bool_fun$ )A_stream_set$ )
(declare-fun collect$e (A_bool_fun$ )A_set$ )
(declare-fun fun_app$a (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$b (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$c (A_a_prod_treeFI_bool_fun$ A_a_prod_treeFI$ )Bool )
(declare-fun fun_app$d (A_treeFI_treeFI_bool_fun$ A_treeFI_treeFI$ )Bool )
(declare-fun fun_app$e (A_treeFI_bool_fun$ A_treeFI$ )Bool )
(declare-fun fun_app$f (A_treeFI_a_treeFI_list_fun$ A_treeFI$ )A_treeFI_list$ )
(declare-fun fun_app$g (A_a_stream_a_stream_fun_fun$ A$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$h (A_treeFI_list_a_treeFI_list_prod_bool_fun$ A_treeFI_list_a_treeFI_list_prod$ )Bool )
(declare-fun fun_app$i (A_treeFI_stream_bool_fun$ A_treeFI_stream$ )Bool )
(declare-fun fun_app$j (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$k (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$l (A_treeFI_a_treeFI_set_fun$ A_treeFI$ )A_treeFI_set$ )
(declare-fun fun_app$m (A_treeFI_a_treeFI_bool_fun_fun$ A_treeFI$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$n (A_treeFI_list_a_treeFI_bool_fun_fun$ A_treeFI_list$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$o (A_treeFI_set_a_treeFI_bool_fun_fun$ A_treeFI_set$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$p (A_a_fun$ A$ )A$ )
(declare-fun fun_app$q (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$r (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$ )A_a_a_fun_fun$ )
(declare-fun fun_app$s (A_a_prod_stream_a_a_prod_fun$ A_a_prod_stream$ )A_a_prod$ )
(declare-fun fun_app$t (A_a_prod_a_a_prod_stream_a_a_prod_fun_fun$ A_a_prod$ )A_a_prod_stream_a_a_prod_fun$ )
(declare-fun fun_app$u (A_treeFI_stream_a_treeFI_fun$ A_treeFI_stream$ )A_treeFI$ )
(declare-fun fun_app$v (A_treeFI_a_treeFI_stream_a_treeFI_fun_fun$ A_treeFI$ )A_treeFI_stream_a_treeFI_fun$ )
(declare-fun fun_app$w (A_treeFI_treeFI_list_a_treeFI_fun$ A_treeFI_treeFI_list$ )A_treeFI$ )
(declare-fun fun_app$x (A_treeFI_a_treeFI_treeFI_list_a_treeFI_fun_fun$ A_treeFI$ )A_treeFI_treeFI_list_a_treeFI_fun$ )
(declare-fun fun_app$y (A_a_stream_a_fun_fun$ A$ )A_stream_a_fun$ )
(declare-fun fun_app$z (A_treeFI_list_a_fun$ A_treeFI_list$ )A$ )
(declare-fun rel_fun$a (A_treeFI_a_treeFI_bool_fun_fun$ A_a_bool_fun_fun$ A_treeFI_a_fun$ A_treeFI_a_fun$ )Bool )
(declare-fun rel_fun$b (A_a_bool_fun_fun$ A_stream_a_stream_fun_a_stream_a_stream_fun_bool_fun_fun$ A_a_stream_a_stream_fun_fun$ A_a_stream_a_stream_fun_fun$ )Bool )
(declare-fun rel_fun$c (A_stream_a_stream_bool_fun_fun$ A_stream_a_stream_bool_fun_fun$ )A_stream_a_stream_fun_a_stream_a_stream_fun_bool_fun_fun$ )
(declare-fun rel_fun$d (A_stream_a_stream_bool_fun_fun$ A_a_bool_fun_fun$ A_stream_a_fun$ A_stream_a_fun$ )Bool )
(declare-fun smember$a (A_a_prod$ A_a_prod_stream$ )Bool )
(declare-fun smember$b (A$ )A_stream_bool_fun$ )
(declare-fun streams$a (A_treeFI_treeFI_set$ )A_treeFI_treeFI_stream_set$ )
(declare-fun streams$b (A_treeFI_stream_set$ )A_treeFI_stream_stream_set$ )
(declare-fun streams$c (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$d (A_a_prod_set$ )A_a_prod_stream_set$ )
(declare-fun streams$e (A_treeFI_set$ )A_treeFI_stream_set$ )
(declare-fun streams$f (A_set$ )A_stream_set$ )
(declare-fun streamsp$ (A_treeFI_bool_fun$ )A_treeFI_stream_bool_fun$ )
(declare-fun fun_app$aa (A_a_treeFI_list_a_fun_fun$ A$ )A_treeFI_list_a_fun$ )
(declare-fun fun_app$ab (A_a_prod_stream_a_a_prod_stream_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun fun_app$ac (A_a_prod_a_a_prod_stream_a_a_prod_stream_fun_fun$ A_a_prod$ )A_a_prod_stream_a_a_prod_stream_fun$ )
(declare-fun fun_app$ad (A_treeFI_stream_a_treeFI_stream_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun fun_app$ae (A_treeFI_a_treeFI_stream_a_treeFI_stream_fun_fun$ A_treeFI$ )A_treeFI_stream_a_treeFI_stream_fun$ )
(declare-fun fun_app$af (A_treeFI_treeFI_list_a_treeFI_treeFI_list_fun$ A_treeFI_treeFI_list$ )A_treeFI_treeFI_list$ )
(declare-fun fun_app$ag (A_treeFI_a_treeFI_treeFI_list_a_treeFI_treeFI_list_fun_fun$ A_treeFI$ )A_treeFI_treeFI_list_a_treeFI_treeFI_list_fun$ )
(declare-fun fun_app$ah (A_treeFI_list_a_treeFI_list_fun$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun fun_app$ai (A_a_treeFI_list_a_treeFI_list_fun_fun$ A$ )A_treeFI_list_a_treeFI_list_fun$ )
(declare-fun fun_app$aj (A_treeFI_a_treeFI_fun$ A_treeFI$ )A_treeFI$ )
(declare-fun fun_app$ak (A_treeFI_a_fun$ A_treeFI$ )A$ )
(declare-fun fun_app$al (A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ A_a_prod_stream$ )A_a_prod_treeFI_bool_fun$ )
(declare-fun fun_app$am (A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$an (A_stream_a_treeFI_bool_fun_fun$ A_stream$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$ao (A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_stream_bool_fun$ )
(declare-fun fun_app$ap (A_a_prod_stream_bool_fun$ A_a_prod_stream$ )Bool )
(declare-fun fun_app$aq (A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ A_a_prod_stream$ )A_a_prod_stream_bool_fun$ )
(declare-fun fun_app$ar (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun fun_app$as (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun fun_app$at (A_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun$ A_treeFI_list_a_treeFI_list_prod_treeFI$ )Bool )
(declare-fun fun_app$au (A_treeFI_list_a_treeFI_list_prod_a_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun_fun$ A_treeFI_list_a_treeFI_list_prod$ )A_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun$ )
(declare-fun fun_app$av (A_treeFI_treeFI_treeFI_bool_fun$ A_treeFI_treeFI_treeFI$ )Bool )
(declare-fun fun_app$aw (A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ A_treeFI_treeFI$ )A_treeFI_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$ax (A_treeFI_stream_treeFI_bool_fun$ A_treeFI_stream_treeFI$ )Bool )
(declare-fun fun_app$ay (A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_stream_treeFI_bool_fun$ )
(declare-fun fun_app$az (A_stream_treeFI_bool_fun$ A_stream_treeFI$ )Bool )
(declare-fun fun_app$ba (A_stream_a_stream_treeFI_bool_fun_fun$ A_stream$ )A_stream_treeFI_bool_fun$ )
(declare-fun fun_app$bb (A_treeFI_a_treeFI_treeFI_bool_fun_fun$ A_treeFI$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$bc (A_a_treeFI_bool_fun_fun$ A$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$bd (A_treeFI_list_bool_fun$ A_treeFI_list$ )Bool )
(declare-fun fun_app$be (A_a_treeFI_a_fun_fun$ A$ )A_treeFI_a_fun$ )
(declare-fun fun_app$bf (A_treeFI_a_a_fun_fun$ A_treeFI$ )A_a_fun$ )
(declare-fun fun_app$bg (A_a_treeFI_fun$ A$ )A_treeFI$ )
(declare-fun fun_app$bh (A_a_a_treeFI_fun_fun$ A$ )A_a_treeFI_fun$ )
(declare-fun fun_app$bi (A_a_prod_a_fun$ A_a_prod$ )A$ )
(declare-fun fun_app$bj (A_a_a_prod_a_fun_fun$ A$ )A_a_prod_a_fun$ )
(declare-fun fun_app$bk (A_treeFI_a_treeFI_a_fun_fun$ A_treeFI$ )A_treeFI_a_fun$ )
(declare-fun fun_app$bl (A_a_prod_a_a_fun_fun$ A_a_prod$ )A_a_fun$ )
(declare-fun fun_app$bm (A_a_treeFI_a_treeFI_fun_fun$ A$ )A_treeFI_a_treeFI_fun$ )
(declare-fun fun_app$bn (A_treeFI_a_a_treeFI_fun_fun$ A_treeFI$ )A_a_treeFI_fun$ )
(declare-fun fun_app$bo (A_a_a_prod_fun$ A$ )A_a_prod$ )
(declare-fun fun_app$bp (A_a_a_a_prod_fun_fun$ A$ )A_a_a_prod_fun$ )
(declare-fun fun_app$bq (A_a_prod_a_treeFI_fun$ A_a_prod$ )A_treeFI$ )
(declare-fun fun_app$br (A_treeFI_a_a_prod_fun$ A_treeFI$ )A_a_prod$ )
(declare-fun fun_app$bs (A_a_prod_a_a_prod_fun$ A_a_prod$ )A_a_prod$ )
(declare-fun fun_app$bt (A_treeFI_a_treeFI_treeFI_fun$ A_treeFI$ )A_treeFI_treeFI$ )
(declare-fun fun_app$bu (A_treeFI_a_treeFI_stream_fun$ A_treeFI$ )A_treeFI_stream$ )
(declare-fun fun_app$bv (A_treeFI_a_stream_fun$ A_treeFI$ )A_stream$ )
(declare-fun fun_app$bw (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$bx (A_treeFI_a_treeFI_stream_bool_fun_fun$ A_treeFI$ )A_treeFI_stream_bool_fun$ )
(declare-fun fun_app$by (A_a_stream_bool_fun_fun$ A$ )A_stream_bool_fun$ )
(declare-fun fun_app$bz (A_treeFI_list_a_treeFI_list_bool_fun_fun$ A_treeFI_list$ )A_treeFI_list_bool_fun$ )
(declare-fun fun_app$ca (A_a_bool_fun_fun$ A$ )A_bool_fun$ )
(declare-fun fun_app$cb (A_treeFI_treeFI_a_treeFI_treeFI_bool_fun_fun$ A_treeFI_treeFI$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$cc (A_stream_a_stream_fun_bool_fun$ A_stream_a_stream_fun$ )Bool )
(declare-fun fun_app$cd (A_stream_a_stream_fun_a_stream_a_stream_fun_bool_fun_fun$ A_stream_a_stream_fun$ )A_stream_a_stream_fun_bool_fun$ )
(declare-fun fun_app$ce (A_bool_fun_a_stream_a_stream_fun_fun$ A_bool_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$cf (A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ A_bool_fun_a_stream_prod$ )A_stream_bool_fun$ )
(declare-fun konigPath$ (A_treeFI$ )A_stream$ )
(declare-fun list_all2$ (A_treeFI_a_treeFI_bool_fun_fun$ )A_treeFI_list_a_treeFI_list_bool_fun_fun$ )
(declare-fun partition$ (A_treeFI_bool_fun$ A_treeFI_list$ )A_treeFI_list_a_treeFI_list_prod$ )
(declare-fun pred_list$ (A_treeFI_bool_fun$ )A_treeFI_list_bool_fun$ )
(declare-fun streamsp$a (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun undefined$ ()A_stream$ )
(declare-fun infiniteTr$ (A_a_prod_treeFI$ )Bool )
(declare-fun konigPath$a (A_a_prod_treeFI$ )A_a_prod_stream$ )
(declare-fun konigPath$b (A_treeFI_treeFI$ )A_treeFI_stream$ )
(declare-fun properPath$ (A_stream$ )A_treeFI_bool_fun$ )
(declare-fun rel_treeFI$ (A_a_bool_fun_fun$ )A_treeFI_a_treeFI_bool_fun_fun$ )
(declare-fun set_treeFI$ (A_treeFI_list_a_treeFI_list_prod_treeFI$ )A_treeFI_list_a_treeFI_list_prod_set$ )
(declare-fun stream_all$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun case_stream$ (A_a_stream_a_fun_fun$ A_stream$ )A$ )
(declare-fun case_treeFI$ (A_a_treeFI_list_a_fun_fun$ )A_treeFI_a_fun$ )
(declare-fun infiniteTr$a (A_treeFI_treeFI$ )Bool )
(declare-fun infiniteTr$b (A_treeFI$ )Bool )
(declare-fun pred_stream$ (A_treeFI_bool_fun$ )A_treeFI_stream_bool_fun$ )
(declare-fun pred_treeFI$ (A_treeFI_bool_fun$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun properPath$a (A_a_prod_stream$ A_a_prod_treeFI$ )Bool )
(declare-fun properPath$b (A_treeFI_stream$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun rel_treeFI$a (A_treeFI_a_treeFI_bool_fun_fun$ )A_treeFI_treeFI_a_treeFI_treeFI_bool_fun_fun$ )
(declare-fun sdrop_while$ (A_treeFI_bool_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun set_treeFI$a (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI_set$ )
(declare-fun set_treeFI$b (A_treeFI_stream_treeFI$ )A_treeFI_stream_set$ )
(declare-fun set_treeFI$c (A_stream_treeFI$ )A_stream_set$ )
(declare-fun set_treeFI$d (A_treeFI_treeFI$ )A_treeFI_set$ )
(declare-fun set_treeFI$e (A_treeFI$ )A_set$ )
(declare-fun sinterleave$ (A_treeFI_stream$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun stream_all$a (A_treeFI_bool_fun$ )A_treeFI_stream_bool_fun$ )
(declare-fun stream_all2$ (A_a_bool_fun_fun$ )A_stream_a_stream_bool_fun_fun$ )
(declare-fun case_stream$a (A_a_stream_a_stream_fun_fun$ A_stream$ )A_stream$ )
(declare-fun case_stream$b (A_treeFI_a_treeFI_stream_a_treeFI_fun_fun$ A_treeFI_stream$ )A_treeFI$ )
(declare-fun case_stream$c (A_a_prod_a_a_prod_stream_a_a_prod_fun_fun$ A_a_prod_stream$ )A_a_prod$ )
(declare-fun case_stream$d (A_treeFI_a_treeFI_stream_a_treeFI_stream_fun_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun case_stream$e (A_a_prod_a_a_prod_stream_a_a_prod_stream_fun_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun case_treeFI$a (A_a_treeFI_list_a_treeFI_list_fun_fun$ A_treeFI$ )A_treeFI_list$ )
(declare-fun case_treeFI$b (A_treeFI_a_treeFI_treeFI_list_a_treeFI_fun_fun$ A_treeFI_treeFI$ )A_treeFI$ )
(declare-fun case_treeFI$c (A_treeFI_a_treeFI_treeFI_list_a_treeFI_treeFI_list_fun_fun$ A_treeFI_treeFI$ )A_treeFI_treeFI_list$ )
(declare-fun pred_stream$a (A_a_prod_bool_fun$ A_a_prod_stream$ )Bool )
(declare-fun pred_stream$b (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun sdrop_while$a (A_a_prod_bool_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sdrop_while$b (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun sinterleave$a (A_a_prod_stream$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sinterleave$b (A_stream$ A_stream$ )A_stream$ )
(declare-fun stream_all2$a (A_treeFI_a_treeFI_bool_fun_fun$ )A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ )
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$ uvb$ ?v0 )(stl$ ?v0 )):pattern ((fun_app$ uvb$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (fun_app$a uva$ ?v0 )(shd$ ?v0 )):pattern ((fun_app$a uva$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$b uux$ ?v0 )(not ?v0 )):pattern ((fun_app$b uux$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 A_a_prod_treeFI$ )(?v1 A_a_prod_treeFI$ ))(! (= (fun_app$c (uu$ ?v0 )?v1 )(and (member$ ?v1 (set$ (sub$ ?v0 )))(infiniteTr$ ?v1 ))):pattern ((fun_app$c (uu$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ ))(! (= (fun_app$d (uua$ ?v0 )?v1 )(and (member$a ?v1 (set$a (sub$a ?v0 )))(infiniteTr$a ?v1 ))):pattern ((fun_app$d (uua$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(! (= (fun_app$e (uub$ ?v0 )?v1 )(and (member$b ?v1 (set$b (fun_app$f sub$b ?v0 )))(infiniteTr$b ?v1 ))):pattern ((fun_app$e (uub$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (fun_app$ (fun_app$g uuz$ ?v0 )?v1 )(sCons$ ?v0 ?v1 )):pattern ((fun_app$ (fun_app$g uuz$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_set$ )(?v1 A_treeFI_list_a_treeFI_list_prod$ ))(! (= (fun_app$h (uum$ ?v0 )?v1 )(member$c ?v1 ?v0 )):pattern ((fun_app$h (uum$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ )(?v1 A_treeFI_treeFI$ ))(! (= (fun_app$d (uun$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$d (uun$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI$ ))(! (= (fun_app$e (uur$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$e (uur$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$i (uuo$ ?v0 )?v1 )(member$d ?v1 ?v0 )):pattern ((fun_app$i (uuo$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream$ ))(! (= (fun_app$j (uup$ ?v0 )?v1 )(member$e ?v1 ?v0 )):pattern ((fun_app$j (uup$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(! (= (fun_app$k (uuq$ ?v0 )?v1 )(member$f ?v1 ?v0 )):pattern ((fun_app$k (uuq$ ?v0 )?v1 )))):named a12 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(! (= (fun_app$e (uut$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$e (uut$ ?v0 )?v1 )))):named a13 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(! (= (fun_app$e (uus$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$e (uus$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI$ ))(! (= (fun_app$e (uvg$ ?v0 )?v1 )(not (member$b ?v1 ?v0 ))):pattern ((fun_app$e (uvg$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI$ ))(! (= (fun_app$l (uvd$ ?v0 )?v1 )(set$b ?v0 )):pattern ((fun_app$l (uvd$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_bool_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(! (= (fun_app$e (fun_app$m (uuy$ ?v0 )?v1 )?v2 )(or (fun_app$e (fun_app$m ?v0 ?v1 )?v2 )(= ?v1 ?v2 ))):pattern ((fun_app$e (fun_app$m (uuy$ ?v0 )?v1 )?v2 )))):named a17 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI$ ))(! (= (fun_app$e (fun_app$n (uve$ ?v0 )?v1 )?v2 )(and (member$b ?v2 (set$b ?v1 ))(fun_app$e ?v0 ?v2 ))):pattern ((fun_app$e (fun_app$n (uve$ ?v0 )?v1 )?v2 )))):named a18 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI$ ))(! (= (fun_app$e (fun_app$o (uvc$ ?v0 )?v1 )?v2 )(or (member$b ?v2 ?v0 )(member$b ?v2 ?v1 ))):pattern ((fun_app$e (fun_app$o (uvc$ ?v0 )?v1 )?v2 )))):named a19 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI$ ))(! (= (fun_app$e (fun_app$o (uvf$ ?v0 )?v1 )?v2 )(and (member$b ?v2 ?v1 )(fun_app$e ?v0 ?v2 ))):pattern ((fun_app$e (fun_app$o (uvf$ ?v0 )?v1 )?v2 )))):named a20 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI$ ))(! (= (fun_app$e (fun_app$o (uvh$ ?v0 )?v1 )?v2 )(and (member$b ?v2 ?v0 )(not (member$b ?v2 ?v1 )))):pattern ((fun_app$e (fun_app$o (uvh$ ?v0 )?v1 )?v2 )))):named a21 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_a_fun_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$p (fun_app$q (fun_app$r (uuu$ ?v0 )?v1 )?v2 )?v3 )(fun_app$p ?v0 (fun_app$p (fun_app$q ?v1 ?v2 )?v3 ))):pattern ((fun_app$p (fun_app$q (fun_app$r (uuu$ ?v0 )?v1 )?v2 )?v3 )))):named a22 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (fun_app$s (fun_app$t uud$ ?v0 )?v1 )?v0 ):pattern ((fun_app$s (fun_app$t uud$ ?v0 )?v1 )))):named a23 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$u (fun_app$v uuc$ ?v0 )?v1 )?v0 ):pattern ((fun_app$u (fun_app$v uuc$ ?v0 )?v1 )))):named a24 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (fun_app$w (fun_app$x uui$ ?v0 )?v1 )?v0 ):pattern ((fun_app$w (fun_app$x uui$ ?v0 )?v1 )))):named a25 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (fun_app$a (fun_app$y uue$ ?v0 )?v1 )?v0 ):pattern ((fun_app$a (fun_app$y uue$ ?v0 )?v1 )))):named a26 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$z (fun_app$aa uuj$ ?v0 )?v1 )?v0 ):pattern ((fun_app$z (fun_app$aa uuj$ ?v0 )?v1 )))):named a27 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (fun_app$ab (fun_app$ac uug$ ?v0 )?v1 )?v1 ):pattern ((fun_app$ab (fun_app$ac uug$ ?v0 )?v1 )))):named a28 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$ad (fun_app$ae uuf$ ?v0 )?v1 )?v1 ):pattern ((fun_app$ad (fun_app$ae uuf$ ?v0 )?v1 )))):named a29 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (fun_app$af (fun_app$ag uuk$ ?v0 )?v1 )?v1 ):pattern ((fun_app$af (fun_app$ag uuk$ ?v0 )?v1 )))):named a30 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (fun_app$ (fun_app$g uuh$ ?v0 )?v1 )?v1 ):pattern ((fun_app$ (fun_app$g uuh$ ?v0 )?v1 )))):named a31 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$ah (fun_app$ai uul$ ?v0 )?v1 )?v1 ):pattern ((fun_app$ah (fun_app$ai uul$ ?v0 )?v1 )))):named a32 ))
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$aj uuw$ ?v0 )?v0 ):pattern ((fun_app$aj uuw$ ?v0 )))):named a33 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$p uuv$ ?v0 )?v0 ):pattern ((fun_app$p uuv$ ?v0 )))):named a34 ))
(assert (! (not (fun_app$e (properPath$ as$ )tr$ )):named a35 ))
(assert (! (infiniteTr$b tr$ ):named a36 ))
(assert (! (and (infiniteTr$b tr$ )(= as$ (konigPath$ tr$ ))):named a37 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_treeFI$ ))(=> (properPath$a ?v0 ?v1 )(= (shd$a ?v0 )(lab$ ?v1 )))):named a38 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ ))(=> (fun_app$d (properPath$b ?v0 )?v1 )(= (shd$b ?v0 )(lab$a ?v1 )))):named a39 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(=> (fun_app$e (properPath$ ?v0 )?v1 )(= (shd$ ?v0 )(fun_app$ak lab$b ?v1 )))):named a40 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_treeFI$ )(?v2 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ ))(=> (properPath$a ?v0 ?v1 )(exists ((?v3 A_a_prod_treeFI$ ))(and (member$ ?v3 (set$ (sub$ ?v1 )))(or (fun_app$c (fun_app$al ?v2 (stl$a ?v0 ))?v3 )(properPath$a (stl$a ?v0 )?v3 )))))):named a41 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ ))(=> (fun_app$d (properPath$b ?v0 )?v1 )(exists ((?v3 A_treeFI_treeFI$ ))(and (member$a ?v3 (set$a (sub$a ?v1 )))(or (fun_app$d (fun_app$am ?v2 (stl$b ?v0 ))?v3 )(fun_app$d (properPath$b (stl$b ?v0 ))?v3 )))))):named a42 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ )(?v2 A_stream_a_treeFI_bool_fun_fun$ ))(=> (fun_app$e (properPath$ ?v0 )?v1 )(exists ((?v3 A_treeFI$ ))(and (member$b ?v3 (set$b (fun_app$f sub$b ?v1 )))(or (fun_app$e (fun_app$an ?v2 (stl$ ?v0 ))?v3 )(fun_app$e (properPath$ (stl$ ?v0 ))?v3 )))))):named a43 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_treeFI$ ))(= (properPath$a ?v0 ?v1 )(exists ((?v2 A_a_prod_stream$ )(?v3 A_a_prod_treeFI$ )(?v4 A_a_prod_treeFI$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$a ?v2 )(lab$ ?v3 ))(and (member$ ?v4 (set$ (sub$ ?v3 )))(properPath$a (stl$a ?v2 )?v4 )))))))):named a44 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ ))(= (fun_app$d (properPath$b ?v0 )?v1 )(exists ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$b ?v2 )(lab$a ?v3 ))(and (member$a ?v4 (set$a (sub$a ?v3 )))(fun_app$d (properPath$b (stl$b ?v2 ))?v4 )))))))):named a45 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(= (fun_app$e (properPath$ ?v0 )?v1 )(exists ((?v2 A_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$ ?v2 )(fun_app$ak lab$b ?v3 ))(and (member$b ?v4 (set$b (fun_app$f sub$b ?v3 )))(fun_app$e (properPath$ (stl$ ?v2 ))?v4 )))))))):named a46 ))
(assert (! (forall ((?v0 A_a_prod_treeFI$ ))(= (shd$a (konigPath$a ?v0 ))(lab$ ?v0 ))):named a47 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (shd$b (konigPath$b ?v0 ))(lab$a ?v0 ))):named a48 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (shd$ (konigPath$ ?v0 ))(fun_app$ak lab$b ?v0 ))):named a49 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (infiniteTr$a ?v0 )(exists ((?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(and (= ?v0 ?v2 )(and (member$a ?v1 (set$a (sub$a ?v2 )))(infiniteTr$a ?v1 )))))):named a50 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (infiniteTr$b ?v0 )(exists ((?v1 A_treeFI$ )(?v2 A_treeFI$ ))(and (= ?v0 ?v2 )(and (member$b ?v1 (set$b (fun_app$f sub$b ?v2 )))(infiniteTr$b ?v1 )))))):named a51 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_treeFI$ )(?v2 A_a_prod_treeFI$ ))(=> (and (= (shd$a ?v0 )(lab$ ?v1 ))(and (member$ ?v2 (set$ (sub$ ?v1 )))(properPath$a (stl$a ?v0 )?v2 )))(properPath$a ?v0 ?v1 ))):named a52 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (= (shd$b ?v0 )(lab$a ?v1 ))(and (member$a ?v2 (set$a (sub$a ?v1 )))(fun_app$d (properPath$b (stl$b ?v0 ))?v2 )))(fun_app$d (properPath$b ?v0 )?v1 ))):named a53 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (= (shd$ ?v0 )(fun_app$ak lab$b ?v1 ))(and (member$b ?v2 (set$b (fun_app$f sub$b ?v1 )))(fun_app$e (properPath$ (stl$ ?v0 ))?v2 )))(fun_app$e (properPath$ ?v0 )?v1 ))):named a54 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (member$a ?v0 (set$a (sub$a ?v1 )))(infiniteTr$a ?v0 ))(infiniteTr$a ?v1 ))):named a55 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(=> (and (member$b ?v0 (set$b (fun_app$f sub$b ?v1 )))(infiniteTr$b ?v0 ))(infiniteTr$b ?v1 ))):named a56 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_treeFI$ ))(=> (and (properPath$a ?v0 ?v1 )(forall ((?v2 A_a_prod_stream$ )(?v3 A_a_prod_treeFI$ )(?v4 A_a_prod_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$a ?v2 )(lab$ ?v3 ))(and (member$ ?v4 (set$ (sub$ ?v3 )))(properPath$a (stl$a ?v2 )?v4 )))))false )))false )):named a57 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$d (properPath$b ?v0 )?v1 )(forall ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$b ?v2 )(lab$a ?v3 ))(and (member$a ?v4 (set$a (sub$a ?v3 )))(fun_app$d (properPath$b (stl$b ?v2 ))?v4 )))))false )))false )):named a58 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(=> (and (fun_app$e (properPath$ ?v0 )?v1 )(forall ((?v2 A_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$ ?v2 )(fun_app$ak lab$b ?v3 ))(and (member$b ?v4 (set$b (fun_app$f sub$b ?v3 )))(fun_app$e (properPath$ (stl$ ?v2 ))?v4 )))))false )))false )):named a59 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (and (infiniteTr$a ?v0 )(forall ((?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (member$a ?v1 (set$a (sub$a ?v2 )))(infiniteTr$a ?v1 )))false )))false )):named a60 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (and (infiniteTr$b ?v0 )(forall ((?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (member$b ?v1 (set$b (fun_app$f sub$b ?v2 )))(infiniteTr$b ?v1 )))false )))false )):named a61 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (infiniteTr$a ?v0 )(exists ((?v1 A_treeFI_treeFI$ ))(and (member$a ?v1 (set$a (sub$a ?v0 )))(infiniteTr$a ?v1 ))))):named a62 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (infiniteTr$b ?v0 )(exists ((?v1 A_treeFI$ ))(and (member$b ?v1 (set$b (fun_app$f sub$b ?v0 )))(infiniteTr$b ?v1 ))))):named a63 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_treeFI$ ))(=> (and (fun_app$c (fun_app$al ?v0 ?v1 )?v2 )(and (forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_treeFI$ ))(=> (fun_app$c (fun_app$al ?v0 ?v3 )?v4 )(= (shd$a ?v3 )(lab$ ?v4 ))))(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_treeFI$ ))(=> (fun_app$c (fun_app$al ?v0 ?v3 )?v4 )(exists ((?v5 A_a_prod_treeFI$ ))(and (member$ ?v5 (set$ (sub$ ?v4 )))(or (fun_app$c (fun_app$al ?v0 (stl$a ?v3 ))?v5 )(properPath$a (stl$a ?v3 )?v5 ))))))))(properPath$a ?v1 ?v2 ))):named a64 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_treeFI$ ))(=> (and (fun_app$d (fun_app$am ?v0 ?v1 )?v2 )(and (forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$d (fun_app$am ?v0 ?v3 )?v4 )(= (shd$b ?v3 )(lab$a ?v4 ))))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$d (fun_app$am ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI_treeFI$ ))(and (member$a ?v5 (set$a (sub$a ?v4 )))(or (fun_app$d (fun_app$am ?v0 (stl$b ?v3 ))?v5 )(fun_app$d (properPath$b (stl$b ?v3 ))?v5 ))))))))(fun_app$d (properPath$b ?v1 )?v2 ))):named a65 ))
(assert (! (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ ))(=> (and (fun_app$e (fun_app$an ?v0 ?v1 )?v2 )(and (forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$e (fun_app$an ?v0 ?v3 )?v4 )(= (shd$ ?v3 )(fun_app$ak lab$b ?v4 ))))(forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$e (fun_app$an ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI$ ))(and (member$b ?v5 (set$b (fun_app$f sub$b ?v4 )))(or (fun_app$e (fun_app$an ?v0 (stl$ ?v3 ))?v5 )(fun_app$e (properPath$ (stl$ ?v3 ))?v5 ))))))))(fun_app$e (properPath$ ?v1 )?v2 ))):named a66 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_treeFI$ ))(=> (and (fun_app$c (fun_app$al ?v0 ?v1 )?v2 )(and (forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_treeFI$ ))(=> (fun_app$c (fun_app$al ?v0 ?v3 )?v4 )(= (shd$a ?v3 )(lab$ ?v4 ))))(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_treeFI$ ))(=> (fun_app$c (fun_app$al ?v0 ?v3 )?v4 )(exists ((?v5 A_a_prod_treeFI$ ))(and (member$ ?v5 (set$ (sub$ ?v4 )))(fun_app$c (fun_app$al ?v0 (stl$a ?v3 ))?v5 )))))))(properPath$a ?v1 ?v2 ))):named a67 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_treeFI$ ))(=> (and (fun_app$d (fun_app$am ?v0 ?v1 )?v2 )(and (forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$d (fun_app$am ?v0 ?v3 )?v4 )(= (shd$b ?v3 )(lab$a ?v4 ))))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$d (fun_app$am ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI_treeFI$ ))(and (member$a ?v5 (set$a (sub$a ?v4 )))(fun_app$d (fun_app$am ?v0 (stl$b ?v3 ))?v5 )))))))(fun_app$d (properPath$b ?v1 )?v2 ))):named a68 ))
(assert (! (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ ))(=> (and (fun_app$e (fun_app$an ?v0 ?v1 )?v2 )(and (forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$e (fun_app$an ?v0 ?v3 )?v4 )(= (shd$ ?v3 )(fun_app$ak lab$b ?v4 ))))(forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$e (fun_app$an ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI$ ))(and (member$b ?v5 (set$b (fun_app$f sub$b ?v4 )))(fun_app$e (fun_app$an ?v0 (stl$ ?v3 ))?v5 )))))))(fun_app$e (properPath$ ?v1 )?v2 ))):named a69 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_treeFI_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_treeFI$ ))(=> (and (fun_app$c (fun_app$al ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_treeFI$ ))(=> (fun_app$c (fun_app$al ?v0 ?v3 )?v4 )(exists ((?v5 A_a_prod_stream$ )(?v6 A_a_prod_treeFI$ )(?v7 A_a_prod_treeFI$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (shd$a ?v5 )(lab$ ?v6 ))(and (member$ ?v7 (set$ (sub$ ?v6 )))(or (fun_app$c (fun_app$al ?v0 (stl$a ?v5 ))?v7 )(properPath$a (stl$a ?v5 )?v7 ))))))))))(properPath$a ?v1 ?v2 ))):named a70 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_treeFI$ ))(=> (and (fun_app$d (fun_app$am ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$d (fun_app$am ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI_stream$ )(?v6 A_treeFI_treeFI$ )(?v7 A_treeFI_treeFI$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (shd$b ?v5 )(lab$a ?v6 ))(and (member$a ?v7 (set$a (sub$a ?v6 )))(or (fun_app$d (fun_app$am ?v0 (stl$b ?v5 ))?v7 )(fun_app$d (properPath$b (stl$b ?v5 ))?v7 ))))))))))(fun_app$d (properPath$b ?v1 )?v2 ))):named a71 ))
(assert (! (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ ))(=> (and (fun_app$e (fun_app$an ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$e (fun_app$an ?v0 ?v3 )?v4 )(exists ((?v5 A_stream$ )(?v6 A_treeFI$ )(?v7 A_treeFI$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (shd$ ?v5 )(fun_app$ak lab$b ?v6 ))(and (member$b ?v7 (set$b (fun_app$f sub$b ?v6 )))(or (fun_app$e (fun_app$an ?v0 (stl$ ?v5 ))?v7 )(fun_app$e (properPath$ (stl$ ?v5 ))?v7 ))))))))))(fun_app$e (properPath$ ?v1 )?v2 ))):named a72 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$d ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$d ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ ))(and (member$a ?v3 (set$a (sub$a ?v2 )))(or (fun_app$d ?v0 ?v3 )(infiniteTr$a ?v3 )))))))(infiniteTr$a ?v1 ))):named a73 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$e ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$e ?v0 ?v2 )(exists ((?v3 A_treeFI$ ))(and (member$b ?v3 (set$b (fun_app$f sub$b ?v2 )))(or (fun_app$e ?v0 ?v3 )(infiniteTr$b ?v3 )))))))(infiniteTr$b ?v1 ))):named a74 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$d ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$d ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(and (= ?v2 ?v4 )(and (member$a ?v3 (set$a (sub$a ?v4 )))(or (fun_app$d ?v0 ?v3 )(infiniteTr$a ?v3 ))))))))(infiniteTr$a ?v1 ))):named a75 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$e ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$e ?v0 ?v2 )(exists ((?v3 A_treeFI$ )(?v4 A_treeFI$ ))(and (= ?v2 ?v4 )(and (member$b ?v3 (set$b (fun_app$f sub$b ?v4 )))(or (fun_app$e ?v0 ?v3 )(infiniteTr$b ?v3 ))))))))(infiniteTr$b ?v1 ))):named a76 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$d ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$d ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ ))(and (member$a ?v3 (set$a (sub$a ?v2 )))(fun_app$d ?v0 ?v3 ))))))(infiniteTr$a ?v1 ))):named a77 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$e ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$e ?v0 ?v2 )(exists ((?v3 A_treeFI$ ))(and (member$b ?v3 (set$b (fun_app$f sub$b ?v2 )))(fun_app$e ?v0 ?v3 ))))))(infiniteTr$b ?v1 ))):named a78 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (= (lab$a ?v0 )(lab$a ?v1 ))(= (sub$a ?v0 )(sub$a ?v1 )))(= ?v0 ?v1 ))):named a79 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(=> (and (= (fun_app$ak lab$b ?v0 )(fun_app$ak lab$b ?v1 ))(= (fun_app$f sub$b ?v0 )(fun_app$f sub$b ?v1 )))(= ?v0 ?v1 ))):named a80 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(=> (and (= (shd$b ?v0 )(shd$b ?v1 ))(= (stl$b ?v0 )(stl$b ?v1 )))(= ?v0 ?v1 ))):named a81 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a82 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a83 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(=> (and (fun_app$i (fun_app$ao ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream$ ))(=> (fun_app$i (fun_app$ao ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(or (fun_app$i (fun_app$ao ?v0 (stl$b ?v3 ))(stl$b ?v4 ))(= (stl$b ?v3 )(stl$b ?v4 )))))))(= ?v1 ?v2 ))):named a84 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$ap (fun_app$aq ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_stream$ ))(=> (fun_app$ap (fun_app$aq ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$ap (fun_app$aq ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a85 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$j (fun_app$ar ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$j (fun_app$ar ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$j (fun_app$ar ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a86 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(=> (and (fun_app$i (fun_app$ao ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream$ ))(=> (fun_app$i (fun_app$ao ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(fun_app$i (fun_app$ao ?v0 (stl$b ?v3 ))(stl$b ?v4 ))))))(= ?v1 ?v2 ))):named a87 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$ap (fun_app$aq ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_stream$ ))(=> (fun_app$ap (fun_app$aq ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$ap (fun_app$aq ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a88 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$j (fun_app$ar ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$j (fun_app$ar ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$j (fun_app$ar ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a89 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_fun_fun$ )(?v1 A_treeFI$ ))(! (= (fun_app$ak (case_treeFI$ ?v0 )?v1 )(fun_app$z (fun_app$aa ?v0 (fun_app$ak lab$b ?v1 ))(fun_app$f sub$b ?v1 ))):pattern ((fun_app$ak (case_treeFI$ ?v0 )?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v1 A_treeFI$ ))(! (= (case_treeFI$a ?v0 ?v1 )(fun_app$ah (fun_app$ai ?v0 (fun_app$ak lab$b ?v1 ))(fun_app$f sub$b ?v1 ))):pattern ((case_treeFI$a ?v0 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_a_stream_a_fun_fun$ )(?v1 A_stream$ ))(! (= (case_stream$ ?v0 ?v1 )(fun_app$a (fun_app$y ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((case_stream$ ?v0 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 A_a_stream_a_stream_fun_fun$ )(?v1 A_stream$ ))(! (= (case_stream$a ?v0 ?v1 )(fun_app$ (fun_app$g ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((case_stream$a ?v0 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (tree$ (lab$a ?v0 )(sub$a ?v0 ))?v0 )):named a94 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (tree$a (fun_app$ak lab$b ?v0 )(fun_app$f sub$b ?v0 ))?v0 )):named a95 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (sdrop_while$ ?v0 ?v1 )(ite (fun_app$e ?v0 (shd$b ?v1 ))(sdrop_while$ ?v0 (stl$b ?v1 ))?v1 ))):named a96 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(= (sdrop_while$a ?v0 ?v1 )(ite (fun_app$as ?v0 (shd$a ?v1 ))(sdrop_while$a ?v0 (stl$a ?v1 ))?v1 ))):named a97 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sdrop_while$b ?v0 ?v1 )(ite (fun_app$k ?v0 (shd$ ?v1 ))(sdrop_while$b ?v0 (stl$ ?v1 ))?v1 ))):named a98 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v2 A_treeFI_list_a_treeFI_list_prod$ ))(=> (and (member$g ?v0 (set$c (sub$c ?v1 )))(member$c ?v2 (set_treeFI$ ?v0 )))(member$c ?v2 (set_treeFI$ ?v1 )))):named a99 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (member$h ?v0 (set$d (sub$d ?v1 )))(member$a ?v2 (set_treeFI$a ?v0 )))(member$a ?v2 (set_treeFI$a ?v1 )))):named a100 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ )(?v1 A_treeFI_stream_treeFI$ )(?v2 A_treeFI_stream$ ))(=> (and (member$i ?v0 (set$e (sub$e ?v1 )))(member$d ?v2 (set_treeFI$b ?v0 )))(member$d ?v2 (set_treeFI$b ?v1 )))):named a101 ))
(assert (! (forall ((?v0 A_stream_treeFI$ )(?v1 A_stream_treeFI$ )(?v2 A_stream$ ))(=> (and (member$j ?v0 (set$f (sub$f ?v1 )))(member$e ?v2 (set_treeFI$c ?v0 )))(member$e ?v2 (set_treeFI$c ?v1 )))):named a102 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI$ ))(=> (and (member$a ?v0 (set$a (sub$a ?v1 )))(member$b ?v2 (set_treeFI$d ?v0 )))(member$b ?v2 (set_treeFI$d ?v1 )))):named a103 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A$ ))(=> (and (member$b ?v0 (set$b (fun_app$f sub$b ?v1 )))(member$f ?v2 (set_treeFI$e ?v0 )))(member$f ?v2 (set_treeFI$e ?v1 )))):named a104 ))
(assert (! (forall ((?v0 A_a_prod_treeFI$ ))(= (stl$a (konigPath$a ?v0 ))(konigPath$a (eps$ (uu$ ?v0 ))))):named a105 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (stl$b (konigPath$b ?v0 ))(konigPath$b (eps$a (uua$ ?v0 ))))):named a106 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (stl$ (konigPath$ ?v0 ))(konigPath$ (eps$b (uub$ ?v0 ))))):named a107 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (=> (= ?v0 (tree$ (lab$a ?v0 )(sub$a ?v0 )))false )false )):named a108 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (=> (= ?v0 (tree$a (fun_app$ak lab$b ?v0 )(fun_app$f sub$b ?v0 )))false )false )):named a109 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (sCons$b (shd$b ?v0 )(stl$b ?v0 ))?v0 )):named a110 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a111 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a112 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (sCons$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a113 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a114 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a115 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ )(?v2 A$ )(?v3 A_treeFI_list$ ))(= (= (tree$a ?v0 ?v1 )(tree$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a116 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ )(?v2 A_treeFI$ )(?v3 A_treeFI_treeFI_list$ ))(= (= (tree$ ?v0 ?v1 )(tree$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a117 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (shd$b ?v0 )(case_stream$b uuc$ ?v0 ))):named a118 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(= (shd$a ?v0 )(case_stream$c uud$ ?v0 ))):named a119 ))
(assert (! (forall ((?v0 A_stream$ ))(= (shd$ ?v0 )(case_stream$ uue$ ?v0 ))):named a120 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (stl$b ?v0 )(case_stream$d uuf$ ?v0 ))):named a121 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(= (stl$a ?v0 )(case_stream$e uug$ ?v0 ))):named a122 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stl$ ?v0 )(case_stream$a uuh$ ?v0 ))):named a123 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (lab$a ?v0 )(case_treeFI$b uui$ ?v0 ))):named a124 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (fun_app$ak lab$b ?v0 )(fun_app$ak (case_treeFI$ uuj$ )?v0 ))):named a125 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (sub$a ?v0 )(case_treeFI$c uuk$ ?v0 ))):named a126 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (fun_app$f sub$b ?v0 )(case_treeFI$a uul$ ?v0 ))):named a127 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ ))(member$c ?v0 (set_treeFI$ (tree$b ?v0 ?v1 )))):named a128 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI_list$ ))(member$a ?v0 (set_treeFI$a (tree$c ?v0 ?v1 )))):named a129 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI_list$ ))(member$d ?v0 (set_treeFI$b (tree$d ?v0 ?v1 )))):named a130 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI_list$ ))(member$e ?v0 (set_treeFI$c (tree$e ?v0 ?v1 )))):named a131 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(member$f ?v0 (set_treeFI$e (tree$a ?v0 ?v1 )))):named a132 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(member$b ?v0 (set_treeFI$d (tree$ ?v0 ?v1 )))):named a133 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(=> (forall ((?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(=> (= ?v0 (sCons$b ?v1 ?v2 ))false ))false )):named a134 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(=> (forall ((?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a135 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a136 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (forall ((?v1 A$ )(?v2 A_treeFI_list$ ))(=> (= ?v0 (tree$a ?v1 ?v2 ))false ))false )):named a137 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (forall ((?v1 A_treeFI$ )(?v2 A_treeFI_treeFI_list$ ))(=> (= ?v0 (tree$ ?v1 ?v2 ))false ))false )):named a138 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_fun_fun$ )(?v1 A$ )(?v2 A_treeFI_list$ ))(! (= (fun_app$ak (case_treeFI$ ?v0 )(tree$a ?v1 ?v2 ))(fun_app$z (fun_app$aa ?v0 ?v1 )?v2 )):pattern ((fun_app$ak (case_treeFI$ ?v0 )(tree$a ?v1 ?v2 ))))):named a139 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v1 A$ )(?v2 A_treeFI_list$ ))(! (= (case_treeFI$a ?v0 (tree$a ?v1 ?v2 ))(fun_app$ah (fun_app$ai ?v0 ?v1 )?v2 )):pattern ((case_treeFI$a ?v0 (tree$a ?v1 ?v2 ))))):named a140 ))
(assert (! (forall ((?v0 A_a_stream_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (case_stream$ ?v0 (sCons$ ?v1 ?v2 ))(fun_app$a (fun_app$y ?v0 ?v1 )?v2 )):pattern ((case_stream$ ?v0 (sCons$ ?v1 ?v2 ))))):named a141 ))
(assert (! (forall ((?v0 A_a_stream_a_stream_fun_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (case_stream$a ?v0 (sCons$ ?v1 ?v2 ))(fun_app$ (fun_app$g ?v0 ?v1 )?v2 )):pattern ((case_stream$a ?v0 (sCons$ ?v1 ?v2 ))))):named a142 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (sdrop_while$ ?v0 (sCons$b ?v1 ?v2 ))(ite (fun_app$e ?v0 ?v1 )(sdrop_while$ ?v0 ?v2 )(sCons$b ?v1 ?v2 ))):pattern ((sdrop_while$ ?v0 (sCons$b ?v1 ?v2 ))))):named a143 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (sdrop_while$a ?v0 (sCons$a ?v1 ?v2 ))(ite (fun_app$as ?v0 ?v1 )(sdrop_while$a ?v0 ?v2 )(sCons$a ?v1 ?v2 ))):pattern ((sdrop_while$a ?v0 (sCons$a ?v1 ?v2 ))))):named a144 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sdrop_while$b ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$k ?v0 ?v1 )(sdrop_while$b ?v0 ?v2 )(sCons$ ?v1 ?v2 ))):pattern ((sdrop_while$b ?v0 (sCons$ ?v1 ?v2 ))))):named a145 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI$ ))(=> (and (member$c ?v0 (set_treeFI$ ?v1 ))(and (forall ((?v2 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ ))(=> (= ?v1 (tree$b ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI_list_a_treeFI_list_prod$ )(?v3 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )(?v4 A_treeFI_list_a_treeFI_list_prod_treeFI$ ))(=> (and (= ?v1 (tree$b ?v2 ?v3 ))(and (member$g ?v4 (set$c ?v3 ))(member$c ?v0 (set_treeFI$ ?v4 ))))false ))))false )):named a146 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ ))(=> (and (member$a ?v0 (set_treeFI$a ?v1 ))(and (forall ((?v2 A_treeFI_treeFI_treeFI_list$ ))(=> (= ?v1 (tree$c ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI_treeFI_list$ )(?v4 A_treeFI_treeFI_treeFI$ ))(=> (and (= ?v1 (tree$c ?v2 ?v3 ))(and (member$h ?v4 (set$d ?v3 ))(member$a ?v0 (set_treeFI$a ?v4 ))))false ))))false )):named a147 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI$ ))(=> (and (member$d ?v0 (set_treeFI$b ?v1 ))(and (forall ((?v2 A_treeFI_stream_treeFI_list$ ))(=> (= ?v1 (tree$d ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream_treeFI_list$ )(?v4 A_treeFI_stream_treeFI$ ))(=> (and (= ?v1 (tree$d ?v2 ?v3 ))(and (member$i ?v4 (set$e ?v3 ))(member$d ?v0 (set_treeFI$b ?v4 ))))false ))))false )):named a148 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI$ ))(=> (and (member$e ?v0 (set_treeFI$c ?v1 ))(and (forall ((?v2 A_stream_treeFI_list$ ))(=> (= ?v1 (tree$e ?v0 ?v2 ))false ))(forall ((?v2 A_stream$ )(?v3 A_stream_treeFI_list$ )(?v4 A_stream_treeFI$ ))(=> (and (= ?v1 (tree$e ?v2 ?v3 ))(and (member$j ?v4 (set$f ?v3 ))(member$e ?v0 (set_treeFI$c ?v4 ))))false ))))false )):named a149 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (member$b ?v0 (set_treeFI$d ?v1 ))(and (forall ((?v2 A_treeFI_treeFI_list$ ))(=> (= ?v1 (tree$ ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_treeFI_list$ )(?v4 A_treeFI_treeFI$ ))(=> (and (= ?v1 (tree$ ?v2 ?v3 ))(and (member$a ?v4 (set$a ?v3 ))(member$b ?v0 (set_treeFI$d ?v4 ))))false ))))false )):named a150 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI$ ))(=> (and (member$f ?v0 (set_treeFI$e ?v1 ))(and (forall ((?v2 A_treeFI_list$ ))(=> (= ?v1 (tree$a ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_treeFI_list$ )(?v4 A_treeFI$ ))(=> (and (= ?v1 (tree$a ?v2 ?v3 ))(and (member$b ?v4 (set$b ?v3 ))(member$f ?v0 (set_treeFI$e ?v4 ))))false ))))false )):named a151 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v2 A_treeFI_list_a_treeFI_list_prod_a_treeFI_list_a_treeFI_list_prod_treeFI_bool_fun_fun$ ))(=> (and (member$c ?v0 (set_treeFI$ ?v1 ))(and (forall ((?v3 A_treeFI_list_a_treeFI_list_prod$ )(?v4 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ ))(fun_app$at (fun_app$au ?v2 ?v3 )(tree$b ?v3 ?v4 )))(forall ((?v3 A_treeFI_list_a_treeFI_list_prod$ )(?v4 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )(?v5 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v6 A_treeFI_list_a_treeFI_list_prod$ ))(=> (and (member$g ?v5 (set$c ?v4 ))(and (member$c ?v6 (set_treeFI$ ?v5 ))(fun_app$at (fun_app$au ?v2 ?v6 )?v5 )))(fun_app$at (fun_app$au ?v2 ?v6 )(tree$b ?v3 ?v4 ))))))(fun_app$at (fun_app$au ?v2 ?v0 )?v1 ))):named a152 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ )(?v2 A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ ))(=> (and (member$a ?v0 (set_treeFI$a ?v1 ))(and (forall ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI_treeFI_list$ ))(fun_app$av (fun_app$aw ?v2 ?v3 )(tree$c ?v3 ?v4 )))(forall ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI_treeFI_list$ )(?v5 A_treeFI_treeFI_treeFI$ )(?v6 A_treeFI_treeFI$ ))(=> (and (member$h ?v5 (set$d ?v4 ))(and (member$a ?v6 (set_treeFI$a ?v5 ))(fun_app$av (fun_app$aw ?v2 ?v6 )?v5 )))(fun_app$av (fun_app$aw ?v2 ?v6 )(tree$c ?v3 ?v4 ))))))(fun_app$av (fun_app$aw ?v2 ?v0 )?v1 ))):named a153 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI$ )(?v2 A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ ))(=> (and (member$d ?v0 (set_treeFI$b ?v1 ))(and (forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream_treeFI_list$ ))(fun_app$ax (fun_app$ay ?v2 ?v3 )(tree$d ?v3 ?v4 )))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream_treeFI_list$ )(?v5 A_treeFI_stream_treeFI$ )(?v6 A_treeFI_stream$ ))(=> (and (member$i ?v5 (set$e ?v4 ))(and (member$d ?v6 (set_treeFI$b ?v5 ))(fun_app$ax (fun_app$ay ?v2 ?v6 )?v5 )))(fun_app$ax (fun_app$ay ?v2 ?v6 )(tree$d ?v3 ?v4 ))))))(fun_app$ax (fun_app$ay ?v2 ?v0 )?v1 ))):named a154 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI$ )(?v2 A_stream_a_stream_treeFI_bool_fun_fun$ ))(=> (and (member$e ?v0 (set_treeFI$c ?v1 ))(and (forall ((?v3 A_stream$ )(?v4 A_stream_treeFI_list$ ))(fun_app$az (fun_app$ba ?v2 ?v3 )(tree$e ?v3 ?v4 )))(forall ((?v3 A_stream$ )(?v4 A_stream_treeFI_list$ )(?v5 A_stream_treeFI$ )(?v6 A_stream$ ))(=> (and (member$j ?v5 (set$f ?v4 ))(and (member$e ?v6 (set_treeFI$c ?v5 ))(fun_app$az (fun_app$ba ?v2 ?v6 )?v5 )))(fun_app$az (fun_app$ba ?v2 ?v6 )(tree$e ?v3 ?v4 ))))))(fun_app$az (fun_app$ba ?v2 ?v0 )?v1 ))):named a155 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_a_treeFI_treeFI_bool_fun_fun$ ))(=> (and (member$b ?v0 (set_treeFI$d ?v1 ))(and (forall ((?v3 A_treeFI$ )(?v4 A_treeFI_treeFI_list$ ))(fun_app$d (fun_app$bb ?v2 ?v3 )(tree$ ?v3 ?v4 )))(forall ((?v3 A_treeFI$ )(?v4 A_treeFI_treeFI_list$ )(?v5 A_treeFI_treeFI$ )(?v6 A_treeFI$ ))(=> (and (member$a ?v5 (set$a ?v4 ))(and (member$b ?v6 (set_treeFI$d ?v5 ))(fun_app$d (fun_app$bb ?v2 ?v6 )?v5 )))(fun_app$d (fun_app$bb ?v2 ?v6 )(tree$ ?v3 ?v4 ))))))(fun_app$d (fun_app$bb ?v2 ?v0 )?v1 ))):named a156 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI$ )(?v2 A_a_treeFI_bool_fun_fun$ ))(=> (and (member$f ?v0 (set_treeFI$e ?v1 ))(and (forall ((?v3 A$ )(?v4 A_treeFI_list$ ))(fun_app$e (fun_app$bc ?v2 ?v3 )(tree$a ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_treeFI_list$ )(?v5 A_treeFI$ )(?v6 A$ ))(=> (and (member$b ?v5 (set$b ?v4 ))(and (member$f ?v6 (set_treeFI$e ?v5 ))(fun_app$e (fun_app$bc ?v2 ?v6 )?v5 )))(fun_app$e (fun_app$bc ?v2 ?v6 )(tree$a ?v3 ?v4 ))))))(fun_app$e (fun_app$bc ?v2 ?v0 )?v1 ))):named a157 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_treeFI$ )(?v1 A_treeFI_list_a_treeFI_list_prod_treeFI_list$ )(?v2 A_treeFI_list_a_treeFI_list_prod$ )(?v3 A_treeFI_list_a_treeFI_list_prod$ ))(=> (and (member$g ?v0 (set$c ?v1 ))(member$c ?v2 (set_treeFI$ ?v0 )))(member$c ?v2 (set_treeFI$ (tree$b ?v3 ?v1 ))))):named a158 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI_list$ )(?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI$ ))(=> (and (member$h ?v0 (set$d ?v1 ))(member$a ?v2 (set_treeFI$a ?v0 )))(member$a ?v2 (set_treeFI$a (tree$c ?v3 ?v1 ))))):named a159 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ )(?v1 A_treeFI_stream_treeFI_list$ )(?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream$ ))(=> (and (member$i ?v0 (set$e ?v1 ))(member$d ?v2 (set_treeFI$b ?v0 )))(member$d ?v2 (set_treeFI$b (tree$d ?v3 ?v1 ))))):named a160 ))
(assert (! (forall ((?v0 A_stream_treeFI$ )(?v1 A_stream_treeFI_list$ )(?v2 A_stream$ )(?v3 A_stream$ ))(=> (and (member$j ?v0 (set$f ?v1 ))(member$e ?v2 (set_treeFI$c ?v0 )))(member$e ?v2 (set_treeFI$c (tree$e ?v3 ?v1 ))))):named a161 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_list$ )(?v2 A_treeFI$ )(?v3 A_treeFI$ ))(=> (and (member$a ?v0 (set$a ?v1 ))(member$b ?v2 (set_treeFI$d ?v0 )))(member$b ?v2 (set_treeFI$d (tree$ ?v3 ?v1 ))))):named a162 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ )(?v2 A$ )(?v3 A$ ))(=> (and (member$b ?v0 (set$b ?v1 ))(member$f ?v2 (set_treeFI$e ?v0 )))(member$f ?v2 (set_treeFI$e (tree$a ?v3 ?v1 ))))):named a163 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_bool_fun$ ))(=> (forall ((?v2 A_treeFI$ ))(= (fun_app$e ?v0 ?v2 )(fun_app$e ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a164 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_set$ ))(= (collect$a (uum$ ?v0 ))?v0 )):named a165 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ ))(= (collect$b (uun$ ?v0 ))?v0 )):named a166 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ ))(= (collect$c (uuo$ ?v0 ))?v0 )):named a167 ))
(assert (! (forall ((?v0 A_stream_set$ ))(= (collect$d (uup$ ?v0 ))?v0 )):named a168 ))
(assert (! (forall ((?v0 A_set$ ))(= (collect$e (uuq$ ?v0 ))?v0 )):named a169 ))
(assert (! (forall ((?v0 A_treeFI_set$ ))(= (collect$ (uur$ ?v0 ))?v0 )):named a170 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod$ )(?v1 A_treeFI_list_a_treeFI_list_prod_bool_fun$ ))(= (member$c ?v0 (collect$a ?v1 ))(fun_app$h ?v1 ?v0 ))):named a171 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_bool_fun$ ))(= (member$a ?v0 (collect$b ?v1 ))(fun_app$d ?v1 ?v0 ))):named a172 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_bool_fun$ ))(= (member$d ?v0 (collect$c ?v1 ))(fun_app$i ?v1 ?v0 ))):named a173 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_bool_fun$ ))(= (member$e ?v0 (collect$d ?v1 ))(fun_app$j ?v1 ?v0 ))):named a174 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ ))(= (member$f ?v0 (collect$e ?v1 ))(fun_app$k ?v1 ?v0 ))):named a175 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_bool_fun$ ))(= (member$b ?v0 (collect$ ?v1 ))(fun_app$e ?v1 ?v0 ))):named a176 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (stl$b (sCons$b ?v0 ?v1 ))?v1 ):pattern ((sCons$b ?v0 ?v1 )))):named a177 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (stl$a (sCons$a ?v0 ?v1 ))?v1 ):pattern ((sCons$a ?v0 ?v1 )))):named a178 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a179 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (shd$b (sCons$b ?v0 ?v1 ))?v0 ):pattern ((sCons$b ?v0 ?v1 )))):named a180 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (shd$a (sCons$a ?v0 ?v1 ))?v0 ):pattern ((sCons$a ?v0 ?v1 )))):named a181 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a182 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (sub$a (tree$ ?v0 ?v1 ))?v1 ):pattern ((tree$ ?v0 ?v1 )))):named a183 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$f sub$b (tree$a ?v0 ?v1 ))?v1 ):pattern ((tree$a ?v0 ?v1 )))):named a184 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (lab$a (tree$ ?v0 ?v1 ))?v0 ):pattern ((tree$ ?v0 ?v1 )))):named a185 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$ak lab$b (tree$a ?v0 ?v1 ))?v0 ):pattern ((tree$a ?v0 ?v1 )))):named a186 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_treeFI$ ))(member$c (lab$c ?v0 )(set_treeFI$ ?v0 ))):named a187 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ ))(member$a (lab$d ?v0 )(set_treeFI$a ?v0 ))):named a188 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ ))(member$d (lab$e ?v0 )(set_treeFI$b ?v0 ))):named a189 ))
(assert (! (forall ((?v0 A_stream_treeFI$ ))(member$e (lab$f ?v0 )(set_treeFI$c ?v0 ))):named a190 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(member$b (lab$a ?v0 )(set_treeFI$d ?v0 ))):named a191 ))
(assert (! (forall ((?v0 A_treeFI$ ))(member$f (fun_app$ak lab$b ?v0 )(set_treeFI$e ?v0 ))):named a192 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_stream_a_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$k ?v0 (case_stream$ ?v1 ?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$k ?v0 (fun_app$a (fun_app$y ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a193 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_a_stream_a_stream_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$j ?v0 (case_stream$a ?v1 ?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$j ?v0 (fun_app$ (fun_app$g ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a194 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_stream_a_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$k ?v0 (case_stream$ ?v1 ?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$k ?v0 (fun_app$a (fun_app$y ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a195 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_a_stream_a_stream_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$j ?v0 (case_stream$a ?v1 ?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$j ?v0 (fun_app$ (fun_app$g ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a196 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_treeFI_list_a_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$k ?v0 (fun_app$ak (case_treeFI$ ?v1 )?v2 ))(=> (= ?v2 (tree$a (fun_app$ak lab$b ?v2 )(fun_app$f sub$b ?v2 )))(fun_app$k ?v0 (fun_app$z (fun_app$aa ?v1 (fun_app$ak lab$b ?v2 ))(fun_app$f sub$b ?v2 )))))):named a197 ))
(assert (! (forall ((?v0 A_treeFI_list_bool_fun$ )(?v1 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$bd ?v0 (case_treeFI$a ?v1 ?v2 ))(=> (= ?v2 (tree$a (fun_app$ak lab$b ?v2 )(fun_app$f sub$b ?v2 )))(fun_app$bd ?v0 (fun_app$ah (fun_app$ai ?v1 (fun_app$ak lab$b ?v2 ))(fun_app$f sub$b ?v2 )))))):named a198 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_treeFI_list_a_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$k ?v0 (fun_app$ak (case_treeFI$ ?v1 )?v2 ))(not (and (= ?v2 (tree$a (fun_app$ak lab$b ?v2 )(fun_app$f sub$b ?v2 )))(not (fun_app$k ?v0 (fun_app$z (fun_app$aa ?v1 (fun_app$ak lab$b ?v2 ))(fun_app$f sub$b ?v2 )))))))):named a199 ))
(assert (! (forall ((?v0 A_treeFI_list_bool_fun$ )(?v1 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$bd ?v0 (case_treeFI$a ?v1 ?v2 ))(not (and (= ?v2 (tree$a (fun_app$ak lab$b ?v2 )(fun_app$f sub$b ?v2 )))(not (fun_app$bd ?v0 (fun_app$ah (fun_app$ai ?v1 (fun_app$ak lab$b ?v2 ))(fun_app$f sub$b ?v2 )))))))):named a200 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (konigPath$b ?v0 )(sCons$b (lab$a ?v0 )(konigPath$b (eps$a (uua$ ?v0 )))))):named a201 ))
(assert (! (forall ((?v0 A_a_prod_treeFI$ ))(= (konigPath$a ?v0 )(sCons$a (lab$ ?v0 )(konigPath$a (eps$ (uu$ ?v0 )))))):named a202 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (konigPath$ ?v0 )(sCons$ (fun_app$ak lab$b ?v0 )(konigPath$ (eps$b (uub$ ?v0 )))))):named a203 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(=> (=> (= ?v0 (sCons$b (shd$b ?v0 )(stl$b ?v0 )))false )false )):named a204 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(=> (=> (= ?v0 (sCons$a (shd$a ?v0 )(stl$a ?v0 )))false )false )):named a205 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a206 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$e ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$e ?v0 ?v2 )(= ?v2 ?v1 ))))(= (eps$b ?v0 )?v1 ))):named a207 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (eps$b (uus$ ?v0 ))?v0 )):named a208 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (eps$b (uut$ ?v0 ))?v0 )):named a209 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (fun_app$i (smember$ ?v0 )(sCons$b ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$i (smember$ ?v0 )?v2 ))):pattern ((fun_app$i (smember$ ?v0 )(sCons$b ?v1 ?v2 ))))):named a210 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (smember$a ?v0 (sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (smember$a ?v0 ?v2 ))):pattern ((smember$a ?v0 (sCons$a ?v1 ?v2 ))))):named a211 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$j (smember$b ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$j (smember$b ?v0 )?v2 ))):pattern ((fun_app$j (smember$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a212 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(= (sinterleave$ ?v0 ?v1 )(sCons$b (shd$b ?v0 )(sinterleave$ ?v1 (stl$b ?v0 ))))):named a213 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (sinterleave$a ?v0 ?v1 )(sCons$a (shd$a ?v0 )(sinterleave$a ?v1 (stl$a ?v0 ))))):named a214 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (sinterleave$b ?v0 ?v1 )(sCons$ (shd$ ?v0 )(sinterleave$b ?v1 (stl$ ?v0 ))))):named a215 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_bool_fun$ ))(=> (and (fun_app$e ?v0 ?v1 )(forall ((?v3 A_treeFI$ ))(=> (fun_app$e ?v0 ?v3 )(fun_app$e ?v2 ?v3 ))))(fun_app$e ?v2 (eps$b ?v0 )))):named a216 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (exists ((?v2 A_treeFI$ ))(and (fun_app$e ?v0 ?v2 )(forall ((?v3 A_treeFI$ ))(=> (fun_app$e ?v0 ?v3 )(= ?v3 ?v2 )))))(fun_app$e ?v0 ?v1 ))(= (eps$b ?v0 )?v1 ))):named a217 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ ))(=> (exists ((?v1 A_treeFI$ ))(fun_app$e ?v0 ?v1 ))(fun_app$e ?v0 (eps$b ?v0 )))):named a218 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_bool_fun$ ))(=> (and (exists ((?v2 A_treeFI$ ))(fun_app$e ?v0 ?v2 ))(forall ((?v2 A_treeFI$ ))(=> (fun_app$e ?v0 ?v2 )(fun_app$e ?v1 ?v2 ))))(fun_app$e ?v1 (eps$b ?v0 )))):named a219 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(= (stl$b (sinterleave$ ?v0 ?v1 ))(sinterleave$ ?v1 (stl$b ?v0 )))):named a220 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (stl$a (sinterleave$a ?v0 ?v1 ))(sinterleave$a ?v1 (stl$a ?v0 )))):named a221 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$ (sinterleave$b ?v0 ?v1 ))(sinterleave$b ?v1 (stl$ ?v0 )))):named a222 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(= (shd$b (sinterleave$ ?v0 ?v1 ))(shd$b ?v0 ))):named a223 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (shd$a (sinterleave$a ?v0 ?v1 ))(shd$a ?v0 ))):named a224 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (sinterleave$b ?v0 ?v1 ))(shd$ ?v0 ))):named a225 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(! (= (sinterleave$ (sCons$b ?v0 ?v1 )?v2 )(sCons$b ?v0 (sinterleave$ ?v2 ?v1 ))):pattern ((sinterleave$ (sCons$b ?v0 ?v1 )?v2 )))):named a226 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(! (= (sinterleave$a (sCons$a ?v0 ?v1 )?v2 )(sCons$a ?v0 (sinterleave$a ?v2 ?v1 ))):pattern ((sinterleave$a (sCons$a ?v0 ?v1 )?v2 )))):named a227 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_stream$ ))(! (= (sinterleave$b (sCons$ ?v0 ?v1 )?v2 )(sCons$ ?v0 (sinterleave$b ?v2 ?v1 ))):pattern ((sinterleave$b (sCons$ ?v0 ?v1 )?v2 )))):named a228 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (fun_app$e ?v0 ?v1 )(fun_app$e ?v0 (eps$b ?v0 )))):named a229 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (fun_app$e ?v0 ?v1 )(fun_app$e ?v0 (eps$b ?v0 )))):named a230 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ ))(= (fun_app$e ?v0 (eps$b ?v0 ))(exists ((?v1 A_treeFI$ ))(fun_app$e ?v0 ?v1 )))):named a231 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$p (fun_app$q ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a232 ))
(assert (! (forall ((?v0 A_a_treeFI_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$a ?v0 ?v1 ?v2 )(sCons$ (fun_app$ak (fun_app$be ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a233 ))
(assert (! (forall ((?v0 A_treeFI_a_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (smap2$b ?v0 ?v1 ?v2 )(sCons$ (fun_app$p (fun_app$bf ?v0 (shd$b ?v1 ))(shd$ ?v2 ))(smap2$b ?v0 (stl$b ?v1 )(stl$ ?v2 ))))):named a234 ))
(assert (! (forall ((?v0 A_a_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$c ?v0 ?v1 ?v2 )(sCons$b (fun_app$bg (fun_app$bh ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$c ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a235 ))
(assert (! (forall ((?v0 A_a_a_prod_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_a_prod_stream$ ))(= (smap2$d ?v0 ?v1 ?v2 )(sCons$ (fun_app$bi (fun_app$bj ?v0 (shd$ ?v1 ))(shd$a ?v2 ))(smap2$d ?v0 (stl$ ?v1 )(stl$a ?v2 ))))):named a236 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$e ?v0 ?v1 ?v2 )(sCons$ (fun_app$ak (fun_app$bk ?v0 (shd$b ?v1 ))(shd$b ?v2 ))(smap2$e ?v0 (stl$b ?v1 )(stl$b ?v2 ))))):named a237 ))
(assert (! (forall ((?v0 A_a_prod_a_a_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_stream$ ))(= (smap2$f ?v0 ?v1 ?v2 )(sCons$ (fun_app$p (fun_app$bl ?v0 (shd$a ?v1 ))(shd$ ?v2 ))(smap2$f ?v0 (stl$a ?v1 )(stl$ ?v2 ))))):named a238 ))
(assert (! (forall ((?v0 A_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$g ?v0 ?v1 ?v2 )(sCons$b (fun_app$aj (fun_app$bm ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$g ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a239 ))
(assert (! (forall ((?v0 A_treeFI_a_a_treeFI_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (smap2$h ?v0 ?v1 ?v2 )(sCons$b (fun_app$bg (fun_app$bn ?v0 (shd$b ?v1 ))(shd$ ?v2 ))(smap2$h ?v0 (stl$b ?v1 )(stl$ ?v2 ))))):named a240 ))
(assert (! (forall ((?v0 A_a_a_a_prod_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$i ?v0 ?v1 ?v2 )(sCons$a (fun_app$bo (fun_app$bp ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$i ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a241 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (fun_app$i (pred_stream$ ?v0 )(sCons$b ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(fun_app$i (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$i (pred_stream$ ?v0 )(sCons$b ?v1 ?v2 ))))):named a242 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (pred_stream$a ?v0 (sCons$a ?v1 ?v2 ))(and (fun_app$as ?v0 ?v1 )(pred_stream$a ?v0 ?v2 ))):pattern ((pred_stream$a ?v0 (sCons$a ?v1 ?v2 ))))):named a243 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$j (pred_stream$b ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$k ?v0 ?v1 )(fun_app$j (pred_stream$b ?v0 )?v2 ))):pattern ((fun_app$j (pred_stream$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a244 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (fun_app$e ?v0 ?v1 )(and (not (fun_app$e ?v0 ?v2 ))(= (eps$b ?v0 )?v2 )))(= (eps$b ?v0 )?v1 ))):named a245 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$ak ?v0 (shd$b ?v1 ))?v2 )(= (smap$ ?v0 (stl$b ?v1 ))?v3 )))):named a246 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$bi ?v0 (shd$a ?v1 ))?v2 )(= (smap$a ?v0 (stl$a ?v1 ))?v3 )))):named a247 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$bg ?v0 (shd$ ?v1 ))?v2 )(= (smap$b ?v0 (stl$ ?v1 ))?v3 )))):named a248 ))
(assert (! (forall ((?v0 A_a_prod_a_treeFI_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$bq ?v0 (shd$a ?v1 ))?v2 )(= (smap$c ?v0 (stl$a ?v1 ))?v3 )))):named a249 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (smap$d ?v0 ?v1 )(sCons$b ?v2 ?v3 ))(and (= (fun_app$aj ?v0 (shd$b ?v1 ))?v2 )(= (smap$d ?v0 (stl$b ?v1 ))?v3 )))):named a250 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 A_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (smap$e ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$bo ?v0 (shd$ ?v1 ))?v2 )(= (smap$e ?v0 (stl$ ?v1 ))?v3 )))):named a251 ))
(assert (! (forall ((?v0 A_treeFI_a_a_prod_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (smap$f ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$br ?v0 (shd$b ?v1 ))?v2 )(= (smap$f ?v0 (stl$b ?v1 ))?v3 )))):named a252 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (smap$g ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$bs ?v0 (shd$a ?v1 ))?v2 )(= (smap$g ?v0 (stl$a ?v1 ))?v3 )))):named a253 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$h ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$p ?v0 (shd$ ?v1 ))?v2 )(= (smap$h ?v0 (stl$ ?v1 ))?v3 )))):named a254 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (lab$a (trev$ ?v0 ))(lab$a ?v0 ))):named a255 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (fun_app$ak lab$b (trev$a ?v0 ))(fun_app$ak lab$b ?v0 ))):named a256 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v1 A_treeFI_list_a_treeFI_list_prod_set$ ))(=> (and (member$k (stl$c ?v0 )(streams$ ?v1 ))(member$c (shd$c ?v0 )?v1 ))(member$k ?v0 (streams$ ?v1 )))):named a257 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (and (member$l (stl$d ?v0 )(streams$a ?v1 ))(member$a (shd$d ?v0 )?v1 ))(member$l ?v0 (streams$a ?v1 )))):named a258 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (and (member$m (stl$e ?v0 )(streams$b ?v1 ))(member$d (shd$e ?v0 )?v1 ))(member$m ?v0 (streams$b ?v1 )))):named a259 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$n (stl$f ?v0 )(streams$c ?v1 ))(member$e (shd$f ?v0 )?v1 ))(member$n ?v0 (streams$c ?v1 )))):named a260 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (and (member$o (stl$a ?v0 )(streams$d ?v1 ))(member$p (shd$a ?v0 )?v1 ))(member$o ?v0 (streams$d ?v1 )))):named a261 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$d (stl$b ?v0 )(streams$e ?v1 ))(member$b (shd$b ?v0 )?v1 ))(member$d ?v0 (streams$e ?v1 )))):named a262 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$e (stl$ ?v0 )(streams$f ?v1 ))(member$f (shd$ ?v0 )?v1 ))(member$e ?v0 (streams$f ?v1 )))):named a263 ))
(assert (! (forall ((?v0 A_treeFI_list_a_treeFI_list_prod_stream$ )(?v1 A_treeFI_list_a_treeFI_list_prod_set$ ))(=> (and (member$k ?v0 (streams$ ?v1 ))(=> (and (member$c (shd$c ?v0 )?v1 )(member$k (stl$c ?v0 )(streams$ ?v1 )))false ))false )):named a264 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (and (member$l ?v0 (streams$a ?v1 ))(=> (and (member$a (shd$d ?v0 )?v1 )(member$l (stl$d ?v0 )(streams$a ?v1 )))false ))false )):named a265 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (and (member$m ?v0 (streams$b ?v1 ))(=> (and (member$d (shd$e ?v0 )?v1 )(member$m (stl$e ?v0 )(streams$b ?v1 )))false ))false )):named a266 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$n ?v0 (streams$c ?v1 ))(=> (and (member$e (shd$f ?v0 )?v1 )(member$n (stl$f ?v0 )(streams$c ?v1 )))false ))false )):named a267 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (and (member$o ?v0 (streams$d ?v1 ))(=> (and (member$p (shd$a ?v0 )?v1 )(member$o (stl$a ?v0 )(streams$d ?v1 )))false ))false )):named a268 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$d ?v0 (streams$e ?v1 ))(=> (and (member$b (shd$b ?v0 )?v1 )(member$d (stl$b ?v0 )(streams$e ?v1 )))false ))false )):named a269 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$e ?v0 (streams$f ?v1 ))(=> (and (member$f (shd$ ?v0 )?v1 )(member$e (stl$ ?v0 )(streams$f ?v1 )))false ))false )):named a270 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$b ?v1 )))):named a271 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$a ?v1 )))):named a272 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A_stream$ ))(= (stl$b (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$ ?v1 )))):named a273 ))
(assert (! (forall ((?v0 A_a_prod_a_treeFI_fun$ )(?v1 A_a_prod_stream$ ))(= (stl$b (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$a ?v1 )))):named a274 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$e ?v0 ?v1 ))(smap$e ?v0 (stl$ ?v1 )))):named a275 ))
(assert (! (forall ((?v0 A_treeFI_a_a_prod_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$a (smap$f ?v0 ?v1 ))(smap$f ?v0 (stl$b ?v1 )))):named a276 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod_stream$ ))(= (stl$a (smap$g ?v0 ?v1 ))(smap$g ?v0 (stl$a ?v1 )))):named a277 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$b (smap$d ?v0 ?v1 ))(smap$d ?v0 (stl$b ?v1 )))):named a278 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$h ?v0 ?v1 ))(smap$h ?v0 (stl$ ?v1 )))):named a279 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$ak ?v0 (shd$b ?v1 )))):named a280 ))
(assert (! (forall ((?v0 A_a_prod_a_fun$ )(?v1 A_a_prod_stream$ ))(= (shd$ (smap$a ?v0 ?v1 ))(fun_app$bi ?v0 (shd$a ?v1 )))):named a281 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A_stream$ ))(= (shd$b (smap$b ?v0 ?v1 ))(fun_app$bg ?v0 (shd$ ?v1 )))):named a282 ))
(assert (! (forall ((?v0 A_a_prod_a_treeFI_fun$ )(?v1 A_a_prod_stream$ ))(= (shd$b (smap$c ?v0 ?v1 ))(fun_app$bq ?v0 (shd$a ?v1 )))):named a283 ))
(assert (! (forall ((?v0 A_a_a_prod_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$e ?v0 ?v1 ))(fun_app$bo ?v0 (shd$ ?v1 )))):named a284 ))
(assert (! (forall ((?v0 A_treeFI_a_a_prod_fun$ )(?v1 A_treeFI_stream$ ))(= (shd$a (smap$f ?v0 ?v1 ))(fun_app$br ?v0 (shd$b ?v1 )))):named a285 ))
(assert (! (forall ((?v0 A_a_prod_a_a_prod_fun$ )(?v1 A_a_prod_stream$ ))(= (shd$a (smap$g ?v0 ?v1 ))(fun_app$bs ?v0 (shd$a ?v1 )))):named a286 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ ))(= (shd$b (smap$d ?v0 ?v1 ))(fun_app$aj ?v0 (shd$b ?v1 )))):named a287 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$h ?v0 ?v1 ))(fun_app$p ?v0 (shd$ ?v1 )))):named a288 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_a_fun_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (smap$h ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ (fun_app$r (uuu$ ?v0 )?v1 )?v2 ?v3 ))):named a289 ))
(assert (! (forall ((?v0 A_stream$ ))(= (smap$h uuv$ ?v0 )?v0 )):named a290 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (smap$d uuw$ ?v0 )?v0 )):named a291 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (trev$a (trev$a ?v0 ))?v0 )):named a292 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_treeFI_treeFI_fun$ )(?v3 A_treeFI_treeFI_set$ ))(=> (and (member$d ?v0 (streams$e ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 ?v1 )(member$a (fun_app$bt ?v2 ?v4 )?v3 ))))(member$l (smap$i ?v2 ?v0 )(streams$a ?v3 )))):named a293 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_treeFI_stream_fun$ )(?v3 A_treeFI_stream_set$ ))(=> (and (member$d ?v0 (streams$e ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 ?v1 )(member$d (fun_app$bu ?v2 ?v4 )?v3 ))))(member$m (smap$j ?v2 ?v0 )(streams$b ?v3 )))):named a294 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_stream_fun$ )(?v3 A_stream_set$ ))(=> (and (member$d ?v0 (streams$e ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 ?v1 )(member$e (fun_app$bv ?v2 ?v4 )?v3 ))))(member$n (smap$k ?v2 ?v0 )(streams$c ?v3 )))):named a295 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_fun$ )(?v3 A_set$ ))(=> (and (member$d ?v0 (streams$e ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 ?v1 )(member$f (fun_app$ak ?v2 ?v4 )?v3 ))))(member$e (smap$ ?v2 ?v0 )(streams$f ?v3 )))):named a296 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_fun$ )(?v3 A_set$ ))(=> (and (member$e ?v0 (streams$f ?v1 ))(forall ((?v4 A$ ))(=> (member$f ?v4 ?v1 )(member$f (fun_app$p ?v2 ?v4 )?v3 ))))(member$e (smap$h ?v2 ?v0 )(streams$f ?v3 )))):named a297 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_treeFI_fun$ )(?v3 A_treeFI_set$ ))(=> (and (member$d ?v0 (streams$e ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 ?v1 )(member$b (fun_app$aj ?v2 ?v4 )?v3 ))))(member$d (smap$d ?v2 ?v0 )(streams$e ?v3 )))):named a298 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$h ?v0 (sCons$ ?v1 ?v2 ))(sCons$ (fun_app$p ?v0 ?v1 )(smap$h ?v0 ?v2 ))):pattern ((smap$h ?v0 (sCons$ ?v1 ?v2 ))))):named a299 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$e ?v0 (streams$f ?v1 ))(member$e (stl$ ?v0 )(streams$f ?v1 )))):named a300 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (member$d ?v0 (streams$e ?v1 ))(member$b (shd$b ?v0 )?v1 ))):named a301 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$e ?v0 (streams$f ?v1 ))(member$f (shd$ ?v0 )?v1 ))):named a302 ))
(assert (! (forall ((?v0 A_treeFI_stream_bool_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_set$ ))(=> (and (fun_app$i ?v0 ?v1 )(forall ((?v3 A_treeFI_stream$ ))(=> (fun_app$i ?v0 ?v3 )(exists ((?v4 A_treeFI$ )(?v5 A_treeFI_stream$ ))(and (= ?v3 (sCons$b ?v4 ?v5 ))(and (member$b ?v4 ?v2 )(or (fun_app$i ?v0 ?v5 )(member$d ?v5 (streams$e ?v2 )))))))))(member$d ?v1 (streams$e ?v2 )))):named a303 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_set$ ))(=> (and (fun_app$j ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$j ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (member$f ?v4 ?v2 )(or (fun_app$j ?v0 ?v5 )(member$e ?v5 (streams$f ?v2 )))))))))(member$e ?v1 (streams$f ?v2 )))):named a304 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$d ?v0 (streams$e ?v1 ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(=> (and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$d ?v3 (streams$e ?v1 ))))false )))false )):named a305 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$e ?v0 (streams$f ?v1 ))(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$f ?v2 ?v1 )(member$e ?v3 (streams$f ?v1 ))))false )))false )):named a306 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(= (member$d ?v0 (streams$e ?v1 ))(exists ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$d ?v3 (streams$e ?v1 ))))))):named a307 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$e ?v0 (streams$f ?v1 ))(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$f ?v2 ?v1 )(member$e ?v3 (streams$f ?v1 ))))))):named a308 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_set$ ))(= (member$d (sCons$b ?v0 ?v1 )(streams$e ?v2 ))(and (member$b ?v0 ?v2 )(member$d ?v1 (streams$e ?v2 ))))):named a309 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_set$ ))(= (member$e (sCons$ ?v0 ?v1 )(streams$f ?v2 ))(and (member$f ?v0 ?v2 )(member$e ?v1 (streams$f ?v2 ))))):named a310 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$ ?v0 ?v1 ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a311 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$p (fun_app$q ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a312 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$p (fun_app$q ?v0 ?v1 )?v3 )(smap2$ ?v0 ?v2 ?v4 ))):pattern ((smap2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a313 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI_stream$ ))(= (fun_app$i (streamsp$ (uur$ ?v0 ))?v1 )(member$d ?v1 (streams$e ?v0 )))):named a314 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sfilter$ ?v0 ?v1 )(sCons$ (shd$ (sdrop_while$b (fun_app$bw (comp$ uux$ )?v0 )?v1 ))(sfilter$ ?v0 (stl$ (sdrop_while$b (fun_app$bw (comp$ uux$ )?v0 )?v1 )))))):named a315 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$j (stream_all$ ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$k ?v0 ?v1 )(fun_app$j (stream_all$ ?v0 )?v2 ))):pattern ((fun_app$j (stream_all$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a316 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_bool_fun$ ))(=> (and (fun_app$j ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$j ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (fun_app$k ?v2 ?v4 )(or (fun_app$j ?v0 ?v5 )(fun_app$j (streamsp$a ?v2 )?v5 ))))))))(fun_app$j (streamsp$a ?v2 )?v1 ))):named a317 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(=> (and (fun_app$j (streamsp$a ?v0 )?v1 )(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$k ?v0 ?v2 )(fun_app$j (streamsp$a ?v0 )?v3 )))false )))false )):named a318 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (fun_app$j (streamsp$a ?v0 )?v1 )(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v1 (sCons$ ?v2 ?v3 ))(and (fun_app$k ?v0 ?v2 )(fun_app$j (streamsp$a ?v0 )?v3 )))))):named a319 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (stl$ (sfilter$ ?v0 ?v1 ))(sfilter$ ?v0 (stl$ (sdrop_while$b (fun_app$bw (comp$ uux$ )?v0 )?v1 ))))):named a320 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (shd$ (sfilter$ ?v0 ?v1 ))(shd$ (sdrop_while$b (fun_app$bw (comp$ uux$ )?v0 )?v1 )))):named a321 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sfilter$ ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$k ?v0 ?v1 )(sCons$ ?v1 (sfilter$ ?v0 ?v2 ))(sfilter$ ?v0 ?v2 ))):pattern ((sfilter$ ?v0 (sCons$ ?v1 ?v2 ))))):named a322 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_a_treeFI_stream_bool_fun_fun$ ))(=> (and (member$b ?v0 (sset$ ?v1 ))(and (forall ((?v3 A_treeFI_stream$ ))(fun_app$i (fun_app$bx ?v2 (shd$b ?v3 ))?v3 ))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI$ ))(=> (and (member$b ?v4 (sset$ (stl$b ?v3 )))(fun_app$i (fun_app$bx ?v2 ?v4 )(stl$b ?v3 )))(fun_app$i (fun_app$bx ?v2 ?v4 )?v3 )))))(fun_app$i (fun_app$bx ?v2 ?v0 )?v1 ))):named a323 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_a_stream_bool_fun_fun$ ))(=> (and (member$f ?v0 (sset$a ?v1 ))(and (forall ((?v3 A_stream$ ))(fun_app$j (fun_app$by ?v2 (shd$ ?v3 ))?v3 ))(forall ((?v3 A_stream$ )(?v4 A$ ))(=> (and (member$f ?v4 (sset$a (stl$ ?v3 )))(fun_app$j (fun_app$by ?v2 ?v4 )(stl$ ?v3 )))(fun_app$j (fun_app$by ?v2 ?v4 )?v3 )))))(fun_app$j (fun_app$by ?v2 ?v0 )?v1 ))):named a324 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_bool_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (fun_app$e (fun_app$m ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI$ )(?v4 A_treeFI$ ))(=> (fun_app$e (fun_app$m ?v0 ?v3 )?v4 )(and (= (fun_app$ak lab$b ?v3 )(fun_app$ak lab$b ?v4 ))(fun_app$bd (fun_app$bz (list_all2$ (uuy$ ?v0 ))(fun_app$f sub$b ?v3 ))(fun_app$f sub$b ?v4 ))))))(= ?v1 ?v2 ))):named a325 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(=> (member$b ?v0 (sset$ (stl$b ?v1 )))(member$b ?v0 (sset$ ?v1 )))):named a326 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (member$f ?v0 (sset$a (stl$ ?v1 )))(member$f ?v0 (sset$a ?v1 )))):named a327 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(member$b (shd$b ?v0 )(sset$ ?v0 ))):named a328 ))
(assert (! (forall ((?v0 A_stream$ ))(member$f (shd$ ?v0 )(sset$a ?v0 ))):named a329 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_a_treeFI_stream_bool_fun_fun$ ))(=> (and (member$b ?v0 (sset$ ?v1 ))(and (forall ((?v3 A_treeFI$ )(?v4 A_treeFI_stream$ ))(fun_app$i (fun_app$bx ?v2 ?v3 )(sCons$b ?v3 ?v4 )))(forall ((?v3 A_treeFI$ )(?v4 A_treeFI_stream$ )(?v5 A_treeFI$ ))(=> (and (member$b ?v5 (sset$ ?v4 ))(fun_app$i (fun_app$bx ?v2 ?v5 )?v4 ))(fun_app$i (fun_app$bx ?v2 ?v5 )(sCons$b ?v3 ?v4 ))))))(fun_app$i (fun_app$bx ?v2 ?v0 )?v1 ))):named a330 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_a_stream_bool_fun_fun$ ))(=> (and (member$f ?v0 (sset$a ?v1 ))(and (forall ((?v3 A$ )(?v4 A_stream$ ))(fun_app$j (fun_app$by ?v2 ?v3 )(sCons$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_stream$ )(?v5 A$ ))(=> (and (member$f ?v5 (sset$a ?v4 ))(fun_app$j (fun_app$by ?v2 ?v5 )?v4 ))(fun_app$j (fun_app$by ?v2 ?v5 )(sCons$ ?v3 ?v4 ))))))(fun_app$j (fun_app$by ?v2 ?v0 )?v1 ))):named a331 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(=> (and (member$b ?v0 (sset$ ?v1 ))(and (forall ((?v2 A_treeFI_stream$ ))(=> (= ?v1 (sCons$b ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(=> (and (= ?v1 (sCons$b ?v2 ?v3 ))(member$b ?v0 (sset$ ?v3 )))false ))))false )):named a332 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(=> (and (member$f ?v0 (sset$a ?v1 ))(and (forall ((?v2 A_stream$ ))(=> (= ?v1 (sCons$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v2 ?v3 ))(member$f ?v0 (sset$a ?v3 )))false ))))false )):named a333 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI$ ))(=> (member$b ?v0 (sset$ ?v1 ))(member$b ?v0 (sset$ (sCons$b ?v2 ?v1 ))))):named a334 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ ))(=> (member$f ?v0 (sset$a ?v1 ))(member$f ?v0 (sset$a (sCons$ ?v2 ?v1 ))))):named a335 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(member$b ?v0 (sset$ (sCons$b ?v0 ?v1 )))):named a336 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(member$f ?v0 (sset$a (sCons$ ?v0 ?v1 )))):named a337 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a338 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$i (smember$ ?v0 )?v1 )(member$b ?v0 (sset$ ?v1 ))):pattern ((fun_app$i (smember$ ?v0 )?v1 )))):named a339 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_bool_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (fun_app$e (fun_app$m ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI$ )(?v4 A_treeFI$ ))(=> (fun_app$e (fun_app$m ?v0 ?v3 )?v4 )(and (= (fun_app$ak lab$b ?v3 )(fun_app$ak lab$b ?v4 ))(fun_app$bd (fun_app$bz (list_all2$ ?v0 )(fun_app$f sub$b ?v3 ))(fun_app$f sub$b ?v4 ))))))(= ?v1 ?v2 ))):named a340 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_bool_fun_fun$ )(?v1 A_treeFI_list$ ))(= (fun_app$bd (fun_app$bz (list_all2$ ?v0 )?v1 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 (set$b ?v1 ))(fun_app$e (fun_app$m ?v0 ?v2 )?v2 ))))):named a341 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_bool_fun_fun$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_list$ )(?v3 A_treeFI_a_treeFI_bool_fun_fun$ ))(=> (and (fun_app$bd (fun_app$bz (list_all2$ ?v0 )?v1 )?v2 )(forall ((?v4 A_treeFI$ )(?v5 A_treeFI$ ))(=> (and (member$b ?v4 (set$b ?v1 ))(and (member$b ?v5 (set$b ?v2 ))(fun_app$e (fun_app$m ?v0 ?v4 )?v5 )))(fun_app$e (fun_app$m ?v3 ?v4 )?v5 ))))(fun_app$bd (fun_app$bz (list_all2$ ?v3 )?v1 )?v2 ))):named a342 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(! (= (fun_app$e (fun_app$m (rel_treeFI$ ?v0 )?v1 )?v2 )(and (fun_app$k (fun_app$ca ?v0 (fun_app$ak lab$b ?v1 ))(fun_app$ak lab$b ?v2 ))(fun_app$bd (fun_app$bz (list_all2$ (rel_treeFI$ ?v0 ))(fun_app$f sub$b ?v1 ))(fun_app$f sub$b ?v2 )))):pattern ((fun_app$e (fun_app$m (rel_treeFI$ ?v0 )?v1 )?v2 )))):named a343 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_bool_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$e (fun_app$m ?v0 ?v1 )?v2 )(forall ((?v4 A_treeFI$ )(?v5 A_treeFI$ ))(=> (fun_app$e (fun_app$m ?v0 ?v4 )?v5 )(and (fun_app$k (fun_app$ca ?v3 (fun_app$ak lab$b ?v4 ))(fun_app$ak lab$b ?v5 ))(fun_app$bd (fun_app$bz (list_all2$ ?v0 )(fun_app$f sub$b ?v4 ))(fun_app$f sub$b ?v5 ))))))(fun_app$e (fun_app$m (rel_treeFI$ ?v3 )?v1 )?v2 ))):named a344 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_bool_fun_fun$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_a_treeFI_bool_fun_fun$ ))(=> (and (fun_app$d (fun_app$cb (rel_treeFI$a ?v0 )?v1 )?v2 )(forall ((?v4 A_treeFI$ )(?v5 A_treeFI$ ))(=> (and (member$b ?v4 (set_treeFI$d ?v1 ))(and (member$b ?v5 (set_treeFI$d ?v2 ))(fun_app$e (fun_app$m ?v0 ?v4 )?v5 )))(fun_app$e (fun_app$m ?v3 ?v4 )?v5 ))))(fun_app$d (fun_app$cb (rel_treeFI$a ?v3 )?v1 )?v2 ))):named a345 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(= (member$b ?v0 (set$b ?v1 ))(fun_app$e (member$q ?v1 )?v0 ))):named a346 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(rel_fun$ (rel_treeFI$ ?v0 )(list_all2$ (rel_treeFI$ ?v0 ))sub$b sub$b )):named a347 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a348 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 Nat$ ))(=> (member$d ?v0 (streams$e ?v1 ))(member$b (snth$a ?v0 ?v2 )?v1 ))):named a349 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(= (member$d ?v0 (streams$e ?v1 ))(forall ((?v2 Nat$ ))(member$b (snth$a ?v0 ?v2 )?v1 )))):named a350 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 Nat$ ))(member$b (snth$a ?v0 ?v1 )(sset$ ?v0 ))):named a351 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(rel_fun$a (rel_treeFI$ ?v0 )?v0 lab$b lab$b )):named a352 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 Nat$ )(?v2 Nat$ ))(member$b (snth$a (snth$b ?v0 ?v1 )?v2 )(sset$ (smerge$ ?v0 )))):named a353 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (fun_app$i (stream_all$a ?v0 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 (sset$ ?v1 ))(fun_app$e ?v0 ?v2 ))))):named a354 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (fun_app$j (fun_app$ar (stream_all2$ ?v0 )(sCons$ ?v1 ?v2 ))(sCons$ ?v3 ?v4 ))(and (fun_app$k (fun_app$ca ?v0 ?v1 )?v3 )(fun_app$j (fun_app$ar (stream_all2$ ?v0 )?v2 )?v4 ))):pattern ((fun_app$j (fun_app$ar (stream_all2$ ?v0 )(sCons$ ?v1 ?v2 ))(sCons$ ?v3 ?v4 ))))):named a355 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(rel_fun$b ?v0 (rel_fun$c (stream_all2$ ?v0 )(stream_all2$ ?v0 ))uuz$ uuz$ )):named a356 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(rel_fun$d (stream_all2$ ?v0 )?v0 uva$ uva$ )):named a357 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ ))(fun_app$cc (fun_app$cd (rel_fun$c (stream_all2$ ?v0 )(stream_all2$ ?v0 ))uvb$ )uvb$ )):named a358 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ )(?v3 A_treeFI_a_treeFI_bool_fun_fun$ ))(=> (and (fun_app$i (fun_app$ao (stream_all2$a ?v0 )?v1 )?v2 )(forall ((?v4 A_treeFI$ )(?v5 A_treeFI$ ))(=> (and (member$b ?v4 (sset$ ?v1 ))(and (member$b ?v5 (sset$ ?v2 ))(fun_app$e (fun_app$m ?v0 ?v4 )?v5 )))(fun_app$e (fun_app$m ?v3 ?v4 )?v5 ))))(fun_app$i (fun_app$ao (stream_all2$a ?v3 )?v1 )?v2 ))):named a359 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A$ )(?v2 A$ )(?v3 A_stream$ )(?v4 A_stream$ ))(=> (and (fun_app$k (fun_app$ca ?v0 ?v1 )?v2 )(fun_app$j (fun_app$ar (stream_all2$ ?v0 )?v3 )?v4 ))(fun_app$j (fun_app$ar (stream_all2$ ?v0 )(sCons$ ?v1 ?v3 ))(sCons$ ?v2 ?v4 )))):named a360 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$j (fun_app$ar (stream_all2$ ?v0 )?v1 )?v2 )(forall ((?v3 A$ )(?v4 A_stream$ )(?v5 A$ )(?v6 A_stream$ ))(=> (and (= ?v1 (sCons$ ?v3 ?v4 ))(and (= ?v2 (sCons$ ?v5 ?v6 ))(and (fun_app$k (fun_app$ca ?v0 ?v3 )?v5 )(fun_app$j (fun_app$ar (stream_all2$ ?v0 )?v4 )?v6 ))))false )))false )):named a361 ))
(assert (! (forall ((?v0 A_a_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (fun_app$j (fun_app$ar (stream_all2$ ?v0 )?v1 )?v2 )(and (fun_app$k (fun_app$ca ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(fun_app$j (fun_app$ar (stream_all2$ ?v0 )(stl$ ?v1 ))(stl$ ?v2 ))))):named a362 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ )(?v3 A_a_bool_fun_fun$ ))(=> (and (fun_app$j (fun_app$ar ?v0 ?v1 )?v2 )(forall ((?v4 A_stream$ )(?v5 A_stream$ ))(=> (fun_app$j (fun_app$ar ?v0 ?v4 )?v5 )(and (fun_app$k (fun_app$ca ?v3 (shd$ ?v4 ))(shd$ ?v5 ))(fun_app$j (fun_app$ar ?v0 (stl$ ?v4 ))(stl$ ?v5 ))))))(fun_app$j (fun_app$ar (stream_all2$ ?v3 )?v1 )?v2 ))):named a363 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (fun_app$i (pred_stream$ ?v0 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 (sset$ ?v1 ))(fun_app$e ?v0 ?v2 ))))):named a364 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(= (fun_app$d (pred_treeFI$ ?v0 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 (set_treeFI$d ?v1 ))(fun_app$e ?v0 ?v2 ))))):named a365 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$a (szip$ ?v0 ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 )))):named a366 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (szip$ ?v0 ?v1 )(sCons$a (pair$ (shd$ ?v0 )(shd$ ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 ))))):named a367 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_bool_fun$ )(?v3 A_treeFI_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 (set$b ?v1 ))(= (fun_app$e ?v2 ?v4 )(fun_app$e ?v3 ?v4 )))))(= (fun_app$bd (pred_list$ ?v2 )?v0 )(fun_app$bd (pred_list$ ?v3 )?v1 )))):named a368 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$a (szip$ ?v0 ?v1 ))(pair$ (shd$ ?v0 )(shd$ ?v1 )))):named a369 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(! (= (szip$ (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(sCons$a (pair$ ?v0 ?v2 )(szip$ ?v1 ?v3 ))):pattern ((szip$ (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))))):named a370 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_bool_fun$ ))(= (forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 (set$b ?v0 ))(fun_app$e ?v1 ?v2 )))(fun_app$bd (pred_list$ ?v1 )?v0 ))):named a371 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (fun_app$bd (pred_list$ ?v0 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 (set$b ?v1 ))(fun_app$e ?v0 ?v2 ))))):named a372 ))
(assert (! (forall ((?v0 A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ )(?v1 A_bool_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(=> (and (forall ((?v4 A_bool_fun_a_stream_a_stream_fun_fun$ )(?v5 A_bool_fun$ )(?v6 A_stream$ )(?v7 A_stream$ ))(=> (and (forall ((?v8 A_bool_fun$ )(?v9 A_stream$ )(?v10 A_stream$ ))(=> (and (= (fun_app$ (fun_app$ce ?v4 ?v8 )?v9 )?v10 )(not (= ?v10 undefined$ )))(fun_app$j (fun_app$cf ?v0 (pair$b ?v8 ?v9 ))?v10 )))(and (= (ite (fun_app$k ?v5 (shd$ ?v6 ))(fun_app$ (fun_app$ce ?v4 ?v5 )(stl$ ?v6 ))?v6 )?v7 )(not (= ?v7 undefined$ ))))(fun_app$j (fun_app$cf ?v0 (pair$b ?v5 ?v6 ))?v7 )))(and (= (sdrop_while$b ?v1 ?v2 )?v3 )(not (= ?v3 undefined$ ))))(fun_app$j (fun_app$cf ?v0 (pair$b ?v1 ?v2 ))?v3 ))):named a373 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_set$ ))(= (powp$ ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 ?v1 )(fun_app$e ?v0 ?v2 ))))):named a374 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_stream$ ))(= (sset$ (shift$ ?v0 ?v1 ))(sup$ (set$b ?v0 )(sset$ ?v1 )))):named a375 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ ))(= (set$b (union$ ?v0 ?v1 ))(sup$ (set$b ?v0 )(set$b ?v1 )))):named a376 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI_set$ ))(= (sup$ ?v0 ?v1 )(collect$ (fun_app$o (uvc$ ?v0 )?v1 )))):named a377 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_list$ )(?v3 A_treeFI_list$ ))(=> (= (partition$ ?v0 ?v1 )(pair$a ?v2 ?v3 ))(= (sup$ (set$b ?v2 )(set$b ?v3 ))(set$b ?v1 )))):named a378 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_list$ )(?v3 A_treeFI_list$ ))(=> (= (partition$ ?v0 ?v1 )(pair$a ?v2 ?v3 ))(and (forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 (set$b ?v2 ))(fun_app$e ?v0 ?v4 )))(forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 (set$b ?v3 ))(not (fun_app$e ?v0 ?v4 ))))))):named a379 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ ))(= (set$g (product$ ?v0 ?v1 ))(sigma$ (set$b ?v0 )(uvd$ ?v1 )))):named a380 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_a_treeFI_prod_set$ )(?v2 A_treeFI_list$ )(?v3 A_treeFI_list$ ))(=> (and (forall ((?v4 A_treeFI$ )(?v5 A_treeFI$ )(?v6 A_treeFI$ ))(=> (and (member$b ?v4 (set$b ?v0 ))(and (member$r (pair$c ?v4 ?v5 )?v1 )(member$r (pair$c ?v5 ?v6 )?v1 )))(member$r (pair$c ?v4 ?v6 )?v1 )))(and (member$c (pair$a ?v0 ?v2 )(lexord$ ?v1 ))(member$c (pair$a ?v2 ?v3 )(lexord$ ?v1 ))))(member$c (pair$a ?v0 ?v3 )(lexord$ ?v1 )))):named a381 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_bool_fun$ ))(! (=> (forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 (set$b ?v0 ))(fun_app$e ?v1 ?v2 )))(= (filter$ ?v1 ?v0 )?v0 )):pattern ((filter$ ?v1 ?v0 )))):named a382 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (set$b (filter$ ?v0 ?v1 ))(collect$ (fun_app$n (uve$ ?v0 )?v1 )))):named a383 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_bool_fun$ )(?v3 A_treeFI_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_treeFI$ ))(=> (member$b ?v4 (set$b ?v1 ))(= (fun_app$e ?v2 ?v4 )(fun_app$e ?v3 ?v4 )))))(= (filter$ ?v2 ?v0 )(filter$ ?v3 ?v1 )))):named a384 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (= (filter$ ?v0 ?v1 )?v1 )(forall ((?v2 A_treeFI$ ))(=> (member$b ?v2 (set$b ?v1 ))(fun_app$e ?v0 ?v2 ))))):named a385 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (filter$a ?v0 (set$b ?v1 ))(set$b (filter$ ?v0 ?v1 )))):named a386 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_set$ ))(= (filter$a ?v0 ?v1 )(collect$ (fun_app$o (uvf$ ?v0 )?v1 )))):named a387 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_set$ ))(= (sup$ (coset$ ?v0 )?v1 )(coset$ (filter$ (uvg$ ?v1 )?v0 )))):named a388 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI_list$ ))(= (minus$ ?v0 (coset$ ?v1 ))(set$b (filter$ (uur$ ?v0 )?v1 )))):named a389 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI_set$ ))(= (minus$ ?v0 ?v1 )(collect$ (fun_app$o (uvh$ ?v0 )?v1 )))):named a390 ))
(check-sat )
(get-unsat-core )
