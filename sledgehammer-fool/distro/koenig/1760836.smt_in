(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort A_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_treeFI$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort Bool_stream$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort A_treeFI_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort A_a_treeFI_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort A_treeFI_a_fun$ 0 )
(declare-sort A_stream_treeFI$ 0 )
(declare-sort A_treeFI_treeFI$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort A_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_a_set_fun$ 0 )
(declare-sort A_a_fun_a_a_fun_fun$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort A_stream_treeFI_set$ 0 )
(declare-sort A_treeFI_list_a_fun$ 0 )
(declare-sort A_treeFI_stream_set$ 0 )
(declare-sort A_treeFI_treeFI_set$ 0 )
(declare-sort A_a_a_treeFI_fun_fun$ 0 )
(declare-sort A_a_stream_a_fun_fun$ 0 )
(declare-sort A_a_treeFI_a_fun_fun$ 0 )
(declare-sort A_treeFI_a_a_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort A_treeFI_a_stream_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_fun$ 0 )
(declare-sort A_treeFI_list_bool_fun$ 0 )
(declare-sort A_treeFI_stream_treeFI$ 0 )
(declare-sort A_treeFI_treeFI_treeFI$ 0 )
(declare-sort A_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_stream_stream_bool_fun$ 0 )
(declare-sort A_stream_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_stream_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_bool_fun$ 0 )
(declare-sort A_a_treeFI_list_a_fun_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_set_fun$ 0 )
(declare-sort A_treeFI_stream_stream_set$ 0 )
(declare-sort A_treeFI_stream_treeFI_set$ 0 )
(declare-sort A_treeFI_treeFI_stream_set$ 0 )
(declare-sort A_treeFI_treeFI_treeFI_set$ 0 )
(declare-sort A_a_stream_a_stream_fun_fun$ 0 )
(declare-sort A_a_treeFI_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_a_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_a_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_stream_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_fun$ 0 )
(declare-sort A_treeFI_set_a_treeFI_set_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort A_stream_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_a_a_fun_fun_a_a_a_fun_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_list_fun$ 0 )
(declare-sort A_treeFI_stream_stream_bool_fun$ 0 )
(declare-sort A_treeFI_stream_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_stream_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_treeFI_bool_fun$ 0 )
(declare-sort A_treeFI_treeFI_list_a_treeFI_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_set_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_stream_fun$ 0 )
(declare-sort A_a_treeFI_list_a_treeFI_list_fun_fun$ 0 )
(declare-sort A_stream_a_stream_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_bool_fun_a_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_stream_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_treeFI_list_a_treeFI_treeFI_list_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_treeFI_list_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_fun_a_treeFI_a_treeFI_fun_fun$ 0 )
(declare-sort A_treeFI_list_a_treeFI_set_a_treeFI_set_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_stream_a_treeFI_stream_fun_fun$ 0 )
(declare-sort A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_treeFI_list_a_treeFI_treeFI_list_fun_fun$ 0 )
(declare-sort A_treeFI_a_treeFI_list_a_treeFI_set_a_treeFI_set_fun_fun_fun$ 0 )
(declare-sort A_stream$ 0)
(declare-fun shd$ (A_stream$)A$)
(declare-fun stl$ (A_stream$)A_stream$)
(declare-fun sCons$ (A$ A_stream$ )A_stream$)
(declare-sort A_treeFI_list$ 0)
(declare-fun nil$ ()A_treeFI_list$)
(declare-fun hd$ (A_treeFI_list$)A_treeFI$)
(declare-fun tl$ (A_treeFI_list$)A_treeFI_list$)
(declare-fun cons$ (A_treeFI$ A_treeFI_list$ )A_treeFI_list$)
(declare-sort A_treeFI_stream$ 0)
(declare-fun shd$a (A_treeFI_stream$)A_treeFI$)
(declare-fun stl$a (A_treeFI_stream$)A_treeFI_stream$)
(declare-fun sCons$a (A_treeFI$ A_treeFI_stream$ )A_treeFI_stream$)
(declare-sort A_treeFI_treeFI_list$ 0)
(declare-sort A_treeFI_treeFI_treeFI_list$ 0)
(declare-sort A_stream_treeFI_list$ 0)
(declare-sort A_treeFI_stream_treeFI_list$ 0)
(declare-sort A_list$ 0)
(declare-sort A_stream_list$ 0)
(declare-sort A_treeFI_stream_list$ 0)
(declare-fun nil$a ()A_treeFI_treeFI_list$)
(declare-fun hd$a (A_treeFI_treeFI_list$)A_treeFI_treeFI$)
(declare-fun tl$a (A_treeFI_treeFI_list$)A_treeFI_treeFI_list$)
(declare-fun cons$a (A_treeFI_treeFI$ A_treeFI_treeFI_list$ )A_treeFI_treeFI_list$)
(declare-fun nil$b ()A_treeFI_treeFI_treeFI_list$)
(declare-fun hd$b (A_treeFI_treeFI_treeFI_list$)A_treeFI_treeFI_treeFI$)
(declare-fun tl$b (A_treeFI_treeFI_treeFI_list$)A_treeFI_treeFI_treeFI_list$)
(declare-fun cons$b (A_treeFI_treeFI_treeFI$ A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI_list$)
(declare-fun nil$c ()A_stream_treeFI_list$)
(declare-fun hd$c (A_stream_treeFI_list$)A_stream_treeFI$)
(declare-fun tl$c (A_stream_treeFI_list$)A_stream_treeFI_list$)
(declare-fun cons$c (A_stream_treeFI$ A_stream_treeFI_list$ )A_stream_treeFI_list$)
(declare-fun nil$d ()A_treeFI_stream_treeFI_list$)
(declare-fun hd$d (A_treeFI_stream_treeFI_list$)A_treeFI_stream_treeFI$)
(declare-fun tl$d (A_treeFI_stream_treeFI_list$)A_treeFI_stream_treeFI_list$)
(declare-fun cons$d (A_treeFI_stream_treeFI$ A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI_list$)
(declare-fun nil$e ()A_list$)
(declare-fun hd$e (A_list$)A$)
(declare-fun tl$e (A_list$)A_list$)
(declare-fun cons$e (A$ A_list$ )A_list$)
(declare-fun nil$f ()A_stream_list$)
(declare-fun hd$f (A_stream_list$)A_stream$)
(declare-fun tl$f (A_stream_list$)A_stream_list$)
(declare-fun cons$f (A_stream$ A_stream_list$ )A_stream_list$)
(declare-fun nil$g ()A_treeFI_stream_list$)
(declare-fun hd$g (A_treeFI_stream_list$)A_treeFI_stream$)
(declare-fun tl$g (A_treeFI_stream_list$)A_treeFI_stream_list$)
(declare-fun cons$g (A_treeFI_stream$ A_treeFI_stream_list$ )A_treeFI_stream_list$)
(declare-sort A_treeFI_treeFI_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-sort A_treeFI_stream_stream$ 0)
(declare-fun shd$b (A_treeFI_treeFI_stream$)A_treeFI_treeFI$)
(declare-fun stl$b (A_treeFI_treeFI_stream$)A_treeFI_treeFI_stream$)
(declare-fun sCons$b (A_treeFI_treeFI$ A_treeFI_treeFI_stream$ )A_treeFI_treeFI_stream$)
(declare-fun shd$c (A_stream_stream$)A_stream$)
(declare-fun stl$c (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$c (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-fun shd$d (A_treeFI_stream_stream$)A_treeFI_stream$)
(declare-fun stl$d (A_treeFI_stream_stream$)A_treeFI_stream_stream$)
(declare-fun sCons$d (A_treeFI_stream$ A_treeFI_stream_stream$ )A_treeFI_stream_stream$)
(declare-fun as$ ()A_stream$ )
(declare-fun tr$ ()A_treeFI$ )
(declare-fun uu$ ()A_treeFI_bool_fun$ )
(declare-fun asa$ ()A_stream$ )
(declare-fun bot$ ()A_set$ )
(declare-fun eps$ (A_treeFI_bool_fun$ )A_treeFI$ )
(declare-fun lab$ (A_treeFI_treeFI$ )A_treeFI$ )
(declare-fun set$ (A_treeFI_list$ )A_treeFI_set$ )
(declare-fun sub$ (A_treeFI$ )A_treeFI_list$ )
(declare-fun tra$ ()A_treeFI$ )
(declare-fun uua$ (A_treeFI_treeFI$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun uub$ (A_treeFI$ )A_treeFI_bool_fun$ )
(declare-fun uuc$ (A_treeFI$ )A_treeFI_bool_fun$ )
(declare-fun uud$ (A_treeFI$ )A_treeFI_bool_fun$ )
(declare-fun uue$ (A_set$ )A_bool_fun$ )
(declare-fun uuf$ (A_treeFI_treeFI_set$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun uug$ (A_stream_set$ )A_stream_bool_fun$ )
(declare-fun uuh$ (A_treeFI_stream_set$ )A_treeFI_stream_bool_fun$ )
(declare-fun uui$ (A_treeFI_set$ )A_treeFI_bool_fun$ )
(declare-fun uuj$ ()A_treeFI_bool_fun$ )
(declare-fun uuk$ ()A_treeFI_a_treeFI_stream_a_treeFI_stream_fun_fun$ )
(declare-fun uul$ ()A_a_stream_a_stream_fun_fun$ )
(declare-fun uum$ ()A_treeFI_a_treeFI_treeFI_list_a_treeFI_treeFI_list_fun_fun$ )
(declare-fun uun$ ()A_a_treeFI_list_a_treeFI_list_fun_fun$ )
(declare-fun uuo$ ()A_a_stream_a_fun_fun$ )
(declare-fun uup$ ()A_treeFI_a_treeFI_stream_a_treeFI_fun_fun$ )
(declare-fun uuq$ ()A_a_treeFI_list_a_fun_fun$ )
(declare-fun uur$ ()A_treeFI_a_treeFI_treeFI_list_a_treeFI_fun_fun$ )
(declare-fun uus$ (A_a_fun$ )A_a_a_fun_fun_a_a_a_fun_fun_fun$ )
(declare-fun uut$ ()A_a_fun$ )
(declare-fun uuu$ ()A_treeFI_a_treeFI_fun$ )
(declare-fun uuv$ ()Bool_bool_fun$ )
(declare-fun uuw$ (A_treeFI$ )A_treeFI_set_a_treeFI_bool_fun_fun$ )
(declare-fun uux$ ()A_treeFI_a_treeFI_list_a_treeFI_set_a_treeFI_set_fun_fun_fun$ )
(declare-fun bot$a ()A_treeFI_treeFI_set$ )
(declare-fun bot$b ()A_stream_set$ )
(declare-fun bot$c ()A_treeFI_stream_set$ )
(declare-fun bot$d ()A_treeFI_set$ )
(declare-fun bot$e ()A_treeFI_bool_fun$ )
(declare-fun bot$f ()Bool )
(declare-fun bot$g (A$ )Bool )
(declare-fun bot$h (A_treeFI_treeFI$ )Bool )
(declare-fun bot$i (A_stream$ )Bool )
(declare-fun bot$j (A_treeFI_stream$ )Bool )
(declare-fun comp$ (Bool_bool_fun$ )A_treeFI_bool_fun_a_treeFI_bool_fun_fun$ )
(declare-fun eps$a (A_treeFI_treeFI_bool_fun$ )A_treeFI_treeFI$ )
(declare-fun eps$b (A_bool_fun$ )A$ )
(declare-fun eps$c (A_stream_bool_fun$ )A_stream$ )
(declare-fun eps$d (A_treeFI_stream_bool_fun$ )A_treeFI_stream$ )
(declare-fun lab$a (A_treeFI$ )A$ )
(declare-fun lab$b (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI$ )
(declare-fun lab$c (A_stream_treeFI$ )A_stream$ )
(declare-fun lab$d (A_treeFI_stream_treeFI$ )A_treeFI_stream$ )
(declare-fun null$ (A_treeFI_treeFI_list$ )Bool )
(declare-fun set$a (A_treeFI_treeFI_list$ )A_treeFI_treeFI_set$ )
(declare-fun set$b (A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI_set$ )
(declare-fun set$c (A_stream_treeFI_list$ )A_stream_treeFI_set$ )
(declare-fun set$d (A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI_set$ )
(declare-fun set$e (A_list$ )A_set$ )
(declare-fun set$f (A_stream_list$ )A_stream_set$ )
(declare-fun set$g (A_treeFI_stream_list$ )A_treeFI_stream_set$ )
(declare-fun smap$ (A_treeFI_a_fun$ A_treeFI_stream$ )A_stream$ )
(declare-fun sub$a (A_treeFI_treeFI$ )A_treeFI_treeFI_list$ )
(declare-fun sub$b (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI_treeFI_list$ )
(declare-fun sub$c (A_stream_treeFI$ )A_stream_treeFI_list$ )
(declare-fun sub$d (A_treeFI_stream_treeFI$ )A_treeFI_stream_treeFI_list$ )
(declare-fun tree$ (A$ A_treeFI_list$ )A_treeFI$ )
(declare-fun trev$ (A_treeFI$ )A_treeFI$ )
(declare-fun comp$a (Bool_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun comp$b (A_a_fun$ )A_a_fun_a_a_fun_fun$ )
(declare-fun comp$c (A_treeFI_a_treeFI_fun$ )A_treeFI_a_treeFI_fun_a_treeFI_a_treeFI_fun_fun$ )
(declare-fun null$a (A_treeFI_list$ )Bool )
(declare-fun smap$a (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap$b (A_a_treeFI_fun$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap$c (A_treeFI_a_treeFI_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun smap$d (Bool_bool_fun$ Bool_stream$ )Bool_stream$ )
(declare-fun smap$e (A_bool_fun$ A_stream$ )Bool_stream$ )
(declare-fun smap$f (A_treeFI_a_stream_fun$ A_treeFI_stream$ )A_stream_stream$ )
(declare-fun smap$g (A_treeFI_a_treeFI_stream_fun$ A_treeFI_stream$ )A_treeFI_stream_stream$ )
(declare-fun smap2$ (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun tree$a (A_treeFI$ A_treeFI_treeFI_list$ )A_treeFI_treeFI$ )
(declare-fun tree$b (A_treeFI_treeFI$ A_treeFI_treeFI_treeFI_list$ )A_treeFI_treeFI_treeFI$ )
(declare-fun tree$c (A_stream$ A_stream_treeFI_list$ )A_stream_treeFI$ )
(declare-fun tree$d (A_treeFI_stream$ A_treeFI_stream_treeFI_list$ )A_treeFI_stream_treeFI$ )
(declare-fun trev$a (A_treeFI_treeFI$ )A_treeFI_treeFI$ )
(declare-fun insert$ (A_treeFI$ )A_treeFI_set_a_treeFI_set_fun$ )
(declare-fun member$ (A_treeFI$ A_treeFI_set$ )Bool )
(declare-fun smap2$a (A_a_treeFI_a_fun_fun$ A_stream$ A_treeFI_stream$ )A_stream$ )
(declare-fun smap2$b (A_treeFI_a_a_fun_fun$ A_treeFI_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$c (A_treeFI_a_treeFI_a_fun_fun$ A_treeFI_stream$ A_treeFI_stream$ )A_stream$ )
(declare-fun smap2$d (A_a_a_treeFI_fun_fun$ A_stream$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap2$e (A_a_treeFI_a_treeFI_fun_fun$ A_stream$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun smap2$f (A_treeFI_a_a_treeFI_fun_fun$ A_treeFI_stream$ A_stream$ )A_treeFI_stream$ )
(declare-fun smap2$g (A_treeFI_a_treeFI_a_treeFI_fun_fun$ A_treeFI_stream$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun collect$ (A_treeFI_bool_fun$ )A_treeFI_set$ )
(declare-fun fun_app$ (A_treeFI_bool_fun$ A_treeFI$ )Bool )
(declare-fun insert$a (A_treeFI$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun insert$b (A$ A_set$ )A_set$ )
(declare-fun member$a (A_treeFI_treeFI$ A_treeFI_treeFI_set$ )Bool )
(declare-fun member$b (A_treeFI_stream$ A_treeFI_stream_set$ )Bool )
(declare-fun member$c (A_stream$ A_stream_set$ )Bool )
(declare-fun member$d (A$ A_set$ )Bool )
(declare-fun member$e (A_treeFI_treeFI_treeFI$ A_treeFI_treeFI_treeFI_set$ )Bool )
(declare-fun member$f (A_stream_treeFI$ A_stream_treeFI_set$ )Bool )
(declare-fun member$g (A_treeFI_stream_treeFI$ A_treeFI_stream_treeFI_set$ )Bool )
(declare-fun member$h (A_list$ )A_bool_fun$ )
(declare-fun member$i (A_stream_list$ )A_stream_bool_fun$ )
(declare-fun member$j (A_treeFI_stream_list$ )A_treeFI_stream_bool_fun$ )
(declare-fun member$k (A_treeFI_treeFI_list$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun member$l (A_treeFI_list$ )A_treeFI_bool_fun$ )
(declare-fun member$m (A_treeFI_treeFI_stream$ A_treeFI_treeFI_stream_set$ )Bool )
(declare-fun member$n (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$o (A_treeFI_stream_stream$ A_treeFI_stream_stream_set$ )Bool )
(declare-fun sfilter$ (A_treeFI_bool_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun smember$ (A$ )A_stream_bool_fun$ )
(declare-fun streams$ (A_treeFI_treeFI_set$ )A_treeFI_treeFI_stream_set$ )
(declare-fun collect$a (A_bool_fun$ )A_set$ )
(declare-fun collect$b (A_treeFI_treeFI_bool_fun$ )A_treeFI_treeFI_set$ )
(declare-fun collect$c (A_stream_bool_fun$ )A_stream_set$ )
(declare-fun collect$d (A_treeFI_stream_bool_fun$ )A_treeFI_stream_set$ )
(declare-fun fun_app$a (Bool_bool_fun$ Bool )Bool )
(declare-fun fun_app$b (A_treeFI_treeFI_bool_fun$ A_treeFI_treeFI$ )Bool )
(declare-fun fun_app$c (A_treeFI_stream_bool_fun$ A_treeFI_stream$ )Bool )
(declare-fun fun_app$d (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$e (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$f (A_treeFI_list_a_treeFI_set_a_treeFI_set_fun_fun$ A_treeFI_list$ )A_treeFI_set_a_treeFI_set_fun$ )
(declare-fun fun_app$g (A_treeFI_a_treeFI_list_a_treeFI_set_a_treeFI_set_fun_fun_fun$ A_treeFI$ )A_treeFI_list_a_treeFI_set_a_treeFI_set_fun_fun$ )
(declare-fun fun_app$h (A_treeFI_set_a_treeFI_bool_fun_fun$ A_treeFI_set$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$i (A_a_fun$ A$ )A$ )
(declare-fun fun_app$j (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$k (A_a_a_fun_fun_a_a_a_fun_fun_fun$ A_a_a_fun_fun$ )A_a_a_fun_fun$ )
(declare-fun fun_app$l (A_treeFI_stream_a_treeFI_fun$ A_treeFI_stream$ )A_treeFI$ )
(declare-fun fun_app$m (A_treeFI_a_treeFI_stream_a_treeFI_fun_fun$ A_treeFI$ )A_treeFI_stream_a_treeFI_fun$ )
(declare-fun fun_app$n (A_treeFI_treeFI_list_a_treeFI_fun$ A_treeFI_treeFI_list$ )A_treeFI$ )
(declare-fun fun_app$o (A_treeFI_a_treeFI_treeFI_list_a_treeFI_fun_fun$ A_treeFI$ )A_treeFI_treeFI_list_a_treeFI_fun$ )
(declare-fun fun_app$p (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$q (A_a_stream_a_fun_fun$ A$ )A_stream_a_fun$ )
(declare-fun fun_app$r (A_treeFI_list_a_fun$ A_treeFI_list$ )A$ )
(declare-fun fun_app$s (A_a_treeFI_list_a_fun_fun$ A$ )A_treeFI_list_a_fun$ )
(declare-fun fun_app$t (A_treeFI_stream_a_treeFI_stream_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun fun_app$u (A_treeFI_a_treeFI_stream_a_treeFI_stream_fun_fun$ A_treeFI$ )A_treeFI_stream_a_treeFI_stream_fun$ )
(declare-fun fun_app$v (A_treeFI_treeFI_list_a_treeFI_treeFI_list_fun$ A_treeFI_treeFI_list$ )A_treeFI_treeFI_list$ )
(declare-fun fun_app$w (A_treeFI_a_treeFI_treeFI_list_a_treeFI_treeFI_list_fun_fun$ A_treeFI$ )A_treeFI_treeFI_list_a_treeFI_treeFI_list_fun$ )
(declare-fun fun_app$x (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$y (A_a_stream_a_stream_fun_fun$ A$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$z (A_treeFI_list_a_treeFI_list_fun$ A_treeFI_list$ )A_treeFI_list$ )
(declare-fun is_empty$ (A_treeFI_set$ )Bool )
(declare-fun list_ex1$ (A_treeFI_bool_fun$ )A_treeFI_list_bool_fun$ )
(declare-fun rec_list$ (A_treeFI_set$ A_treeFI_a_treeFI_list_a_treeFI_set_a_treeFI_set_fun_fun_fun$ A_treeFI_list$ )A_treeFI_set$ )
(declare-fun sfilter$a (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun smember$a (A_treeFI$ )A_treeFI_stream_bool_fun$ )
(declare-fun streams$a (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$b (A_treeFI_stream_set$ )A_treeFI_stream_stream_set$ )
(declare-fun streams$c (A_treeFI_set$ )A_treeFI_stream_set$ )
(declare-fun streams$d (A_set$ )A_stream_set$ )
(declare-fun streamsp$ (A_treeFI_bool_fun$ )A_treeFI_stream_bool_fun$ )
(declare-fun supremum$ (A_treeFI_set$ A_treeFI_a_set_fun$ )A_set$ )
(declare-fun the_elem$ (A_treeFI_set$ )A_treeFI$ )
(declare-fun fun_app$aa (A_a_treeFI_list_a_treeFI_list_fun_fun$ A$ )A_treeFI_list_a_treeFI_list_fun$ )
(declare-fun fun_app$ab (A_treeFI_a_treeFI_fun$ A_treeFI$ )A_treeFI$ )
(declare-fun fun_app$ac (A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$ad (A_stream_a_treeFI_bool_fun_fun$ A_stream$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$ae (A_treeFI_a_set_fun$ A_treeFI$ )A_set$ )
(declare-fun fun_app$af (A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_stream_bool_fun$ )
(declare-fun fun_app$ag (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun fun_app$ah (A_treeFI_a_fun$ A_treeFI$ )A$ )
(declare-fun fun_app$ai (A_a_treeFI_a_fun_fun$ A$ )A_treeFI_a_fun$ )
(declare-fun fun_app$aj (A_treeFI_a_a_fun_fun$ A_treeFI$ )A_a_fun$ )
(declare-fun fun_app$ak (A_treeFI_a_treeFI_a_fun_fun$ A_treeFI$ )A_treeFI_a_fun$ )
(declare-fun fun_app$al (A_a_treeFI_fun$ A$ )A_treeFI$ )
(declare-fun fun_app$am (A_a_a_treeFI_fun_fun$ A$ )A_a_treeFI_fun$ )
(declare-fun fun_app$an (A_a_treeFI_a_treeFI_fun_fun$ A$ )A_treeFI_a_treeFI_fun$ )
(declare-fun fun_app$ao (A_treeFI_a_a_treeFI_fun_fun$ A_treeFI$ )A_a_treeFI_fun$ )
(declare-fun fun_app$ap (A_treeFI_a_treeFI_a_treeFI_fun_fun$ A_treeFI$ )A_treeFI_a_treeFI_fun$ )
(declare-fun fun_app$aq (A_treeFI_list_bool_fun$ A_treeFI_list$ )Bool )
(declare-fun fun_app$ar (A_treeFI_treeFI_treeFI_bool_fun$ A_treeFI_treeFI_treeFI$ )Bool )
(declare-fun fun_app$as (A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ A_treeFI_treeFI$ )A_treeFI_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$at (A_stream_treeFI_bool_fun$ A_stream_treeFI$ )Bool )
(declare-fun fun_app$au (A_stream_a_stream_treeFI_bool_fun_fun$ A_stream$ )A_stream_treeFI_bool_fun$ )
(declare-fun fun_app$av (A_treeFI_stream_treeFI_bool_fun$ A_treeFI_stream_treeFI$ )Bool )
(declare-fun fun_app$aw (A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ A_treeFI_stream$ )A_treeFI_stream_treeFI_bool_fun$ )
(declare-fun fun_app$ax (A_treeFI_a_treeFI_treeFI_bool_fun_fun$ A_treeFI$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun fun_app$ay (A_a_treeFI_bool_fun_fun$ A$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$az (A_treeFI_bool_fun_a_treeFI_bool_fun_fun$ A_treeFI_bool_fun$ )A_treeFI_bool_fun$ )
(declare-fun fun_app$ba (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$bb (A_a_fun_a_a_fun_fun$ A_a_fun$ )A_a_fun$ )
(declare-fun fun_app$bc (A_treeFI_a_treeFI_fun_a_treeFI_a_treeFI_fun_fun$ A_treeFI_a_treeFI_fun$ )A_treeFI_a_treeFI_fun$ )
(declare-fun fun_app$bd (A_treeFI_treeFI_stream_bool_fun$ A_treeFI_treeFI_stream$ )Bool )
(declare-fun fun_app$be (A_stream_stream_bool_fun$ A_stream_stream$ )Bool )
(declare-fun fun_app$bf (A_treeFI_stream_stream_bool_fun$ A_treeFI_stream_stream$ )Bool )
(declare-fun fun_app$bg (A_treeFI_a_stream_fun$ A_treeFI$ )A_stream$ )
(declare-fun fun_app$bh (A_treeFI_a_treeFI_stream_fun$ A_treeFI$ )A_treeFI_stream$ )
(declare-fun fun_app$bi (A_treeFI_set_a_treeFI_set_fun$ A_treeFI_set$ )A_treeFI_set$ )
(declare-fun fun_app$bj (A_treeFI_a_treeFI_set_fun$ A_treeFI$ )A_treeFI_set$ )
(declare-fun is_empty$a (A_treeFI_treeFI_set$ )Bool )
(declare-fun konigPath$ (A_treeFI$ )A_stream$ )
(declare-fun pred_list$ (A_treeFI_bool_fun$ )A_treeFI_list_bool_fun$ )
(declare-fun supremum$a (A_treeFI_set$ A_treeFI_a_treeFI_set_fun$ )A_treeFI_set$ )
(declare-fun can_select$ (A_treeFI_bool_fun$ A_treeFI_set$ )Bool )
(declare-fun infiniteTr$ (A_treeFI$ )Bool )
(declare-fun konigPath$a (A_treeFI_treeFI$ )A_treeFI_stream$ )
(declare-fun properPath$ (A_treeFI_stream$ )A_treeFI_treeFI_bool_fun$ )
(declare-fun set_treeFI$ (A_treeFI_treeFI_treeFI$ )A_treeFI_treeFI_set$ )
(declare-fun case_stream$ (A_a_stream_a_stream_fun_fun$ A_stream$ )A_stream$ )
(declare-fun case_treeFI$ (A_a_treeFI_list_a_treeFI_list_fun_fun$ A_treeFI$ )A_treeFI_list$ )
(declare-fun infiniteTr$a (A_treeFI_treeFI$ )Bool )
(declare-fun pred_stream$ (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun properPath$a (A_stream$ )A_treeFI_bool_fun$ )
(declare-fun sdrop_while$ (A_treeFI_bool_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun set_treeFI$a (A_stream_treeFI$ )A_stream_set$ )
(declare-fun set_treeFI$b (A_treeFI_stream_treeFI$ )A_treeFI_stream_set$ )
(declare-fun set_treeFI$c (A_treeFI_treeFI$ )A_treeFI_set$ )
(declare-fun set_treeFI$d ()A_treeFI_a_set_fun$ )
(declare-fun sinterleave$ (A_treeFI_stream$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun case_stream$a (A_treeFI_a_treeFI_stream_a_treeFI_stream_fun_fun$ A_treeFI_stream$ )A_treeFI_stream$ )
(declare-fun case_stream$b (A_a_stream_a_fun_fun$ A_stream$ )A$ )
(declare-fun case_stream$c (A_treeFI_a_treeFI_stream_a_treeFI_fun_fun$ A_treeFI_stream$ )A_treeFI$ )
(declare-fun case_treeFI$a (A_treeFI_a_treeFI_treeFI_list_a_treeFI_treeFI_list_fun_fun$ A_treeFI_treeFI$ )A_treeFI_treeFI_list$ )
(declare-fun case_treeFI$b (A_a_treeFI_list_a_fun_fun$ )A_treeFI_a_fun$ )
(declare-fun case_treeFI$c (A_treeFI_a_treeFI_treeFI_list_a_treeFI_fun_fun$ A_treeFI_treeFI$ )A_treeFI$ )
(declare-fun pred_stream$a (A_treeFI_bool_fun$ )A_treeFI_stream_bool_fun$ )
(declare-fun sdrop_while$a (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun sinterleave$a (A_stream$ A_stream$ )A_stream$ )
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ uu$ ?v0 )(and (member$ ?v0 (set$ (sub$ tra$ )))(infiniteTr$ ?v0 ))):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$a uuv$ ?v0 )(not ?v0 )):pattern ((fun_app$a uuv$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ ))(! (= (fun_app$b (uua$ ?v0 )?v1 )(and (member$a ?v1 (set$a (sub$a ?v0 )))(infiniteTr$a ?v1 ))):pattern ((fun_app$b (uua$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(! (= (fun_app$ (uub$ ?v0 )?v1 )(and (member$ ?v1 (set$ (sub$ ?v0 )))(infiniteTr$ ?v1 ))):pattern ((fun_app$ (uub$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ )(?v1 A_treeFI_treeFI$ ))(! (= (fun_app$b (uuf$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$b (uuf$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI$ ))(! (= (fun_app$ (uui$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uui$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$c (uuh$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$c (uuh$ ?v0 )?v1 )))):named a6 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream$ ))(! (= (fun_app$d (uug$ ?v0 )?v1 )(member$c ?v1 ?v0 )):pattern ((fun_app$d (uug$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(! (= (fun_app$e (uue$ ?v0 )?v1 )(member$d ?v1 ?v0 )):pattern ((fun_app$e (uue$ ?v0 )?v1 )))):named a8 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(! (= (fun_app$ (uuc$ ?v0 )?v1 )(= ?v0 ?v1 )):pattern ((fun_app$ (uuc$ ?v0 )?v1 )))):named a9 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(! (= (fun_app$ (uud$ ?v0 )?v1 )(= ?v1 ?v0 )):pattern ((fun_app$ (uud$ ?v0 )?v1 )))):named a10 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$f (fun_app$g uux$ ?v0 )?v1 )(insert$ ?v0 )):pattern ((fun_app$f (fun_app$g uux$ ?v0 )?v1 )))):named a11 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI$ ))(! (= (fun_app$ (fun_app$h (uuw$ ?v0 )?v1 )?v2 )(or (= ?v2 ?v0 )(member$ ?v2 ?v1 ))):pattern ((fun_app$ (fun_app$h (uuw$ ?v0 )?v1 )?v2 )))):named a12 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_a_fun_fun$ )(?v2 A$ )(?v3 A$ ))(! (= (fun_app$i (fun_app$j (fun_app$k (uus$ ?v0 )?v1 )?v2 )?v3 )(fun_app$i ?v0 (fun_app$i (fun_app$j ?v1 ?v2 )?v3 ))):pattern ((fun_app$i (fun_app$j (fun_app$k (uus$ ?v0 )?v1 )?v2 )?v3 )))):named a13 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$l (fun_app$m uup$ ?v0 )?v1 )?v0 ):pattern ((fun_app$l (fun_app$m uup$ ?v0 )?v1 )))):named a14 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (fun_app$n (fun_app$o uur$ ?v0 )?v1 )?v0 ):pattern ((fun_app$n (fun_app$o uur$ ?v0 )?v1 )))):named a15 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (fun_app$p (fun_app$q uuo$ ?v0 )?v1 )?v0 ):pattern ((fun_app$p (fun_app$q uuo$ ?v0 )?v1 )))):named a16 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$r (fun_app$s uuq$ ?v0 )?v1 )?v0 ):pattern ((fun_app$r (fun_app$s uuq$ ?v0 )?v1 )))):named a17 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (fun_app$t (fun_app$u uuk$ ?v0 )?v1 )?v1 ):pattern ((fun_app$t (fun_app$u uuk$ ?v0 )?v1 )))):named a18 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (fun_app$v (fun_app$w uum$ ?v0 )?v1 )?v1 ):pattern ((fun_app$v (fun_app$w uum$ ?v0 )?v1 )))):named a19 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (fun_app$x (fun_app$y uul$ ?v0 )?v1 )?v1 ):pattern ((fun_app$x (fun_app$y uul$ ?v0 )?v1 )))):named a20 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$z (fun_app$aa uun$ ?v0 )?v1 )?v1 ):pattern ((fun_app$z (fun_app$aa uun$ ?v0 )?v1 )))):named a21 ))
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ab uuu$ ?v0 )?v0 ):pattern ((fun_app$ab uuu$ ?v0 )))):named a22 ))
(assert (! (forall ((?v0 A$ ))(! (= (fun_app$i uut$ ?v0 )?v0 ):pattern ((fun_app$i uut$ ?v0 )))):named a23 ))
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ uuj$ ?v0 )false ):pattern ((fun_app$ uuj$ ?v0 )))):named a24 ))
(assert (! (not (= (stl$ (konigPath$ tra$ ))(konigPath$ (eps$ uu$ )))):named a25 ))
(assert (! (infiniteTr$ tr$ ):named a26 ))
(assert (! (and (infiniteTr$ tra$ )(= asa$ (konigPath$ tra$ ))):named a27 ))
(assert (! (and (infiniteTr$ tr$ )(= as$ (konigPath$ tr$ ))):named a28 ))
(assert (! (exists ((?v0 A_treeFI$ ))(and (member$ ?v0 (set$ (sub$ tra$ )))(infiniteTr$ ?v0 ))):named a29 ))
(assert (! (exists ((?v0 A_treeFI$ ))(and (member$ ?v0 (set$ (sub$ tra$ )))(infiniteTr$ ?v0 ))):named a30 ))
(assert (! (and (member$ (eps$ uu$ )(set$ (sub$ tra$ )))(infiniteTr$ (eps$ uu$ ))):named a31 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (stl$a (konigPath$a ?v0 ))(konigPath$a (eps$a (uua$ ?v0 ))))):named a32 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (stl$ (konigPath$ ?v0 ))(konigPath$ (eps$ (uub$ ?v0 ))))):named a33 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (infiniteTr$a ?v0 )(exists ((?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(and (= ?v0 ?v2 )(and (member$a ?v1 (set$a (sub$a ?v2 )))(infiniteTr$a ?v1 )))))):named a34 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (infiniteTr$ ?v0 )(exists ((?v1 A_treeFI$ )(?v2 A_treeFI$ ))(and (= ?v0 ?v2 )(and (member$ ?v1 (set$ (sub$ ?v2 )))(infiniteTr$ ?v1 )))))):named a35 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (member$a ?v0 (set$a (sub$a ?v1 )))(infiniteTr$a ?v0 ))(infiniteTr$a ?v1 ))):named a36 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(=> (and (member$ ?v0 (set$ (sub$ ?v1 )))(infiniteTr$ ?v0 ))(infiniteTr$ ?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (and (infiniteTr$a ?v0 )(forall ((?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (member$a ?v1 (set$a (sub$a ?v2 )))(infiniteTr$a ?v1 )))false )))false )):named a38 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (and (infiniteTr$ ?v0 )(forall ((?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (member$ ?v1 (set$ (sub$ ?v2 )))(infiniteTr$ ?v1 )))false )))false )):named a39 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (infiniteTr$a ?v0 )(exists ((?v1 A_treeFI_treeFI$ ))(and (member$a ?v1 (set$a (sub$a ?v0 )))(infiniteTr$a ?v1 ))))):named a40 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (infiniteTr$ ?v0 )(exists ((?v1 A_treeFI$ ))(and (member$ ?v1 (set$ (sub$ ?v0 )))(infiniteTr$ ?v1 ))))):named a41 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$b ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ ))(and (member$a ?v3 (set$a (sub$a ?v2 )))(or (fun_app$b ?v0 ?v3 )(infiniteTr$a ?v3 )))))))(infiniteTr$a ?v1 ))):named a42 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$ ?v0 ?v2 )(exists ((?v3 A_treeFI$ ))(and (member$ ?v3 (set$ (sub$ ?v2 )))(or (fun_app$ ?v0 ?v3 )(infiniteTr$ ?v3 )))))))(infiniteTr$ ?v1 ))):named a43 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$b ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(and (= ?v2 ?v4 )(and (member$a ?v3 (set$a (sub$a ?v4 )))(or (fun_app$b ?v0 ?v3 )(infiniteTr$a ?v3 ))))))))(infiniteTr$a ?v1 ))):named a44 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$ ?v0 ?v2 )(exists ((?v3 A_treeFI$ )(?v4 A_treeFI$ ))(and (= ?v2 ?v4 )(and (member$ ?v3 (set$ (sub$ ?v4 )))(or (fun_app$ ?v0 ?v3 )(infiniteTr$ ?v3 ))))))))(infiniteTr$ ?v1 ))):named a45 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_bool_fun$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$b ?v0 ?v1 )(forall ((?v2 A_treeFI_treeFI$ ))(=> (fun_app$b ?v0 ?v2 )(exists ((?v3 A_treeFI_treeFI$ ))(and (member$a ?v3 (set$a (sub$a ?v2 )))(fun_app$b ?v0 ?v3 ))))))(infiniteTr$a ?v1 ))):named a46 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$ ?v0 ?v2 )(exists ((?v3 A_treeFI$ ))(and (member$ ?v3 (set$ (sub$ ?v2 )))(fun_app$ ?v0 ?v3 ))))))(infiniteTr$ ?v1 ))):named a47 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (eps$ (uuc$ ?v0 ))?v0 )):named a48 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (eps$ (uud$ ?v0 ))?v0 )):named a49 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v2 A_treeFI$ ))(=> (fun_app$ ?v0 ?v2 )(= ?v2 ?v1 ))))(= (eps$ ?v0 )?v1 ))):named a50 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ ))(=> (fun_app$b (properPath$ ?v0 )?v1 )(exists ((?v3 A_treeFI_treeFI$ ))(and (member$a ?v3 (set$a (sub$a ?v1 )))(or (fun_app$b (fun_app$ac ?v2 (stl$a ?v0 ))?v3 )(fun_app$b (properPath$ (stl$a ?v0 ))?v3 )))))):named a51 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ )(?v2 A_stream_a_treeFI_bool_fun_fun$ ))(=> (fun_app$ (properPath$a ?v0 )?v1 )(exists ((?v3 A_treeFI$ ))(and (member$ ?v3 (set$ (sub$ ?v1 )))(or (fun_app$ (fun_app$ad ?v2 (stl$ ?v0 ))?v3 )(fun_app$ (properPath$a (stl$ ?v0 ))?v3 )))))):named a52 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ ))(= (fun_app$ ?v0 (eps$ ?v0 ))(exists ((?v1 A_treeFI$ ))(fun_app$ ?v0 ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_bool_fun$ ))(=> (and (exists ((?v2 A_treeFI$ ))(fun_app$ ?v0 ?v2 ))(forall ((?v2 A_treeFI$ ))(=> (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 ))))(fun_app$ ?v1 (eps$ ?v0 )))):named a54 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ ))(=> (exists ((?v1 A_treeFI$ ))(fun_app$ ?v0 ?v1 ))(fun_app$ ?v0 (eps$ ?v0 )))):named a55 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (and (exists ((?v2 A_treeFI$ ))(and (fun_app$ ?v0 ?v2 )(forall ((?v3 A_treeFI$ ))(=> (fun_app$ ?v0 ?v3 )(= ?v3 ?v2 )))))(fun_app$ ?v0 ?v1 ))(= (eps$ ?v0 )?v1 ))):named a56 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_bool_fun$ ))(=> (and (fun_app$ ?v0 ?v1 )(forall ((?v3 A_treeFI$ ))(=> (fun_app$ ?v0 ?v3 )(fun_app$ ?v2 ?v3 ))))(fun_app$ ?v2 (eps$ ?v0 )))):named a57 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (fun_app$ ?v0 ?v1 )(and (not (fun_app$ ?v0 ?v2 ))(= (eps$ ?v0 )?v2 )))(= (eps$ ?v0 )?v1 ))):named a58 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 (eps$ ?v0 )))):named a59 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ ))(=> (fun_app$ ?v0 ?v1 )(fun_app$ ?v0 (eps$ ?v0 )))):named a60 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (konigPath$a ?v0 )(sCons$a (lab$ ?v0 )(konigPath$a (eps$a (uua$ ?v0 )))))):named a61 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (konigPath$ ?v0 )(sCons$ (lab$a ?v0 )(konigPath$ (eps$ (uub$ ?v0 )))))):named a62 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_treeFI$ ))(=> (and (fun_app$b (fun_app$ac ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$b (fun_app$ac ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI_stream$ )(?v6 A_treeFI_treeFI$ )(?v7 A_treeFI_treeFI$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (shd$a ?v5 )(lab$ ?v6 ))(and (member$a ?v7 (set$a (sub$a ?v6 )))(or (fun_app$b (fun_app$ac ?v0 (stl$a ?v5 ))?v7 )(fun_app$b (properPath$ (stl$a ?v5 ))?v7 ))))))))))(fun_app$b (properPath$ ?v1 )?v2 ))):named a63 ))
(assert (! (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ ))(=> (and (fun_app$ (fun_app$ad ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$ (fun_app$ad ?v0 ?v3 )?v4 )(exists ((?v5 A_stream$ )(?v6 A_treeFI$ )(?v7 A_treeFI$ ))(and (= ?v3 ?v5 )(and (= ?v4 ?v6 )(and (= (shd$ ?v5 )(lab$a ?v6 ))(and (member$ ?v7 (set$ (sub$ ?v6 )))(or (fun_app$ (fun_app$ad ?v0 (stl$ ?v5 ))?v7 )(fun_app$ (properPath$a (stl$ ?v5 ))?v7 ))))))))))(fun_app$ (properPath$a ?v1 )?v2 ))):named a64 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_treeFI$ ))(=> (and (fun_app$b (fun_app$ac ?v0 ?v1 )?v2 )(and (forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$b (fun_app$ac ?v0 ?v3 )?v4 )(= (shd$a ?v3 )(lab$ ?v4 ))))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$b (fun_app$ac ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI_treeFI$ ))(and (member$a ?v5 (set$a (sub$a ?v4 )))(fun_app$b (fun_app$ac ?v0 (stl$a ?v3 ))?v5 )))))))(fun_app$b (properPath$ ?v1 )?v2 ))):named a65 ))
(assert (! (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ ))(=> (and (fun_app$ (fun_app$ad ?v0 ?v1 )?v2 )(and (forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$ (fun_app$ad ?v0 ?v3 )?v4 )(= (shd$ ?v3 )(lab$a ?v4 ))))(forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$ (fun_app$ad ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI$ ))(and (member$ ?v5 (set$ (sub$ ?v4 )))(fun_app$ (fun_app$ad ?v0 (stl$ ?v3 ))?v5 )))))))(fun_app$ (properPath$a ?v1 )?v2 ))):named a66 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_treeFI_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_treeFI$ ))(=> (and (fun_app$b (fun_app$ac ?v0 ?v1 )?v2 )(and (forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$b (fun_app$ac ?v0 ?v3 )?v4 )(= (shd$a ?v3 )(lab$ ?v4 ))))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_treeFI$ ))(=> (fun_app$b (fun_app$ac ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI_treeFI$ ))(and (member$a ?v5 (set$a (sub$a ?v4 )))(or (fun_app$b (fun_app$ac ?v0 (stl$a ?v3 ))?v5 )(fun_app$b (properPath$ (stl$a ?v3 ))?v5 ))))))))(fun_app$b (properPath$ ?v1 )?v2 ))):named a67 ))
(assert (! (forall ((?v0 A_stream_a_treeFI_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ ))(=> (and (fun_app$ (fun_app$ad ?v0 ?v1 )?v2 )(and (forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$ (fun_app$ad ?v0 ?v3 )?v4 )(= (shd$ ?v3 )(lab$a ?v4 ))))(forall ((?v3 A_stream$ )(?v4 A_treeFI$ ))(=> (fun_app$ (fun_app$ad ?v0 ?v3 )?v4 )(exists ((?v5 A_treeFI$ ))(and (member$ ?v5 (set$ (sub$ ?v4 )))(or (fun_app$ (fun_app$ad ?v0 (stl$ ?v3 ))?v5 )(fun_app$ (properPath$a (stl$ ?v3 ))?v5 ))))))))(fun_app$ (properPath$a ?v1 )?v2 ))):named a68 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ ))(=> (and (fun_app$b (properPath$ ?v0 )?v1 )(forall ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$a ?v2 )(lab$ ?v3 ))(and (member$a ?v4 (set$a (sub$a ?v3 )))(fun_app$b (properPath$ (stl$a ?v2 ))?v4 )))))false )))false )):named a69 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(=> (and (fun_app$ (properPath$a ?v0 )?v1 )(forall ((?v2 A_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI$ ))(=> (and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$ ?v2 )(lab$a ?v3 ))(and (member$ ?v4 (set$ (sub$ ?v3 )))(fun_app$ (properPath$a (stl$ ?v2 ))?v4 )))))false )))false )):named a70 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (= (shd$a ?v0 )(lab$ ?v1 ))(and (member$a ?v2 (set$a (sub$a ?v1 )))(fun_app$b (properPath$ (stl$a ?v0 ))?v2 )))(fun_app$b (properPath$ ?v0 )?v1 ))):named a71 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ )(?v2 A_treeFI$ ))(=> (and (= (shd$ ?v0 )(lab$a ?v1 ))(and (member$ ?v2 (set$ (sub$ ?v1 )))(fun_app$ (properPath$a (stl$ ?v0 ))?v2 )))(fun_app$ (properPath$a ?v0 )?v1 ))):named a72 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ ))(= (fun_app$b (properPath$ ?v0 )?v1 )(exists ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$a ?v2 )(lab$ ?v3 ))(and (member$a ?v4 (set$a (sub$a ?v3 )))(fun_app$b (properPath$ (stl$a ?v2 ))?v4 )))))))):named a73 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(= (fun_app$ (properPath$a ?v0 )?v1 )(exists ((?v2 A_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI$ ))(and (= ?v0 ?v2 )(and (= ?v1 ?v3 )(and (= (shd$ ?v2 )(lab$a ?v3 ))(and (member$ ?v4 (set$ (sub$ ?v3 )))(fun_app$ (properPath$a (stl$ ?v2 ))?v4 )))))))):named a74 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ )(?v2 A_treeFI_treeFI$ ))(=> (and (member$e ?v0 (set$b (sub$b ?v1 )))(member$a ?v2 (set_treeFI$ ?v0 )))(member$a ?v2 (set_treeFI$ ?v1 )))):named a75 ))
(assert (! (forall ((?v0 A_stream_treeFI$ )(?v1 A_stream_treeFI$ )(?v2 A_stream$ ))(=> (and (member$f ?v0 (set$c (sub$c ?v1 )))(member$c ?v2 (set_treeFI$a ?v0 )))(member$c ?v2 (set_treeFI$a ?v1 )))):named a76 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ )(?v1 A_treeFI_stream_treeFI$ )(?v2 A_treeFI_stream$ ))(=> (and (member$g ?v0 (set$d (sub$d ?v1 )))(member$b ?v2 (set_treeFI$b ?v0 )))(member$b ?v2 (set_treeFI$b ?v1 )))):named a77 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI$ ))(=> (and (member$a ?v0 (set$a (sub$a ?v1 )))(member$ ?v2 (set_treeFI$c ?v0 )))(member$ ?v2 (set_treeFI$c ?v1 )))):named a78 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A$ ))(=> (and (member$ ?v0 (set$ (sub$ ?v1 )))(member$d ?v2 (fun_app$ae set_treeFI$d ?v0 )))(member$d ?v2 (fun_app$ae set_treeFI$d ?v1 )))):named a79 ))
(assert (! (forall ((?v0 A_set$ ))(= (member$d (eps$b (uue$ ?v0 ))?v0 )(not (= ?v0 bot$ )))):named a80 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ ))(= (member$a (eps$a (uuf$ ?v0 ))?v0 )(not (= ?v0 bot$a )))):named a81 ))
(assert (! (forall ((?v0 A_stream_set$ ))(= (member$c (eps$c (uug$ ?v0 ))?v0 )(not (= ?v0 bot$b )))):named a82 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ ))(= (member$b (eps$d (uuh$ ?v0 ))?v0 )(not (= ?v0 bot$c )))):named a83 ))
(assert (! (forall ((?v0 A_treeFI_set$ ))(= (member$ (eps$ (uui$ ?v0 ))?v0 )(not (= ?v0 bot$d )))):named a84 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ ))(member$a (lab$b ?v0 )(set_treeFI$ ?v0 ))):named a85 ))
(assert (! (forall ((?v0 A_stream_treeFI$ ))(member$c (lab$c ?v0 )(set_treeFI$a ?v0 ))):named a86 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ ))(member$b (lab$d ?v0 )(set_treeFI$b ?v0 ))):named a87 ))
(assert (! (forall ((?v0 A_treeFI$ ))(member$d (lab$a ?v0 )(fun_app$ae set_treeFI$d ?v0 ))):named a88 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(member$ (lab$ ?v0 )(set_treeFI$c ?v0 ))):named a89 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_treeFI$ ))(=> (fun_app$b (properPath$ ?v0 )?v1 )(= (shd$a ?v0 )(lab$ ?v1 )))):named a90 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_treeFI$ ))(=> (fun_app$ (properPath$a ?v0 )?v1 )(= (shd$ ?v0 )(lab$a ?v1 )))):named a91 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (= (lab$ ?v0 )(lab$ ?v1 ))(= (sub$a ?v0 )(sub$a ?v1 )))(= ?v0 ?v1 ))):named a92 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(=> (and (= (lab$a ?v0 )(lab$a ?v1 ))(= (sub$ ?v0 )(sub$ ?v1 )))(= ?v0 ?v1 ))):named a93 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (shd$a (konigPath$a ?v0 ))(lab$ ?v0 ))):named a94 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (shd$ (konigPath$ ?v0 ))(lab$a ?v0 ))):named a95 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a96 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a97 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(=> (=> (= ?v0 (sCons$a (shd$a ?v0 )(stl$a ?v0 )))false )false )):named a98 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a99 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a100 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a101 ))
(assert (! (forall ((?v0 A$ ))(= (member$d ?v0 bot$ )false )):named a102 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (member$a ?v0 bot$a )false )):named a103 ))
(assert (! (forall ((?v0 A_stream$ ))(= (member$c ?v0 bot$b )false )):named a104 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (member$b ?v0 bot$c )false )):named a105 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (member$ ?v0 bot$d )false )):named a106 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ ))(= (= bot$d (collect$ ?v0 ))(forall ((?v1 A_treeFI$ ))(not (fun_app$ ?v0 ?v1 ))))):named a107 ))
(assert (! (forall ((?v0 A_set$ ))(= (forall ((?v1 A$ ))(not (member$d ?v1 ?v0 )))(= ?v0 bot$ ))):named a108 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ ))(= (forall ((?v1 A_treeFI_treeFI$ ))(not (member$a ?v1 ?v0 )))(= ?v0 bot$a ))):named a109 ))
(assert (! (forall ((?v0 A_stream_set$ ))(= (forall ((?v1 A_stream$ ))(not (member$c ?v1 ?v0 )))(= ?v0 bot$b ))):named a110 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ ))(= (forall ((?v1 A_treeFI_stream$ ))(not (member$b ?v1 ?v0 )))(= ?v0 bot$c ))):named a111 ))
(assert (! (forall ((?v0 A_treeFI_set$ ))(= (forall ((?v1 A_treeFI$ ))(not (member$ ?v1 ?v0 )))(= ?v0 bot$d ))):named a112 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_bool_fun$ ))(=> (forall ((?v2 A_treeFI$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a113 ))
(assert (! (forall ((?v0 A_set$ ))(= (collect$a (uue$ ?v0 ))?v0 )):named a114 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ ))(= (collect$b (uuf$ ?v0 ))?v0 )):named a115 ))
(assert (! (forall ((?v0 A_stream_set$ ))(= (collect$c (uug$ ?v0 ))?v0 )):named a116 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ ))(= (collect$d (uuh$ ?v0 ))?v0 )):named a117 ))
(assert (! (forall ((?v0 A_treeFI_set$ ))(= (collect$ (uui$ ?v0 ))?v0 )):named a118 ))
(assert (! (forall ((?v0 A$ )(?v1 A_bool_fun$ ))(= (member$d ?v0 (collect$a ?v1 ))(fun_app$e ?v1 ?v0 ))):named a119 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_bool_fun$ ))(= (member$a ?v0 (collect$b ?v1 ))(fun_app$b ?v1 ?v0 ))):named a120 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_bool_fun$ ))(= (member$c ?v0 (collect$c ?v1 ))(fun_app$d ?v1 ?v0 ))):named a121 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_bool_fun$ ))(= (member$b ?v0 (collect$d ?v1 ))(fun_app$c ?v1 ?v0 ))):named a122 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$ ?v1 ?v0 ))):named a123 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ ))(= (= (collect$ ?v0 )bot$d )(forall ((?v1 A_treeFI$ ))(not (fun_app$ ?v0 ?v1 ))))):named a124 ))
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ bot$e ?v0 )bot$f ):pattern ((fun_app$ bot$e ?v0 )))):named a125 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a126 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (shd$a (sCons$a ?v0 ?v1 ))?v0 ):pattern ((sCons$a ?v0 ?v1 )))):named a127 ))
(assert (! (= bot$d (collect$ bot$e )):named a128 ))
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ bot$e ?v0 )bot$f ):pattern ((fun_app$ bot$e ?v0 )))):named a129 ))
(assert (! (forall ((?v0 A_set$ ))(= (exists ((?v1 A$ ))(member$d ?v1 ?v0 ))(not (= ?v0 bot$ )))):named a130 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ ))(= (exists ((?v1 A_treeFI_treeFI$ ))(member$a ?v1 ?v0 ))(not (= ?v0 bot$a )))):named a131 ))
(assert (! (forall ((?v0 A_stream_set$ ))(= (exists ((?v1 A_stream$ ))(member$c ?v1 ?v0 ))(not (= ?v0 bot$b )))):named a132 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ ))(= (exists ((?v1 A_treeFI_stream$ ))(member$b ?v1 ?v0 ))(not (= ?v0 bot$c )))):named a133 ))
(assert (! (forall ((?v0 A_treeFI_set$ ))(= (exists ((?v1 A_treeFI$ ))(member$ ?v1 ?v0 ))(not (= ?v0 bot$d )))):named a134 ))
(assert (! (forall ((?v0 A_set$ ))(=> (forall ((?v1 A$ ))(=> (member$d ?v1 ?v0 )false ))(= ?v0 bot$ ))):named a135 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ ))(=> (forall ((?v1 A_treeFI_treeFI$ ))(=> (member$a ?v1 ?v0 )false ))(= ?v0 bot$a ))):named a136 ))
(assert (! (forall ((?v0 A_stream_set$ ))(=> (forall ((?v1 A_stream$ ))(=> (member$c ?v1 ?v0 )false ))(= ?v0 bot$b ))):named a137 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ ))(=> (forall ((?v1 A_treeFI_stream$ ))(=> (member$b ?v1 ?v0 )false ))(= ?v0 bot$c ))):named a138 ))
(assert (! (forall ((?v0 A_treeFI_set$ ))(=> (forall ((?v1 A_treeFI$ ))(=> (member$ ?v1 ?v0 )false ))(= ?v0 bot$d ))):named a139 ))
(assert (! (forall ((?v0 A_set$ )(?v1 A$ ))(=> (= ?v0 bot$ )(not (member$d ?v1 ?v0 )))):named a140 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_set$ )(?v1 A_treeFI_treeFI$ ))(=> (= ?v0 bot$a )(not (member$a ?v1 ?v0 )))):named a141 ))
(assert (! (forall ((?v0 A_stream_set$ )(?v1 A_stream$ ))(=> (= ?v0 bot$b )(not (member$c ?v1 ?v0 )))):named a142 ))
(assert (! (forall ((?v0 A_treeFI_stream_set$ )(?v1 A_treeFI_stream$ ))(=> (= ?v0 bot$c )(not (member$b ?v1 ?v0 )))):named a143 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI$ ))(=> (= ?v0 bot$d )(not (member$ ?v1 ?v0 )))):named a144 ))
(assert (! (forall ((?v0 A$ ))(=> (member$d ?v0 bot$ )false )):named a145 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (member$a ?v0 bot$a )false )):named a146 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (member$c ?v0 bot$b )false )):named a147 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(=> (member$b ?v0 bot$c )false )):named a148 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (member$ ?v0 bot$d )false )):named a149 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a150 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(=> (forall ((?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a151 ))
(assert (! (= bot$d (collect$ uuj$ )):named a152 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(=> (and (fun_app$c (fun_app$af ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream$ ))(=> (fun_app$c (fun_app$af ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$c (fun_app$af ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a153 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$d (fun_app$ag ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$d (fun_app$ag ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$d (fun_app$ag ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a154 ))
(assert (! (forall ((?v0 A_treeFI_stream_a_treeFI_stream_bool_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(=> (and (fun_app$c (fun_app$af ?v0 ?v1 )?v2 )(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream$ ))(=> (fun_app$c (fun_app$af ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$c (fun_app$af ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a155 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$d (fun_app$ag ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$d (fun_app$ag ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$d (fun_app$ag ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a156 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a157 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a158 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ ))(! (= (stl$a (sCons$a ?v0 ?v1 ))?v1 ):pattern ((sCons$a ?v0 ?v1 )))):named a159 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a160 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$d (smember$ ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$d (smember$ ?v0 )?v2 ))):pattern ((fun_app$d (smember$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a161 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (fun_app$c (smember$a ?v0 )(sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$c (smember$a ?v0 )?v2 ))):pattern ((fun_app$c (smember$a ?v0 )(sCons$a ?v1 ?v2 ))))):named a162 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_a_stream_a_stream_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$d ?v0 (case_stream$ ?v1 ?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$d ?v0 (fun_app$x (fun_app$y ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a163 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_a_stream_a_stream_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$d ?v0 (case_stream$ ?v1 ?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$d ?v0 (fun_app$x (fun_app$y ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a164 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(= (sinterleave$ ?v0 ?v1 )(sCons$a (shd$a ?v0 )(sinterleave$ ?v1 (stl$a ?v0 ))))):named a165 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (sinterleave$a ?v0 ?v1 )(sCons$ (shd$ ?v0 )(sinterleave$a ?v1 (stl$ ?v0 ))))):named a166 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$i (fun_app$j ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a167 ))
(assert (! (forall ((?v0 A_a_treeFI_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$a ?v0 ?v1 ?v2 )(sCons$ (fun_app$ah (fun_app$ai ?v0 (shd$ ?v1 ))(shd$a ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$a ?v2 ))))):named a168 ))
(assert (! (forall ((?v0 A_treeFI_a_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (smap2$b ?v0 ?v1 ?v2 )(sCons$ (fun_app$i (fun_app$aj ?v0 (shd$a ?v1 ))(shd$ ?v2 ))(smap2$b ?v0 (stl$a ?v1 )(stl$ ?v2 ))))):named a169 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$c ?v0 ?v1 ?v2 )(sCons$ (fun_app$ah (fun_app$ak ?v0 (shd$a ?v1 ))(shd$a ?v2 ))(smap2$c ?v0 (stl$a ?v1 )(stl$a ?v2 ))))):named a170 ))
(assert (! (forall ((?v0 A_a_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$d ?v0 ?v1 ?v2 )(sCons$a (fun_app$al (fun_app$am ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$d ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a171 ))
(assert (! (forall ((?v0 A_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$e ?v0 ?v1 ?v2 )(sCons$a (fun_app$ab (fun_app$an ?v0 (shd$ ?v1 ))(shd$a ?v2 ))(smap2$e ?v0 (stl$ ?v1 )(stl$a ?v2 ))))):named a172 ))
(assert (! (forall ((?v0 A_treeFI_a_a_treeFI_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (smap2$f ?v0 ?v1 ?v2 )(sCons$a (fun_app$al (fun_app$ao ?v0 (shd$a ?v1 ))(shd$ ?v2 ))(smap2$f ?v0 (stl$a ?v1 )(stl$ ?v2 ))))):named a173 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(= (smap2$g ?v0 ?v1 ?v2 )(sCons$a (fun_app$ab (fun_app$ap ?v0 (shd$a ?v1 ))(shd$a ?v2 ))(smap2$g ?v0 (stl$a ?v1 )(stl$a ?v2 ))))):named a174 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$d (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$e ?v0 ?v1 )(fun_app$d (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$d (pred_stream$ ?v0 )(sCons$ ?v1 ?v2 ))))):named a175 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (fun_app$c (pred_stream$a ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$ ?v0 ?v1 )(fun_app$c (pred_stream$a ?v0 )?v2 ))):pattern ((fun_app$c (pred_stream$a ?v0 )(sCons$a ?v1 ?v2 ))))):named a176 ))
(assert (! (forall ((?v0 A_treeFI_set$ ))(! (= (is_empty$ ?v0 )(= ?v0 bot$d )):pattern ((is_empty$ ?v0 )))):named a177 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v1 A_treeFI$ ))(! (= (case_treeFI$ ?v0 ?v1 )(fun_app$z (fun_app$aa ?v0 (lab$a ?v1 ))(sub$ ?v1 ))):pattern ((case_treeFI$ ?v0 ?v1 )))):named a178 ))
(assert (! (forall ((?v0 A_a_treeFI_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (stl$ (smap2$a ?v0 ?v1 ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$a ?v2 )))):named a179 ))
(assert (! (forall ((?v0 A_treeFI_a_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$b ?v0 ?v1 ?v2 ))(smap2$b ?v0 (stl$a ?v1 )(stl$ ?v2 )))):named a180 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(= (stl$ (smap2$c ?v0 ?v1 ?v2 ))(smap2$c ?v0 (stl$a ?v1 )(stl$a ?v2 )))):named a181 ))
(assert (! (forall ((?v0 A_a_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$a (smap2$d ?v0 ?v1 ?v2 ))(smap2$d ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a182 ))
(assert (! (forall ((?v0 A_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (stl$a (smap2$e ?v0 ?v1 ?v2 ))(smap2$e ?v0 (stl$ ?v1 )(stl$a ?v2 )))):named a183 ))
(assert (! (forall ((?v0 A_treeFI_a_a_treeFI_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (stl$a (smap2$f ?v0 ?v1 ?v2 ))(smap2$f ?v0 (stl$a ?v1 )(stl$ ?v2 )))):named a184 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(= (stl$a (smap2$g ?v0 ?v1 ?v2 ))(smap2$g ?v0 (stl$a ?v1 )(stl$a ?v2 )))):named a185 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (stl$ (smap2$ ?v0 ?v1 ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a186 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$i (fun_app$j ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a187 ))
(assert (! (forall ((?v0 A_a_treeFI_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (shd$ (smap2$a ?v0 ?v1 ?v2 ))(fun_app$ah (fun_app$ai ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a188 ))
(assert (! (forall ((?v0 A_treeFI_a_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$b ?v0 ?v1 ?v2 ))(fun_app$i (fun_app$aj ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a189 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(= (shd$ (smap2$c ?v0 ?v1 ?v2 ))(fun_app$ah (fun_app$ak ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a190 ))
(assert (! (forall ((?v0 A_a_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$a (smap2$d ?v0 ?v1 ?v2 ))(fun_app$al (fun_app$am ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a191 ))
(assert (! (forall ((?v0 A_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_stream$ )(?v2 A_treeFI_stream$ ))(= (shd$a (smap2$e ?v0 ?v1 ?v2 ))(fun_app$ab (fun_app$an ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a192 ))
(assert (! (forall ((?v0 A_treeFI_a_a_treeFI_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_stream$ ))(= (shd$a (smap2$f ?v0 ?v1 ?v2 ))(fun_app$al (fun_app$ao ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a193 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(= (shd$a (smap2$g ?v0 ?v1 ?v2 ))(fun_app$ab (fun_app$ap ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a194 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$i (fun_app$j ?v0 ?v1 )?v3 )(smap2$ ?v0 ?v2 ?v4 ))):pattern ((smap2$ ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a195 ))
(assert (! (forall ((?v0 A_a_a_treeFI_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$d ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$a (fun_app$al (fun_app$am ?v0 ?v1 )?v3 )(smap2$d ?v0 ?v2 ?v4 ))):pattern ((smap2$d ?v0 (sCons$ ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a196 ))
(assert (! (forall ((?v0 A_a_treeFI_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI_stream$ ))(! (= (smap2$a ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$ (fun_app$ah (fun_app$ai ?v0 ?v1 )?v3 )(smap2$a ?v0 ?v2 ?v4 ))):pattern ((smap2$a ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a197 ))
(assert (! (forall ((?v0 A_a_treeFI_a_treeFI_fun_fun$ )(?v1 A$ )(?v2 A_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI_stream$ ))(! (= (smap2$e ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$ab (fun_app$an ?v0 ?v1 )?v3 )(smap2$e ?v0 ?v2 ?v4 ))):pattern ((smap2$e ?v0 (sCons$ ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a198 ))
(assert (! (forall ((?v0 A_treeFI_a_a_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$b ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$ (fun_app$i (fun_app$aj ?v0 ?v1 )?v3 )(smap2$b ?v0 ?v2 ?v4 ))):pattern ((smap2$b ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a199 ))
(assert (! (forall ((?v0 A_treeFI_a_a_treeFI_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ )(?v3 A$ )(?v4 A_stream$ ))(! (= (smap2$f ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))(sCons$a (fun_app$al (fun_app$ao ?v0 ?v1 )?v3 )(smap2$f ?v0 ?v2 ?v4 ))):pattern ((smap2$f ?v0 (sCons$a ?v1 ?v2 )(sCons$ ?v3 ?v4 ))))):named a200 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI_stream$ ))(! (= (smap2$c ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$ (fun_app$ah (fun_app$ak ?v0 ?v1 )?v3 )(smap2$c ?v0 ?v2 ?v4 ))):pattern ((smap2$c ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a201 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_a_treeFI_fun_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ )(?v3 A_treeFI$ )(?v4 A_treeFI_stream$ ))(! (= (smap2$g ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))(sCons$a (fun_app$ab (fun_app$ap ?v0 ?v1 )?v3 )(smap2$g ?v0 ?v2 ?v4 ))):pattern ((smap2$g ?v0 (sCons$a ?v1 ?v2 )(sCons$a ?v3 ?v4 ))))):named a202 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(= (stl$a (sinterleave$ ?v0 ?v1 ))(sinterleave$ ?v1 (stl$a ?v0 )))):named a203 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (stl$ (sinterleave$a ?v0 ?v1 ))(sinterleave$a ?v1 (stl$ ?v0 )))):named a204 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream$ ))(= (shd$a (sinterleave$ ?v0 ?v1 ))(shd$a ?v0 ))):named a205 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$ (sinterleave$a ?v0 ?v1 ))(shd$ ?v0 ))):named a206 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_stream$ ))(! (= (sinterleave$a (sCons$ ?v0 ?v1 )?v2 )(sCons$ ?v0 (sinterleave$a ?v2 ?v1 ))):pattern ((sinterleave$a (sCons$ ?v0 ?v1 )?v2 )))):named a207 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_stream$ ))(! (= (sinterleave$ (sCons$a ?v0 ?v1 )?v2 )(sCons$a ?v0 (sinterleave$ ?v2 ?v1 ))):pattern ((sinterleave$ (sCons$a ?v0 ?v1 )?v2 )))):named a208 ))
(assert (! (forall ((?v0 A_a_stream_a_stream_fun_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (case_stream$ ?v0 (sCons$ ?v1 ?v2 ))(fun_app$x (fun_app$y ?v0 ?v1 )?v2 )):pattern ((case_stream$ ?v0 (sCons$ ?v1 ?v2 ))))):named a209 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (stl$a ?v0 )(case_stream$a uuk$ ?v0 ))):named a210 ))
(assert (! (forall ((?v0 A_stream$ ))(= (stl$ ?v0 )(case_stream$ uul$ ?v0 ))):named a211 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (sub$a ?v0 )(case_treeFI$a uum$ ?v0 ))):named a212 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (sub$ ?v0 )(case_treeFI$ uun$ ?v0 ))):named a213 ))
(assert (! (forall ((?v0 A_stream$ ))(= (shd$ ?v0 )(case_stream$b uuo$ ?v0 ))):named a214 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (shd$a ?v0 )(case_stream$c uup$ ?v0 ))):named a215 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (lab$a ?v0 )(fun_app$ah (case_treeFI$b uuq$ )?v0 ))):named a216 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (lab$ ?v0 )(case_treeFI$c uur$ ?v0 ))):named a217 ))
(assert (! (forall ((?v0 A_a_stream_a_stream_fun_fun$ )(?v1 A_stream$ ))(! (= (case_stream$ ?v0 ?v1 )(fun_app$x (fun_app$y ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((case_stream$ ?v0 ?v1 )))):named a218 ))
(assert (! (forall ((?v0 A$ ))(! (= (bot$g ?v0 )(member$d ?v0 bot$ )):pattern ((bot$g ?v0 )))):named a219 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(! (= (bot$h ?v0 )(member$a ?v0 bot$a )):pattern ((bot$h ?v0 )))):named a220 ))
(assert (! (forall ((?v0 A_stream$ ))(! (= (bot$i ?v0 )(member$c ?v0 bot$b )):pattern ((bot$i ?v0 )))):named a221 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(! (= (bot$j ?v0 )(member$b ?v0 bot$c )):pattern ((bot$j ?v0 )))):named a222 ))
(assert (! (forall ((?v0 A_treeFI$ ))(! (= (fun_app$ bot$e ?v0 )(member$ ?v0 bot$d )):pattern ((fun_app$ bot$e ?v0 )))):named a223 ))
(assert (! (forall ((?v0 A_treeFI_list_bool_fun$ )(?v1 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$aq ?v0 (case_treeFI$ ?v1 ?v2 ))(not (and (= ?v2 (tree$ (lab$a ?v2 )(sub$ ?v2 )))(not (fun_app$aq ?v0 (fun_app$z (fun_app$aa ?v1 (lab$a ?v2 ))(sub$ ?v2 )))))))):named a224 ))
(assert (! (forall ((?v0 A_treeFI_list_bool_fun$ )(?v1 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v2 A_treeFI$ ))(= (fun_app$aq ?v0 (case_treeFI$ ?v1 ?v2 ))(=> (= ?v2 (tree$ (lab$a ?v2 )(sub$ ?v2 )))(fun_app$aq ?v0 (fun_app$z (fun_app$aa ?v1 (lab$a ?v2 ))(sub$ ?v2 )))))):named a225 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_list$ ))(= (is_empty$a (set$a ?v0 ))(null$ ?v0 ))):named a226 ))
(assert (! (forall ((?v0 A_treeFI_list$ ))(= (is_empty$ (set$ ?v0 ))(null$a ?v0 ))):named a227 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (sdrop_while$ ?v0 ?v1 )(ite (fun_app$ ?v0 (shd$a ?v1 ))(sdrop_while$ ?v0 (stl$a ?v1 ))?v1 ))):named a228 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sdrop_while$a ?v0 ?v1 )(ite (fun_app$e ?v0 (shd$ ?v1 ))(sdrop_while$a ?v0 (stl$ ?v1 ))?v1 ))):named a229 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (tree$a (lab$ ?v0 )(sub$a ?v0 ))?v0 )):named a230 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (tree$ (lab$a ?v0 )(sub$ ?v0 ))?v0 )):named a231 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$ah ?v0 (shd$a ?v1 ))?v2 )(= (smap$ ?v0 (stl$a ?v1 ))?v3 )))):named a232 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (smap$a ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= (fun_app$i ?v0 (shd$ ?v1 ))?v2 )(= (smap$a ?v0 (stl$ ?v1 ))?v3 )))):named a233 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (smap$b ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$al ?v0 (shd$ ?v1 ))?v2 )(= (smap$b ?v0 (stl$ ?v1 ))?v3 )))):named a234 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(= (= (smap$c ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= (fun_app$ab ?v0 (shd$a ?v1 ))?v2 )(= (smap$c ?v0 (stl$a ?v1 ))?v3 )))):named a235 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ )(?v2 A$ )(?v3 A_treeFI_list$ ))(= (= (tree$ ?v0 ?v1 )(tree$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a236 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ )(?v2 A_treeFI$ )(?v3 A_treeFI_treeFI_list$ ))(= (= (tree$a ?v0 ?v1 )(tree$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a237 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$a ?v1 )))):named a238 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A_stream$ ))(= (stl$a (smap$b ?v0 ?v1 ))(smap$b ?v0 (stl$ ?v1 )))):named a239 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$a (smap$c ?v0 ?v1 ))(smap$c ?v0 (stl$a ?v1 )))):named a240 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (stl$ (smap$a ?v0 ?v1 ))(smap$a ?v0 (stl$ ?v1 )))):named a241 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$ah ?v0 (shd$a ?v1 )))):named a242 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$b ?v0 ?v1 ))(fun_app$al ?v0 (shd$ ?v1 )))):named a243 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$a ?v0 ?v1 ))(fun_app$i ?v0 (shd$ ?v1 )))):named a244 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_stream$ ))(= (shd$a (smap$c ?v0 ?v1 ))(fun_app$ab ?v0 (shd$a ?v1 )))):named a245 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_a_fun_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(= (smap$a ?v0 (smap2$ ?v1 ?v2 ?v3 ))(smap2$ (fun_app$k (uus$ ?v0 )?v1 )?v2 ?v3 ))):named a246 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (forall ((?v1 A$ )(?v2 A_treeFI_list$ ))(=> (= ?v0 (tree$ ?v1 ?v2 ))false ))false )):named a247 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (forall ((?v1 A_treeFI$ )(?v2 A_treeFI_treeFI_list$ ))(=> (= ?v0 (tree$a ?v1 ?v2 ))false ))false )):named a248 ))
(assert (! (forall ((?v0 A_stream$ ))(= (smap$a uut$ ?v0 )?v0 )):named a249 ))
(assert (! (forall ((?v0 A_treeFI_stream$ ))(= (smap$c uuu$ ?v0 )?v0 )):named a250 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$a ?v0 (sCons$ ?v1 ?v2 ))(sCons$ (fun_app$i ?v0 ?v1 )(smap$a ?v0 ?v2 ))):pattern ((smap$a ?v0 (sCons$ ?v1 ?v2 ))))):named a251 ))
(assert (! (forall ((?v0 A_a_treeFI_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (smap$b ?v0 (sCons$ ?v1 ?v2 ))(sCons$a (fun_app$al ?v0 ?v1 )(smap$b ?v0 ?v2 ))):pattern ((smap$b ?v0 (sCons$ ?v1 ?v2 ))))):named a252 ))
(assert (! (forall ((?v0 A_treeFI_a_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (smap$ ?v0 (sCons$a ?v1 ?v2 ))(sCons$ (fun_app$ah ?v0 ?v1 )(smap$ ?v0 ?v2 ))):pattern ((smap$ ?v0 (sCons$a ?v1 ?v2 ))))):named a253 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (smap$c ?v0 (sCons$a ?v1 ?v2 ))(sCons$a (fun_app$ab ?v0 ?v1 )(smap$c ?v0 ?v2 ))):pattern ((smap$c ?v0 (sCons$a ?v1 ?v2 ))))):named a254 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (sub$a (tree$a ?v0 ?v1 ))?v1 ):pattern ((tree$a ?v0 ?v1 )))):named a255 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (sub$ (tree$ ?v0 ?v1 ))?v1 ):pattern ((tree$ ?v0 ?v1 )))):named a256 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (lab$a (tree$ ?v0 ?v1 ))?v0 ):pattern ((tree$ ?v0 ?v1 )))):named a257 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(! (= (lab$ (tree$a ?v0 ?v1 ))?v0 ):pattern ((tree$a ?v0 ?v1 )))):named a258 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI_list$ ))(member$a ?v0 (set_treeFI$ (tree$b ?v0 ?v1 )))):named a259 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI_list$ ))(member$c ?v0 (set_treeFI$a (tree$c ?v0 ?v1 )))):named a260 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI_list$ ))(member$b ?v0 (set_treeFI$b (tree$d ?v0 ?v1 )))):named a261 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(member$d ?v0 (fun_app$ae set_treeFI$d (tree$ ?v0 ?v1 )))):named a262 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(member$ ?v0 (set_treeFI$c (tree$a ?v0 ?v1 )))):named a263 ))
(assert (! (forall ((?v0 A_a_treeFI_list_a_treeFI_list_fun_fun$ )(?v1 A$ )(?v2 A_treeFI_list$ ))(! (= (case_treeFI$ ?v0 (tree$ ?v1 ?v2 ))(fun_app$z (fun_app$aa ?v0 ?v1 )?v2 )):pattern ((case_treeFI$ ?v0 (tree$ ?v1 ?v2 ))))):named a264 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sdrop_while$a ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$e ?v0 ?v1 )(sdrop_while$a ?v0 ?v2 )(sCons$ ?v1 ?v2 ))):pattern ((sdrop_while$a ?v0 (sCons$ ?v1 ?v2 ))))):named a265 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI$ )(?v2 A_treeFI_stream$ ))(! (= (sdrop_while$ ?v0 (sCons$a ?v1 ?v2 ))(ite (fun_app$ ?v0 ?v1 )(sdrop_while$ ?v0 ?v2 )(sCons$a ?v1 ?v2 ))):pattern ((sdrop_while$ ?v0 (sCons$a ?v1 ?v2 ))))):named a266 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(=> (=> (= ?v0 (tree$a (lab$ ?v0 )(sub$a ?v0 )))false )false )):named a267 ))
(assert (! (forall ((?v0 A_treeFI$ ))(=> (=> (= ?v0 (tree$ (lab$a ?v0 )(sub$ ?v0 )))false )false )):named a268 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI_list$ )(?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI$ ))(=> (and (member$e ?v0 (set$b ?v1 ))(member$a ?v2 (set_treeFI$ ?v0 )))(member$a ?v2 (set_treeFI$ (tree$b ?v3 ?v1 ))))):named a269 ))
(assert (! (forall ((?v0 A_stream_treeFI$ )(?v1 A_stream_treeFI_list$ )(?v2 A_stream$ )(?v3 A_stream$ ))(=> (and (member$f ?v0 (set$c ?v1 ))(member$c ?v2 (set_treeFI$a ?v0 )))(member$c ?v2 (set_treeFI$a (tree$c ?v3 ?v1 ))))):named a270 ))
(assert (! (forall ((?v0 A_treeFI_stream_treeFI$ )(?v1 A_treeFI_stream_treeFI_list$ )(?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream$ ))(=> (and (member$g ?v0 (set$d ?v1 ))(member$b ?v2 (set_treeFI$b ?v0 )))(member$b ?v2 (set_treeFI$b (tree$d ?v3 ?v1 ))))):named a271 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_list$ )(?v2 A_treeFI$ )(?v3 A_treeFI$ ))(=> (and (member$a ?v0 (set$a ?v1 ))(member$ ?v2 (set_treeFI$c ?v0 )))(member$ ?v2 (set_treeFI$c (tree$a ?v3 ?v1 ))))):named a272 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ )(?v2 A$ )(?v3 A$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(member$d ?v2 (fun_app$ae set_treeFI$d ?v0 )))(member$d ?v2 (fun_app$ae set_treeFI$d (tree$ ?v3 ?v1 ))))):named a273 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ )(?v2 A_treeFI_treeFI_a_treeFI_treeFI_treeFI_bool_fun_fun$ ))(=> (and (member$a ?v0 (set_treeFI$ ?v1 ))(and (forall ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI_treeFI_list$ ))(fun_app$ar (fun_app$as ?v2 ?v3 )(tree$b ?v3 ?v4 )))(forall ((?v3 A_treeFI_treeFI$ )(?v4 A_treeFI_treeFI_treeFI_list$ )(?v5 A_treeFI_treeFI_treeFI$ )(?v6 A_treeFI_treeFI$ ))(=> (and (member$e ?v5 (set$b ?v4 ))(and (member$a ?v6 (set_treeFI$ ?v5 ))(fun_app$ar (fun_app$as ?v2 ?v6 )?v5 )))(fun_app$ar (fun_app$as ?v2 ?v6 )(tree$b ?v3 ?v4 ))))))(fun_app$ar (fun_app$as ?v2 ?v0 )?v1 ))):named a274 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI$ )(?v2 A_stream_a_stream_treeFI_bool_fun_fun$ ))(=> (and (member$c ?v0 (set_treeFI$a ?v1 ))(and (forall ((?v3 A_stream$ )(?v4 A_stream_treeFI_list$ ))(fun_app$at (fun_app$au ?v2 ?v3 )(tree$c ?v3 ?v4 )))(forall ((?v3 A_stream$ )(?v4 A_stream_treeFI_list$ )(?v5 A_stream_treeFI$ )(?v6 A_stream$ ))(=> (and (member$f ?v5 (set$c ?v4 ))(and (member$c ?v6 (set_treeFI$a ?v5 ))(fun_app$at (fun_app$au ?v2 ?v6 )?v5 )))(fun_app$at (fun_app$au ?v2 ?v6 )(tree$c ?v3 ?v4 ))))))(fun_app$at (fun_app$au ?v2 ?v0 )?v1 ))):named a275 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI$ )(?v2 A_treeFI_stream_a_treeFI_stream_treeFI_bool_fun_fun$ ))(=> (and (member$b ?v0 (set_treeFI$b ?v1 ))(and (forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream_treeFI_list$ ))(fun_app$av (fun_app$aw ?v2 ?v3 )(tree$d ?v3 ?v4 )))(forall ((?v3 A_treeFI_stream$ )(?v4 A_treeFI_stream_treeFI_list$ )(?v5 A_treeFI_stream_treeFI$ )(?v6 A_treeFI_stream$ ))(=> (and (member$g ?v5 (set$d ?v4 ))(and (member$b ?v6 (set_treeFI$b ?v5 ))(fun_app$av (fun_app$aw ?v2 ?v6 )?v5 )))(fun_app$av (fun_app$aw ?v2 ?v6 )(tree$d ?v3 ?v4 ))))))(fun_app$av (fun_app$aw ?v2 ?v0 )?v1 ))):named a276 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI$ )(?v2 A_treeFI_a_treeFI_treeFI_bool_fun_fun$ ))(=> (and (member$ ?v0 (set_treeFI$c ?v1 ))(and (forall ((?v3 A_treeFI$ )(?v4 A_treeFI_treeFI_list$ ))(fun_app$b (fun_app$ax ?v2 ?v3 )(tree$a ?v3 ?v4 )))(forall ((?v3 A_treeFI$ )(?v4 A_treeFI_treeFI_list$ )(?v5 A_treeFI_treeFI$ )(?v6 A_treeFI$ ))(=> (and (member$a ?v5 (set$a ?v4 ))(and (member$ ?v6 (set_treeFI$c ?v5 ))(fun_app$b (fun_app$ax ?v2 ?v6 )?v5 )))(fun_app$b (fun_app$ax ?v2 ?v6 )(tree$a ?v3 ?v4 ))))))(fun_app$b (fun_app$ax ?v2 ?v0 )?v1 ))):named a277 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI$ )(?v2 A_a_treeFI_bool_fun_fun$ ))(=> (and (member$d ?v0 (fun_app$ae set_treeFI$d ?v1 ))(and (forall ((?v3 A$ )(?v4 A_treeFI_list$ ))(fun_app$ (fun_app$ay ?v2 ?v3 )(tree$ ?v3 ?v4 )))(forall ((?v3 A$ )(?v4 A_treeFI_list$ )(?v5 A_treeFI$ )(?v6 A$ ))(=> (and (member$ ?v5 (set$ ?v4 ))(and (member$d ?v6 (fun_app$ae set_treeFI$d ?v5 ))(fun_app$ (fun_app$ay ?v2 ?v6 )?v5 )))(fun_app$ (fun_app$ay ?v2 ?v6 )(tree$ ?v3 ?v4 ))))))(fun_app$ (fun_app$ay ?v2 ?v0 )?v1 ))):named a278 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_treeFI$ ))(=> (and (member$a ?v0 (set_treeFI$ ?v1 ))(and (forall ((?v2 A_treeFI_treeFI_treeFI_list$ ))(=> (= ?v1 (tree$b ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI_treeFI_list$ )(?v4 A_treeFI_treeFI_treeFI$ ))(=> (and (= ?v1 (tree$b ?v2 ?v3 ))(and (member$e ?v4 (set$b ?v3 ))(member$a ?v0 (set_treeFI$ ?v4 ))))false ))))false )):named a279 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_treeFI$ ))(=> (and (member$c ?v0 (set_treeFI$a ?v1 ))(and (forall ((?v2 A_stream_treeFI_list$ ))(=> (= ?v1 (tree$c ?v0 ?v2 ))false ))(forall ((?v2 A_stream$ )(?v3 A_stream_treeFI_list$ )(?v4 A_stream_treeFI$ ))(=> (and (= ?v1 (tree$c ?v2 ?v3 ))(and (member$f ?v4 (set$c ?v3 ))(member$c ?v0 (set_treeFI$a ?v4 ))))false ))))false )):named a280 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_treeFI$ ))(=> (and (member$b ?v0 (set_treeFI$b ?v1 ))(and (forall ((?v2 A_treeFI_stream_treeFI_list$ ))(=> (= ?v1 (tree$d ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream_treeFI_list$ )(?v4 A_treeFI_stream_treeFI$ ))(=> (and (= ?v1 (tree$d ?v2 ?v3 ))(and (member$g ?v4 (set$d ?v3 ))(member$b ?v0 (set_treeFI$b ?v4 ))))false ))))false )):named a281 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_treeFI$ ))(=> (and (member$ ?v0 (set_treeFI$c ?v1 ))(and (forall ((?v2 A_treeFI_treeFI_list$ ))(=> (= ?v1 (tree$a ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_treeFI_list$ )(?v4 A_treeFI_treeFI$ ))(=> (and (= ?v1 (tree$a ?v2 ?v3 ))(and (member$a ?v4 (set$a ?v3 ))(member$ ?v0 (set_treeFI$c ?v4 ))))false ))))false )):named a282 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI$ ))(=> (and (member$d ?v0 (fun_app$ae set_treeFI$d ?v1 ))(and (forall ((?v2 A_treeFI_list$ ))(=> (= ?v1 (tree$ ?v0 ?v2 ))false ))(forall ((?v2 A$ )(?v3 A_treeFI_list$ )(?v4 A_treeFI$ ))(=> (and (= ?v1 (tree$ ?v2 ?v3 ))(and (member$ ?v4 (set$ ?v3 ))(member$d ?v0 (fun_app$ae set_treeFI$d ?v4 ))))false ))))false )):named a283 ))
(assert (! (forall ((?v0 A$ )(?v1 A_list$ ))(= (member$d ?v0 (set$e ?v1 ))(fun_app$e (member$h ?v1 )?v0 ))):named a284 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_list$ ))(= (member$c ?v0 (set$f ?v1 ))(fun_app$d (member$i ?v1 )?v0 ))):named a285 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_list$ ))(= (member$b ?v0 (set$g ?v1 ))(fun_app$c (member$j ?v1 )?v0 ))):named a286 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_list$ ))(= (member$a ?v0 (set$a ?v1 ))(fun_app$b (member$k ?v1 )?v0 ))):named a287 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(= (member$ ?v0 (set$ ?v1 ))(fun_app$ (member$l ?v1 )?v0 ))):named a288 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (lab$a (trev$ ?v0 ))(lab$a ?v0 ))):named a289 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ ))(= (lab$ (trev$a ?v0 ))(lab$ ?v0 ))):named a290 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (and (member$m ?v0 (streams$ ?v1 ))(=> (and (member$a (shd$b ?v0 )?v1 )(member$m (stl$b ?v0 )(streams$ ?v1 )))false ))false )):named a291 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$n ?v0 (streams$a ?v1 ))(=> (and (member$c (shd$c ?v0 )?v1 )(member$n (stl$c ?v0 )(streams$a ?v1 )))false ))false )):named a292 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (and (member$o ?v0 (streams$b ?v1 ))(=> (and (member$b (shd$d ?v0 )?v1 )(member$o (stl$d ?v0 )(streams$b ?v1 )))false ))false )):named a293 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$b ?v0 (streams$c ?v1 ))(=> (and (member$ (shd$a ?v0 )?v1 )(member$b (stl$a ?v0 )(streams$c ?v1 )))false ))false )):named a294 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$c ?v0 (streams$d ?v1 ))(=> (and (member$d (shd$ ?v0 )?v1 )(member$c (stl$ ?v0 )(streams$d ?v1 )))false ))false )):named a295 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (and (member$m (stl$b ?v0 )(streams$ ?v1 ))(member$a (shd$b ?v0 )?v1 ))(member$m ?v0 (streams$ ?v1 )))):named a296 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$n (stl$c ?v0 )(streams$a ?v1 ))(member$c (shd$c ?v0 )?v1 ))(member$n ?v0 (streams$a ?v1 )))):named a297 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (and (member$o (stl$d ?v0 )(streams$b ?v1 ))(member$b (shd$d ?v0 )?v1 ))(member$o ?v0 (streams$b ?v1 )))):named a298 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$b (stl$a ?v0 )(streams$c ?v1 ))(member$ (shd$a ?v0 )?v1 ))(member$b ?v0 (streams$c ?v1 )))):named a299 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$c (stl$ ?v0 )(streams$d ?v1 ))(member$d (shd$ ?v0 )?v1 ))(member$c ?v0 (streams$d ?v1 )))):named a300 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (sfilter$ ?v0 ?v1 )(sCons$a (shd$a (sdrop_while$ (fun_app$az (comp$ uuv$ )?v0 )?v1 ))(sfilter$ ?v0 (stl$a (sdrop_while$ (fun_app$az (comp$ uuv$ )?v0 )?v1 )))))):named a301 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sfilter$a ?v0 ?v1 )(sCons$ (shd$ (sdrop_while$a (fun_app$ba (comp$a uuv$ )?v0 )?v1 ))(sfilter$a ?v0 (stl$ (sdrop_while$a (fun_app$ba (comp$a uuv$ )?v0 )?v1 )))))):named a302 ))
(assert (! (forall ((?v0 Bool_bool_fun$ )(?v1 A_bool_fun$ )(?v2 A_stream$ ))(= (smap$d ?v0 (smap$e ?v1 ?v2 ))(smap$e (fun_app$ba (comp$a ?v0 )?v1 )?v2 ))):named a303 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_a_fun$ )(?v2 A_stream$ ))(= (smap$a ?v0 (smap$a ?v1 ?v2 ))(smap$a (fun_app$bb (comp$b ?v0 )?v1 )?v2 ))):named a304 ))
(assert (! (forall ((?v0 A_treeFI_a_treeFI_fun$ )(?v1 A_treeFI_a_treeFI_fun$ )(?v2 A_treeFI_stream$ ))(= (smap$c ?v0 (smap$c ?v1 ?v2 ))(smap$c (fun_app$bc (comp$c ?v0 )?v1 )?v2 ))):named a305 ))
(assert (! (= (streams$d bot$ )bot$b ):named a306 ))
(assert (! (= (streams$c bot$d )bot$c ):named a307 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (stl$a (sfilter$ ?v0 ?v1 ))(sfilter$ ?v0 (stl$a (sdrop_while$ (fun_app$az (comp$ uuv$ )?v0 )?v1 ))))):named a308 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (stl$ (sfilter$a ?v0 ?v1 ))(sfilter$a ?v0 (stl$ (sdrop_while$a (fun_app$ba (comp$a uuv$ )?v0 )?v1 ))))):named a309 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_stream$ ))(= (shd$a (sfilter$ ?v0 ?v1 ))(shd$a (sdrop_while$ (fun_app$az (comp$ uuv$ )?v0 )?v1 )))):named a310 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (shd$ (sfilter$a ?v0 ?v1 ))(shd$ (sdrop_while$a (fun_app$ba (comp$a uuv$ )?v0 )?v1 )))):named a311 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (member$b ?v0 (streams$c ?v1 ))(member$b (stl$a ?v0 )(streams$c ?v1 )))):named a312 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$c ?v0 (streams$d ?v1 ))(member$c (stl$ ?v0 )(streams$d ?v1 )))):named a313 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (member$m ?v0 (streams$ ?v1 ))(member$a (shd$b ?v0 )?v1 ))):named a314 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (member$n ?v0 (streams$a ?v1 ))(member$c (shd$c ?v0 )?v1 ))):named a315 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (member$o ?v0 (streams$b ?v1 ))(member$b (shd$d ?v0 )?v1 ))):named a316 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$c ?v0 (streams$d ?v1 ))(member$d (shd$ ?v0 )?v1 ))):named a317 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (member$b ?v0 (streams$c ?v1 ))(member$ (shd$a ?v0 )?v1 ))):named a318 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream_bool_fun$ )(?v1 A_treeFI_treeFI_stream$ )(?v2 A_treeFI_treeFI_set$ ))(=> (and (fun_app$bd ?v0 ?v1 )(forall ((?v3 A_treeFI_treeFI_stream$ ))(=> (fun_app$bd ?v0 ?v3 )(exists ((?v4 A_treeFI_treeFI$ )(?v5 A_treeFI_treeFI_stream$ ))(and (= ?v3 (sCons$b ?v4 ?v5 ))(and (member$a ?v4 ?v2 )(or (fun_app$bd ?v0 ?v5 )(member$m ?v5 (streams$ ?v2 )))))))))(member$m ?v1 (streams$ ?v2 )))):named a319 ))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(=> (and (fun_app$be ?v0 ?v1 )(forall ((?v3 A_stream_stream$ ))(=> (fun_app$be ?v0 ?v3 )(exists ((?v4 A_stream$ )(?v5 A_stream_stream$ ))(and (= ?v3 (sCons$c ?v4 ?v5 ))(and (member$c ?v4 ?v2 )(or (fun_app$be ?v0 ?v5 )(member$n ?v5 (streams$a ?v2 )))))))))(member$n ?v1 (streams$a ?v2 )))):named a320 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream_bool_fun$ )(?v1 A_treeFI_stream_stream$ )(?v2 A_treeFI_stream_set$ ))(=> (and (fun_app$bf ?v0 ?v1 )(forall ((?v3 A_treeFI_stream_stream$ ))(=> (fun_app$bf ?v0 ?v3 )(exists ((?v4 A_treeFI_stream$ )(?v5 A_treeFI_stream_stream$ ))(and (= ?v3 (sCons$d ?v4 ?v5 ))(and (member$b ?v4 ?v2 )(or (fun_app$bf ?v0 ?v5 )(member$o ?v5 (streams$b ?v2 )))))))))(member$o ?v1 (streams$b ?v2 )))):named a321 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_set$ ))(=> (and (fun_app$d ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$d ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (member$d ?v4 ?v2 )(or (fun_app$d ?v0 ?v5 )(member$c ?v5 (streams$d ?v2 )))))))))(member$c ?v1 (streams$d ?v2 )))):named a322 ))
(assert (! (forall ((?v0 A_treeFI_stream_bool_fun$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_set$ ))(=> (and (fun_app$c ?v0 ?v1 )(forall ((?v3 A_treeFI_stream$ ))(=> (fun_app$c ?v0 ?v3 )(exists ((?v4 A_treeFI$ )(?v5 A_treeFI_stream$ ))(and (= ?v3 (sCons$a ?v4 ?v5 ))(and (member$ ?v4 ?v2 )(or (fun_app$c ?v0 ?v5 )(member$b ?v5 (streams$c ?v2 )))))))))(member$b ?v1 (streams$c ?v2 )))):named a323 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(=> (and (member$m ?v0 (streams$ ?v1 ))(forall ((?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI_stream$ ))(=> (and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$m ?v3 (streams$ ?v1 ))))false )))false )):named a324 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$n ?v0 (streams$a ?v1 ))(forall ((?v2 A_stream$ )(?v3 A_stream_stream$ ))(=> (and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$c ?v2 ?v1 )(member$n ?v3 (streams$a ?v1 ))))false )))false )):named a325 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(=> (and (member$o ?v0 (streams$b ?v1 ))(forall ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream_stream$ ))(=> (and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$o ?v3 (streams$b ?v1 ))))false )))false )):named a326 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$c ?v0 (streams$d ?v1 ))(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$d ?v2 ?v1 )(member$c ?v3 (streams$d ?v1 ))))false )))false )):named a327 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(=> (and (member$b ?v0 (streams$c ?v1 ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(=> (and (= ?v0 (sCons$a ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$b ?v3 (streams$c ?v1 ))))false )))false )):named a328 ))
(assert (! (forall ((?v0 A_treeFI_treeFI_stream$ )(?v1 A_treeFI_treeFI_set$ ))(= (member$m ?v0 (streams$ ?v1 ))(exists ((?v2 A_treeFI_treeFI$ )(?v3 A_treeFI_treeFI_stream$ ))(and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$m ?v3 (streams$ ?v1 ))))))):named a329 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(= (member$n ?v0 (streams$a ?v1 ))(exists ((?v2 A_stream$ )(?v3 A_stream_stream$ ))(and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$c ?v2 ?v1 )(member$n ?v3 (streams$a ?v1 ))))))):named a330 ))
(assert (! (forall ((?v0 A_treeFI_stream_stream$ )(?v1 A_treeFI_stream_set$ ))(= (member$o ?v0 (streams$b ?v1 ))(exists ((?v2 A_treeFI_stream$ )(?v3 A_treeFI_stream_stream$ ))(and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$b ?v2 ?v1 )(member$o ?v3 (streams$b ?v1 ))))))):named a331 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$c ?v0 (streams$d ?v1 ))(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$d ?v2 ?v1 )(member$c ?v3 (streams$d ?v1 ))))))):named a332 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ ))(= (member$b ?v0 (streams$c ?v1 ))(exists ((?v2 A_treeFI$ )(?v3 A_treeFI_stream$ ))(and (= ?v0 (sCons$a ?v2 ?v3 ))(and (member$ ?v2 ?v1 )(member$b ?v3 (streams$c ?v1 ))))))):named a333 ))
(assert (! (forall ((?v0 A_treeFI_treeFI$ )(?v1 A_treeFI_treeFI_stream$ )(?v2 A_treeFI_treeFI_set$ ))(= (member$m (sCons$b ?v0 ?v1 )(streams$ ?v2 ))(and (member$a ?v0 ?v2 )(member$m ?v1 (streams$ ?v2 ))))):named a334 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(= (member$n (sCons$c ?v0 ?v1 )(streams$a ?v2 ))(and (member$c ?v0 ?v2 )(member$n ?v1 (streams$a ?v2 ))))):named a335 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_stream_stream$ )(?v2 A_treeFI_stream_set$ ))(= (member$o (sCons$d ?v0 ?v1 )(streams$b ?v2 ))(and (member$b ?v0 ?v2 )(member$o ?v1 (streams$b ?v2 ))))):named a336 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_set$ ))(= (member$c (sCons$ ?v0 ?v1 )(streams$d ?v2 ))(and (member$d ?v0 ?v2 )(member$c ?v1 (streams$d ?v2 ))))):named a337 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_stream$ )(?v2 A_treeFI_set$ ))(= (member$b (sCons$a ?v0 ?v1 )(streams$c ?v2 ))(and (member$ ?v0 ?v2 )(member$b ?v1 (streams$c ?v2 ))))):named a338 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_stream_fun$ )(?v3 A_stream_set$ ))(=> (and (member$b ?v0 (streams$c ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 ?v1 )(member$c (fun_app$bg ?v2 ?v4 )?v3 ))))(member$n (smap$f ?v2 ?v0 )(streams$a ?v3 )))):named a339 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_treeFI_stream_fun$ )(?v3 A_treeFI_stream_set$ ))(=> (and (member$b ?v0 (streams$c ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 ?v1 )(member$b (fun_app$bh ?v2 ?v4 )?v3 ))))(member$o (smap$g ?v2 ?v0 )(streams$b ?v3 )))):named a340 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_fun$ )(?v3 A_set$ ))(=> (and (member$b ?v0 (streams$c ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 ?v1 )(member$d (fun_app$ah ?v2 ?v4 )?v3 ))))(member$c (smap$ ?v2 ?v0 )(streams$d ?v3 )))):named a341 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ )(?v2 A_a_fun$ )(?v3 A_set$ ))(=> (and (member$c ?v0 (streams$d ?v1 ))(forall ((?v4 A$ ))(=> (member$d ?v4 ?v1 )(member$d (fun_app$i ?v2 ?v4 )?v3 ))))(member$c (smap$a ?v2 ?v0 )(streams$d ?v3 )))):named a342 ))
(assert (! (forall ((?v0 A_treeFI_stream$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_treeFI_fun$ )(?v3 A_treeFI_set$ ))(=> (and (member$b ?v0 (streams$c ?v1 ))(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 ?v1 )(member$ (fun_app$ab ?v2 ?v4 )?v3 ))))(member$b (smap$c ?v2 ?v0 )(streams$c ?v3 )))):named a343 ))
(assert (! (forall ((?v0 A_treeFI_set$ )(?v1 A_treeFI_stream$ ))(= (fun_app$c (streamsp$ (uui$ ?v0 ))?v1 )(member$b ?v1 (streams$c ?v0 )))):named a344 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(! (=> (member$ ?v0 (set$ ?v1 ))(= (insert$a ?v0 ?v1 )?v1 )):pattern ((insert$a ?v0 ?v1 )))):named a345 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(! (=> (not (member$ ?v0 (set$ ?v1 )))(= (insert$a ?v0 ?v1 )(cons$ ?v0 ?v1 ))):pattern ((insert$a ?v0 ?v1 )))):named a346 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(= (set$ (insert$a ?v0 ?v1 ))(fun_app$bi (insert$ ?v0 )(set$ ?v1 )))):named a347 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (fun_app$aq (list_ex1$ ?v0 )?v1 )(exists ((?v2 A_treeFI$ ))(and (and (member$ ?v2 (set$ ?v1 ))(fun_app$ ?v0 ?v2 ))(forall ((?v3 A_treeFI$ ))(=> (and (member$ ?v3 (set$ ?v1 ))(fun_app$ ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a348 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_set$ ))(= (member$ ?v0 (fun_app$bi (insert$ ?v1 )?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a349 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (fun_app$bi (insert$ ?v2 )?v1 )))):named a350 ))
(assert (! (forall ((?v0 A_treeFI$ ))(member$ ?v0 (fun_app$bi (insert$ ?v0 )bot$d ))):named a351 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(! (= (set$ (cons$ ?v0 ?v1 ))(fun_app$bi (insert$ ?v0 )(set$ ?v1 ))):pattern ((cons$ ?v0 ?v1 )))):named a352 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(= (member$ ?v0 (fun_app$bi (insert$ ?v1 )bot$d ))(= ?v0 ?v1 ))):named a353 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ ))(=> (member$ ?v0 (fun_app$bi (insert$ ?v1 )bot$d ))(= ?v0 ?v1 ))):named a354 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ ))(= (fun_app$bi (insert$ ?v0 )?v1 )(collect$ (fun_app$h (uuw$ ?v0 )?v1 )))):named a355 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_set$ ))(=> (and (member$ ?v0 (fun_app$bi (insert$ ?v1 )?v2 ))(and (=> (= ?v0 ?v1 )false )(=> (member$ ?v0 ?v2 )false )))false )):named a356 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ ))(=> (and (member$ ?v0 ?v1 )(forall ((?v2 A_treeFI_set$ ))(=> (and (= ?v1 (fun_app$bi (insert$ ?v0 )?v2 ))(not (member$ ?v0 ?v2 )))false )))false )):named a357 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ ))(! (=> (member$ ?v0 ?v1 )(= (fun_app$bi (insert$ ?v0 )?v1 )?v1 )):pattern ((fun_app$bi (insert$ ?v0 )?v1 )))):named a358 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (fun_app$bi (insert$ ?v2 )?v1 )))):named a359 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ ))(=> (member$ ?v0 ?v1 )(exists ((?v2 A_treeFI_set$ ))(and (= ?v1 (fun_app$bi (insert$ ?v0 )?v2 ))(not (member$ ?v0 ?v2 )))))):named a360 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI$ )(?v3 A_treeFI_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v2 ?v3 )))(= (= (fun_app$bi (insert$ ?v0 )?v1 )(fun_app$bi (insert$ ?v2 )?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 A_treeFI_set$ ))(and (= ?v1 (fun_app$bi (insert$ ?v2 )?v4 ))(and (not (member$ ?v2 ?v4 ))(and (= ?v3 (fun_app$bi (insert$ ?v0 )?v4 ))(not (member$ ?v0 ?v4 )))))))))):named a361 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v0 ?v2 )))(= (= (fun_app$bi (insert$ ?v0 )?v1 )(fun_app$bi (insert$ ?v0 )?v2 ))(= ?v1 ?v2 )))):named a362 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ ))(member$ ?v0 (fun_app$bi (insert$ ?v0 )?v1 ))):named a363 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI$ )(?v2 A_treeFI_list$ ))(=> (member$ ?v0 (set$ (cons$ ?v1 ?v2 )))(or (= ?v0 ?v1 )(member$ ?v0 (set$ ?v2 ))))):named a364 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(=> (and (member$ ?v0 (set$ ?v1 ))(and (forall ((?v2 A_treeFI_list$ ))(=> (= ?v1 (cons$ ?v0 ?v2 ))false ))(forall ((?v2 A_treeFI$ )(?v3 A_treeFI_list$ ))(=> (and (= ?v1 (cons$ ?v2 ?v3 ))(member$ ?v0 (set$ ?v3 )))false ))))false )):named a365 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI$ ))(=> (member$ ?v0 (set$ ?v1 ))(member$ ?v0 (set$ (cons$ ?v2 ?v1 ))))):named a366 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(member$ ?v0 (set$ (cons$ ?v0 ?v1 )))):named a367 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_list$ ))(! (= (insert$a ?v0 ?v1 )(ite (member$ ?v0 (set$ ?v1 ))?v1 (cons$ ?v0 ?v1 ))):pattern ((insert$a ?v0 ?v1 )))):named a368 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_list$ ))(= (can_select$ ?v0 (set$ ?v1 ))(fun_app$aq (list_ex1$ ?v0 )?v1 ))):named a369 ))
(assert (! (forall ((?v0 A_treeFI_list$ ))(= (set$ ?v0 )(rec_list$ bot$d uux$ ?v0 ))):named a370 ))
(assert (! (forall ((?v0 A_treeFI_list$ )(?v1 A_treeFI_list$ )(?v2 A_treeFI_bool_fun$ )(?v3 A_treeFI_bool_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 A_treeFI$ ))(=> (member$ ?v4 (set$ ?v1 ))(= (fun_app$ ?v2 ?v4 )(fun_app$ ?v3 ?v4 )))))(= (fun_app$aq (pred_list$ ?v2 )?v0 )(fun_app$aq (pred_list$ ?v3 )?v1 )))):named a371 ))
(assert (! (forall ((?v0 A_treeFI_bool_fun$ )(?v1 A_treeFI_set$ ))(= (can_select$ ?v0 ?v1 )(exists ((?v2 A_treeFI$ ))(and (and (member$ ?v2 ?v1 )(fun_app$ ?v0 ?v2 ))(forall ((?v3 A_treeFI$ ))(=> (and (member$ ?v3 ?v1 )(fun_app$ ?v0 ?v3 ))(= ?v3 ?v2 ))))))):named a372 ))
(assert (! (forall ((?v0 A$ )(?v1 A_treeFI_list$ ))(! (= (fun_app$ae set_treeFI$d (tree$ ?v0 ?v1 ))(insert$b ?v0 (supremum$ (set$ ?v1 )set_treeFI$d ))):pattern ((tree$ ?v0 ?v1 )))):named a373 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_treeFI_set_fun$ ))(= (member$ ?v0 (supremum$a ?v1 ?v2 ))(exists ((?v3 A_treeFI$ ))(and (member$ ?v3 ?v1 )(member$ ?v0 (fun_app$bj ?v2 ?v3 )))))):named a374 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI$ )(?v3 A_treeFI_a_treeFI_set_fun$ ))(=> (and (member$ ?v0 ?v1 )(member$ ?v2 (fun_app$bj ?v3 ?v0 )))(member$ ?v2 (supremum$a ?v1 ?v3 )))):named a375 ))
(assert (! (forall ((?v0 A_treeFI$ )(?v1 A_treeFI_set$ )(?v2 A_treeFI_a_treeFI_set_fun$ ))(=> (and (member$ ?v0 (supremum$a ?v1 ?v2 ))(forall ((?v3 A_treeFI$ ))(=> (and (member$ ?v3 ?v1 )(member$ ?v0 (fun_app$bj ?v2 ?v3 )))false )))false )):named a376 ))
(assert (! (forall ((?v0 A_treeFI$ ))(= (the_elem$ (set$ (cons$ ?v0 nil$ )))?v0 )):named a377 ))
(assert (! (forall ((?v0 A_treeFI_list$ ))(= (= (set$ ?v0 )bot$d )(= ?v0 nil$ ))):named a378 ))
(assert (! (forall ((?v0 A_treeFI_list$ ))(= (= bot$d (set$ ?v0 ))(= ?v0 nil$ ))):named a379 ))
(assert (! (= bot$d (set$ nil$ )):named a380 ))
(check-sat )
(get-unsat-core )
