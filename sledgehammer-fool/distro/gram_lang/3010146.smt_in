(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_T_N_sum_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort N_T_N_sum_set_fun$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort Dtree_set_N_set_fun$ 0 )
(declare-sort N_set_dtree_set_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_fun_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort T_N_sum_set_T_set_fun$ 0 )
(declare-sort Dtree_set_dtree_set_fun$ 0 )
(declare-sort N_N_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_fun_N_N_fun_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_set_T_set_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_N_sum_N_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_N_sum_fun$ 0 )
(declare-sort N_N_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort N_dtree_fun_N_dtree_fun_fun$ 0 )
(declare-sort N_dtree_sum_dtree_N_sum_fun$ 0 )
(declare-sort T_N_sum_set_T_N_sum_set_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_T_fun_T_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_N_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_N_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_N_dtree_sum_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_N_sum_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_N_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort T_T_N_sum_fun_T_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_set_T_N_sum_set_fun$ 0 )
(declare-sort N_T_N_sum_set_fun_N_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_dtree_dtree_fun_fun$ 0 )
(declare-sort Dtree_dtree_sum_dtree_dtree_sum_fun$ 0 )
(declare-sort T_T_N_sum_fun_T_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_fun_T_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_set_T_dtree_sum_set_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-sort T_N_sum$ 0)
(declare-sort Dtree_dtree_sum$ 0)
(declare-sort N_N_sum$ 0)
(declare-sort Dtree_N_sum$ 0)
(declare-sort N_dtree_sum$ 0)
(declare-sort T_T_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun projl$a (T_N_sum$)T$)
(declare-fun inl$a (T$ )T_N_sum$)
(declare-fun projr$a (T_N_sum$)N$)
(declare-fun inr$a (N$ )T_N_sum$)
(declare-fun projl$b (Dtree_dtree_sum$)Dtree$)
(declare-fun inl$b (Dtree$ )Dtree_dtree_sum$)
(declare-fun projr$b (Dtree_dtree_sum$)Dtree$)
(declare-fun inr$b (Dtree$ )Dtree_dtree_sum$)
(declare-fun projl$c (N_N_sum$)N$)
(declare-fun inl$c (N$ )N_N_sum$)
(declare-fun projr$c (N_N_sum$)N$)
(declare-fun inr$c (N$ )N_N_sum$)
(declare-fun projl$d (Dtree_N_sum$)Dtree$)
(declare-fun inl$d (Dtree$ )Dtree_N_sum$)
(declare-fun projr$d (Dtree_N_sum$)N$)
(declare-fun inr$d (N$ )Dtree_N_sum$)
(declare-fun projl$e (N_dtree_sum$)N$)
(declare-fun inl$e (N$ )N_dtree_sum$)
(declare-fun projr$e (N_dtree_sum$)Dtree$)
(declare-fun inr$e (Dtree$ )N_dtree_sum$)
(declare-fun projl$f (T_T_sum$)T$)
(declare-fun inl$f (T$ )T_T_sum$)
(declare-fun projr$f (T_T_sum$)T$)
(declare-fun inr$f (T$ )T_T_sum$)
(declare-fun h$ (Dtree$ )N_dtree_fun$ )
(declare-fun n$ ()N$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun uu$ ()T_T_dtree_sum_fun$ )
(declare-fun h_c$ (Dtree$ )N_T_N_sum_set_fun$ )
(declare-fun h_r$ (Dtree$ )N_N_fun$ )
(declare-fun id$a ()T_set_T_set_fun$ )
(declare-fun id$b ()Dtree_dtree_fun$ )
(declare-fun id$c ()T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun id$d ()T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun id$e ()N_N_fun$ )
(declare-fun id$f ()T_T_sum_T_T_sum_fun$ )
(declare-fun tr0$ ()Dtree$ )
(declare-fun uua$ ()T_T_N_sum_fun$ )
(declare-fun comp$ (N_dtree_fun$ )Dtree_N_fun_dtree_dtree_fun_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun pick$ (Dtree$ )N_dtree_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun comp$a (Dtree_N_fun$ )Dtree_dtree_fun_dtree_N_fun_fun$ )
(declare-fun comp$b (N_N_fun$ )Dtree_N_fun_dtree_N_fun_fun$ )
(declare-fun comp$c (Dtree_N_fun$ )N_dtree_fun_N_N_fun_fun$ )
(declare-fun comp$d (Dtree_dtree_fun$ )Dtree_dtree_fun_dtree_dtree_fun_fun$ )
(declare-fun comp$e (Dtree_dtree_fun$ )N_dtree_fun_N_dtree_fun_fun$ )
(declare-fun comp$f (N_dtree_fun$ )N_N_fun_N_dtree_fun_fun$ )
(declare-fun comp$g (T_N_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$h (T_N_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$i (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun comp$j (T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun comp$k (N_set_dtree_set_fun$ Dtree_set_N_set_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun comp$l (Dtree_set_dtree_set_fun$ N_set_dtree_set_fun$ )N_set_dtree_set_fun$ )
(declare-fun comp$m (T_set_T_set_fun$ T_dtree_sum_set_T_set_fun$ )T_dtree_sum_set_T_set_fun$ )
(declare-fun comp$n (T_T_dtree_sum_fun$ )T_T_fun_T_T_dtree_sum_fun_fun$ )
(declare-fun comp$o (T_set_T_set_fun$ T_N_sum_set_T_set_fun$ )T_N_sum_set_T_set_fun$ )
(declare-fun comp$p (T_T_N_sum_fun$ )T_T_fun_T_T_N_sum_fun_fun$ )
(declare-fun comp$q (T_dtree_sum_set_T_set_fun$ T_dtree_sum_set_T_dtree_sum_set_fun$ )T_dtree_sum_set_T_set_fun$ )
(declare-fun comp$r (T_dtree_sum_T_dtree_sum_fun$ )T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$ )
(declare-fun comp$s (T_dtree_sum_set_T_set_fun$ T_N_sum_set_T_dtree_sum_set_fun$ )T_N_sum_set_T_set_fun$ )
(declare-fun comp$t (T_dtree_sum_T_N_sum_fun$ )T_T_dtree_sum_fun_T_T_N_sum_fun_fun$ )
(declare-fun comp$u (T_N_sum_set_T_set_fun$ T_dtree_sum_set_T_N_sum_set_fun$ )T_dtree_sum_set_T_set_fun$ )
(declare-fun comp$v (T_N_sum_T_dtree_sum_fun$ )T_T_N_sum_fun_T_T_dtree_sum_fun_fun$ )
(declare-fun comp$w (T_N_sum_set_T_set_fun$ T_N_sum_set_T_N_sum_set_fun$ )T_N_sum_set_T_set_fun$ )
(declare-fun comp$x (T_N_sum_T_N_sum_fun$ )T_T_N_sum_fun_T_T_N_sum_fun_fun$ )
(declare-fun comp$y (N_N_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum_N_N_sum_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun comp$z (N_dtree_sum_dtree_N_sum_fun$ Dtree_dtree_sum_N_dtree_sum_fun$ )Dtree_dtree_sum_dtree_N_sum_fun$ )
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun comp$aa (Dtree_N_sum_N_dtree_sum_fun$ Dtree_dtree_sum_dtree_N_sum_fun$ )Dtree_dtree_sum_N_dtree_sum_fun$ )
(declare-fun comp$ab (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum_dtree_dtree_sum_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun comp$ac (T_T_fun$ )T_T_fun_T_T_fun_fun$ )
(declare-fun hsubst$ (Dtree$ )Dtree_dtree_fun$ )
(declare-fun image$a (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$b (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$c (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun image$d (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$e (N_dtree_fun$ N_set$ )Dtree_set$ )
(declare-fun image$f (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun image$g (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun unfold$ (N_N_fun$ )N_T_N_sum_set_fun_N_dtree_fun_fun$ )
(declare-fun vimage$ (T_T_dtree_sum_fun$ )T_dtree_sum_set_T_set_fun$ )
(declare-fun fun_app$ (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun map_sum$ (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun member$a (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$b (T$ T_set$ )Bool )
(declare-fun vimage$a (T_T_N_sum_fun$ )T_N_sum_set_T_set_fun$ )
(declare-fun vimage$b (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun vimage$c (Dtree_N_fun$ )N_set_dtree_set_fun$ )
(declare-fun vimage$d (N_dtree_fun$ )Dtree_set_N_set_fun$ )
(declare-fun vimage$e (Dtree_dtree_fun$ )Dtree_set_dtree_set_fun$ )
(declare-fun vimage$f (T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_dtree_sum_set_fun$ )
(declare-fun vimage$g (T_dtree_sum_T_N_sum_fun$ )T_N_sum_set_T_dtree_sum_set_fun$ )
(declare-fun vimage$h (T_N_sum_T_dtree_sum_fun$ )T_dtree_sum_set_T_N_sum_set_fun$ )
(declare-fun vimage$i (T_N_sum_T_N_sum_fun$ )T_N_sum_set_T_N_sum_set_fun$ )
(declare-fun fun_app$a (T_T_N_sum_fun$ T$ )T_N_sum$ )
(declare-fun fun_app$b (T_dtree_sum_set_T_set_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun fun_app$c (T_dtree_sum_set_T_dtree_sum_set_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$d (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$e (Dtree_N_fun_dtree_dtree_fun_fun$ Dtree_N_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$f (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$g (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$h (N_N_fun$ N$ )N$ )
(declare-fun fun_app$i (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$j (T_N_sum_set_T_set_fun$ T_N_sum_set$ )T_set$ )
(declare-fun fun_app$k (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$l (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$m (Dtree_dtree_fun_dtree_N_fun_fun$ Dtree_dtree_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$n (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$o (T_T_fun$ T$ )T$ )
(declare-fun fun_app$p (N_T_N_sum_set_fun$ N$ )T_N_sum_set$ )
(declare-fun fun_app$q (Dtree_N_fun_dtree_N_fun_fun$ Dtree_N_fun$ )Dtree_N_fun$ )
(declare-fun fun_app$r (N_dtree_fun_N_N_fun_fun$ N_dtree_fun$ )N_N_fun$ )
(declare-fun fun_app$s (Dtree_dtree_fun_dtree_dtree_fun_fun$ Dtree_dtree_fun$ )Dtree_dtree_fun$ )
(declare-fun fun_app$t (N_dtree_fun_N_dtree_fun_fun$ N_dtree_fun$ )N_dtree_fun$ )
(declare-fun fun_app$u (N_N_fun_N_dtree_fun_fun$ N_N_fun$ )N_dtree_fun$ )
(declare-fun fun_app$v (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$w (T_dtree_sum_T_N_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_N_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$x (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_dtree_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$y (T_dtree_sum_T_dtree_sum_fun_T_dtree_sum_T_N_sum_fun_fun$ T_dtree_sum_T_dtree_sum_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$z (T_T_fun_T_T_dtree_sum_fun_fun$ T_T_fun$ )T_T_dtree_sum_fun$ )
(declare-fun map_sum$a (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$b (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$c (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$d (N_dtree_fun$ N_dtree_fun$ )N_N_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$e (Dtree_N_fun$ Dtree_N_fun$ )Dtree_dtree_sum_N_N_sum_fun$ )
(declare-fun map_sum$f (Dtree_dtree_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_dtree_dtree_sum_fun$ )
(declare-fun map_sum$g (N_dtree_fun$ Dtree_N_fun$ )N_dtree_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$h (Dtree_N_fun$ Dtree_dtree_fun$ )Dtree_dtree_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$i (Dtree_dtree_fun$ Dtree_N_fun$ )Dtree_dtree_sum_dtree_N_sum_fun$ )
(declare-fun map_sum$j (Dtree_N_fun$ N_dtree_fun$ )Dtree_N_sum_N_dtree_sum_fun$ )
(declare-fun map_sum$k (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun fun_app$aa (T_T_fun_T_T_N_sum_fun_fun$ T_T_fun$ )T_T_N_sum_fun$ )
(declare-fun fun_app$ab (T_T_dtree_sum_fun_T_T_dtree_sum_fun_fun$ T_T_dtree_sum_fun$ )T_T_dtree_sum_fun$ )
(declare-fun fun_app$ac (T_T_dtree_sum_fun_T_T_N_sum_fun_fun$ T_T_dtree_sum_fun$ )T_T_N_sum_fun$ )
(declare-fun fun_app$ad (T_T_N_sum_fun_T_T_dtree_sum_fun_fun$ T_T_N_sum_fun$ )T_T_dtree_sum_fun$ )
(declare-fun fun_app$ae (T_T_N_sum_fun_T_T_N_sum_fun_fun$ T_T_N_sum_fun$ )T_T_N_sum_fun$ )
(declare-fun fun_app$af (N_set_dtree_set_fun$ N_set$ )Dtree_set$ )
(declare-fun fun_app$ag (Dtree_set_N_set_fun$ Dtree_set$ )N_set$ )
(declare-fun fun_app$ah (Dtree_set_dtree_set_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun fun_app$ai (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$aj (T_N_sum_set_T_dtree_sum_set_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun fun_app$ak (T_dtree_sum_set_T_N_sum_set_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun fun_app$al (T_N_sum_set_T_N_sum_set_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun fun_app$am (T_T_fun_T_T_fun_fun$ T_T_fun$ )T_T_fun$ )
(declare-fun fun_app$an (N_N_sum_dtree_dtree_sum_fun$ N_N_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$ao (Dtree_dtree_sum_N_N_sum_fun$ Dtree_dtree_sum$ )N_N_sum$ )
(declare-fun fun_app$ap (Dtree_dtree_sum_dtree_dtree_sum_fun$ Dtree_dtree_sum$ )Dtree_dtree_sum$ )
(declare-fun fun_app$aq (N_dtree_sum_dtree_N_sum_fun$ N_dtree_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$ar (Dtree_dtree_sum_N_dtree_sum_fun$ Dtree_dtree_sum$ )N_dtree_sum$ )
(declare-fun fun_app$as (Dtree_dtree_sum_dtree_N_sum_fun$ Dtree_dtree_sum$ )Dtree_N_sum$ )
(declare-fun fun_app$at (Dtree_N_sum_N_dtree_sum_fun$ Dtree_N_sum$ )N_dtree_sum$ )
(declare-fun fun_app$au (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$av (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$aw (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$ax (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$ay (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$az (N_T_N_sum_set_fun_N_dtree_fun_fun$ N_T_N_sum_set_fun$ )N_dtree_fun$ )
(declare-fun fun_app$ba (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$bb (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$ uu$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$a uua$ ?v0 )(inl$a ?v0 )):pattern ((fun_app$a uua$ ?v0 )))):named a1 ))
(assert (! (not (= (fun_app$b (vimage$ uu$ )(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(fun_app$e (comp$ (h$ tr0$ ))root$ )))(cont$ (fun_app$f (pick$ tr0$ )n$ ))))(fun_app$b (vimage$ uu$ )(cont$ (fun_app$f (pick$ tr0$ )n$ ))))):named a2 ))
(assert (! (forall ((?v0 N$ ))(= (fun_app$g root$ (fun_app$f (h$ tr0$ )?v0 ))(fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 )))):named a3 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$h (h_r$ tr0$ )?v0 )(fun_app$g root$ (fun_app$f (pick$ tr0$ )?v0 ))):pattern ((fun_app$h (h_r$ tr0$ )?v0 )))):named a4 ))
(assert (! (forall ((?v0 N$ ))(= (cont$ (fun_app$f (h$ tr0$ )?v0 ))(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(fun_app$e (comp$ (h$ tr0$ ))root$ )))(cont$ (fun_app$f (pick$ tr0$ )?v0 ))))):named a5 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (cont$ (fun_app$f (h$ ?v0 )?v1 ))(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(fun_app$e (comp$ (h$ ?v0 ))root$ )))(cont$ (fun_app$f (pick$ ?v0 )?v1 ))))):named a6 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(= (fun_app$g root$ (fun_app$f (h$ ?v0 )?v1 ))(fun_app$g root$ (fun_app$f (pick$ ?v0 )?v1 )))):named a7 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 T_N_sum_set$ ))(= (fun_app$b (vimage$ uu$ )(image$a (fun_app$i (map_sum$a id$ )?v0 )?v1 ))(fun_app$j (vimage$a uua$ )?v1 ))):named a8 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 T_N_sum_set$ ))(= (fun_app$j (vimage$a uua$ )(image$b (fun_app$k (map_sum$b id$ )?v0 )?v1 ))(fun_app$j (vimage$a uua$ )?v1 ))):named a9 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$b (vimage$ uu$ )(fun_app$c (image$ (fun_app$d (map_sum$ id$ )?v0 ))?v1 ))(fun_app$b (vimage$ uu$ )?v1 ))):named a10 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$j (vimage$a uua$ )(image$c (fun_app$l (map_sum$c id$ )?v0 )?v1 ))(fun_app$b (vimage$ uu$ )?v1 ))):named a11 ))
(assert (! (forall ((?v0 T$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(= (member$ (inl$ ?v0 )(image$a (fun_app$i (map_sum$a id$ )?v1 )?v2 ))(member$a (inl$a ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 T$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$a (inl$a ?v0 )(image$b (fun_app$k (map_sum$b id$ )?v1 )?v2 ))(member$a (inl$a ?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ (inl$ ?v0 )(fun_app$c (image$ (fun_app$d (map_sum$ id$ )?v1 ))?v2 ))(member$ (inl$ ?v0 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a (inl$a ?v0 )(image$c (fun_app$l (map_sum$c id$ )?v1 )?v2 ))(member$ (inl$ ?v0 )?v2 ))):named a15 ))
(assert (! (= (vimage$b id$ )id$a ):named a16 ))
(assert (! (forall ((?v0 Dtree_N_fun$ ))(= (fun_app$m (comp$a ?v0 )id$b )?v0 )):named a17 ))
(assert (! (= (image$d id$ )id$a ):named a18 ))
(assert (! (= (image$ id$c )id$d ):named a19 ))
(assert (! (forall ((?v0 T$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(=> (member$ (inl$ ?v0 )(image$a (fun_app$i (map_sum$a id$ )?v1 )?v2 ))(member$a (inl$a ?v0 )?v2 ))):named a20 ))
(assert (! (forall ((?v0 T$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(=> (member$a (inl$a ?v0 )(image$b (fun_app$k (map_sum$b id$ )?v1 )?v2 ))(member$a (inl$a ?v0 )?v2 ))):named a21 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (inl$ ?v0 )(fun_app$c (image$ (fun_app$d (map_sum$ id$ )?v1 ))?v2 ))(member$ (inl$ ?v0 )?v2 ))):named a22 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$a (inl$a ?v0 )(image$c (fun_app$l (map_sum$c id$ )?v1 )?v2 ))(member$ (inl$ ?v0 )?v2 ))):named a23 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (cont$ (fun_app$n (hsubst$ ?v1 )?v0 ))(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(hsubst$ ?v1 )))(cont$ ?v1 ))))):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 )))(= (cont$ (fun_app$n (hsubst$ ?v1 )?v0 ))(fun_app$c (image$ (fun_app$d (map_sum$ id$ )(hsubst$ ?v1 )))(cont$ ?v0 ))))):named a25 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a26 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a27 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$n (fun_app$e (comp$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$e (comp$ ?v0 )?v1 )?v2 )))):named a30 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$m (comp$a ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$m (comp$a ?v0 )?v1 )?v2 )))):named a31 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$o id$ ?v0 )?v0 ):pattern ((fun_app$o id$ ?v0 )))):named a32 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$m (comp$a root$ )(hsubst$ ?v0 ))root$ )):named a33 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (fun_app$g root$ (fun_app$n (hsubst$ ?v0 )?v1 ))(fun_app$g root$ ?v1 ))):named a34 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (not (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 )))(= (fun_app$b (vimage$ uu$ )(cont$ (fun_app$n (hsubst$ ?v1 )?v0 )))(fun_app$b (vimage$ uu$ )(cont$ ?v0 ))))):named a35 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (fun_app$b (vimage$ uu$ )(cont$ (fun_app$n (hsubst$ ?v1 )?v0 )))(fun_app$b (vimage$ uu$ )(cont$ ?v1 ))))):named a36 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$p (h_c$ tr0$ )?v0 )(image$c (fun_app$l (map_sum$c id$ )root$ )(cont$ (fun_app$f (pick$ tr0$ )?v0 )))):pattern ((fun_app$p (h_c$ tr0$ )?v0 )))):named a37 ))
(assert (! (forall ((?v0 Dtree$ ))(= (fun_app$j (vimage$a uua$ )(image$c (fun_app$l (map_sum$c id$ )root$ )(cont$ ?v0 )))(fun_app$b (vimage$ uu$ )(cont$ ?v0 )))):named a38 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (fun_app$n (hsubst$ ?v1 )?v0 )(fun_app$n (hsubst$ ?v1 )?v1 )))):named a39 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )?v2 )(= (fun_app$f ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$n ?v2 ?v3 )))):named a40 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$m (comp$a ?v0 )?v1 )?v2 )(= (fun_app$g ?v0 (fun_app$n ?v1 ?v3 ))(fun_app$g ?v2 ?v3 )))):named a41 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$g ?v3 ?v4 ))))):named a42 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree$ ))(=> (= (fun_app$m (comp$a ?v0 )?v1 )(fun_app$m (comp$a ?v2 )?v3 ))(= (fun_app$g ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$g ?v2 (fun_app$n ?v3 ?v4 ))))):named a43 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v4 ))(fun_app$f ?v2 (fun_app$g ?v3 ?v4 ))))false ))false )):named a44 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(=> (and (= (fun_app$m (comp$a ?v0 )?v1 )(fun_app$m (comp$a ?v2 )?v3 ))(=> (forall ((?v4 Dtree$ ))(= (fun_app$g ?v0 (fun_app$n ?v1 ?v4 ))(fun_app$g ?v2 (fun_app$n ?v3 ?v4 ))))false ))false )):named a45 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$n (fun_app$e (comp$ ?v0 )?v1 )?v2 )(fun_app$f ?v0 (fun_app$g ?v1 ?v2 ))):pattern ((fun_app$n (fun_app$e (comp$ ?v0 )?v1 )?v2 )))):named a46 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (fun_app$m (comp$a ?v0 )?v1 )?v2 )(fun_app$g ?v0 (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$g (fun_app$m (comp$a ?v0 )?v1 )?v2 )))):named a47 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$q (comp$b (fun_app$r (comp$c ?v0 )?v1 ))?v2 )(fun_app$m (comp$a ?v0 )(fun_app$e (comp$ ?v1 )?v2 )))):named a48 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$s (comp$d (fun_app$e (comp$ ?v0 )?v1 ))?v2 )(fun_app$e (comp$ ?v0 )(fun_app$m (comp$a ?v1 )?v2 )))):named a49 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$e (comp$ (fun_app$t (comp$e ?v0 )?v1 ))?v2 )(fun_app$s (comp$d ?v0 )(fun_app$e (comp$ ?v1 )?v2 )))):named a50 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$e (comp$ (fun_app$u (comp$f ?v0 )?v1 ))?v2 )(fun_app$e (comp$ ?v0 )(fun_app$q (comp$b ?v1 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$a (fun_app$q (comp$b ?v0 )?v1 ))?v2 )(fun_app$q (comp$b ?v0 )(fun_app$m (comp$a ?v1 )?v2 )))):named a52 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$a (fun_app$m (comp$a ?v0 )?v1 ))?v2 )(fun_app$m (comp$a ?v0 )(fun_app$s (comp$d ?v1 )?v2 )))):named a53 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$s (comp$d ?v0 )(fun_app$e (comp$ ?v1 )?v2 ))(fun_app$e (comp$ (fun_app$t (comp$e ?v0 )?v1 ))?v2 ))):named a54 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$q (comp$b ?v0 )(fun_app$m (comp$a ?v1 )?v2 ))(fun_app$m (comp$a (fun_app$q (comp$b ?v0 )?v1 ))?v2 ))):named a55 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_N_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$e (comp$ ?v0 )(fun_app$q (comp$b ?v1 )?v2 ))(fun_app$e (comp$ (fun_app$u (comp$f ?v0 )?v1 ))?v2 ))):named a56 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$e (comp$ ?v0 )(fun_app$m (comp$a ?v1 )?v2 ))(fun_app$s (comp$d (fun_app$e (comp$ ?v0 )?v1 ))?v2 ))):named a57 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ ))(= (fun_app$m (comp$a ?v0 )(fun_app$s (comp$d ?v1 )?v2 ))(fun_app$m (comp$a (fun_app$m (comp$a ?v0 )?v1 ))?v2 ))):named a58 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ ))(= (fun_app$m (comp$a ?v0 )(fun_app$e (comp$ ?v1 )?v2 ))(fun_app$q (comp$b (fun_app$r (comp$c ?v0 )?v1 ))?v2 ))):named a59 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$o id$ ?v0 )?v0 ):pattern ((fun_app$o id$ ?v0 )))):named a60 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a61 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a62 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$h (h_r$ ?v0 )?v1 )(fun_app$g root$ (fun_app$f (pick$ ?v0 )?v1 ))):pattern ((fun_app$h (h_r$ ?v0 )?v1 )))):named a63 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_set$ ))(= (image$e ?v0 (image$f ?v1 ?v2 ))(image$g (fun_app$e (comp$ ?v0 )?v1 )?v2 ))):named a64 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_set$ ))(= (image$f ?v0 (image$g ?v1 ?v2 ))(image$f (fun_app$m (comp$a ?v0 )?v1 )?v2 ))):named a65 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$a ?v0 (image$c ?v1 ?v2 ))(fun_app$c (image$ (fun_app$v (comp$g ?v0 )?v1 ))?v2 ))):named a66 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$b ?v0 (image$c ?v1 ?v2 ))(image$c (fun_app$w (comp$h ?v0 )?v1 )?v2 ))):named a67 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$c (image$ ?v0 )(fun_app$c (image$ ?v1 )?v2 ))(fun_app$c (image$ (fun_app$x (comp$i ?v0 )?v1 ))?v2 ))):named a68 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (image$c ?v0 (fun_app$c (image$ ?v1 )?v2 ))(image$c (fun_app$y (comp$j ?v0 )?v1 )?v2 ))):named a69 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$s (comp$d id$b )?v2 ))(= (fun_app$f ?v0 (fun_app$g ?v1 ?v3 ))(fun_app$n ?v2 ?v3 )))):named a70 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree$ ))(=> (= (fun_app$m (comp$a ?v0 )?v1 )(fun_app$q (comp$b id$e )?v2 ))(= (fun_app$g ?v0 (fun_app$n ?v1 ?v3 ))(fun_app$g ?v2 ?v3 )))):named a71 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ ))(= (comp$k (vimage$c ?v0 )(vimage$d ?v1 ))(vimage$e (fun_app$e (comp$ ?v1 )?v0 )))):named a72 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ ))(= (comp$l (vimage$e ?v0 )(vimage$c ?v1 ))(vimage$c (fun_app$m (comp$a ?v1 )?v0 )))):named a73 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_dtree_sum_fun$ ))(= (comp$m (vimage$b ?v0 )(vimage$ ?v1 ))(vimage$ (fun_app$z (comp$n ?v1 )?v0 )))):named a74 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_N_sum_fun$ ))(= (comp$o (vimage$b ?v0 )(vimage$a ?v1 ))(vimage$a (fun_app$aa (comp$p ?v1 )?v0 )))):named a75 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ ))(= (comp$q (vimage$ ?v0 )(vimage$f ?v1 ))(vimage$ (fun_app$ab (comp$r ?v1 )?v0 )))):named a76 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ ))(= (comp$s (vimage$ ?v0 )(vimage$g ?v1 ))(vimage$a (fun_app$ac (comp$t ?v1 )?v0 )))):named a77 ))
(assert (! (forall ((?v0 T_T_N_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ ))(= (comp$u (vimage$a ?v0 )(vimage$h ?v1 ))(vimage$ (fun_app$ad (comp$v ?v1 )?v0 )))):named a78 ))
(assert (! (forall ((?v0 T_T_N_sum_fun$ )(?v1 T_N_sum_T_N_sum_fun$ ))(= (comp$w (vimage$a ?v0 )(vimage$i ?v1 ))(vimage$a (fun_app$ae (comp$x ?v1 )?v0 )))):named a79 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (fun_app$af (vimage$c ?v0 )(fun_app$ag (vimage$d ?v1 )?v2 ))(fun_app$ah (vimage$e (fun_app$e (comp$ ?v1 )?v0 ))?v2 ))):named a80 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (fun_app$ah (vimage$e ?v0 )(fun_app$af (vimage$c ?v1 )?v2 ))(fun_app$af (vimage$c (fun_app$m (comp$a ?v1 )?v0 ))?v2 ))):named a81 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$ai (vimage$b ?v0 )(fun_app$b (vimage$ ?v1 )?v2 ))(fun_app$b (vimage$ (fun_app$z (comp$n ?v1 )?v0 ))?v2 ))):named a82 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$ai (vimage$b ?v0 )(fun_app$j (vimage$a ?v1 )?v2 ))(fun_app$j (vimage$a (fun_app$aa (comp$p ?v1 )?v0 ))?v2 ))):named a83 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$b (vimage$ ?v0 )(fun_app$c (vimage$f ?v1 )?v2 ))(fun_app$b (vimage$ (fun_app$ab (comp$r ?v1 )?v0 ))?v2 ))):named a84 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$b (vimage$ ?v0 )(fun_app$aj (vimage$g ?v1 )?v2 ))(fun_app$j (vimage$a (fun_app$ac (comp$t ?v1 )?v0 ))?v2 ))):named a85 ))
(assert (! (forall ((?v0 T_T_N_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$j (vimage$a ?v0 )(fun_app$ak (vimage$h ?v1 )?v2 ))(fun_app$b (vimage$ (fun_app$ad (comp$v ?v1 )?v0 ))?v2 ))):named a86 ))
(assert (! (forall ((?v0 T_T_N_sum_fun$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$j (vimage$a ?v0 )(fun_app$al (vimage$i ?v1 )?v2 ))(fun_app$j (vimage$a (fun_app$ae (comp$x ?v1 )?v0 ))?v2 ))):named a87 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_set$ ))(= (fun_app$af (vimage$c ?v0 )(fun_app$ag (vimage$d ?v1 )?v2 ))(fun_app$ah (vimage$e (fun_app$e (comp$ ?v1 )?v0 ))?v2 ))):named a88 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_set$ ))(= (fun_app$ah (vimage$e ?v0 )(fun_app$af (vimage$c ?v1 )?v2 ))(fun_app$af (vimage$c (fun_app$m (comp$a ?v1 )?v0 ))?v2 ))):named a89 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$ai (vimage$b ?v0 )(fun_app$b (vimage$ ?v1 )?v2 ))(fun_app$b (vimage$ (fun_app$z (comp$n ?v1 )?v0 ))?v2 ))):named a90 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$ai (vimage$b ?v0 )(fun_app$j (vimage$a ?v1 )?v2 ))(fun_app$j (vimage$a (fun_app$aa (comp$p ?v1 )?v0 ))?v2 ))):named a91 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$b (vimage$ ?v0 )(fun_app$c (vimage$f ?v1 )?v2 ))(fun_app$b (vimage$ (fun_app$ab (comp$r ?v1 )?v0 ))?v2 ))):named a92 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$b (vimage$ ?v0 )(fun_app$aj (vimage$g ?v1 )?v2 ))(fun_app$j (vimage$a (fun_app$ac (comp$t ?v1 )?v0 ))?v2 ))):named a93 ))
(assert (! (forall ((?v0 T_T_N_sum_fun$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (fun_app$j (vimage$a ?v0 )(fun_app$ak (vimage$h ?v1 )?v2 ))(fun_app$b (vimage$ (fun_app$ad (comp$v ?v1 )?v0 ))?v2 ))):named a94 ))
(assert (! (forall ((?v0 T_T_N_sum_fun$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (fun_app$j (vimage$a ?v0 )(fun_app$al (vimage$i ?v1 )?v2 ))(fun_app$j (vimage$a (fun_app$ae (comp$x ?v1 )?v0 ))?v2 ))):named a95 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$y (map_sum$d ?v0 ?v1 )(map_sum$e ?v2 ?v3 ))(map_sum$f (fun_app$e (comp$ ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 )))):named a96 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$z (map_sum$g ?v0 ?v1 )(map_sum$h ?v2 ?v3 ))(map_sum$i (fun_app$e (comp$ ?v0 )?v2 )(fun_app$m (comp$a ?v1 )?v3 )))):named a97 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ ))(= (comp$aa (map_sum$j ?v0 ?v1 )(map_sum$i ?v2 ?v3 ))(map_sum$h (fun_app$m (comp$a ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 )))):named a98 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ ))(= (comp$ab (map_sum$e ?v0 ?v1 )(map_sum$f ?v2 ?v3 ))(map_sum$e (fun_app$m (comp$a ?v0 )?v2 )(fun_app$m (comp$a ?v1 )?v3 )))):named a99 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$v (comp$g (fun_app$i (map_sum$a ?v0 )?v1 ))(fun_app$l (map_sum$c ?v2 )?v3 ))(fun_app$d (map_sum$ (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$e (comp$ ?v1 )?v3 )))):named a100 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ ))(= (fun_app$w (comp$h (fun_app$k (map_sum$b ?v0 )?v1 ))(fun_app$l (map_sum$c ?v2 )?v3 ))(fun_app$l (map_sum$c (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$q (comp$b ?v1 )?v3 )))):named a101 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$x (comp$i (fun_app$d (map_sum$ ?v0 )?v1 ))(fun_app$d (map_sum$ ?v2 )?v3 ))(fun_app$d (map_sum$ (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$s (comp$d ?v1 )?v3 )))):named a102 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ ))(= (fun_app$y (comp$j (fun_app$l (map_sum$c ?v0 )?v1 ))(fun_app$d (map_sum$ ?v2 )?v3 ))(fun_app$l (map_sum$c (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$m (comp$a ?v1 )?v3 )))):named a103 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$an (map_sum$d ?v0 ?v1 )(fun_app$ao (map_sum$e ?v2 ?v3 )?v4 ))(fun_app$ap (map_sum$f (fun_app$e (comp$ ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a104 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$aq (map_sum$g ?v0 ?v1 )(fun_app$ar (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$as (map_sum$i (fun_app$e (comp$ ?v0 )?v2 )(fun_app$m (comp$a ?v1 )?v3 ))?v4 ))):named a105 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$at (map_sum$j ?v0 ?v1 )(fun_app$as (map_sum$i ?v2 ?v3 )?v4 ))(fun_app$ar (map_sum$h (fun_app$m (comp$a ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a106 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ao (map_sum$e ?v0 ?v1 )(fun_app$ap (map_sum$f ?v2 ?v3 )?v4 ))(fun_app$ao (map_sum$e (fun_app$m (comp$a ?v0 )?v2 )(fun_app$m (comp$a ?v1 )?v3 ))?v4 ))):named a107 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )(fun_app$av (fun_app$l (map_sum$c ?v2 )?v3 )?v4 ))(fun_app$aw (fun_app$d (map_sum$ (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a108 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )(fun_app$av (fun_app$l (map_sum$c ?v2 )?v3 )?v4 ))(fun_app$av (fun_app$l (map_sum$c (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$q (comp$b ?v1 )?v3 ))?v4 ))):named a109 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )(fun_app$aw (fun_app$d (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$aw (fun_app$d (map_sum$ (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$s (comp$d ?v1 )?v3 ))?v4 ))):named a110 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )(fun_app$aw (fun_app$d (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$av (fun_app$l (map_sum$c (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$m (comp$a ?v1 )?v3 ))?v4 ))):named a111 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$an (map_sum$d ?v0 ?v1 )(fun_app$ao (map_sum$e ?v2 ?v3 )?v4 ))(fun_app$ap (map_sum$f (fun_app$e (comp$ ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a112 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$aq (map_sum$g ?v0 ?v1 )(fun_app$ar (map_sum$h ?v2 ?v3 )?v4 ))(fun_app$as (map_sum$i (fun_app$e (comp$ ?v0 )?v2 )(fun_app$m (comp$a ?v1 )?v3 ))?v4 ))):named a113 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 N_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$at (map_sum$j ?v0 ?v1 )(fun_app$as (map_sum$i ?v2 ?v3 )?v4 ))(fun_app$ar (map_sum$h (fun_app$m (comp$a ?v0 )?v2 )(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a114 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_sum$ ))(= (fun_app$ao (map_sum$e ?v0 ?v1 )(fun_app$ap (map_sum$f ?v2 ?v3 )?v4 ))(fun_app$ao (map_sum$e (fun_app$m (comp$a ?v0 )?v2 )(fun_app$m (comp$a ?v1 )?v3 ))?v4 ))):named a115 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )(fun_app$av (fun_app$l (map_sum$c ?v2 )?v3 )?v4 ))(fun_app$aw (fun_app$d (map_sum$ (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$e (comp$ ?v1 )?v3 ))?v4 ))):named a116 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_N_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )(fun_app$av (fun_app$l (map_sum$c ?v2 )?v3 )?v4 ))(fun_app$av (fun_app$l (map_sum$c (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$q (comp$b ?v1 )?v3 ))?v4 ))):named a117 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )(fun_app$aw (fun_app$d (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$aw (fun_app$d (map_sum$ (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$s (comp$d ?v1 )?v3 ))?v4 ))):named a118 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_T_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 T_dtree_sum$ ))(= (fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )(fun_app$aw (fun_app$d (map_sum$ ?v2 )?v3 )?v4 ))(fun_app$av (fun_app$l (map_sum$c (fun_app$am (comp$ac ?v0 )?v2 ))(fun_app$m (comp$a ?v1 )?v3 ))?v4 ))):named a119 ))
(assert (! (= (map_sum$k id$ id$ )id$f ):named a120 ))
(assert (! (= (fun_app$d (map_sum$ id$ )id$b )id$c ):named a121 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$ay (map_sum$k id$ id$ )?v0 )?v0 )):named a122 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$aw (fun_app$d (map_sum$ id$ )id$b )?v0 )?v0 )):named a123 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum$ )(?v3 T$ ))(=> (= (fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )?v2 )(inl$ ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inl$a ?v4 ))(= (fun_app$o ?v0 ?v4 )?v3 ))))):named a124 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_N_sum$ )(?v3 T$ ))(=> (= (fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )?v2 )(inl$a ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inl$a ?v4 ))(= (fun_app$o ?v0 ?v4 )?v3 ))))):named a125 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum$ )(?v3 T$ ))(=> (= (fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )?v2 )(inl$ ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inl$ ?v4 ))(= (fun_app$o ?v0 ?v4 )?v3 ))))):named a126 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T$ ))(=> (= (fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )?v2 )(inl$a ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inl$ ?v4 ))(= (fun_app$o ?v0 ?v4 )?v3 ))))):named a127 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T$ ))(! (= (fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )(inl$a ?v2 ))(inl$ (fun_app$o ?v0 ?v2 ))):pattern ((fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )(inl$a ?v2 ))))):named a128 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T$ ))(! (= (fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )(inl$a ?v2 ))(inl$a (fun_app$o ?v0 ?v2 ))):pattern ((fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )(inl$a ?v2 ))))):named a129 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T$ ))(! (= (fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )(inl$ ?v2 ))(inl$ (fun_app$o ?v0 ?v2 ))):pattern ((fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )(inl$ ?v2 ))))):named a130 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T$ ))(! (= (fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )(inl$ ?v2 ))(inl$a (fun_app$o ?v0 ?v2 ))):pattern ((fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )(inl$ ?v2 ))))):named a131 ))
(assert (! (= (h$ tr0$ )(fun_app$az (unfold$ (h_r$ tr0$ ))(h_c$ tr0$ ))):named a132 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N$ ))(! (= (fun_app$p (h_c$ ?v0 )?v1 )(image$c (fun_app$l (map_sum$c id$ )root$ )(cont$ (fun_app$f (pick$ ?v0 )?v1 )))):pattern ((fun_app$p (h_c$ ?v0 )?v1 )))):named a133 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$ ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$b ?v1 (fun_app$b (vimage$ ?v0 )?v3 )))):named a134 ))
(assert (! (forall ((?v0 T_T_N_sum_fun$ )(?v1 T$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= (fun_app$a ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$b ?v1 (fun_app$j (vimage$a ?v0 )?v3 )))):named a135 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (fun_app$b (vimage$ ?v1 )?v2 ))(member$ (fun_app$ ?v1 ?v0 )?v2 ))):named a136 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$b ?v0 (fun_app$j (vimage$a ?v1 )?v2 ))(member$a (fun_app$a ?v1 ?v0 )?v2 ))):named a137 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$aw ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (fun_app$c (image$ ?v1 )?v3 )))):named a138 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$av ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$c ?v1 ?v3 )))):named a139 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ ))(= (fun_app$ad (comp$v (fun_app$i (map_sum$a ?v0 )?v1 ))uua$ )(fun_app$z (comp$n uu$ )?v0 ))):named a140 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ ))(= (fun_app$ae (comp$x (fun_app$k (map_sum$b ?v0 )?v1 ))uua$ )(fun_app$aa (comp$p uua$ )?v0 ))):named a141 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ ))(= (fun_app$ab (comp$r (fun_app$d (map_sum$ ?v0 )?v1 ))uu$ )(fun_app$z (comp$n uu$ )?v0 ))):named a142 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ ))(= (fun_app$ac (comp$t (fun_app$l (map_sum$c ?v0 )?v1 ))uu$ )(fun_app$aa (comp$p uua$ )?v0 ))):named a143 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 Bool )(?v3 T_N_sum$ )(?v4 T$ ))(= (fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )(ite ?v2 ?v3 (inl$a ?v4 )))(ite ?v2 (fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )?v3 )(inl$ (fun_app$o ?v0 ?v4 ))))):named a144 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 Bool )(?v3 T_N_sum$ )(?v4 T$ ))(= (fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )(ite ?v2 ?v3 (inl$a ?v4 )))(ite ?v2 (fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )?v3 )(inl$a (fun_app$o ?v0 ?v4 ))))):named a145 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Bool )(?v3 T_dtree_sum$ )(?v4 T$ ))(= (fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )(ite ?v2 ?v3 (inl$ ?v4 )))(ite ?v2 (fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )?v3 )(inl$ (fun_app$o ?v0 ?v4 ))))):named a146 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Bool )(?v3 T_dtree_sum$ )(?v4 T$ ))(= (fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )(ite ?v2 ?v3 (inl$ ?v4 )))(ite ?v2 (fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )?v3 )(inl$a (fun_app$o ?v0 ?v4 ))))):named a147 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_N_sum$ ))(= (fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )(ite ?v2 (inl$a ?v3 )?v4 ))(ite ?v2 (inl$ (fun_app$o ?v0 ?v3 ))(fun_app$au (fun_app$i (map_sum$a ?v0 )?v1 )?v4 )))):named a148 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_N_sum$ ))(= (fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )(ite ?v2 (inl$a ?v3 )?v4 ))(ite ?v2 (inl$a (fun_app$o ?v0 ?v3 ))(fun_app$ax (fun_app$k (map_sum$b ?v0 )?v1 )?v4 )))):named a149 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_dtree_sum$ ))(= (fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )(ite ?v2 (inl$ ?v3 )?v4 ))(ite ?v2 (inl$ (fun_app$o ?v0 ?v3 ))(fun_app$aw (fun_app$d (map_sum$ ?v0 )?v1 )?v4 )))):named a150 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_dtree_sum$ ))(= (fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )(ite ?v2 (inl$ ?v3 )?v4 ))(ite ?v2 (inl$a (fun_app$o ?v0 ?v3 ))(fun_app$av (fun_app$l (map_sum$c ?v0 )?v1 )?v4 )))):named a151 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$g root$ ?v0 )(fun_app$g root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a152 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_T_N_sum_set_fun$ )(?v2 N$ ))(= (fun_app$g root$ (fun_app$f (fun_app$az (unfold$ ?v0 )?v1 )?v2 ))(fun_app$h ?v0 ?v2 ))):named a153 ))
(assert (! (forall ((?v0 Dtree$ ))(! (= (h$ ?v0 )(fun_app$az (unfold$ (h_r$ ?v0 ))(h_c$ ?v0 ))):pattern ((h$ ?v0 )))):named a154 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (fun_app$c (image$ ?v1 )?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$aw ?v1 ?v3 )))))):named a155 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (image$c ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$av ?v1 ?v3 )))))):named a156 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$aw ?v2 ?v4 )(fun_app$aw ?v3 ?v4 )))))(= (fun_app$c (image$ ?v2 )?v0 )(fun_app$c (image$ ?v3 )?v1 )))):named a157 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$av ?v2 ?v4 )(fun_app$av ?v3 ?v4 )))))(= (image$c ?v2 ?v0 )(image$c ?v3 ?v1 )))):named a158 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (fun_app$c (image$ ?v0 )?v1 ))(fun_app$ba ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$ba ?v2 (fun_app$aw ?v0 ?v3 )))))):named a159 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$c ?v0 ?v1 ))(fun_app$bb ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$bb ?v2 (fun_app$av ?v0 ?v3 )))))):named a160 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (fun_app$c (image$ ?v0 )?v1 ))(fun_app$ba ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$ba ?v2 (fun_app$aw ?v0 ?v3 )))))):named a161 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$c ?v0 ?v1 ))(fun_app$bb ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$bb ?v2 (fun_app$av ?v0 ?v3 )))))):named a162 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$aw ?v3 ?v0 )))(member$ ?v2 (fun_app$c (image$ ?v3 )?v1 )))):named a163 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$av ?v3 ?v0 )))(member$a ?v2 (image$c ?v3 ?v1 )))):named a164 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$aw ?v2 ?v0 )(fun_app$c (image$ ?v2 )?v1 )))):named a165 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$a (fun_app$av ?v2 ?v0 )(image$c ?v2 ?v1 )))):named a166 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$s (comp$d ?v0 )?v1 )(fun_app$s (comp$d ?v2 )?v3 ))(= (fun_app$m (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$a (fun_app$m (comp$a ?v4 )?v0 ))?v1 )(fun_app$m (comp$a ?v5 )?v3 )))):named a167 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_N_fun$ )(?v5 N_N_fun$ ))(=> (and (= (fun_app$s (comp$d ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$r (comp$c ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$a (fun_app$m (comp$a ?v4 )?v0 ))?v1 )(fun_app$q (comp$b ?v5 )?v3 )))):named a168 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$q (comp$b ?v0 )?v1 )(fun_app$m (comp$a ?v2 )?v3 ))(= (fun_app$e (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$ (fun_app$u (comp$f ?v4 )?v0 ))?v1 )(fun_app$s (comp$d ?v5 )?v3 )))):named a169 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_dtree_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$s (comp$d ?v2 )?v3 ))(= (fun_app$m (comp$a ?v4 )?v2 )?v5 ))(= (fun_app$q (comp$b (fun_app$r (comp$c ?v4 )?v0 ))?v1 )(fun_app$m (comp$a ?v5 )?v3 )))):named a170 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$t (comp$e ?v4 )?v2 )?v5 ))(= (fun_app$e (comp$ (fun_app$t (comp$e ?v4 )?v0 ))?v1 )(fun_app$e (comp$ ?v5 )?v3 )))):named a171 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 N_dtree_fun$ )(?v5 N_dtree_fun$ ))(=> (and (= (fun_app$m (comp$a ?v0 )?v1 )(fun_app$q (comp$b ?v2 )?v3 ))(= (fun_app$u (comp$f ?v4 )?v2 )?v5 ))(= (fun_app$s (comp$d (fun_app$e (comp$ ?v4 )?v0 ))?v1 )(fun_app$e (comp$ ?v5 )?v3 )))):named a172 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_N_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$m (comp$a ?v0 )?v1 )(fun_app$m (comp$a ?v2 )?v3 ))(= (fun_app$q (comp$b ?v4 )?v2 )?v5 ))(= (fun_app$m (comp$a (fun_app$q (comp$b ?v4 )?v0 ))?v1 )(fun_app$m (comp$a ?v5 )?v3 )))):named a173 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 N_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$m (comp$a ?v0 )?v1 )(fun_app$m (comp$a ?v2 )?v3 ))(= (fun_app$e (comp$ ?v4 )?v2 )?v5 ))(= (fun_app$s (comp$d (fun_app$e (comp$ ?v4 )?v0 ))?v1 )(fun_app$s (comp$d ?v5 )?v3 )))):named a174 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$q (comp$b ?v0 )?v1 )(fun_app$m (comp$a ?v2 )?v3 ))(= (fun_app$s (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$q (comp$b ?v0 )(fun_app$m (comp$a ?v1 )?v4 ))(fun_app$m (comp$a ?v2 )?v5 )))):named a175 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 Dtree_N_fun$ )(?v2 N_dtree_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$e (comp$ ?v0 )?v1 )(fun_app$e (comp$ ?v2 )?v3 ))(= (fun_app$m (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$e (comp$ ?v0 )(fun_app$m (comp$a ?v1 )?v4 ))(fun_app$e (comp$ ?v2 )?v5 )))):named a176 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 N_N_fun$ )(?v3 Dtree_N_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_N_fun$ ))(=> (and (= (fun_app$m (comp$a ?v0 )?v1 )(fun_app$q (comp$b ?v2 )?v3 ))(= (fun_app$m (comp$a ?v3 )?v4 )?v5 ))(= (fun_app$m (comp$a ?v0 )(fun_app$s (comp$d ?v1 )?v4 ))(fun_app$q (comp$b ?v2 )?v5 )))):named a177 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree_N_fun$ )(?v3 Dtree_dtree_fun$ )(?v4 Dtree_dtree_fun$ )(?v5 Dtree_dtree_fun$ ))(=> (and (= (fun_app$m (comp$a ?v0 )?v1 )(fun_app$m (comp$a ?v2 )?v3 ))(= (fun_app$s (comp$d ?v3 )?v4 )?v5 ))(= (fun_app$m (comp$a ?v0 )(fun_app$s (comp$d ?v1 )?v4 ))(fun_app$m (comp$a ?v2 )?v5 )))):named a178 ))
(check-sat )
(get-unsat-core )
