(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort T_T_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort T_N_sum_N_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort N_set_N_set_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort T_set_set_T_set_set_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort N_N_fun_T_N_sum_T_N_sum_fun_fun$ 0 )
(declare-sort Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ 0 )
(declare-sort N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-sort T_N_sum$ 0)
(declare-sort T_T_sum$ 0)
(declare-sort T_T_set_sum$ 0)
(declare-sort T_set_T_sum$ 0)
(declare-sort T_set_T_set_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun projl$a (T_N_sum$)T$)
(declare-fun inl$a (T$ )T_N_sum$)
(declare-fun projr$a (T_N_sum$)N$)
(declare-fun inr$a (N$ )T_N_sum$)
(declare-fun projl$b (T_T_sum$)T$)
(declare-fun inl$b (T$ )T_T_sum$)
(declare-fun projr$b (T_T_sum$)T$)
(declare-fun inr$b (T$ )T_T_sum$)
(declare-fun projl$c (T_T_set_sum$)T$)
(declare-fun inl$c (T$ )T_T_set_sum$)
(declare-fun projr$c (T_T_set_sum$)T_set$)
(declare-fun inr$c (T_set$ )T_T_set_sum$)
(declare-fun projl$d (T_set_T_sum$)T_set$)
(declare-fun inl$d (T_set$ )T_set_T_sum$)
(declare-fun projr$d (T_set_T_sum$)T$)
(declare-fun inr$d (T$ )T_set_T_sum$)
(declare-fun projl$e (T_set_T_set_sum$)T_set$)
(declare-fun inl$e (T_set$ )T_set_T_set_sum$)
(declare-fun projr$e (T_set_T_set_sum$)T_set$)
(declare-fun inr$e (T_set$ )T_set_T_set_sum$)
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun wf$ (Dtree$ )Bool )
(declare-fun id$a ()T_set_T_set_fun$ )
(declare-fun id$b ()T_set_set_T_set_set_fun$ )
(declare-fun id$c ()N_N_fun$ )
(declare-fun id$d ()N_set_N_set_fun$ )
(declare-fun id$e ()Dtree_dtree_fun$ )
(declare-fun tr$a ()Dtree$ )
(declare-fun uua$ (T_N_sum_set$ )T_N_sum_bool_fun$ )
(declare-fun uub$ (N_set$ )N_bool_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun image$ (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun image$a (T_T_sum_T_T_sum_fun$ T_T_sum_set$ )T_T_sum_set$ )
(declare-fun image$b (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$c (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$d (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$e (T_set_T_set_fun$ )T_set_set_T_set_set_fun$ )
(declare-fun image$f (N_N_fun$ )N_set_N_set_fun$ )
(declare-fun image$g (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$h (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$i (T_N_sum_N_fun$ T_N_sum_set$ )N_set$ )
(declare-fun image$j (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$k (N_T_N_sum_fun$ N_set$ )T_N_sum_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun subtr2$ (N_set$ Dtree$ Dtree$ )Bool )
(declare-fun collect$ (N_bool_fun$ )N_set$ )
(declare-fun fun_app$ (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun map_sum$ (T_T_fun$ )Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ )
(declare-fun member$a (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun member$c (T_T_sum$ T_T_sum_set$ )Bool )
(declare-fun member$d (T$ T_set$ )Bool )
(declare-fun subtrOf$ (Dtree$ )N_dtree_fun$ )
(declare-fun collect$a (T_N_sum_bool_fun$ )T_N_sum_set$ )
(declare-fun collect$b (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$a (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$b (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$c (N_dtree_fun$ N$ )Dtree$ )
(declare-fun fun_app$d (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$e (Dtree_N_fun_T_dtree_sum_T_N_sum_fun_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun fun_app$f (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$g (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$h (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$i (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(declare-fun fun_app$j (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$k (T_T_fun$ T$ )T$ )
(declare-fun fun_app$l (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$m (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$n (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$o (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$p (N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$q (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$r (N_N_fun_T_N_sum_T_N_sum_fun_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun fun_app$s (N_N_fun$ N$ )N$ )
(declare-fun fun_app$t (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$u (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$v (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$w (T_N_sum_N_fun$ T_N_sum$ )N$ )
(declare-fun fun_app$x (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(declare-fun fun_app$y (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$z (N_set_N_set_fun$ N_set$ )N_set$ )
(declare-fun map_sum$a (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun map_sum$b (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$c (T_T_fun$ )N_dtree_fun_T_N_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$d (T_T_fun$ )N_N_fun_T_N_sum_T_N_sum_fun_fun$ )
(declare-fun map_sum$e (T_T_fun$ T_set_T_set_fun$ T_T_set_sum$ )T_T_set_sum$ )
(declare-fun map_sum$f (T_set_T_set_fun$ T_T_fun$ T_set_T_sum$ )T_set_T_sum$ )
(declare-fun map_sum$g (T_set_T_set_fun$ T_set_T_set_fun$ T_set_T_set_sum$ )T_set_T_set_sum$ )
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$ (uu$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$ (uu$ ?v0 )?v1 )))):named a0 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum$ ))(! (= (fun_app$a (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$a (uua$ ?v0 )?v1 )))):named a1 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$b (uub$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$b (uub$ ?v0 )?v1 )))):named a2 ))
(assert (! (not (member$ (inr$ (fun_app$c (subtrOf$ tr$ )(fun_app$d root$ tr$a )))(cont$ tr$ ))):named a3 ))
(assert (! (wf$ tr$ ):named a4 ))
(assert (! (member$ (inr$ tr$a )(cont$ tr$ )):named a5 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$a ?v0 )(image$ (fun_app$e (map_sum$ id$ )root$ )(cont$ ?v1 )))(member$ (inr$ (fun_app$c (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 )))):named a6 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inr$b ?v0 )(inr$b ?v1 ))(= ?v0 ?v1 ))):named a7 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a8 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a9 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(= (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$d root$ ?v0 )(fun_app$d root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (wf$ ?v0 )(and (member$ (inr$ ?v1 )(cont$ ?v0 ))(member$ (inr$ ?v2 )(cont$ ?v0 ))))(= (= (fun_app$d root$ ?v1 )(fun_app$d root$ ?v2 ))(= ?v1 ?v2 )))):named a13 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$f (fun_app$g (fun_app$h inFr2$ ?v0 )?v1 )?v2 )(and (member$b (fun_app$d root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(fun_app$f (fun_app$g (fun_app$h inFr2$ ?v0 )?v3 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (fun_app$b (fun_app$i (inItr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$d root$ ?v3 ))(member$b (fun_app$d root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$d root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$b (fun_app$i (inItr$ ?v4 )?v5 )?v6 )))))))))):named a15 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (and (fun_app$b (fun_app$i (inItr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$d root$ ?v3 ))(member$b (fun_app$d root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$d root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$b (fun_app$i (inItr$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a16 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$b (fun_app$d root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$b (fun_app$i (inItr$ ?v1 )?v2 )?v3 )))(fun_app$b (fun_app$i (inItr$ ?v1 )?v0 )?v3 ))):named a17 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$b (fun_app$d root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$f (fun_app$g (fun_app$h inFr$ ?v1 )?v2 )?v3 )))(fun_app$f (fun_app$g (fun_app$h inFr$ ?v1 )?v0 )?v3 ))):named a18 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (subtr2$ ?v0 ?v1 ?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$b (fun_app$d root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$d root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(subtr2$ ?v4 ?v5 ?v6 )))))))))):named a19 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (subtr2$ ?v0 ?v1 ?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$b (fun_app$d root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$d root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(subtr2$ ?v4 ?v5 ?v6 ))))))false ))))false )):named a20 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$b (fun_app$d root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(subtr2$ ?v1 ?v3 ?v2 )))(subtr2$ ?v1 ?v3 ?v0 ))):named a21 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$a ?v0 )(image$ (fun_app$e (map_sum$ id$ )root$ )(cont$ ?v1 )))(= (fun_app$d root$ (fun_app$c (subtrOf$ ?v1 )?v0 ))?v0 ))):named a22 ))
(assert (! (= inFr$ inFr2$ ):named a23 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (subtr2$ ?v0 ?v1 ?v2 )(subtr2$ ?v0 ?v2 ?v3 ))(subtr2$ ?v0 ?v1 ?v3 ))):named a24 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$d root$ ?v0 )?v1 )(subtr2$ ?v1 ?v0 ?v0 ))):named a25 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr2$ ?v0 ?v1 ?v2 )(member$b (fun_app$d root$ ?v1 )?v0 ))):named a26 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (subtr2$ ?v0 ?v1 ?v2 )(member$b (fun_app$d root$ ?v2 )?v0 ))):named a27 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_fun$ )(?v2 T$ ))(! (= (fun_app$j (map_sum$a ?v0 ?v1 )(inr$b ?v2 ))(inr$b (fun_app$k ?v1 ?v2 ))):pattern ((fun_app$j (map_sum$a ?v0 ?v1 )(inr$b ?v2 ))))):named a28 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$l (fun_app$m (map_sum$b ?v0 )?v1 )(inr$ ?v2 ))(inr$ (fun_app$n ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$m (map_sum$b ?v0 )?v1 )(inr$ ?v2 ))))):named a29 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 N$ ))(! (= (fun_app$o (fun_app$p (map_sum$c ?v0 )?v1 )(inr$a ?v2 ))(inr$ (fun_app$c ?v1 ?v2 ))):pattern ((fun_app$o (fun_app$p (map_sum$c ?v0 )?v1 )(inr$a ?v2 ))))):named a30 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 N$ ))(! (= (fun_app$q (fun_app$r (map_sum$d ?v0 )?v1 )(inr$a ?v2 ))(inr$a (fun_app$s ?v1 ?v2 ))):pattern ((fun_app$q (fun_app$r (map_sum$d ?v0 )?v1 )(inr$a ?v2 ))))):named a31 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$t (fun_app$e (map_sum$ ?v0 )?v1 )(inr$ ?v2 ))(inr$a (fun_app$d ?v1 ?v2 ))):pattern ((fun_app$t (fun_app$e (map_sum$ ?v0 )?v1 )(inr$ ?v2 ))))):named a32 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$b (fun_app$d root$ ?v0 )?v1 ))(not (fun_app$f (fun_app$g (fun_app$h inFr$ ?v1 )?v0 )?v2 )))):named a33 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$f (fun_app$g (fun_app$h inFr$ ?v0 )?v1 )?v2 )(member$b (fun_app$d root$ ?v1 )?v0 ))):named a34 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$d root$ ?v0 )?v1 )(fun_app$b (fun_app$i (inItr$ ?v1 )?v0 )(fun_app$d root$ ?v0 )))):named a35 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$b (fun_app$i (inItr$ ?v0 )?v1 )?v2 )(member$b (fun_app$d root$ ?v1 )?v0 ))):named a36 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$f (fun_app$g (fun_app$h inFr2$ ?v0 )?v1 )?v2 )(member$b (fun_app$d root$ ?v1 )?v0 ))):named a37 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (member$ (inr$ ?v0 )(cont$ ?v1 ))(member$a (inr$a (fun_app$d root$ ?v0 ))(image$ (fun_app$e (map_sum$ id$ )root$ )(cont$ ?v1 ))))):named a38 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (wf$ ?v0 )(member$ (inr$ ?v1 )(cont$ ?v0 )))(wf$ ?v1 ))):named a39 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a40 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ ))(=> (= (inr$a ?v0 )(inr$a ?v1 ))(= ?v0 ?v1 ))):named a41 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree$ ))(=> (member$a (inr$a ?v0 )(image$ (fun_app$e (map_sum$ id$ )root$ )(cont$ ?v1 )))(and (member$ (inr$ (fun_app$c (subtrOf$ ?v1 )?v0 ))(cont$ ?v1 ))(= (fun_app$d root$ (fun_app$c (subtrOf$ ?v1 )?v0 ))?v0 )))):named a42 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$b (fun_app$d root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(subtr2$ ?v1 ?v2 ?v3 )))(subtr2$ ?v1 ?v0 ?v3 ))):named a43 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T_T_sum_set$ ))(= (member$c (inr$b ?v0 )(image$a (map_sum$a id$ ?v1 )?v2 ))(exists ((?v3 T$ ))(and (member$c (inr$b ?v3 )?v2 )(= (fun_app$k ?v1 ?v3 )?v0 ))))):named a44 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ (inr$ ?v0 )(image$b (fun_app$m (map_sum$b id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$n ?v1 ?v3 )?v0 ))))):named a45 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(= (member$ (inr$ ?v0 )(image$c (fun_app$p (map_sum$c id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$c ?v1 ?v3 )?v0 ))))):named a46 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$a (inr$a ?v0 )(image$d (fun_app$r (map_sum$d id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$s ?v1 ?v3 )?v0 ))))):named a47 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a (inr$a ?v0 )(image$ (fun_app$e (map_sum$ id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$d ?v1 ?v3 )?v0 ))))):named a48 ))
(assert (! (= (image$e id$a )id$b ):named a49 ))
(assert (! (= (image$f id$c )id$d ):named a50 ))
(assert (! (= (image$g id$ )id$a ):named a51 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T_T_sum_set$ ))(=> (member$c (inr$b ?v0 )(image$a (map_sum$a id$ ?v1 )?v2 ))(exists ((?v3 T$ ))(and (member$c (inr$b ?v3 )?v2 )(= (fun_app$k ?v1 ?v3 )?v0 ))))):named a52 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (inr$ ?v0 )(image$b (fun_app$m (map_sum$b id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$n ?v1 ?v3 )?v0 ))))):named a53 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(=> (member$ (inr$ ?v0 )(image$c (fun_app$p (map_sum$c id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$c ?v1 ?v3 )?v0 ))))):named a54 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(=> (member$a (inr$a ?v0 )(image$d (fun_app$r (map_sum$d id$ )?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$a (inr$a ?v3 )?v2 )(= (fun_app$s ?v1 ?v3 )?v0 ))))):named a55 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$a (inr$a ?v0 )(image$ (fun_app$e (map_sum$ id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$d ?v1 ?v3 )?v0 ))))):named a56 ))
(assert (! (forall ((?v0 T_set$ ))(! (= (fun_app$u id$a ?v0 )?v0 ):pattern ((fun_app$u id$a ?v0 )))):named a57 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$k id$ ?v0 )?v0 ):pattern ((fun_app$k id$ ?v0 )))):named a58 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$d ?v2 ?v3 ))(member$d ?v0 (fun_app$u (image$g ?v1 )?v3 )))):named a59 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$l ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$b ?v1 ?v3 )))):named a60 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$t ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$ ?v1 ?v3 )))):named a61 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$v ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$b ?v0 (image$h ?v1 ?v3 )))):named a62 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$c ?v1 ?v3 )))):named a63 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$q ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (image$d ?v1 ?v3 )))):named a64 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum$ )(?v3 T_N_sum_set$ ))(=> (and (= ?v0 (fun_app$w ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$b ?v0 (image$i ?v1 ?v3 )))):named a65 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$x ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$ ?v0 (image$j ?v1 ?v3 )))):named a66 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$y ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$a ?v0 (image$k ?v1 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$s ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (fun_app$z (image$f ?v1 )?v3 )))):named a68 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_fun$ )(?v2 T_T_sum$ )(?v3 T$ ))(=> (= (fun_app$j (map_sum$a ?v0 ?v1 )?v2 )(inr$b ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inr$b ?v4 ))(= (fun_app$k ?v1 ?v4 )?v3 ))))):named a69 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum$ )(?v3 Dtree$ ))(=> (= (fun_app$l (fun_app$m (map_sum$b ?v0 )?v1 )?v2 )(inr$ ?v3 ))(exists ((?v4 Dtree$ ))(and (= ?v2 (inr$ ?v4 ))(= (fun_app$n ?v1 ?v4 )?v3 ))))):named a70 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum$ )(?v3 Dtree$ ))(=> (= (fun_app$o (fun_app$p (map_sum$c ?v0 )?v1 )?v2 )(inr$ ?v3 ))(exists ((?v4 N$ ))(and (= ?v2 (inr$a ?v4 ))(= (fun_app$c ?v1 ?v4 )?v3 ))))):named a71 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_N_sum$ )(?v3 N$ ))(=> (= (fun_app$q (fun_app$r (map_sum$d ?v0 )?v1 )?v2 )(inr$a ?v3 ))(exists ((?v4 N$ ))(and (= ?v2 (inr$a ?v4 ))(= (fun_app$s ?v1 ?v4 )?v3 ))))):named a72 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum$ )(?v3 N$ ))(=> (= (fun_app$t (fun_app$e (map_sum$ ?v0 )?v1 )?v2 )(inr$a ?v3 ))(exists ((?v4 Dtree$ ))(and (= ?v2 (inr$ ?v4 ))(= (fun_app$d ?v1 ?v4 )?v3 ))))):named a73 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_fun$ )(?v2 Bool )(?v3 T_T_sum$ )(?v4 T$ ))(= (fun_app$j (map_sum$a ?v0 ?v1 )(ite ?v2 ?v3 (inr$b ?v4 )))(ite ?v2 (fun_app$j (map_sum$a ?v0 ?v1 )?v3 )(inr$b (fun_app$k ?v1 ?v4 ))))):named a74 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Bool )(?v3 T_dtree_sum$ )(?v4 Dtree$ ))(= (fun_app$l (fun_app$m (map_sum$b ?v0 )?v1 )(ite ?v2 ?v3 (inr$ ?v4 )))(ite ?v2 (fun_app$l (fun_app$m (map_sum$b ?v0 )?v1 )?v3 )(inr$ (fun_app$n ?v1 ?v4 ))))):named a75 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 Bool )(?v3 T_N_sum$ )(?v4 N$ ))(= (fun_app$o (fun_app$p (map_sum$c ?v0 )?v1 )(ite ?v2 ?v3 (inr$a ?v4 )))(ite ?v2 (fun_app$o (fun_app$p (map_sum$c ?v0 )?v1 )?v3 )(inr$ (fun_app$c ?v1 ?v4 ))))):named a76 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 Bool )(?v3 T_N_sum$ )(?v4 N$ ))(= (fun_app$q (fun_app$r (map_sum$d ?v0 )?v1 )(ite ?v2 ?v3 (inr$a ?v4 )))(ite ?v2 (fun_app$q (fun_app$r (map_sum$d ?v0 )?v1 )?v3 )(inr$a (fun_app$s ?v1 ?v4 ))))):named a77 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Bool )(?v3 T_dtree_sum$ )(?v4 Dtree$ ))(= (fun_app$t (fun_app$e (map_sum$ ?v0 )?v1 )(ite ?v2 ?v3 (inr$ ?v4 )))(ite ?v2 (fun_app$t (fun_app$e (map_sum$ ?v0 )?v1 )?v3 )(inr$a (fun_app$d ?v1 ?v4 ))))):named a78 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_T_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_T_sum$ ))(= (fun_app$j (map_sum$a ?v0 ?v1 )(ite ?v2 (inr$b ?v3 )?v4 ))(ite ?v2 (inr$b (fun_app$k ?v1 ?v3 ))(fun_app$j (map_sum$a ?v0 ?v1 )?v4 )))):named a79 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Bool )(?v3 Dtree$ )(?v4 T_dtree_sum$ ))(= (fun_app$l (fun_app$m (map_sum$b ?v0 )?v1 )(ite ?v2 (inr$ ?v3 )?v4 ))(ite ?v2 (inr$ (fun_app$n ?v1 ?v3 ))(fun_app$l (fun_app$m (map_sum$b ?v0 )?v1 )?v4 )))):named a80 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 Bool )(?v3 N$ )(?v4 T_N_sum$ ))(= (fun_app$o (fun_app$p (map_sum$c ?v0 )?v1 )(ite ?v2 (inr$a ?v3 )?v4 ))(ite ?v2 (inr$ (fun_app$c ?v1 ?v3 ))(fun_app$o (fun_app$p (map_sum$c ?v0 )?v1 )?v4 )))):named a81 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 Bool )(?v3 N$ )(?v4 T_N_sum$ ))(= (fun_app$q (fun_app$r (map_sum$d ?v0 )?v1 )(ite ?v2 (inr$a ?v3 )?v4 ))(ite ?v2 (inr$a (fun_app$s ?v1 ?v3 ))(fun_app$q (fun_app$r (map_sum$d ?v0 )?v1 )?v4 )))):named a82 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Bool )(?v3 Dtree$ )(?v4 T_dtree_sum$ ))(= (fun_app$t (fun_app$e (map_sum$ ?v0 )?v1 )(ite ?v2 (inr$ ?v3 )?v4 ))(ite ?v2 (inr$a (fun_app$d ?v1 ?v3 ))(fun_app$t (fun_app$e (map_sum$ ?v0 )?v1 )?v4 )))):named a83 ))
(assert (! (forall ((?v0 T_T_set_sum$ ))(= (map_sum$e id$ id$a ?v0 )?v0 )):named a84 ))
(assert (! (forall ((?v0 T_set_T_sum$ ))(= (map_sum$f id$a id$ ?v0 )?v0 )):named a85 ))
(assert (! (forall ((?v0 T_set_T_set_sum$ ))(= (map_sum$g id$a id$a ?v0 )?v0 )):named a86 ))
(assert (! (forall ((?v0 T_N_sum$ ))(= (fun_app$q (fun_app$r (map_sum$d id$ )id$c )?v0 )?v0 )):named a87 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(= (fun_app$l (fun_app$m (map_sum$b id$ )id$e )?v0 )?v0 )):named a88 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$j (map_sum$a id$ id$ )?v0 )?v0 )):named a89 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_T_fun$ ))(=> (member$d ?v0 ?v1 )(member$d (fun_app$k ?v2 ?v0 )(fun_app$u (image$g ?v2 )?v1 )))):named a90 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$l ?v2 ?v0 )(image$b ?v2 ?v1 )))):named a91 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$a (fun_app$t ?v2 ?v0 )(image$ ?v2 ?v1 )))):named a92 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_N_fun$ ))(=> (member$ ?v0 ?v1 )(member$b (fun_app$v ?v2 ?v0 )(image$h ?v2 ?v1 )))):named a93 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_dtree_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$ (fun_app$o ?v2 ?v0 )(image$c ?v2 ?v1 )))):named a94 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_T_N_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$a (fun_app$q ?v2 ?v0 )(image$d ?v2 ?v1 )))):named a95 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_N_fun$ ))(=> (member$a ?v0 ?v1 )(member$b (fun_app$w ?v2 ?v0 )(image$i ?v2 ?v1 )))):named a96 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_dtree_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$ (fun_app$x ?v2 ?v0 )(image$j ?v2 ?v1 )))):named a97 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_N_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$a (fun_app$y ?v2 ?v0 )(image$k ?v2 ?v1 )))):named a98 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$b ?v0 ?v1 )(member$b (fun_app$s ?v2 ?v0 )(fun_app$z (image$f ?v2 )?v1 )))):named a99 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T$ )(?v3 T_T_fun$ ))(=> (and (member$d ?v0 ?v1 )(= ?v2 (fun_app$k ?v3 ?v0 )))(member$d ?v2 (fun_app$u (image$g ?v3 )?v1 )))):named a100 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_T_dtree_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$l ?v3 ?v0 )))(member$ ?v2 (image$b ?v3 ?v1 )))):named a101 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$t ?v3 ?v0 )))(member$a ?v2 (image$ ?v3 ?v1 )))):named a102 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 N$ )(?v3 T_dtree_sum_N_fun$ ))(=> (and (member$ ?v0 ?v1 )(= ?v2 (fun_app$v ?v3 ?v0 )))(member$b ?v2 (image$h ?v3 ?v1 )))):named a103 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_N_sum_T_dtree_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$o ?v3 ?v0 )))(member$ ?v2 (image$c ?v3 ?v1 )))):named a104 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum$ )(?v3 T_N_sum_T_N_sum_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$q ?v3 ?v0 )))(member$a ?v2 (image$d ?v3 ?v1 )))):named a105 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_set$ )(?v2 N$ )(?v3 T_N_sum_N_fun$ ))(=> (and (member$a ?v0 ?v1 )(= ?v2 (fun_app$w ?v3 ?v0 )))(member$b ?v2 (image$i ?v3 ?v1 )))):named a106 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 T_dtree_sum$ )(?v3 N_T_dtree_sum_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$x ?v3 ?v0 )))(member$ ?v2 (image$j ?v3 ?v1 )))):named a107 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 T_N_sum$ )(?v3 N_T_N_sum_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$y ?v3 ?v0 )))(member$a ?v2 (image$k ?v3 ?v1 )))):named a108 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ )(?v3 N_N_fun$ ))(=> (and (member$b ?v0 ?v1 )(= ?v2 (fun_app$s ?v3 ?v0 )))(member$b ?v2 (fun_app$z (image$f ?v3 )?v1 )))):named a109 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_set$ )(?v2 T_bool_fun$ ))(=> (forall ((?v3 T$ ))(=> (member$d ?v3 (fun_app$u (image$g ?v0 )?v1 ))(fun_app$f ?v2 ?v3 )))(forall ((?v3 T$ ))(=> (member$d ?v3 ?v1 )(fun_app$f ?v2 (fun_app$k ?v0 ?v3 )))))):named a110 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (image$b ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$ ?v2 (fun_app$l ?v0 ?v3 )))))):named a111 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (image$c ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$ ?v2 (fun_app$o ?v0 ?v3 )))))):named a112 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 (image$j ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$b ?v3 ?v1 )(fun_app$ ?v2 (fun_app$x ?v0 ?v3 )))))):named a113 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$ ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$a ?v2 (fun_app$t ?v0 ?v3 )))))):named a114 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$a ?v2 (fun_app$q ?v0 ?v3 )))))):named a115 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 (image$k ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$b ?v3 ?v1 )(fun_app$a ?v2 (fun_app$y ?v0 ?v3 )))))):named a116 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$b ?v3 (image$h ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 T_dtree_sum$ ))(=> (member$ ?v3 ?v1 )(fun_app$b ?v2 (fun_app$v ?v0 ?v3 )))))):named a117 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$b ?v3 (image$i ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 T_N_sum$ ))(=> (member$a ?v3 ?v1 )(fun_app$b ?v2 (fun_app$w ?v0 ?v3 )))))):named a118 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (forall ((?v3 N$ ))(=> (member$b ?v3 (fun_app$z (image$f ?v0 )?v1 ))(fun_app$b ?v2 ?v3 )))(forall ((?v3 N$ ))(=> (member$b ?v3 ?v1 )(fun_app$b ?v2 (fun_app$s ?v0 ?v3 )))))):named a119 ))
(assert (! (forall ((?v0 N_bool_fun$ )(?v1 N_bool_fun$ ))(=> (forall ((?v2 N$ ))(= (fun_app$b ?v0 ?v2 )(fun_app$b ?v1 ?v2 )))(= (collect$ ?v0 )(collect$ ?v1 )))):named a120 ))
(assert (! (forall ((?v0 T_N_sum_bool_fun$ )(?v1 T_N_sum_bool_fun$ ))(=> (forall ((?v2 T_N_sum$ ))(= (fun_app$a ?v0 ?v2 )(fun_app$a ?v1 ?v2 )))(= (collect$a ?v0 )(collect$a ?v1 )))):named a121 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 T_dtree_sum_bool_fun$ ))(=> (forall ((?v2 T_dtree_sum$ ))(= (fun_app$ ?v0 ?v2 )(fun_app$ ?v1 ?v2 )))(= (collect$b ?v0 )(collect$b ?v1 )))):named a122 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$b (uu$ ?v0 ))?v0 )):named a123 ))
(assert (! (forall ((?v0 T_N_sum_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a124 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$ (uub$ ?v0 ))?v0 )):named a125 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$b ?v1 ))(fun_app$ ?v1 ?v0 ))):named a126 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$a ?v1 ?v0 ))):named a127 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$b ?v0 (collect$ ?v1 ))(fun_app$b ?v1 ?v0 ))):named a128 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T_set$ )(?v2 T_bool_fun$ ))(=> (exists ((?v3 T$ ))(and (member$d ?v3 (fun_app$u (image$g ?v0 )?v1 ))(fun_app$f ?v2 ?v3 )))(exists ((?v3 T$ ))(and (member$d ?v3 ?v1 )(fun_app$f ?v2 (fun_app$k ?v0 ?v3 )))))):named a129 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (image$b ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$ ?v2 (fun_app$l ?v0 ?v3 )))))):named a130 ))
(assert (! (forall ((?v0 T_N_sum_T_dtree_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (image$c ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$ ?v2 (fun_app$o ?v0 ?v3 )))))):named a131 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N_set$ )(?v2 T_dtree_sum_bool_fun$ ))(=> (exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 (image$j ?v0 ?v1 ))(fun_app$ ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$b ?v3 ?v1 )(fun_app$ ?v2 (fun_app$x ?v0 ?v3 )))))):named a132 ))
(assert (! (forall ((?v0 T_dtree_sum_T_N_sum_fun$ )(?v1 T_dtree_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$ ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$a ?v2 (fun_app$t ?v0 ?v3 )))))):named a133 ))
(assert (! (forall ((?v0 T_N_sum_T_N_sum_fun$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$d ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$a ?v2 (fun_app$q ?v0 ?v3 )))))):named a134 ))
(assert (! (forall ((?v0 N_T_N_sum_fun$ )(?v1 N_set$ )(?v2 T_N_sum_bool_fun$ ))(=> (exists ((?v3 T_N_sum$ ))(and (member$a ?v3 (image$k ?v0 ?v1 ))(fun_app$a ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$b ?v3 ?v1 )(fun_app$a ?v2 (fun_app$y ?v0 ?v3 )))))):named a135 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$b ?v3 (image$h ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v1 )(fun_app$b ?v2 (fun_app$v ?v0 ?v3 )))))):named a136 ))
(assert (! (forall ((?v0 T_N_sum_N_fun$ )(?v1 T_N_sum_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$b ?v3 (image$i ?v0 ?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v1 )(fun_app$b ?v2 (fun_app$w ?v0 ?v3 )))))):named a137 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N_set$ )(?v2 N_bool_fun$ ))(=> (exists ((?v3 N$ ))(and (member$b ?v3 (fun_app$z (image$f ?v0 )?v1 ))(fun_app$b ?v2 ?v3 )))(exists ((?v3 N$ ))(and (member$b ?v3 ?v1 )(fun_app$b ?v2 (fun_app$s ?v0 ?v3 )))))):named a138 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T_set$ )(?v2 T_T_fun$ )(?v3 T_T_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T$ ))(=> (member$d ?v4 ?v1 )(= (fun_app$k ?v2 ?v4 )(fun_app$k ?v3 ?v4 )))))(= (fun_app$u (image$g ?v2 )?v0 )(fun_app$u (image$g ?v3 )?v1 )))):named a139 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_set$ )(?v2 T_N_sum_N_fun$ )(?v3 T_N_sum_N_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_N_sum$ ))(=> (member$a ?v4 ?v1 )(= (fun_app$w ?v2 ?v4 )(fun_app$w ?v3 ?v4 )))))(= (image$i ?v2 ?v0 )(image$i ?v3 ?v1 )))):named a140 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ )(?v2 N_T_dtree_sum_fun$ )(?v3 N_T_dtree_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$x ?v2 ?v4 )(fun_app$x ?v3 ?v4 )))))(= (image$j ?v2 ?v0 )(image$j ?v3 ?v1 )))):named a141 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ )(?v2 N_T_N_sum_fun$ )(?v3 N_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$y ?v2 ?v4 )(fun_app$y ?v3 ?v4 )))))(= (image$k ?v2 ?v0 )(image$k ?v3 ?v1 )))):named a142 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N_set$ )(?v2 N_N_fun$ )(?v3 N_N_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 N$ ))(=> (member$b ?v4 ?v1 )(= (fun_app$s ?v2 ?v4 )(fun_app$s ?v3 ?v4 )))))(= (fun_app$z (image$f ?v2 )?v0 )(fun_app$z (image$f ?v3 )?v1 )))):named a143 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_N_sum_fun$ )(?v3 T_dtree_sum_T_N_sum_fun$ ))(=> (and (= ?v0 ?v1 )(forall ((?v4 T_dtree_sum$ ))(=> (member$ ?v4 ?v1 )(= (fun_app$t ?v2 ?v4 )(fun_app$t ?v3 ?v4 )))))(= (image$ ?v2 ?v0 )(image$ ?v3 ?v1 )))):named a144 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T_set$ ))(= (member$d ?v0 (fun_app$u (image$g ?v1 )?v2 ))(exists ((?v3 T$ ))(and (member$d ?v3 ?v2 )(= ?v0 (fun_app$k ?v1 ?v3 )))))):named a145 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (image$b ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$l ?v1 ?v3 )))))):named a146 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_N_sum_T_dtree_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$ ?v0 (image$c ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$o ?v1 ?v3 )))))):named a147 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N_set$ ))(= (member$ ?v0 (image$j ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$x ?v1 ?v3 )))))):named a148 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_dtree_sum_T_N_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (image$ ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$t ?v1 ?v3 )))))):named a149 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 T_N_sum_T_N_sum_fun$ )(?v2 T_N_sum_set$ ))(= (member$a ?v0 (image$d ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$q ?v1 ?v3 )))))):named a150 ))
(assert (! (forall ((?v0 T_N_sum$ )(?v1 N_T_N_sum_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (image$k ?v1 ?v2 ))(exists ((?v3 N$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$y ?v1 ?v3 )))))):named a151 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (image$h ?v1 ?v2 ))(exists ((?v3 T_dtree_sum$ ))(and (member$ ?v3 ?v2 )(= ?v0 (fun_app$v ?v1 ?v3 )))))):named a152 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_sum_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$b ?v0 (image$i ?v1 ?v2 ))(exists ((?v3 T_N_sum$ ))(and (member$a ?v3 ?v2 )(= ?v0 (fun_app$w ?v1 ?v3 )))))):named a153 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (fun_app$z (image$f ?v1 )?v2 ))(exists ((?v3 N$ ))(and (member$b ?v3 ?v2 )(= ?v0 (fun_app$s ?v1 ?v3 )))))):named a154 ))
(check-sat )
(get-unsat-core )
