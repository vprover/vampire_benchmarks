(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort N$ 0 )
(declare-sort T$ 0 )
(declare-sort Dtree$ 0 )
(declare-sort N_set$ 0 )
(declare-sort T_set$ 0 )
(declare-sort N_N_fun$ 0 )
(declare-sort N_T_fun$ 0 )
(declare-sort T_N_fun$ 0 )
(declare-sort T_T_fun$ 0 )
(declare-sort Dtree_set$ 0 )
(declare-sort N_bool_fun$ 0 )
(declare-sort T_bool_fun$ 0 )
(declare-sort Dtree_N_fun$ 0 )
(declare-sort N_dtree_fun$ 0 )
(declare-sort T_N_sum_set$ 0 )
(declare-sort N_T_N_sum_fun$ 0 )
(declare-sort T_T_N_sum_fun$ 0 )
(declare-sort Dtree_bool_fun$ 0 )
(declare-sort Dtree_dtree_fun$ 0 )
(declare-sort T_dtree_sum_set$ 0 )
(declare-sort T_set_T_set_fun$ 0 )
(declare-sort T_N_sum_bool_fun$ 0 )
(declare-sort N_T_dtree_sum_fun$ 0 )
(declare-sort T_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_N_fun$ 0 )
(declare-sort T_dtree_sum_T_fun$ 0 )
(declare-sort T_N_sum_T_N_sum_fun$ 0 )
(declare-sort T_T_sum_T_T_sum_fun$ 0 )
(declare-sort Dtree_N_bool_fun_fun$ 0 )
(declare-sort Dtree_T_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_bool_fun$ 0 )
(declare-sort Dtree_T_dtree_sum_fun$ 0 )
(declare-sort T_N_sum_T_dtree_sum_fun$ 0 )
(declare-sort T_dtree_sum_T_N_sum_fun$ 0 )
(declare-sort Dtree_dtree_bool_fun_fun$ 0 )
(declare-sort T_dtree_sum_T_dtree_sum_fun$ 0 )
(declare-sort N_set_dtree_T_bool_fun_fun_fun$ 0 )
(declare-sort N_set_dtree_dtree_bool_fun_fun_fun$ 0 )
(declare-sort Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ 0 )
(declare-sort T_dtree_sum$ 0)
(declare-sort T_N_sum$ 0)
(declare-sort T_T_sum$ 0)
(declare-fun projl$ (T_dtree_sum$)T$)
(declare-fun inl$ (T$ )T_dtree_sum$)
(declare-fun projr$ (T_dtree_sum$)Dtree$)
(declare-fun inr$ (Dtree$ )T_dtree_sum$)
(declare-fun projl$a (T_N_sum$)T$)
(declare-fun inl$a (T$ )T_N_sum$)
(declare-fun projr$a (T_N_sum$)N$)
(declare-fun inr$a (N$ )T_N_sum$)
(declare-fun projl$b (T_T_sum$)T$)
(declare-fun inl$b (T$ )T_T_sum$)
(declare-fun projr$b (T_T_sum$)T$)
(declare-fun inr$b (T$ )T_T_sum$)
(declare-fun t$ ()T$ )
(declare-fun id$ ()T_T_fun$ )
(declare-fun tr$ ()Dtree$ )
(declare-fun uu$ ()T_T_dtree_sum_fun$ )
(declare-fun id$a ()T_set_T_set_fun$ )
(declare-fun id$b ()T_T_sum_T_T_sum_fun$ )
(declare-fun ttr$ ()T_dtree_sum$ )
(declare-fun uua$ (T_set$ )T_bool_fun$ )
(declare-fun uub$ (T_dtree_sum_set$ )T_dtree_sum_bool_fun$ )
(declare-fun uuc$ (N_set$ )N_bool_fun$ )
(declare-fun uud$ ()T_T_N_sum_fun$ )
(declare-fun uue$ ()N_T_N_sum_fun$ )
(declare-fun uuf$ ()Dtree_T_dtree_sum_fun$ )
(declare-fun cont$ (Dtree$ )T_dtree_sum_set$ )
(declare-fun inFr$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun node$ (N$ T_dtree_sum_set$ )Dtree$ )
(declare-fun root$ ()Dtree_N_fun$ )
(declare-fun image$ (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun inFr2$ ()N_set_dtree_T_bool_fun_fun_fun$ )
(declare-fun inItr$ (N_set$ )Dtree_N_bool_fun_fun$ )
(declare-fun subtr$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun image$a (T_N_sum_T_dtree_sum_fun$ T_N_sum_set$ )T_dtree_sum_set$ )
(declare-fun image$b (T_N_sum_T_N_sum_fun$ T_N_sum_set$ )T_N_sum_set$ )
(declare-fun image$c (T_dtree_sum_T_N_sum_fun$ T_dtree_sum_set$ )T_N_sum_set$ )
(declare-fun image$d (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun image$e (T_T_dtree_sum_fun$ T_set$ )T_dtree_sum_set$ )
(declare-fun image$f (T_N_fun$ T_set$ )N_set$ )
(declare-fun image$g (T_dtree_sum_T_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun image$h (T_dtree_sum_N_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun image$i (N_T_fun$ N_set$ )T_set$ )
(declare-fun image$j (N_T_dtree_sum_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun image$k (N_N_fun$ N_set$ )N_set$ )
(declare-fun image$l (Dtree_dtree_fun$ Dtree_set$ )Dtree_set$ )
(declare-fun image$m (Dtree_N_fun$ Dtree_set$ )N_set$ )
(declare-fun insert$ (N$ N_set$ )N_set$ )
(declare-fun member$ (T_dtree_sum$ T_dtree_sum_set$ )Bool )
(declare-fun subtr2$ ()N_set_dtree_dtree_bool_fun_fun_fun$ )
(declare-fun vimage$ (T_T_dtree_sum_fun$ T_dtree_sum_set$ )T_set$ )
(declare-fun collect$ (T_dtree_sum_bool_fun$ )T_dtree_sum_set$ )
(declare-fun fun_app$ (Dtree_T_dtree_sum_fun$ Dtree$ )T_dtree_sum$ )
(declare-fun insert$a (T$ T_set$ )T_set$ )
(declare-fun insert$b (T_dtree_sum$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun map_sum$ (T_T_fun$ Dtree_N_fun$ )T_dtree_sum_T_N_sum_fun$ )
(declare-fun member$a (T$ T_set$ )Bool )
(declare-fun member$b (N$ N_set$ )Bool )
(declare-fun member$c (T_N_sum$ T_N_sum_set$ )Bool )
(declare-fun vimage$a (T_T_fun$ )T_set_T_set_fun$ )
(declare-fun vimage$b (T_N_fun$ N_set$ )T_set$ )
(declare-fun vimage$c (T_dtree_sum_T_fun$ T_set$ )T_dtree_sum_set$ )
(declare-fun vimage$d (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum_set$ )T_dtree_sum_set$ )
(declare-fun vimage$e (T_dtree_sum_N_fun$ N_set$ )T_dtree_sum_set$ )
(declare-fun vimage$f (N_T_fun$ T_set$ )N_set$ )
(declare-fun vimage$g (N_T_dtree_sum_fun$ T_dtree_sum_set$ )N_set$ )
(declare-fun vimage$h (N_N_fun$ N_set$ )N_set$ )
(declare-fun vimage$i (T_T_N_sum_fun$ T_N_sum_set$ )T_set$ )
(declare-fun vimage$j (N_T_N_sum_fun$ T_N_sum_set$ )N_set$ )
(declare-fun vimage$k (Dtree_T_dtree_sum_fun$ T_dtree_sum_set$ )Dtree_set$ )
(declare-fun collect$a (T_bool_fun$ )T_set$ )
(declare-fun collect$b (N_bool_fun$ )N_set$ )
(declare-fun fun_app$a (N_T_N_sum_fun$ N$ )T_N_sum$ )
(declare-fun fun_app$b (T_T_dtree_sum_fun$ T$ )T_dtree_sum$ )
(declare-fun fun_app$c (T_T_N_sum_fun$ T$ )T_N_sum$ )
(declare-fun fun_app$d (T_dtree_sum_bool_fun$ T_dtree_sum$ )Bool )
(declare-fun fun_app$e (T_bool_fun$ T$ )Bool )
(declare-fun fun_app$f (N_bool_fun$ N$ )Bool )
(declare-fun fun_app$g (T_dtree_sum_T_N_sum_fun$ T_dtree_sum$ )T_N_sum$ )
(declare-fun fun_app$h (T_set_T_set_fun$ T_set$ )T_set$ )
(declare-fun fun_app$i (T_T_fun$ T$ )T$ )
(declare-fun fun_app$j (T_N_fun$ T$ )N$ )
(declare-fun fun_app$k (T_dtree_sum_T_fun$ T_dtree_sum$ )T$ )
(declare-fun fun_app$l (T_dtree_sum_T_dtree_sum_fun$ T_dtree_sum$ )T_dtree_sum$ )
(declare-fun fun_app$m (T_dtree_sum_N_fun$ T_dtree_sum$ )N$ )
(declare-fun fun_app$n (N_T_fun$ N$ )T$ )
(declare-fun fun_app$o (N_T_dtree_sum_fun$ N$ )T_dtree_sum$ )
(declare-fun fun_app$p (N_N_fun$ N$ )N$ )
(declare-fun fun_app$q (Dtree_N_fun$ Dtree$ )N$ )
(declare-fun fun_app$r (Dtree_T_bool_fun_fun$ Dtree$ )T_bool_fun$ )
(declare-fun fun_app$s (N_set_dtree_T_bool_fun_fun_fun$ N_set$ )Dtree_T_bool_fun_fun$ )
(declare-fun fun_app$t (Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ Dtree_dtree_fun$ )T_dtree_sum_T_dtree_sum_fun$ )
(declare-fun fun_app$u (T_N_sum_T_dtree_sum_fun$ T_N_sum$ )T_dtree_sum$ )
(declare-fun fun_app$v (T_N_sum_T_N_sum_fun$ T_N_sum$ )T_N_sum$ )
(declare-fun fun_app$w (T_T_sum_T_T_sum_fun$ T_T_sum$ )T_T_sum$ )
(declare-fun fun_app$x (Dtree_bool_fun$ Dtree$ )Bool )
(declare-fun fun_app$y (Dtree_dtree_bool_fun_fun$ Dtree$ )Dtree_bool_fun$ )
(declare-fun fun_app$z (N_set_dtree_dtree_bool_fun_fun_fun$ N_set$ )Dtree_dtree_bool_fun_fun$ )
(declare-fun map_sum$a (T_T_fun$ )Dtree_dtree_fun_T_dtree_sum_T_dtree_sum_fun_fun$ )
(declare-fun map_sum$b (T_T_fun$ N_dtree_fun$ )T_N_sum_T_dtree_sum_fun$ )
(declare-fun map_sum$c (T_T_fun$ N_N_fun$ )T_N_sum_T_N_sum_fun$ )
(declare-fun map_sum$d (T_T_fun$ T_T_fun$ )T_T_sum_T_T_sum_fun$ )
(declare-fun fun_app$aa (Dtree_dtree_fun$ Dtree$ )Dtree$ )
(declare-fun fun_app$ab (T_N_sum_bool_fun$ T_N_sum$ )Bool )
(declare-fun fun_app$ac (Dtree_N_bool_fun_fun$ Dtree$ )N_bool_fun$ )
(assert (! (forall ((?v0 Dtree$ ))(! (= (fun_app$ uuf$ ?v0 )(inr$ ?v0 )):pattern ((fun_app$ uuf$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 N$ ))(! (= (fun_app$a uue$ ?v0 )(inr$a ?v0 )):pattern ((fun_app$a uue$ ?v0 )))):named a1 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$b uu$ ?v0 )(inl$ ?v0 )):pattern ((fun_app$b uu$ ?v0 )))):named a2 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$c uud$ ?v0 )(inl$a ?v0 )):pattern ((fun_app$c uud$ ?v0 )))):named a3 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum$ ))(! (= (fun_app$d (uub$ ?v0 )?v1 )(member$ ?v1 ?v0 )):pattern ((fun_app$d (uub$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 T_set$ )(?v1 T$ ))(! (= (fun_app$e (uua$ ?v0 )?v1 )(member$a ?v1 ?v0 )):pattern ((fun_app$e (uua$ ?v0 )?v1 )))):named a5 ))
(assert (! (forall ((?v0 N_set$ )(?v1 N$ ))(! (= (fun_app$f (uuc$ ?v0 )?v1 )(member$b ?v1 ?v0 )):pattern ((fun_app$f (uuc$ ?v0 )?v1 )))):named a6 ))
(assert (! (not (member$a t$ (vimage$ uu$ (cont$ tr$ )))):named a7 ))
(assert (! (member$ ttr$ (cont$ tr$ )):named a8 ))
(assert (! (= (inl$a t$ )(fun_app$g (map_sum$ id$ root$ )ttr$ )):named a9 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T_set$ ))(= (member$a ?v0 (fun_app$h (vimage$a ?v1 )?v2 ))(member$a (fun_app$i ?v1 ?v0 )?v2 ))):named a10 ))
(assert (! (forall ((?v0 T$ )(?v1 T_N_fun$ )(?v2 N_set$ ))(= (member$a ?v0 (vimage$b ?v1 ?v2 ))(member$b (fun_app$j ?v1 ?v0 )?v2 ))):named a11 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_fun$ )(?v2 T_set$ ))(= (member$ ?v0 (vimage$c ?v1 ?v2 ))(member$a (fun_app$k ?v1 ?v0 )?v2 ))):named a12 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (vimage$d ?v1 ?v2 ))(member$ (fun_app$l ?v1 ?v0 )?v2 ))):named a13 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_N_fun$ )(?v2 N_set$ ))(= (member$ ?v0 (vimage$e ?v1 ?v2 ))(member$b (fun_app$m ?v1 ?v0 )?v2 ))):named a14 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_fun$ )(?v2 T_set$ ))(= (member$b ?v0 (vimage$f ?v1 ?v2 ))(member$a (fun_app$n ?v1 ?v0 )?v2 ))):named a15 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$b ?v0 (vimage$g ?v1 ?v2 ))(member$ (fun_app$o ?v1 ?v0 )?v2 ))):named a16 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(= (member$b ?v0 (vimage$h ?v1 ?v2 ))(member$b (fun_app$p ?v1 ?v0 )?v2 ))):named a17 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$a ?v0 (vimage$ ?v1 ?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a18 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= (fun_app$i ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$a ?v1 (fun_app$h (vimage$a ?v0 )?v3 )))):named a19 ))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$ )(?v1 T_dtree_sum$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= (fun_app$k ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$ ?v1 (vimage$c ?v0 ?v3 )))):named a20 ))
(assert (! (forall ((?v0 N_T_fun$ )(?v1 N$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= (fun_app$n ?v0 ?v1 )?v2 )(member$a ?v2 ?v3 ))(member$b ?v1 (vimage$f ?v0 ?v3 )))):named a21 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$l ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$ ?v1 (vimage$d ?v0 ?v3 )))):named a22 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$o ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$b ?v1 (vimage$g ?v0 ?v3 )))):named a23 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 T$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$j ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$a ?v1 (vimage$b ?v0 ?v3 )))):named a24 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$m ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$ ?v1 (vimage$e ?v0 ?v3 )))):named a25 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= (fun_app$p ?v0 ?v1 )?v2 )(member$b ?v2 ?v3 ))(member$b ?v1 (vimage$h ?v0 ?v3 )))):named a26 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= (fun_app$b ?v0 ?v1 )?v2 )(member$ ?v2 ?v3 ))(member$a ?v1 (vimage$ ?v0 ?v3 )))):named a27 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a28 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a29 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a30 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(= (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_bool_fun$ ))(=> (forall ((?v3 T$ ))(= (fun_app$d ?v0 (fun_app$b ?v1 ?v3 ))(fun_app$e ?v2 ?v3 )))(= (vimage$ ?v1 (collect$ ?v0 ))(collect$a ?v2 )))):named a32 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T_set$ ))(=> (and (member$a ?v0 (fun_app$h (vimage$a ?v1 )?v2 ))(forall ((?v3 T$ ))(=> (and (= (fun_app$i ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a33 ))
(assert (! (forall ((?v0 T$ )(?v1 T_N_fun$ )(?v2 N_set$ ))(=> (and (member$a ?v0 (vimage$b ?v1 ?v2 ))(forall ((?v3 N$ ))(=> (and (= (fun_app$j ?v1 ?v0 )?v3 )(member$b ?v3 ?v2 ))false )))false )):named a34 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_fun$ )(?v2 T_set$ ))(=> (and (member$ ?v0 (vimage$c ?v1 ?v2 ))(forall ((?v3 T$ ))(=> (and (= (fun_app$k ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a35 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (and (member$ ?v0 (vimage$d ?v1 ?v2 ))(forall ((?v3 T_dtree_sum$ ))(=> (and (= (fun_app$l ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a36 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_N_fun$ )(?v2 N_set$ ))(=> (and (member$ ?v0 (vimage$e ?v1 ?v2 ))(forall ((?v3 N$ ))(=> (and (= (fun_app$m ?v1 ?v0 )?v3 )(member$b ?v3 ?v2 ))false )))false )):named a37 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_fun$ )(?v2 T_set$ ))(=> (and (member$b ?v0 (vimage$f ?v1 ?v2 ))(forall ((?v3 T$ ))(=> (and (= (fun_app$n ?v1 ?v0 )?v3 )(member$a ?v3 ?v2 ))false )))false )):named a38 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (and (member$b ?v0 (vimage$g ?v1 ?v2 ))(forall ((?v3 T_dtree_sum$ ))(=> (and (= (fun_app$o ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a39 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(=> (and (member$b ?v0 (vimage$h ?v1 ?v2 ))(forall ((?v3 N$ ))(=> (and (= (fun_app$p ?v1 ?v0 )?v3 )(member$b ?v3 ?v2 ))false )))false )):named a40 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (and (member$a ?v0 (vimage$ ?v1 ?v2 ))(forall ((?v3 T_dtree_sum$ ))(=> (and (= (fun_app$b ?v1 ?v0 )?v3 )(member$ ?v3 ?v2 ))false )))false )):named a41 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T_set$ ))(=> (member$a ?v0 (fun_app$h (vimage$a ?v1 )?v2 ))(member$a (fun_app$i ?v1 ?v0 )?v2 ))):named a42 ))
(assert (! (forall ((?v0 T$ )(?v1 T_N_fun$ )(?v2 N_set$ ))(=> (member$a ?v0 (vimage$b ?v1 ?v2 ))(member$b (fun_app$j ?v1 ?v0 )?v2 ))):named a43 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_fun$ )(?v2 T_set$ ))(=> (member$ ?v0 (vimage$c ?v1 ?v2 ))(member$a (fun_app$k ?v1 ?v0 )?v2 ))):named a44 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$ ?v0 (vimage$d ?v1 ?v2 ))(member$ (fun_app$l ?v1 ?v0 )?v2 ))):named a45 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_N_fun$ )(?v2 N_set$ ))(=> (member$ ?v0 (vimage$e ?v1 ?v2 ))(member$b (fun_app$m ?v1 ?v0 )?v2 ))):named a46 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_fun$ )(?v2 T_set$ ))(=> (member$b ?v0 (vimage$f ?v1 ?v2 ))(member$a (fun_app$n ?v1 ?v0 )?v2 ))):named a47 ))
(assert (! (forall ((?v0 N$ )(?v1 N_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$b ?v0 (vimage$g ?v1 ?v2 ))(member$ (fun_app$o ?v1 ?v0 )?v2 ))):named a48 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N_set$ ))(=> (member$b ?v0 (vimage$h ?v1 ?v2 ))(member$b (fun_app$p ?v1 ?v0 )?v2 ))):named a49 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T_dtree_sum_set$ ))(=> (member$a ?v0 (vimage$ ?v1 ?v2 ))(member$ (fun_app$b ?v1 ?v0 )?v2 ))):named a50 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 T$ )(?v2 T_set$ ))(=> (member$a (fun_app$i ?v0 ?v1 )?v2 )(member$a ?v1 (fun_app$h (vimage$a ?v0 )?v2 )))):named a51 ))
(assert (! (forall ((?v0 T_dtree_sum_T_fun$ )(?v1 T_dtree_sum$ )(?v2 T_set$ ))(=> (member$a (fun_app$k ?v0 ?v1 )?v2 )(member$ ?v1 (vimage$c ?v0 ?v2 )))):named a52 ))
(assert (! (forall ((?v0 N_T_fun$ )(?v1 N$ )(?v2 T_set$ ))(=> (member$a (fun_app$n ?v0 ?v1 )?v2 )(member$b ?v1 (vimage$f ?v0 ?v2 )))):named a53 ))
(assert (! (forall ((?v0 T_dtree_sum_T_dtree_sum_fun$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (fun_app$l ?v0 ?v1 )?v2 )(member$ ?v1 (vimage$d ?v0 ?v2 )))):named a54 ))
(assert (! (forall ((?v0 N_T_dtree_sum_fun$ )(?v1 N$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (fun_app$o ?v0 ?v1 )?v2 )(member$b ?v1 (vimage$g ?v0 ?v2 )))):named a55 ))
(assert (! (forall ((?v0 T_N_fun$ )(?v1 T$ )(?v2 N_set$ ))(=> (member$b (fun_app$j ?v0 ?v1 )?v2 )(member$a ?v1 (vimage$b ?v0 ?v2 )))):named a56 ))
(assert (! (forall ((?v0 T_dtree_sum_N_fun$ )(?v1 T_dtree_sum$ )(?v2 N_set$ ))(=> (member$b (fun_app$m ?v0 ?v1 )?v2 )(member$ ?v1 (vimage$e ?v0 ?v2 )))):named a57 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N_set$ ))(=> (member$b (fun_app$p ?v0 ?v1 )?v2 )(member$b ?v1 (vimage$h ?v0 ?v2 )))):named a58 ))
(assert (! (forall ((?v0 T_T_dtree_sum_fun$ )(?v1 T$ )(?v2 T_dtree_sum_set$ ))(=> (member$ (fun_app$b ?v0 ?v1 )?v2 )(member$a ?v1 (vimage$ ?v0 ?v2 )))):named a59 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$ ?v0 )(inl$ ?v1 ))(= ?v0 ?v1 ))):named a60 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ ))(=> (= (inl$a ?v0 )(inl$a ?v1 ))(= ?v0 ?v1 ))):named a61 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$b (fun_app$q root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(fun_app$e (fun_app$r (fun_app$s inFr2$ ?v1 )?v0 )?v2 ))):named a62 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (and (member$b (fun_app$q root$ ?v0 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v0 )))(fun_app$e (fun_app$r (fun_app$s inFr$ ?v1 )?v0 )?v2 ))):named a63 ))
(assert (! (= inFr$ inFr2$ ):named a64 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$e (fun_app$r (fun_app$s inFr$ ?v0 )?v1 )?v2 )(member$b (fun_app$q root$ ?v1 )?v0 ))):named a65 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$e (fun_app$r (fun_app$s inFr2$ ?v0 )?v1 )?v2 )(member$b (fun_app$q root$ ?v1 )?v0 ))):named a66 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 T$ ))(=> (not (member$b (fun_app$q root$ ?v0 )?v1 ))(not (fun_app$e (fun_app$r (fun_app$s inFr$ ?v1 )?v0 )?v2 )))):named a67 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T$ ))(! (= (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )(inl$ ?v2 ))(inl$ (fun_app$i ?v0 ?v2 ))):pattern ((fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )(inl$ ?v2 ))))):named a68 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T$ ))(! (= (fun_app$u (map_sum$b ?v0 ?v1 )(inl$a ?v2 ))(inl$ (fun_app$i ?v0 ?v2 ))):pattern ((fun_app$u (map_sum$b ?v0 ?v1 )(inl$a ?v2 ))))):named a69 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T$ ))(! (= (fun_app$v (map_sum$c ?v0 ?v1 )(inl$a ?v2 ))(inl$a (fun_app$i ?v0 ?v2 ))):pattern ((fun_app$v (map_sum$c ?v0 ?v1 )(inl$a ?v2 ))))):named a70 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T$ ))(! (= (fun_app$g (map_sum$ ?v0 ?v1 )(inl$ ?v2 ))(inl$a (fun_app$i ?v0 ?v2 ))):pattern ((fun_app$g (map_sum$ ?v0 ?v1 )(inl$ ?v2 ))))):named a71 ))
(assert (! (= (vimage$a id$ )id$a ):named a72 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$i id$ ?v0 )?v0 ):pattern ((fun_app$i id$ ?v0 )))):named a73 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (and (= (fun_app$q root$ ?v0 )(fun_app$q root$ ?v1 ))(= (cont$ ?v0 )(cont$ ?v1 )))(= ?v0 ?v1 ))):named a74 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum$ )(?v3 T$ ))(=> (= (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )?v2 )(inl$ ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inl$ ?v4 ))(= (fun_app$i ?v0 ?v4 )?v3 ))))):named a75 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum$ )(?v3 T$ ))(=> (= (fun_app$u (map_sum$b ?v0 ?v1 )?v2 )(inl$ ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inl$a ?v4 ))(= (fun_app$i ?v0 ?v4 )?v3 ))))):named a76 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 T_N_sum$ )(?v3 T$ ))(=> (= (fun_app$v (map_sum$c ?v0 ?v1 )?v2 )(inl$a ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inl$a ?v4 ))(= (fun_app$i ?v0 ?v4 )?v3 ))))):named a77 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T$ ))(=> (= (fun_app$g (map_sum$ ?v0 ?v1 )?v2 )(inl$a ?v3 ))(exists ((?v4 T$ ))(and (= ?v2 (inl$ ?v4 ))(= (fun_app$i ?v0 ?v4 )?v3 ))))):named a78 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Bool )(?v3 T_dtree_sum$ )(?v4 T$ ))(= (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )(ite ?v2 ?v3 (inl$ ?v4 )))(ite ?v2 (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )?v3 )(inl$ (fun_app$i ?v0 ?v4 ))))):named a79 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 Bool )(?v3 T_N_sum$ )(?v4 T$ ))(= (fun_app$u (map_sum$b ?v0 ?v1 )(ite ?v2 ?v3 (inl$a ?v4 )))(ite ?v2 (fun_app$u (map_sum$b ?v0 ?v1 )?v3 )(inl$ (fun_app$i ?v0 ?v4 ))))):named a80 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 Bool )(?v3 T_N_sum$ )(?v4 T$ ))(= (fun_app$v (map_sum$c ?v0 ?v1 )(ite ?v2 ?v3 (inl$a ?v4 )))(ite ?v2 (fun_app$v (map_sum$c ?v0 ?v1 )?v3 )(inl$a (fun_app$i ?v0 ?v4 ))))):named a81 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Bool )(?v3 T_dtree_sum$ )(?v4 T$ ))(= (fun_app$g (map_sum$ ?v0 ?v1 )(ite ?v2 ?v3 (inl$ ?v4 )))(ite ?v2 (fun_app$g (map_sum$ ?v0 ?v1 )?v3 )(inl$a (fun_app$i ?v0 ?v4 ))))):named a82 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_dtree_sum$ ))(= (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )(ite ?v2 (inl$ ?v3 )?v4 ))(ite ?v2 (inl$ (fun_app$i ?v0 ?v3 ))(fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )?v4 )))):named a83 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_dtree_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_N_sum$ ))(= (fun_app$u (map_sum$b ?v0 ?v1 )(ite ?v2 (inl$a ?v3 )?v4 ))(ite ?v2 (inl$ (fun_app$i ?v0 ?v3 ))(fun_app$u (map_sum$b ?v0 ?v1 )?v4 )))):named a84 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 N_N_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_N_sum$ ))(= (fun_app$v (map_sum$c ?v0 ?v1 )(ite ?v2 (inl$a ?v3 )?v4 ))(ite ?v2 (inl$a (fun_app$i ?v0 ?v3 ))(fun_app$v (map_sum$c ?v0 ?v1 )?v4 )))):named a85 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Bool )(?v3 T$ )(?v4 T_dtree_sum$ ))(= (fun_app$g (map_sum$ ?v0 ?v1 )(ite ?v2 (inl$ ?v3 )?v4 ))(ite ?v2 (inl$a (fun_app$i ?v0 ?v3 ))(fun_app$g (map_sum$ ?v0 ?v1 )?v4 )))):named a86 ))
(assert (! (forall ((?v0 T_T_sum$ ))(= (fun_app$w (map_sum$d id$ id$ )?v0 )?v0 )):named a87 ))
(assert (! (= (map_sum$d id$ id$ )id$b ):named a88 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (fun_app$e (fun_app$r (fun_app$s inFr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v3 )?v1 )(member$ (inl$ ?v2 )(cont$ ?v3 )))))):named a89 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (and (fun_app$e (fun_app$r (fun_app$s inFr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 ))))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$e (fun_app$r (fun_app$s inFr$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a90 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (fun_app$e (fun_app$r (fun_app$s inFr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 )))))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$e (fun_app$r (fun_app$s inFr$ ?v4 )?v5 )?v6 )))))))))):named a91 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a92 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(= (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a93 ))
(assert (! (forall ((?v0 T$ )(?v1 N$ ))(= (= (inl$a ?v0 )(inr$a ?v1 ))false )):named a94 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ ))(= (= (inl$ ?v0 )(inr$ ?v1 ))false )):named a95 ))
(assert (! (forall ((?v0 N$ )(?v1 T$ ))(= (= (inr$a ?v0 )(inl$a ?v1 ))false )):named a96 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T$ ))(= (= (inr$ ?v0 )(inl$ ?v1 ))false )):named a97 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree$ ))(=> (= (inr$ ?v0 )(inr$ ?v1 ))(= ?v0 ?v1 ))):named a98 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v2 )(fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v2 )?v3 ))(fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v3 ))):named a99 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum$ )(?v3 Dtree$ ))(=> (= (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )?v2 )(inr$ ?v3 ))(exists ((?v4 Dtree$ ))(and (= ?v2 (inr$ ?v4 ))(= (fun_app$aa ?v1 ?v4 )?v3 ))))):named a100 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum$ )(?v3 N$ ))(=> (= (fun_app$g (map_sum$ ?v0 ?v1 )?v2 )(inr$a ?v3 ))(exists ((?v4 Dtree$ ))(and (= ?v2 (inr$ ?v4 ))(= (fun_app$q ?v1 ?v4 )?v3 ))))):named a101 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Bool )(?v3 T_dtree_sum$ )(?v4 Dtree$ ))(= (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )(ite ?v2 ?v3 (inr$ ?v4 )))(ite ?v2 (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )?v3 )(inr$ (fun_app$aa ?v1 ?v4 ))))):named a102 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Bool )(?v3 T_dtree_sum$ )(?v4 Dtree$ ))(= (fun_app$g (map_sum$ ?v0 ?v1 )(ite ?v2 ?v3 (inr$ ?v4 )))(ite ?v2 (fun_app$g (map_sum$ ?v0 ?v1 )?v3 )(inr$a (fun_app$q ?v1 ?v4 ))))):named a103 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Bool )(?v3 Dtree$ )(?v4 T_dtree_sum$ ))(= (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )(ite ?v2 (inr$ ?v3 )?v4 ))(ite ?v2 (inr$ (fun_app$aa ?v1 ?v3 ))(fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )?v4 )))):named a104 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Bool )(?v3 Dtree$ )(?v4 T_dtree_sum$ ))(= (fun_app$g (map_sum$ ?v0 ?v1 )(ite ?v2 (inr$ ?v3 )?v4 ))(ite ?v2 (inr$a (fun_app$q ?v1 ?v3 ))(fun_app$g (map_sum$ ?v0 ?v1 )?v4 )))):named a105 ))
(assert (! (forall ((?v0 T_N_sum_bool_fun$ ))(= (exists ((?v1 T_N_sum$ ))(fun_app$ab ?v0 ?v1 ))(or (exists ((?v1 T$ ))(fun_app$ab ?v0 (inl$a ?v1 )))(exists ((?v1 N$ ))(fun_app$ab ?v0 (inr$a ?v1 )))))):named a106 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ ))(= (exists ((?v1 T_dtree_sum$ ))(fun_app$d ?v0 ?v1 ))(or (exists ((?v1 T$ ))(fun_app$d ?v0 (inl$ ?v1 )))(exists ((?v1 Dtree$ ))(fun_app$d ?v0 (inr$ ?v1 )))))):named a107 ))
(assert (! (forall ((?v0 T_N_sum_bool_fun$ ))(= (forall ((?v1 T_N_sum$ ))(fun_app$ab ?v0 ?v1 ))(and (forall ((?v1 T$ ))(fun_app$ab ?v0 (inl$a ?v1 )))(forall ((?v1 N$ ))(fun_app$ab ?v0 (inr$a ?v1 )))))):named a108 ))
(assert (! (forall ((?v0 T_dtree_sum_bool_fun$ ))(= (forall ((?v1 T_dtree_sum$ ))(fun_app$d ?v0 ?v1 ))(and (forall ((?v1 T$ ))(fun_app$d ?v0 (inl$ ?v1 )))(forall ((?v1 Dtree$ ))(fun_app$d ?v0 (inr$ ?v1 )))))):named a109 ))
(assert (! (forall ((?v0 T_N_sum$ ))(=> (and (forall ((?v1 T$ ))(=> (= ?v0 (inl$a ?v1 ))false ))(forall ((?v1 N$ ))(=> (= ?v0 (inr$a ?v1 ))false )))false )):named a110 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(=> (and (forall ((?v1 T$ ))(=> (= ?v0 (inl$ ?v1 ))false ))(forall ((?v1 Dtree$ ))(=> (= ?v0 (inr$ ?v1 ))false )))false )):named a111 ))
(assert (! (forall ((?v0 T_N_sum$ ))(=> (and (forall ((?v1 T$ ))(=> (= ?v0 (inl$a ?v1 ))false ))(forall ((?v1 N$ ))(=> (= ?v0 (inr$a ?v1 ))false )))false )):named a112 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(=> (and (forall ((?v1 T$ ))(=> (= ?v0 (inl$ ?v1 ))false ))(forall ((?v1 Dtree$ ))(=> (= ?v0 (inr$ ?v1 ))false )))false )):named a113 ))
(assert (! (forall ((?v0 T_set$ ))(= (collect$a (uua$ ?v0 ))?v0 )):named a114 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ ))(= (collect$ (uub$ ?v0 ))?v0 )):named a115 ))
(assert (! (forall ((?v0 N_set$ ))(= (collect$b (uuc$ ?v0 ))?v0 )):named a116 ))
(assert (! (forall ((?v0 T$ )(?v1 T_bool_fun$ ))(= (member$a ?v0 (collect$a ?v1 ))(fun_app$e ?v1 ?v0 ))):named a117 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_bool_fun$ ))(= (member$ ?v0 (collect$ ?v1 ))(fun_app$d ?v1 ?v0 ))):named a118 ))
(assert (! (forall ((?v0 N$ )(?v1 N_bool_fun$ ))(= (member$b ?v0 (collect$b ?v1 ))(fun_app$f ?v1 ?v0 ))):named a119 ))
(assert (! (forall ((?v0 N$ )(?v1 T$ ))(not (= (inr$a ?v0 )(inl$a ?v1 )))):named a120 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T$ ))(not (= (inr$ ?v0 )(inl$ ?v1 )))):named a121 ))
(assert (! (forall ((?v0 T$ )(?v1 N$ ))(not (= (inl$a ?v0 )(inr$a ?v1 )))):named a122 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ ))(not (= (inl$ ?v0 )(inr$ ?v1 )))):named a123 ))
(assert (! (forall ((?v0 N$ )(?v1 T$ ))(not (= (inr$a ?v0 )(inl$a ?v1 )))):named a124 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 T$ ))(not (= (inr$ ?v0 )(inl$ ?v1 )))):named a125 ))
(assert (! (forall ((?v0 T$ )(?v1 N$ ))(not (= (inl$a ?v0 )(inr$a ?v1 )))):named a126 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree$ ))(not (= (inl$ ?v0 )(inr$ ?v1 )))):named a127 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$b (fun_app$q root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v4 )?v5 )?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 ))))))))))):named a128 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 N_set_dtree_dtree_bool_fun_fun_fun$ ))(=> (and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v2 )(and (forall ((?v4 N_set$ )(?v5 Dtree$ ))(fun_app$x (fun_app$y (fun_app$z ?v3 ?v4 )?v5 )?v5 ))(forall ((?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ )(?v7 Dtree$ ))(=> (and (member$b (fun_app$q root$ ?v5 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v6 ))(and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v4 )?v6 )?v7 )(fun_app$x (fun_app$y (fun_app$z ?v3 ?v4 )?v6 )?v7 ))))(fun_app$x (fun_app$y (fun_app$z ?v3 ?v4 )?v5 )?v7 )))))(fun_app$x (fun_app$y (fun_app$z ?v3 ?v0 )?v1 )?v2 ))):named a129 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$b (fun_app$q root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v5 )(and (= ?v2 ?v3 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v4 )?v5 )?v6 )(member$ (inr$ ?v6 )(cont$ ?v3 )))))))false ))))false )):named a130 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$b (fun_app$q root$ ?v0 )?v1 )(and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v1 )?v2 )?v3 )(member$ (inr$ ?v3 )(cont$ ?v0 ))))(fun_app$x (fun_app$y (fun_app$z subtr$ ?v1 )?v2 )?v0 ))):named a131 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (member$b (fun_app$q root$ ?v0 )?v1 )(and (member$ (inr$ ?v0 )(cont$ ?v2 ))(fun_app$x (fun_app$y (fun_app$z subtr$ ?v1 )?v2 )?v3 )))(fun_app$x (fun_app$y (fun_app$z subtr$ ?v1 )?v0 )?v3 ))):named a132 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_dtree_fun$ )(?v2 Dtree$ ))(! (= (fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )(inr$ ?v2 ))(inr$ (fun_app$aa ?v1 ?v2 ))):pattern ((fun_app$l (fun_app$t (map_sum$a ?v0 )?v1 )(inr$ ?v2 ))))):named a133 ))
(assert (! (forall ((?v0 T_T_fun$ )(?v1 Dtree_N_fun$ )(?v2 Dtree$ ))(! (= (fun_app$g (map_sum$ ?v0 ?v1 )(inr$ ?v2 ))(inr$a (fun_app$q ?v1 ?v2 ))):pattern ((fun_app$g (map_sum$ ?v0 ?v1 )(inr$ ?v2 ))))):named a134 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$q root$ ?v0 )?v1 )(fun_app$x (fun_app$y (fun_app$z subtr$ ?v1 )?v0 )?v0 ))):named a135 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v2 )(member$b (fun_app$q root$ ?v1 )?v0 ))):named a136 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v2 )(member$b (fun_app$q root$ ?v2 )?v0 ))):named a137 ))
(assert (! (forall ((?v0 T_N_sum_set$ )(?v1 T_N_sum_set$ ))(=> (and (= (vimage$i uud$ ?v0 )(vimage$i uud$ ?v1 ))(= (vimage$j uue$ ?v0 )(vimage$j uue$ ?v1 )))(= ?v0 ?v1 ))):named a138 ))
(assert (! (forall ((?v0 T_dtree_sum_set$ )(?v1 T_dtree_sum_set$ ))(=> (and (= (vimage$ uu$ ?v0 )(vimage$ uu$ ?v1 ))(= (vimage$k uuf$ ?v0 )(vimage$k uuf$ ?v1 )))(= ?v0 ?v1 ))):named a139 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$e (fun_app$r (fun_app$s inFr$ ?v0 )?v1 )?v2 )(fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v3 ))(fun_app$e (fun_app$r (fun_app$s inFr$ ?v0 )?v3 )?v2 ))):named a140 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 T$ ))(=> (and (member$b (fun_app$q root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$e (fun_app$r (fun_app$s inFr$ ?v1 )?v2 )?v3 )))(fun_app$e (fun_app$r (fun_app$s inFr$ ?v1 )?v0 )?v3 ))):named a141 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$e (fun_app$r (fun_app$s inFr2$ ?v0 )?v1 )?v2 )(and (member$b (fun_app$q root$ ?v3 )?v0 )(member$ (inr$ ?v1 )(cont$ ?v3 ))))(fun_app$e (fun_app$r (fun_app$s inFr2$ ?v0 )?v3 )?v2 ))):named a142 ))
(assert (! (forall ((?v0 T$ ))(! (= (fun_app$i id$ ?v0 )?v0 ):pattern ((fun_app$i id$ ?v0 )))):named a143 ))
(assert (! (forall ((?v0 Dtree$ ))(= (node$ (fun_app$q root$ ?v0 )(cont$ ?v0 ))?v0 )):named a144 ))
(assert (! (forall ((?v0 T_N_sum$ ))(=> (and (forall ((?v1 T$ ))(=> (= ?v0 (inl$a ?v1 ))false ))(forall ((?v1 N$ ))(=> (= ?v0 (inr$a ?v1 ))false )))false )):named a145 ))
(assert (! (forall ((?v0 T_dtree_sum$ ))(=> (and (forall ((?v1 T$ ))(=> (= ?v0 (inl$ ?v1 ))false ))(forall ((?v1 Dtree$ ))(=> (= ?v0 (inr$ ?v1 ))false )))false )):named a146 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(= (fun_app$e (fun_app$r (fun_app$s inFr2$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 )))))))(exists ((?v3 Dtree$ )(?v4 Dtree$ )(?v5 N_set$ )(?v6 T$ ))(and (= ?v0 (insert$ (fun_app$q root$ ?v4 )?v5 ))(and (= ?v1 ?v4 )(and (= ?v2 ?v6 )(and (member$ (inr$ ?v3 )(cont$ ?v4 ))(fun_app$e (fun_app$r (fun_app$s inFr2$ ?v5 )?v3 )?v6 ))))))))):named a147 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ ))(=> (and (fun_app$e (fun_app$r (fun_app$s inFr2$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 T$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v5 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(member$ (inl$ ?v5 )(cont$ ?v3 ))))))false ))(forall ((?v3 Dtree$ )(?v4 Dtree$ )(?v5 N_set$ )(?v6 T$ ))(=> (and (= ?v0 (insert$ (fun_app$q root$ ?v4 )?v5 ))(and (= ?v1 ?v4 )(and (= ?v2 ?v6 )(and (member$ (inr$ ?v3 )(cont$ ?v4 ))(fun_app$e (fun_app$r (fun_app$s inFr2$ ?v5 )?v3 )?v6 )))))false ))))false )):named a148 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(= (fun_app$f (fun_app$ac (inItr$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$q root$ ?v3 ))(member$b (fun_app$q root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$f (fun_app$ac (inItr$ ?v4 )?v5 )?v6 )))))))))):named a149 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (and (fun_app$f (fun_app$ac (inItr$ ?v0 )?v1 )?v2 )(and (forall ((?v3 Dtree$ )(?v4 N_set$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 (fun_app$q root$ ?v3 ))(member$b (fun_app$q root$ ?v3 )?v4 ))))false ))(forall ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 N$ ))(=> (and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(and (member$ (inr$ ?v5 )(cont$ ?v3 ))(fun_app$f (fun_app$ac (inItr$ ?v4 )?v5 )?v6 ))))))false ))))false )):named a150 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ )(?v2 Dtree$ )(?v3 N$ ))(=> (and (member$b (fun_app$q root$ ?v0 )?v1 )(and (member$ (inr$ ?v2 )(cont$ ?v0 ))(fun_app$f (fun_app$ac (inItr$ ?v1 )?v2 )?v3 )))(fun_app$f (fun_app$ac (inItr$ ?v1 )?v0 )?v3 ))):named a151 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 T_dtree_sum_set$ ))(= (vimage$ uu$ (image$ (fun_app$t (map_sum$a id$ )?v0 )?v1 ))(vimage$ uu$ ?v1 ))):named a152 ))
(assert (! (forall ((?v0 N_dtree_fun$ )(?v1 T_N_sum_set$ ))(= (vimage$ uu$ (image$a (map_sum$b id$ ?v0 )?v1 ))(vimage$i uud$ ?v1 ))):named a153 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 T_N_sum_set$ ))(= (vimage$i uud$ (image$b (map_sum$c id$ ?v0 )?v1 ))(vimage$i uud$ ?v1 ))):named a154 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 T_dtree_sum_set$ ))(= (vimage$i uud$ (image$c (map_sum$ id$ ?v0 )?v1 ))(vimage$ uu$ ?v1 ))):named a155 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(= (fun_app$x (fun_app$y (fun_app$z subtr2$ ?v0 )?v1 )?v2 )(or (exists ((?v3 Dtree$ )(?v4 N_set$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v3 )(member$b (fun_app$q root$ ?v3 )?v4 )))))(exists ((?v3 Dtree$ )(?v4 N_set$ )(?v5 Dtree$ )(?v6 Dtree$ ))(and (= ?v0 ?v4 )(and (= ?v1 ?v3 )(and (= ?v2 ?v6 )(and (member$b (fun_app$q root$ ?v3 )?v4 )(and (member$ (inr$ ?v3 )(cont$ ?v5 ))(fun_app$x (fun_app$y (fun_app$z subtr2$ ?v4 )?v5 )?v6 )))))))))):named a156 ))
(assert (! (forall ((?v0 T$ )(?v1 T_T_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$i ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$a ?v0 (fun_app$h (image$d ?v1 )?v3 )))):named a157 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_T_dtree_sum_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$b ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$ ?v0 (image$e ?v1 ?v3 )))):named a158 ))
(assert (! (forall ((?v0 N$ )(?v1 T_N_fun$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (= ?v0 (fun_app$j ?v1 ?v2 ))(member$a ?v2 ?v3 ))(member$b ?v0 (image$f ?v1 ?v3 )))):named a159 ))
(assert (! (forall ((?v0 T$ )(?v1 T_dtree_sum_T_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$k ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$a ?v0 (image$g ?v1 ?v3 )))):named a160 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_T_dtree_sum_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$l ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$ ?v0 (image$ ?v1 ?v3 )))):named a161 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_N_fun$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (= ?v0 (fun_app$m ?v1 ?v2 ))(member$ ?v2 ?v3 ))(member$b ?v0 (image$h ?v1 ?v3 )))):named a162 ))
(assert (! (forall ((?v0 T$ )(?v1 N_T_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$n ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$a ?v0 (image$i ?v1 ?v3 )))):named a163 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 N_T_dtree_sum_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$o ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$ ?v0 (image$j ?v1 ?v3 )))):named a164 ))
(assert (! (forall ((?v0 N$ )(?v1 N_N_fun$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (= ?v0 (fun_app$p ?v1 ?v2 ))(member$b ?v2 ?v3 ))(member$b ?v0 (image$k ?v1 ?v3 )))):named a165 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T$ ))(=> (=> (not (member$a ?v0 ?v1 ))(= ?v0 ?v2 ))(member$a ?v0 (insert$a ?v2 ?v1 )))):named a166 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ ))(=> (=> (not (member$ ?v0 ?v1 ))(= ?v0 ?v2 ))(member$ ?v0 (insert$b ?v2 ?v1 )))):named a167 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ ))(=> (=> (not (member$b ?v0 ?v1 ))(= ?v0 ?v2 ))(member$b ?v0 (insert$ ?v2 ?v1 )))):named a168 ))
(assert (! (forall ((?v0 T$ )(?v1 T$ )(?v2 T_set$ ))(= (member$a ?v0 (insert$a ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$a ?v0 ?v2 )))):named a169 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum$ )(?v2 T_dtree_sum_set$ ))(= (member$ ?v0 (insert$b ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$ ?v0 ?v2 )))):named a170 ))
(assert (! (forall ((?v0 N$ )(?v1 N$ )(?v2 N_set$ ))(= (member$b ?v0 (insert$ ?v1 ?v2 ))(or (= ?v0 ?v1 )(member$b ?v0 ?v2 )))):named a171 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(= (insert$ ?v0 (insert$ ?v0 ?v1 ))(insert$ ?v0 ?v1 ))):named a172 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_N_fun$ ))(=> (member$a ?v0 ?v1 )(= (insert$ (fun_app$j ?v2 ?v0 )(image$f ?v2 ?v1 ))(image$f ?v2 ?v1 )))):named a173 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_N_fun$ ))(=> (member$ ?v0 ?v1 )(= (insert$ (fun_app$m ?v2 ?v0 )(image$h ?v2 ?v1 ))(image$h ?v2 ?v1 )))):named a174 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$b ?v0 ?v1 )(= (insert$ (fun_app$p ?v2 ?v0 )(image$k ?v2 ?v1 ))(image$k ?v2 ?v1 )))):named a175 ))
(assert (! (forall ((?v0 N_N_fun$ )(?v1 N$ )(?v2 N_set$ ))(= (image$k ?v0 (insert$ ?v1 ?v2 ))(insert$ (fun_app$p ?v0 ?v1 )(image$k ?v0 ?v2 )))):named a176 ))
(assert (! (forall ((?v0 N$ )(?v1 T_dtree_sum_set$ ))(= (fun_app$q root$ (node$ ?v0 ?v1 ))?v0 )):named a177 ))
(assert (! (= (image$d id$ )id$a ):named a178 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ (inr$ ?v0 )(image$ (fun_app$t (map_sum$a id$ )?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$aa ?v1 ?v3 )?v0 ))))):named a179 ))
(assert (! (forall ((?v0 N$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$c (inr$a ?v0 )(image$c (map_sum$ id$ ?v1 )?v2 ))(exists ((?v3 Dtree$ ))(and (member$ (inr$ ?v3 )?v2 )(= (fun_app$q ?v1 ?v3 )?v0 ))))):named a180 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree_dtree_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$ (inl$ ?v0 )(image$ (fun_app$t (map_sum$a id$ )?v1 )?v2 ))(member$ (inl$ ?v0 )?v2 ))):named a181 ))
(assert (! (forall ((?v0 T$ )(?v1 N_dtree_fun$ )(?v2 T_N_sum_set$ ))(= (member$ (inl$ ?v0 )(image$a (map_sum$b id$ ?v1 )?v2 ))(member$c (inl$a ?v0 )?v2 ))):named a182 ))
(assert (! (forall ((?v0 T$ )(?v1 N_N_fun$ )(?v2 T_N_sum_set$ ))(= (member$c (inl$a ?v0 )(image$b (map_sum$c id$ ?v1 )?v2 ))(member$c (inl$a ?v0 )?v2 ))):named a183 ))
(assert (! (forall ((?v0 T$ )(?v1 Dtree_N_fun$ )(?v2 T_dtree_sum_set$ ))(= (member$c (inl$a ?v0 )(image$c (map_sum$ id$ ?v1 )?v2 ))(member$ (inl$ ?v0 )?v2 ))):named a184 ))
(assert (! (forall ((?v0 Dtree_dtree_fun$ )(?v1 T_dtree_sum_set$ ))(= (vimage$k uuf$ (image$ (fun_app$t (map_sum$a id$ )?v0 )?v1 ))(image$l ?v0 (vimage$k uuf$ ?v1 )))):named a185 ))
(assert (! (forall ((?v0 Dtree_N_fun$ )(?v1 T_dtree_sum_set$ ))(= (vimage$j uue$ (image$c (map_sum$ id$ ?v0 )?v1 ))(image$m ?v0 (vimage$k uuf$ ?v1 )))):named a186 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ )(?v3 Dtree$ ))(=> (and (fun_app$x (fun_app$y (fun_app$z subtr2$ ?v0 )?v1 )?v2 )(fun_app$x (fun_app$y (fun_app$z subtr2$ ?v0 )?v2 )?v3 ))(fun_app$x (fun_app$y (fun_app$z subtr2$ ?v0 )?v1 )?v3 ))):named a187 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ ))(member$a ?v0 (insert$a ?v0 ?v1 ))):named a188 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ ))(member$ ?v0 (insert$b ?v0 ?v1 ))):named a189 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(member$b ?v0 (insert$ ?v0 ?v1 ))):named a190 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_set$ ))(=> (and (not (member$a ?v0 ?v1 ))(not (member$a ?v0 ?v2 )))(= (= (insert$a ?v0 ?v1 )(insert$a ?v0 ?v2 ))(= ?v1 ?v2 )))):named a191 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v0 ?v2 )))(= (= (insert$b ?v0 ?v1 )(insert$b ?v0 ?v2 ))(= ?v1 ?v2 )))):named a192 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_set$ ))(=> (and (not (member$b ?v0 ?v1 ))(not (member$b ?v0 ?v2 )))(= (= (insert$ ?v0 ?v1 )(insert$ ?v0 ?v2 ))(= ?v1 ?v2 )))):named a193 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T$ )(?v3 T_set$ ))(=> (and (not (member$a ?v0 ?v1 ))(not (member$a ?v2 ?v3 )))(= (= (insert$a ?v0 ?v1 )(insert$a ?v2 ?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 T_set$ ))(and (= ?v1 (insert$a ?v2 ?v4 ))(and (not (member$a ?v2 ?v4 ))(and (= ?v3 (insert$a ?v0 ?v4 ))(not (member$a ?v0 ?v4 )))))))))):named a194 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ )(?v3 T_dtree_sum_set$ ))(=> (and (not (member$ ?v0 ?v1 ))(not (member$ ?v2 ?v3 )))(= (= (insert$b ?v0 ?v1 )(insert$b ?v2 ?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 T_dtree_sum_set$ ))(and (= ?v1 (insert$b ?v2 ?v4 ))(and (not (member$ ?v2 ?v4 ))(and (= ?v3 (insert$b ?v0 ?v4 ))(not (member$ ?v0 ?v4 )))))))))):named a195 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ )(?v3 N_set$ ))(=> (and (not (member$b ?v0 ?v1 ))(not (member$b ?v2 ?v3 )))(= (= (insert$ ?v0 ?v1 )(insert$ ?v2 ?v3 ))(ite (= ?v0 ?v2 )(= ?v1 ?v3 )(exists ((?v4 N_set$ ))(and (= ?v1 (insert$ ?v2 ?v4 ))(and (not (member$b ?v2 ?v4 ))(and (= ?v3 (insert$ ?v0 ?v4 ))(not (member$b ?v0 ?v4 )))))))))):named a196 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ ))(=> (member$a ?v0 ?v1 )(exists ((?v2 T_set$ ))(and (= ?v1 (insert$a ?v0 ?v2 ))(not (member$a ?v0 ?v2 )))))):named a197 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ ))(=> (member$ ?v0 ?v1 )(exists ((?v2 T_dtree_sum_set$ ))(and (= ?v1 (insert$b ?v0 ?v2 ))(not (member$ ?v0 ?v2 )))))):named a198 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ ))(=> (member$b ?v0 ?v1 )(exists ((?v2 N_set$ ))(and (= ?v1 (insert$ ?v0 ?v2 ))(not (member$b ?v0 ?v2 )))))):named a199 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T$ ))(=> (member$a ?v0 ?v1 )(member$a ?v0 (insert$a ?v2 ?v1 )))):named a200 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum$ ))(=> (member$ ?v0 ?v1 )(member$ ?v0 (insert$b ?v2 ?v1 )))):named a201 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N$ ))(=> (member$b ?v0 ?v1 )(member$b ?v0 (insert$ ?v2 ?v1 )))):named a202 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_T_fun$ ))(=> (member$a ?v0 ?v1 )(member$a (fun_app$i ?v2 ?v0 )(fun_app$h (image$d ?v2 )?v1 )))):named a203 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_T_dtree_sum_fun$ ))(=> (member$a ?v0 ?v1 )(member$ (fun_app$b ?v2 ?v0 )(image$e ?v2 ?v1 )))):named a204 ))
(assert (! (forall ((?v0 T$ )(?v1 T_set$ )(?v2 T_N_fun$ ))(=> (member$a ?v0 ?v1 )(member$b (fun_app$j ?v2 ?v0 )(image$f ?v2 ?v1 )))):named a205 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_fun$ ))(=> (member$ ?v0 ?v1 )(member$a (fun_app$k ?v2 ?v0 )(image$g ?v2 ?v1 )))):named a206 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_T_dtree_sum_fun$ ))(=> (member$ ?v0 ?v1 )(member$ (fun_app$l ?v2 ?v0 )(image$ ?v2 ?v1 )))):named a207 ))
(assert (! (forall ((?v0 T_dtree_sum$ )(?v1 T_dtree_sum_set$ )(?v2 T_dtree_sum_N_fun$ ))(=> (member$ ?v0 ?v1 )(member$b (fun_app$m ?v2 ?v0 )(image$h ?v2 ?v1 )))):named a208 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_fun$ ))(=> (member$b ?v0 ?v1 )(member$a (fun_app$n ?v2 ?v0 )(image$i ?v2 ?v1 )))):named a209 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_T_dtree_sum_fun$ ))(=> (member$b ?v0 ?v1 )(member$ (fun_app$o ?v2 ?v0 )(image$j ?v2 ?v1 )))):named a210 ))
(assert (! (forall ((?v0 N$ )(?v1 N_set$ )(?v2 N_N_fun$ ))(=> (member$b ?v0 ?v1 )(member$b (fun_app$p ?v2 ?v0 )(image$k ?v2 ?v1 )))):named a211 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$x (fun_app$y (fun_app$z subtr2$ ?v0 )?v1 )?v2 )(member$b (fun_app$q root$ ?v2 )?v0 ))):named a212 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 Dtree$ ))(=> (fun_app$x (fun_app$y (fun_app$z subtr2$ ?v0 )?v1 )?v2 )(member$b (fun_app$q root$ ?v1 )?v0 ))):named a213 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$q root$ ?v0 )?v1 )(fun_app$x (fun_app$y (fun_app$z subtr2$ ?v1 )?v0 )?v0 ))):named a214 ))
(assert (! (= subtr$ subtr2$ ):named a215 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$f (fun_app$ac (inItr$ ?v0 )?v1 )?v2 )(member$b (fun_app$q root$ ?v1 )?v0 ))):named a216 ))
(assert (! (forall ((?v0 Dtree$ )(?v1 N_set$ ))(=> (member$b (fun_app$q root$ ?v0 )?v1 )(fun_app$f (fun_app$ac (inItr$ ?v1 )?v0 )(fun_app$q root$ ?v0 )))):named a217 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ )(?v3 Dtree$ ))(=> (and (fun_app$f (fun_app$ac (inItr$ ?v0 )?v1 )?v2 )(fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v1 )?v3 ))(fun_app$f (fun_app$ac (inItr$ ?v0 )?v3 )?v2 ))):named a218 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 N$ ))(=> (fun_app$f (fun_app$ac (inItr$ ?v0 )?v1 )?v2 )(exists ((?v3 Dtree$ ))(and (fun_app$x (fun_app$y (fun_app$z subtr$ ?v0 )?v3 )?v1 )(= (fun_app$q root$ ?v3 )?v2 ))))):named a219 ))
(assert (! (forall ((?v0 N_set$ )(?v1 Dtree$ )(?v2 T$ )(?v3 Dtree$ ))(=> (and (fun_app$e (fun_app$r (fun_app$s inFr$ ?v0 )?v1 )?v2 )(member$ (inr$ ?v1 )(cont$ ?v3 )))(fun_app$e (fun_app$r (fun_app$s inFr$ (insert$ (fun_app$q root$ ?v3 )?v0 ))?v3 )?v2 ))):named a220 ))
(check-sat )
(get-unsat-core )
