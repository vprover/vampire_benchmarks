(set-option :produce-unsat-cores true )
(set-logic AUFDTLIA )
(declare-sort A$ 0 )
(declare-sort B$ 0 )
(declare-sort C$ 0 )
(declare-sort Nat$ 0 )
(declare-sort A_set$ 0 )
(declare-sort B_set$ 0 )
(declare-sort C_set$ 0 )
(declare-sort A_a_fun$ 0 )
(declare-sort A_b_fun$ 0 )
(declare-sort B_a_fun$ 0 )
(declare-sort B_b_fun$ 0 )
(declare-sort C_b_fun$ 0 )
(declare-sort A_b_sp_nu$ 0 )
(declare-sort A_c_sp_nu$ 0 )
(declare-sort C_b_sp_nu$ 0 )
(declare-sort A_bool_fun$ 0 )
(declare-sort B_bool_fun$ 0 )
(declare-sort C_bool_fun$ 0 )
(declare-sort A_a_prod_set$ 0 )
(declare-sort A_b_prod_set$ 0 )
(declare-sort A_stream_set$ 0 )
(declare-sort B_a_prod_set$ 0 )
(declare-sort B_b_prod_set$ 0 )
(declare-sort B_stream_set$ 0 )
(declare-sort C_stream_set$ 0 )
(declare-sort A_a_a_fun_fun$ 0 )
(declare-sort A_a_b_fun_fun$ 0 )
(declare-sort A_b_a_fun_fun$ 0 )
(declare-sort A_b_b_fun_fun$ 0 )
(declare-sort A_c_b_fun_fun$ 0 )
(declare-sort A_c_sp_nu_set$ 0 )
(declare-sort B_a_a_fun_fun$ 0 )
(declare-sort B_a_b_fun_fun$ 0 )
(declare-sort B_b_a_fun_fun$ 0 )
(declare-sort B_b_b_fun_fun$ 0 )
(declare-sort B_c_b_fun_fun$ 0 )
(declare-sort Bool_bool_fun$ 0 )
(declare-sort C_a_b_fun_fun$ 0 )
(declare-sort C_b_b_fun_fun$ 0 )
(declare-sort C_b_sp_nu_set$ 0 )
(declare-sort C_c_b_fun_fun$ 0 )
(declare-sort A_stream_a_fun$ 0 )
(declare-sort B_stream_b_fun$ 0 )
(declare-sort A_a_prod_bool_fun$ 0 )
(declare-sort A_b_prod_bool_fun$ 0 )
(declare-sort A_stream_bool_fun$ 0 )
(declare-sort B_a_prod_bool_fun$ 0 )
(declare-sort B_b_prod_bool_fun$ 0 )
(declare-sort B_stream_bool_fun$ 0 )
(declare-sort C_stream_bool_fun$ 0 )
(declare-sort A_c_sp_nu_bool_fun$ 0 )
(declare-sort C_b_sp_nu_bool_fun$ 0 )
(declare-sort A_a_prod_stream_set$ 0 )
(declare-sort A_b_prod_stream_set$ 0 )
(declare-sort A_c_a_c_sp_nu_sp_mu$ 0 )
(declare-sort A_stream_stream_set$ 0 )
(declare-sort B_a_prod_stream_set$ 0 )
(declare-sort B_b_prod_stream_set$ 0 )
(declare-sort B_stream_stream_set$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu$ 0 )
(declare-sort A_a_stream_a_fun_fun$ 0 )
(declare-sort B_b_stream_b_fun_fun$ 0 )
(declare-sort A_stream_a_stream_fun$ 0 )
(declare-sort B_stream_b_stream_fun$ 0 )
(declare-sort A_a_stream_bool_fun_fun$ 0 )
(declare-sort B_b_stream_bool_fun_fun$ 0 )
(declare-sort A_a_prod_stream_bool_fun$ 0 )
(declare-sort A_b_prod_stream_bool_fun$ 0 )
(declare-sort A_stream_stream_bool_fun$ 0 )
(declare-sort B_a_prod_stream_bool_fun$ 0 )
(declare-sort B_b_prod_stream_bool_fun$ 0 )
(declare-sort B_stream_stream_bool_fun$ 0 )
(declare-sort C_a_c_sp_nu_bool_fun_fun$ 0 )
(declare-sort A_a_c_a_c_sp_nu_sp_mu_fun$ 0 )
(declare-sort A_bool_fun_a_bool_fun_fun$ 0 )
(declare-sort B_bool_fun_b_bool_fun_fun$ 0 )
(declare-sort C_c_b_c_b_sp_nu_sp_mu_fun$ 0 )
(declare-sort B_b_stream_b_stream_fun_fun$ 0 )
(declare-sort A_c_a_c_sp_nu_sp_mu_bool_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_bool_fun$ 0 )
(declare-sort A_stream_a_stream_bool_fun_fun$ 0 )
(declare-sort B_stream_b_stream_bool_fun_fun$ 0 )
(declare-sort C_stream_c_stream_bool_fun_fun$ 0 )
(declare-sort A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ 0 )
(declare-sort A_bool_fun_a_stream_a_stream_fun_fun$ 0 )
(declare-sort B_bool_fun_b_stream_b_stream_fun_fun$ 0 )
(declare-sort A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ 0 )
(declare-sort A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ 0 )
(declare-sort A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_b_prod_stream_a_b_prod_stream_bool_fun_fun$ 0 )
(declare-sort B_a_prod_stream_b_a_prod_stream_bool_fun_fun$ 0 )
(declare-sort B_b_prod_stream_b_b_prod_stream_bool_fun_fun$ 0 )
(declare-sort A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ 0 )
(declare-sort B_bool_fun_b_stream_prod_b_stream_bool_fun_fun$ 0 )
(declare-sort A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_set$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ 0 )
(declare-sort A_c_sp_nu_bool_fun_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ 0 )
(declare-sort C_b_sp_nu_bool_fun_c_b_c_b_sp_nu_sp_mu_bool_fun_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ 0 )
(declare-sort A_a_c_a_c_sp_nu_sp_mu_fun_a_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun_fun$ 0 )
(declare-sort C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_bool_fun_fun$ 0 )
(declare-sort B_stream$ 0)
(declare-sort A_stream$ 0)
(declare-sort C_stream$ 0)
(declare-fun shd$ (B_stream$)B$)
(declare-fun stl$ (B_stream$)B_stream$)
(declare-fun sCons$ (B$ B_stream$ )B_stream$)
(declare-fun shd$a (A_stream$)A$)
(declare-fun stl$a (A_stream$)A_stream$)
(declare-fun sCons$a (A$ A_stream$ )A_stream$)
(declare-fun shd$b (C_stream$)C$)
(declare-fun stl$b (C_stream$)C_stream$)
(declare-fun sCons$b (C$ C_stream$ )C_stream$)
(declare-sort A_a_prod$ 0)
(declare-fun fst$ (A_a_prod$)A$)
(declare-fun snd$ (A_a_prod$)A$)
(declare-fun pair$ (A$ A$ )A_a_prod$)
(declare-sort A_a_prod_stream$ 0)
(declare-fun shd$c (A_a_prod_stream$)A_a_prod$)
(declare-fun stl$c (A_a_prod_stream$)A_a_prod_stream$)
(declare-fun sCons$c (A_a_prod$ A_a_prod_stream$ )A_a_prod_stream$)
(declare-sort A_b_prod$ 0)
(declare-fun fst$a (A_b_prod$)A$)
(declare-fun snd$a (A_b_prod$)B$)
(declare-fun pair$a (A$ B$ )A_b_prod$)
(declare-sort A_b_prod_stream$ 0)
(declare-fun shd$d (A_b_prod_stream$)A_b_prod$)
(declare-fun stl$d (A_b_prod_stream$)A_b_prod_stream$)
(declare-fun sCons$d (A_b_prod$ A_b_prod_stream$ )A_b_prod_stream$)
(declare-sort B_a_prod$ 0)
(declare-fun fst$b (B_a_prod$)B$)
(declare-fun snd$b (B_a_prod$)A$)
(declare-fun pair$b (B$ A$ )B_a_prod$)
(declare-sort B_a_prod_stream$ 0)
(declare-fun shd$e (B_a_prod_stream$)B_a_prod$)
(declare-fun stl$e (B_a_prod_stream$)B_a_prod_stream$)
(declare-fun sCons$e (B_a_prod$ B_a_prod_stream$ )B_a_prod_stream$)
(declare-sort B_b_prod$ 0)
(declare-fun fst$c (B_b_prod$)B$)
(declare-fun snd$c (B_b_prod$)B$)
(declare-fun pair$c (B$ B$ )B_b_prod$)
(declare-sort B_b_prod_stream$ 0)
(declare-sort B_stream_stream$ 0)
(declare-sort A_stream_stream$ 0)
(declare-fun shd$f (B_b_prod_stream$)B_b_prod$)
(declare-fun stl$f (B_b_prod_stream$)B_b_prod_stream$)
(declare-fun sCons$f (B_b_prod$ B_b_prod_stream$ )B_b_prod_stream$)
(declare-fun shd$g (B_stream_stream$)B_stream$)
(declare-fun stl$g (B_stream_stream$)B_stream_stream$)
(declare-fun sCons$g (B_stream$ B_stream_stream$ )B_stream_stream$)
(declare-fun shd$h (A_stream_stream$)A_stream$)
(declare-fun stl$h (A_stream_stream$)A_stream_stream$)
(declare-fun sCons$h (A_stream$ A_stream_stream$ )A_stream_stream$)
(declare-sort C_b_sp_nu_a_c_sp_nu_prod$ 0)
(declare-sort B_c_b_sp_nu_a_c_sp_nu_prod_prod$ 0)
(declare-sort B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$ 0)
(declare-sort C_a_c_sp_nu_prod$ 0)
(declare-sort C_a_c_sp_nu_prod_a_stream_prod$ 0)
(declare-sort B_c_b_sp_nu_prod$ 0)
(declare-sort B_c_b_sp_nu_prod_c_stream_prod$ 0)
(declare-sort A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$ 0)
(declare-sort C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ 0)
(declare-sort A_bool_fun_a_stream_prod$ 0)
(declare-sort B_bool_fun_b_stream_prod$ 0)
(declare-sort C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$ 0)
(declare-fun fst$d (C_b_sp_nu_a_c_sp_nu_prod$)C_b_sp_nu$)
(declare-fun snd$d (C_b_sp_nu_a_c_sp_nu_prod$)A_c_sp_nu$)
(declare-fun pair$d (C_b_sp_nu$ A_c_sp_nu$ )C_b_sp_nu_a_c_sp_nu_prod$)
(declare-fun fst$e (B_c_b_sp_nu_a_c_sp_nu_prod_prod$)B$)
(declare-fun snd$e (B_c_b_sp_nu_a_c_sp_nu_prod_prod$)C_b_sp_nu_a_c_sp_nu_prod$)
(declare-fun pair$e (B$ C_b_sp_nu_a_c_sp_nu_prod$ )B_c_b_sp_nu_a_c_sp_nu_prod_prod$)
(declare-fun fst$f (B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$)B_c_b_sp_nu_a_c_sp_nu_prod_prod$)
(declare-fun snd$f (B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$)A_stream$)
(declare-fun pair$f (B_c_b_sp_nu_a_c_sp_nu_prod_prod$ A_stream$ )B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$)
(declare-fun fst$g (C_a_c_sp_nu_prod$)C$)
(declare-fun snd$g (C_a_c_sp_nu_prod$)A_c_sp_nu$)
(declare-fun pair$g (C$ A_c_sp_nu$ )C_a_c_sp_nu_prod$)
(declare-fun fst$h (C_a_c_sp_nu_prod_a_stream_prod$)C_a_c_sp_nu_prod$)
(declare-fun snd$h (C_a_c_sp_nu_prod_a_stream_prod$)A_stream$)
(declare-fun pair$h (C_a_c_sp_nu_prod$ A_stream$ )C_a_c_sp_nu_prod_a_stream_prod$)
(declare-fun fst$i (B_c_b_sp_nu_prod$)B$)
(declare-fun snd$i (B_c_b_sp_nu_prod$)C_b_sp_nu$)
(declare-fun pair$i (B$ C_b_sp_nu$ )B_c_b_sp_nu_prod$)
(declare-fun fst$j (B_c_b_sp_nu_prod_c_stream_prod$)B_c_b_sp_nu_prod$)
(declare-fun snd$j (B_c_b_sp_nu_prod_c_stream_prod$)C_stream$)
(declare-fun pair$j (B_c_b_sp_nu_prod$ C_stream$ )B_c_b_sp_nu_prod_c_stream_prod$)
(declare-fun fst$k (A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)A_c_a_c_sp_nu_sp_mu$)
(declare-fun snd$k (A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)A_c_a_c_sp_nu_sp_mu$)
(declare-fun pair$k (A_c_a_c_sp_nu_sp_mu$ A_c_a_c_sp_nu_sp_mu$ )A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)
(declare-fun fst$l (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$)C_b_c_b_sp_nu_sp_mu$)
(declare-fun snd$l (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$)C_b_c_b_sp_nu_sp_mu$)
(declare-fun pair$l (C_b_c_b_sp_nu_sp_mu$ C_b_c_b_sp_nu_sp_mu$ )C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$)
(declare-fun select$ (A_bool_fun_a_stream_prod$)A_bool_fun$)
(declare-fun selecta$ (A_bool_fun_a_stream_prod$)A_stream$)
(declare-fun pair$m (A_bool_fun$ A_stream$ )A_bool_fun_a_stream_prod$)
(declare-fun selectb$ (B_bool_fun_b_stream_prod$)B_bool_fun$)
(declare-fun selectc$ (B_bool_fun_b_stream_prod$)B_stream$)
(declare-fun pair$n (B_bool_fun$ B_stream$ )B_bool_fun_b_stream_prod$)
(declare-fun fst$m (C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)C_b_c_b_sp_nu_sp_mu$)
(declare-fun snd$m (C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)A_c_a_c_sp_nu_sp_mu$)
(declare-fun pair$o (C_b_c_b_sp_nu_sp_mu$ A_c_a_c_sp_nu_sp_mu$ )C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$)
(declare-fun f$ ()C_c_b_c_b_sp_nu_sp_mu_fun$ )
(declare-fun h$ ()A_a_c_a_c_sp_nu_sp_mu_fun$ )
(declare-fun in$ (A_c_a_c_sp_nu_sp_mu$ )A_c_sp_nu$ )
(declare-fun sb$ ()A_stream$ )
(declare-fun uu$ ()Bool_bool_fun$ )
(declare-fun get$ (C_c_b_c_b_sp_nu_sp_mu_fun$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun in$a (C_b_c_b_sp_nu_sp_mu$ )C_b_sp_nu$ )
(declare-fun out$ (A_c_sp_nu$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun put$ (B$ C_b_sp_nu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun spb$ ()C_b_sp_nu$ )
(declare-fun sub$ ()A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_set$ )
(declare-fun suc$ (Nat$ )Nat$ )
(declare-fun uua$ (C_c_b_c_b_sp_nu_sp_mu_fun$ )A_a_c_a_c_sp_nu_sp_mu_fun_a_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun_fun$ )
(declare-fun uub$ ()B_b_stream_b_stream_fun_fun$ )
(declare-fun uuc$ ()A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ )
(declare-fun uud$ ()C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ )
(declare-fun uue$ ()B_b_stream_b_fun_fun$ )
(declare-fun uuf$ ()A_a_stream_a_fun_fun$ )
(declare-fun accp$ (C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_bool_fun_fun$ C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$ )Bool )
(declare-fun comp$ (Bool_bool_fun$ )A_bool_fun_a_bool_fun_fun$ )
(declare-fun get$a (A_a_c_a_c_sp_nu_sp_mu_fun$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun get$b (A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )
(declare-fun out$a (C_b_sp_nu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun put$a (C$ A_c_sp_nu$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun put$b (B$ C_b_sp_nu_a_c_sp_nu_prod$ )A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )
(declare-fun smap$ (B_b_fun$ B_stream$ )B_stream$ )
(declare-fun snth$ (B_stream$ Nat$ )B$ )
(declare-fun sp_b$ ()A_c_sp_nu$ )
(declare-fun sset$ (A_stream$ )A_set$ )
(declare-fun sub$a ()C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )
(declare-fun szip$ (B_stream$ B_stream$ )B_b_prod_stream$ )
(declare-fun comp$a (Bool_bool_fun$ )B_bool_fun_b_bool_fun_fun$ )
(declare-fun sdrop$ (Nat$ B_stream$ )B_stream$ )
(declare-fun smap$a (A_b_fun$ A_stream$ )B_stream$ )
(declare-fun smap$b (B_a_fun$ B_stream$ )A_stream$ )
(declare-fun smap$c (A_a_fun$ A_stream$ )A_stream$ )
(declare-fun smap2$ (B_b_b_fun_fun$ B_stream$ B_stream$ )B_stream$ )
(declare-fun snth$a (A_stream$ Nat$ )A$ )
(declare-fun sset$a (B_stream$ )B_set$ )
(declare-fun szip$a (A_stream$ A_stream$ )A_a_prod_stream$ )
(declare-fun szip$b (A_stream$ B_stream$ )A_b_prod_stream$ )
(declare-fun szip$c (B_stream$ A_stream$ )B_a_prod_stream$ )
(declare-fun member$ (B_stream_stream$ B_stream_stream_set$ )Bool )
(declare-fun run_mu$ (A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ A_stream$ )B_c_b_sp_nu_a_c_sp_nu_prod_prod_a_stream_prod$ )
(declare-fun run_nu$ (A_b_sp_nu$ A_stream$ )B_stream$ )
(declare-fun sdrop$a (Nat$ A_stream$ )A_stream$ )
(declare-fun smap2$a (B_a_b_fun_fun$ B_stream$ A_stream$ )B_stream$ )
(declare-fun smap2$b (B_c_b_fun_fun$ B_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$c (A_b_b_fun_fun$ A_stream$ B_stream$ )B_stream$ )
(declare-fun smap2$d (A_a_b_fun_fun$ A_stream$ A_stream$ )B_stream$ )
(declare-fun smap2$e (A_c_b_fun_fun$ A_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$f (C_b_b_fun_fun$ C_stream$ B_stream$ )B_stream$ )
(declare-fun smap2$g (C_a_b_fun_fun$ C_stream$ A_stream$ )B_stream$ )
(declare-fun smap2$h (C_c_b_fun_fun$ C_stream$ C_stream$ )B_stream$ )
(declare-fun smap2$i (B_b_a_fun_fun$ B_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$j (B_a_a_fun_fun$ B_stream$ A_stream$ )A_stream$ )
(declare-fun smap2$k (A_b_a_fun_fun$ A_stream$ B_stream$ )A_stream$ )
(declare-fun smap2$l (A_a_a_fun_fun$ A_stream$ A_stream$ )A_stream$ )
(declare-fun fun_app$ (Bool_bool_fun$ Bool )Bool )
(declare-fun member$a (B_stream$ B_stream_set$ )Bool )
(declare-fun member$b (A_stream_stream$ A_stream_stream_set$ )Bool )
(declare-fun member$c (A_stream$ A_stream_set$ )Bool )
(declare-fun member$d (A_a_prod_stream$ A_a_prod_stream_set$ )Bool )
(declare-fun member$e (A_a_prod$ A_a_prod_set$ )Bool )
(declare-fun member$f (A_b_prod_stream$ A_b_prod_stream_set$ )Bool )
(declare-fun member$g (A_b_prod$ A_b_prod_set$ )Bool )
(declare-fun member$h (B_a_prod_stream$ B_a_prod_stream_set$ )Bool )
(declare-fun member$i (B_a_prod$ B_a_prod_set$ )Bool )
(declare-fun member$j (C_stream$ C_stream_set$ )Bool )
(declare-fun member$k (C$ C_set$ )Bool )
(declare-fun member$l (B_b_prod_stream$ B_b_prod_stream_set$ )Bool )
(declare-fun member$m (B_b_prod$ B_b_prod_set$ )Bool )
(declare-fun member$n (A$ A_set$ )Bool )
(declare-fun member$o (B$ B_set$ )Bool )
(declare-fun member$p (A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$ A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_set$ )Bool )
(declare-fun member$q (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod$ C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_prod_set$ )Bool )
(declare-fun member$r (A_c_sp_nu$ A_c_sp_nu_set$ )Bool )
(declare-fun member$s (C_b_sp_nu$ C_b_sp_nu_set$ )Bool )
(declare-fun run_mu$a (A_c_a_c_sp_nu_sp_mu$ A_stream$ )C_a_c_sp_nu_prod_a_stream_prod$ )
(declare-fun run_mu$b (C_b_c_b_sp_nu_sp_mu$ C_stream$ )B_c_b_sp_nu_prod_c_stream_prod$ )
(declare-fun run_nu$a (C_b_sp_nu$ C_stream$ )B_stream$ )
(declare-fun run_nu$b (A_c_sp_nu$ A_stream$ )C_stream$ )
(declare-fun sfilter$ (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun smember$ (B_a_prod$ )B_a_prod_stream_bool_fun$ )
(declare-fun streams$ (B_stream_set$ )B_stream_stream_set$ )
(declare-fun fun_app$a (A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ A$ )A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )
(declare-fun fun_app$b (A_a_c_a_c_sp_nu_sp_mu_fun_a_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun_fun$ A_a_c_a_c_sp_nu_sp_mu_fun$ )A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )
(declare-fun fun_app$c (A_a_c_a_c_sp_nu_sp_mu_fun$ A$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun fun_app$d (B_stream_b_fun$ B_stream$ )B$ )
(declare-fun fun_app$e (B_b_stream_b_fun_fun$ B$ )B_stream_b_fun$ )
(declare-fun fun_app$f (A_stream_a_fun$ A_stream$ )A$ )
(declare-fun fun_app$g (A_a_stream_a_fun_fun$ A$ )A_stream_a_fun$ )
(declare-fun fun_app$h (B_stream_b_stream_fun$ B_stream$ )B_stream$ )
(declare-fun fun_app$i (B_b_stream_b_stream_fun_fun$ B$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$j (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ C_b_c_b_sp_nu_sp_mu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun fun_app$k (A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ A_c_a_c_sp_nu_sp_mu$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun fun_app$l (A_a_prod_stream_bool_fun$ A_a_prod_stream$ )Bool )
(declare-fun fun_app$m (A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ A_a_prod_stream$ )A_a_prod_stream_bool_fun$ )
(declare-fun fun_app$n (A_b_prod_stream_bool_fun$ A_b_prod_stream$ )Bool )
(declare-fun fun_app$o (A_b_prod_stream_a_b_prod_stream_bool_fun_fun$ A_b_prod_stream$ )A_b_prod_stream_bool_fun$ )
(declare-fun fun_app$p (B_a_prod_stream_bool_fun$ B_a_prod_stream$ )Bool )
(declare-fun fun_app$q (B_a_prod_stream_b_a_prod_stream_bool_fun_fun$ B_a_prod_stream$ )B_a_prod_stream_bool_fun$ )
(declare-fun fun_app$r (C_stream_bool_fun$ C_stream$ )Bool )
(declare-fun fun_app$s (C_stream_c_stream_bool_fun_fun$ C_stream$ )C_stream_bool_fun$ )
(declare-fun fun_app$t (B_b_prod_stream_bool_fun$ B_b_prod_stream$ )Bool )
(declare-fun fun_app$u (B_b_prod_stream_b_b_prod_stream_bool_fun_fun$ B_b_prod_stream$ )B_b_prod_stream_bool_fun$ )
(declare-fun fun_app$v (A_stream_bool_fun$ A_stream$ )Bool )
(declare-fun fun_app$w (A_stream_a_stream_bool_fun_fun$ A_stream$ )A_stream_bool_fun$ )
(declare-fun fun_app$x (B_stream_bool_fun$ B_stream$ )Bool )
(declare-fun fun_app$y (B_stream_b_stream_bool_fun_fun$ B_stream$ )B_stream_bool_fun$ )
(declare-fun fun_app$z (A_a_prod_bool_fun$ A_a_prod$ )Bool )
(declare-fun pred_fun$ (A_c_a_c_sp_nu_sp_mu_bool_fun$ A_a_c_a_c_sp_nu_sp_mu_fun$ )Bool )
(declare-fun sfilter$a (B_bool_fun$ B_stream$ )B_stream$ )
(declare-fun smember$a (A_b_prod$ )A_b_prod_stream_bool_fun$ )
(declare-fun smember$b (A_a_prod$ )A_a_prod_stream_bool_fun$ )
(declare-fun smember$c (B$ )B_stream_bool_fun$ )
(declare-fun smember$d (A$ )A_stream_bool_fun$ )
(declare-fun streams$a (A_stream_set$ )A_stream_stream_set$ )
(declare-fun streams$b (A_a_prod_set$ )A_a_prod_stream_set$ )
(declare-fun streams$c (A_b_prod_set$ )A_b_prod_stream_set$ )
(declare-fun streams$d (B_a_prod_set$ )B_a_prod_stream_set$ )
(declare-fun streams$e (C_set$ )C_stream_set$ )
(declare-fun streams$f (B_b_prod_set$ )B_b_prod_stream_set$ )
(declare-fun streams$g (A_set$ )A_stream_set$ )
(declare-fun streams$h (B_set$ )B_stream_set$ )
(declare-fun fun_app$aa (A_b_prod_bool_fun$ A_b_prod$ )Bool )
(declare-fun fun_app$ab (B_a_prod_bool_fun$ B_a_prod$ )Bool )
(declare-fun fun_app$ac (C_bool_fun$ C$ )Bool )
(declare-fun fun_app$ad (B_b_prod_bool_fun$ B_b_prod$ )Bool )
(declare-fun fun_app$ae (A_bool_fun$ A$ )Bool )
(declare-fun fun_app$af (B_bool_fun$ B$ )Bool )
(declare-fun fun_app$ag (B_stream_stream_bool_fun$ B_stream_stream$ )Bool )
(declare-fun fun_app$ah (A_stream_stream_bool_fun$ A_stream_stream$ )Bool )
(declare-fun fun_app$ai (C_c_b_c_b_sp_nu_sp_mu_fun$ C$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun fun_app$aj (C_b_c_b_sp_nu_sp_mu_bool_fun$ C_b_c_b_sp_nu_sp_mu$ )Bool )
(declare-fun fun_app$ak (A_c_a_c_sp_nu_sp_mu_bool_fun$ A_c_a_c_sp_nu_sp_mu$ )Bool )
(declare-fun fun_app$al (B_b_fun$ B$ )B$ )
(declare-fun fun_app$am (B_b_b_fun_fun$ B$ )B_b_fun$ )
(declare-fun fun_app$an (A_b_fun$ A$ )B$ )
(declare-fun fun_app$ao (B_a_b_fun_fun$ B$ )A_b_fun$ )
(declare-fun fun_app$ap (C_b_fun$ C$ )B$ )
(declare-fun fun_app$aq (B_c_b_fun_fun$ B$ )C_b_fun$ )
(declare-fun fun_app$ar (A_b_b_fun_fun$ A$ )B_b_fun$ )
(declare-fun fun_app$as (A_a_b_fun_fun$ A$ )A_b_fun$ )
(declare-fun fun_app$at (A_c_b_fun_fun$ A$ )C_b_fun$ )
(declare-fun fun_app$au (C_b_b_fun_fun$ C$ )B_b_fun$ )
(declare-fun fun_app$av (C_a_b_fun_fun$ C$ )A_b_fun$ )
(declare-fun fun_app$aw (C_c_b_fun_fun$ C$ )C_b_fun$ )
(declare-fun fun_app$ax (B_a_fun$ B$ )A$ )
(declare-fun fun_app$ay (B_b_a_fun_fun$ B$ )B_a_fun$ )
(declare-fun fun_app$az (A_a_fun$ A$ )A$ )
(declare-fun fun_app$ba (B_a_a_fun_fun$ B$ )A_a_fun$ )
(declare-fun fun_app$bb (A_b_a_fun_fun$ A$ )B_a_fun$ )
(declare-fun fun_app$bc (A_a_a_fun_fun$ A$ )A_a_fun$ )
(declare-fun fun_app$bd (A_bool_fun_a_bool_fun_fun$ A_bool_fun$ )A_bool_fun$ )
(declare-fun fun_app$be (B_bool_fun_b_bool_fun_fun$ B_bool_fun$ )B_bool_fun$ )
(declare-fun fun_app$bf (A_a_stream_bool_fun_fun$ A$ )A_stream_bool_fun$ )
(declare-fun fun_app$bg (B_b_stream_bool_fun_fun$ B$ )B_stream_bool_fun$ )
(declare-fun fun_app$bh (A_stream_a_stream_fun$ A_stream$ )A_stream$ )
(declare-fun fun_app$bi (A_bool_fun_a_stream_a_stream_fun_fun$ A_bool_fun$ )A_stream_a_stream_fun$ )
(declare-fun fun_app$bj (A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ A_bool_fun_a_stream_prod$ )A_stream_bool_fun$ )
(declare-fun fun_app$bk (B_bool_fun_b_stream_b_stream_fun_fun$ B_bool_fun$ )B_stream_b_stream_fun$ )
(declare-fun fun_app$bl (B_bool_fun_b_stream_prod_b_stream_bool_fun_fun$ B_bool_fun_b_stream_prod$ )B_stream_bool_fun$ )
(declare-fun fun_app$bm (C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ C_b_c_b_sp_nu_sp_mu$ )A_c_a_c_sp_nu_sp_mu_bool_fun$ )
(declare-fun fun_app$bn (A_c_sp_nu_bool_fun_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ A_c_sp_nu_bool_fun$ )A_c_a_c_sp_nu_sp_mu_bool_fun$ )
(declare-fun fun_app$bo (C_b_sp_nu_bool_fun_c_b_c_b_sp_nu_sp_mu_bool_fun_fun$ C_b_sp_nu_bool_fun$ )C_b_c_b_sp_nu_sp_mu_bool_fun$ )
(declare-fun fun_app$bp (A_c_sp_nu_bool_fun$ A_c_sp_nu$ )Bool )
(declare-fun fun_app$bq (C_a_c_sp_nu_bool_fun_fun$ C$ )A_c_sp_nu_bool_fun$ )
(declare-fun pred_fun$a (C_b_c_b_sp_nu_sp_mu_bool_fun$ C_c_b_c_b_sp_nu_sp_mu_fun$ )Bool )
(declare-fun set_sp_nu$ (A_c_sp_nu$ )C_set$ )
(declare-fun undefined$ ()A_stream$ )
(declare-fun case_sp_nu$ (C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ C_b_sp_nu$ )C_b_c_b_sp_nu_sp_mu$ )
(declare-fun pred_sp_mu$ (C_bool_fun$ )A_c_sp_nu_bool_fun_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ )
(declare-fun pred_sp_nu$ (C_bool_fun$ )A_c_sp_nu_bool_fun$ )
(declare-fun set1_sp_mu$ (A_c_a_c_sp_nu_sp_mu$ )C_set$ )
(declare-fun set2_sp_mu$ (A_c_a_c_sp_nu_sp_mu$ )A_c_sp_nu_set$ )
(declare-fun set_sp_nu$a (C_b_sp_nu$ )B_set$ )
(declare-fun sp_mu_comp$ (C_b_c_b_sp_nu_sp_mu$ A_c_a_c_sp_nu_sp_mu$ )A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ )
(declare-fun sp_nu_comp$ (C_b_sp_nu$ A_c_sp_nu$ )A_b_sp_nu$ )
(declare-fun undefined$a ()B_stream$ )
(declare-fun case_sp_nu$a (A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ A_c_sp_nu$ )A_c_a_c_sp_nu_sp_mu$ )
(declare-fun case_stream$ (B_b_stream_b_stream_fun_fun$ B_stream$ )B_stream$ )
(declare-fun pred_sp_mu$a (B_bool_fun$ )C_b_sp_nu_bool_fun_c_b_c_b_sp_nu_sp_mu_bool_fun_fun$ )
(declare-fun pred_stream$ (A_b_prod_bool_fun$ )A_b_prod_stream_bool_fun$ )
(declare-fun sdrop_while$ (A_a_prod_bool_fun$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun set2_sp_mu$a (C_b_c_b_sp_nu_sp_mu$ )C_b_sp_nu_set$ )
(declare-fun sinterleave$ (C_stream$ C_stream$ )C_stream$ )
(declare-fun case_stream$a (A_a_stream_a_fun_fun$ A_stream$ )A$ )
(declare-fun case_stream$b (B_b_stream_b_fun_fun$ B_stream$ )B$ )
(declare-fun pred_stream$a (A_a_prod_bool_fun$ )A_a_prod_stream_bool_fun$ )
(declare-fun pred_stream$b (B_bool_fun$ )B_stream_bool_fun$ )
(declare-fun pred_stream$c (A_bool_fun$ )A_stream_bool_fun$ )
(declare-fun sdrop_while$a (A_b_prod_bool_fun$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun sdrop_while$b (B_a_prod_bool_fun$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun sdrop_while$c (C_bool_fun$ C_stream$ )C_stream$ )
(declare-fun sdrop_while$d (B_b_prod_bool_fun$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun sdrop_while$e (A_bool_fun$ A_stream$ )A_stream$ )
(declare-fun sdrop_while$f (B_bool_fun$ B_stream$ )B_stream$ )
(declare-fun sinterleave$a (B_b_prod_stream$ B_b_prod_stream$ )B_b_prod_stream$ )
(declare-fun sinterleave$b (B_a_prod_stream$ B_a_prod_stream$ )B_a_prod_stream$ )
(declare-fun sinterleave$c (A_b_prod_stream$ A_b_prod_stream$ )A_b_prod_stream$ )
(declare-fun sinterleave$d (A_a_prod_stream$ A_a_prod_stream$ )A_a_prod_stream$ )
(declare-fun sinterleave$e (A_stream$ A_stream$ )A_stream$ )
(declare-fun sinterleave$f (B_stream$ B_stream$ )B_stream$ )
(declare-fun sp_mu_comp_rel$ ()C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_c_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod_bool_fun_fun$ )
(assert (! (forall ((?v0 Bool ))(! (= (fun_app$ uu$ ?v0 )(not ?v0 )):pattern ((fun_app$ uu$ ?v0 )))):named a0 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v2 A$ ))(! (= (fun_app$a (fun_app$b (uua$ ?v0 )?v1 )?v2 )(sp_mu_comp$ (get$ ?v0 )(fun_app$c ?v1 ?v2 ))):pattern ((fun_app$a (fun_app$b (uua$ ?v0 )?v1 )?v2 )))):named a1 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (fun_app$d (fun_app$e uue$ ?v0 )?v1 )?v0 ):pattern ((fun_app$d (fun_app$e uue$ ?v0 )?v1 )))):named a2 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (fun_app$f (fun_app$g uuf$ ?v0 )?v1 )?v0 ):pattern ((fun_app$f (fun_app$g uuf$ ?v0 )?v1 )))):named a3 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (fun_app$h (fun_app$i uub$ ?v0 )?v1 )?v1 ):pattern ((fun_app$h (fun_app$i uub$ ?v0 )?v1 )))):named a4 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ ))(! (= (fun_app$j uud$ ?v0 )?v0 ):pattern ((fun_app$j uud$ ?v0 )))):named a5 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu$ ))(! (= (fun_app$k uuc$ ?v0 )?v0 ):pattern ((fun_app$k uuc$ ?v0 )))):named a6 ))
(assert (! (not (and (= (shd$ (run_nu$ (sp_nu_comp$ spb$ sp_b$ )sb$ ))(shd$ (run_nu$a spb$ (run_nu$b sp_b$ sb$ ))))(exists ((?v0 C_b_sp_nu$ )(?v1 A_c_sp_nu$ )(?v2 A_stream$ ))(and (= (stl$ (run_nu$ (sp_nu_comp$ spb$ sp_b$ )sb$ ))(run_nu$ (sp_nu_comp$ ?v0 ?v1 )?v2 ))(= (stl$ (run_nu$a spb$ (run_nu$b sp_b$ sb$ )))(run_nu$a ?v0 (run_nu$b ?v1 ?v2 ))))))):named a7 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (= (fun_app$c h$ (shd$a sb$ ))(out$ (in$ (fun_app$c h$ (shd$a sb$ )))))(and (= (shd$ (run_nu$ (sp_nu_comp$ spb$ (in$ (fun_app$c h$ (shd$a sb$ ))))?v0 ))(shd$ (run_nu$a spb$ (run_nu$b (in$ (fun_app$c h$ (shd$a sb$ )))?v0 ))))(exists ((?v1 C_b_sp_nu$ )(?v2 A_c_sp_nu$ )(?v3 A_stream$ ))(and (= (stl$ (run_nu$ (sp_nu_comp$ spb$ (in$ (fun_app$c h$ (shd$a sb$ ))))?v0 ))(run_nu$ (sp_nu_comp$ ?v1 ?v2 )?v3 ))(= (stl$ (run_nu$a spb$ (run_nu$b (in$ (fun_app$c h$ (shd$a sb$ )))?v0 )))(run_nu$a ?v1 (run_nu$b ?v2 ?v3 )))))))):named a8 ))
(assert (! (= (get$a h$ )(out$ sp_b$ )):named a9 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(=> (and (= (shd$c ?v0 )(shd$c ?v1 ))(= (stl$c ?v0 )(stl$c ?v1 )))(= ?v0 ?v1 ))):named a10 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream$ ))(=> (and (= (shd$d ?v0 )(shd$d ?v1 ))(= (stl$d ?v0 )(stl$d ?v1 )))(= ?v0 ?v1 ))):named a11 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_stream$ ))(=> (and (= (shd$e ?v0 )(shd$e ?v1 ))(= (stl$e ?v0 )(stl$e ?v1 )))(= ?v0 ?v1 ))):named a12 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ ))(=> (and (= (shd$b ?v0 )(shd$b ?v1 ))(= (stl$b ?v0 )(stl$b ?v1 )))(= ?v0 ?v1 ))):named a13 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_stream$ ))(=> (and (= (shd$f ?v0 )(shd$f ?v1 ))(= (stl$f ?v0 )(stl$f ?v1 )))(= ?v0 ?v1 ))):named a14 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(=> (and (= (shd$a ?v0 )(shd$a ?v1 ))(= (stl$a ?v0 )(stl$a ?v1 )))(= ?v0 ?v1 ))):named a15 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(=> (and (= (shd$ ?v0 )(shd$ ?v1 ))(= (stl$ ?v0 )(stl$ ?v1 )))(= ?v0 ?v1 ))):named a16 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$l (fun_app$m ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_stream$ ))(=> (fun_app$l (fun_app$m ?v0 ?v3 )?v4 )(and (= (shd$c ?v3 )(shd$c ?v4 ))(or (fun_app$l (fun_app$m ?v0 (stl$c ?v3 ))(stl$c ?v4 ))(= (stl$c ?v3 )(stl$c ?v4 )))))))(= ?v1 ?v2 ))):named a17 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_b_prod_stream_bool_fun_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(=> (and (fun_app$n (fun_app$o ?v0 ?v1 )?v2 )(forall ((?v3 A_b_prod_stream$ )(?v4 A_b_prod_stream$ ))(=> (fun_app$n (fun_app$o ?v0 ?v3 )?v4 )(and (= (shd$d ?v3 )(shd$d ?v4 ))(or (fun_app$n (fun_app$o ?v0 (stl$d ?v3 ))(stl$d ?v4 ))(= (stl$d ?v3 )(stl$d ?v4 )))))))(= ?v1 ?v2 ))):named a18 ))
(assert (! (forall ((?v0 B_a_prod_stream_b_a_prod_stream_bool_fun_fun$ )(?v1 B_a_prod_stream$ )(?v2 B_a_prod_stream$ ))(=> (and (fun_app$p (fun_app$q ?v0 ?v1 )?v2 )(forall ((?v3 B_a_prod_stream$ )(?v4 B_a_prod_stream$ ))(=> (fun_app$p (fun_app$q ?v0 ?v3 )?v4 )(and (= (shd$e ?v3 )(shd$e ?v4 ))(or (fun_app$p (fun_app$q ?v0 (stl$e ?v3 ))(stl$e ?v4 ))(= (stl$e ?v3 )(stl$e ?v4 )))))))(= ?v1 ?v2 ))):named a19 ))
(assert (! (forall ((?v0 C_stream_c_stream_bool_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(=> (and (fun_app$r (fun_app$s ?v0 ?v1 )?v2 )(forall ((?v3 C_stream$ )(?v4 C_stream$ ))(=> (fun_app$r (fun_app$s ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(or (fun_app$r (fun_app$s ?v0 (stl$b ?v3 ))(stl$b ?v4 ))(= (stl$b ?v3 )(stl$b ?v4 )))))))(= ?v1 ?v2 ))):named a20 ))
(assert (! (forall ((?v0 B_b_prod_stream_b_b_prod_stream_bool_fun_fun$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod_stream$ ))(=> (and (fun_app$t (fun_app$u ?v0 ?v1 )?v2 )(forall ((?v3 B_b_prod_stream$ )(?v4 B_b_prod_stream$ ))(=> (fun_app$t (fun_app$u ?v0 ?v3 )?v4 )(and (= (shd$f ?v3 )(shd$f ?v4 ))(or (fun_app$t (fun_app$u ?v0 (stl$f ?v3 ))(stl$f ?v4 ))(= (stl$f ?v3 )(stl$f ?v4 )))))))(= ?v1 ?v2 ))):named a21 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$v (fun_app$w ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$v (fun_app$w ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(or (fun_app$v (fun_app$w ?v0 (stl$a ?v3 ))(stl$a ?v4 ))(= (stl$a ?v3 )(stl$a ?v4 )))))))(= ?v1 ?v2 ))):named a22 ))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(=> (and (fun_app$x (fun_app$y ?v0 ?v1 )?v2 )(forall ((?v3 B_stream$ )(?v4 B_stream$ ))(=> (fun_app$x (fun_app$y ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(or (fun_app$x (fun_app$y ?v0 (stl$ ?v3 ))(stl$ ?v4 ))(= (stl$ ?v3 )(stl$ ?v4 )))))))(= ?v1 ?v2 ))):named a23 ))
(assert (! (forall ((?v0 A_a_prod_stream_a_a_prod_stream_bool_fun_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_stream$ ))(=> (and (fun_app$l (fun_app$m ?v0 ?v1 )?v2 )(forall ((?v3 A_a_prod_stream$ )(?v4 A_a_prod_stream$ ))(=> (fun_app$l (fun_app$m ?v0 ?v3 )?v4 )(and (= (shd$c ?v3 )(shd$c ?v4 ))(fun_app$l (fun_app$m ?v0 (stl$c ?v3 ))(stl$c ?v4 ))))))(= ?v1 ?v2 ))):named a24 ))
(assert (! (forall ((?v0 A_b_prod_stream_a_b_prod_stream_bool_fun_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_stream$ ))(=> (and (fun_app$n (fun_app$o ?v0 ?v1 )?v2 )(forall ((?v3 A_b_prod_stream$ )(?v4 A_b_prod_stream$ ))(=> (fun_app$n (fun_app$o ?v0 ?v3 )?v4 )(and (= (shd$d ?v3 )(shd$d ?v4 ))(fun_app$n (fun_app$o ?v0 (stl$d ?v3 ))(stl$d ?v4 ))))))(= ?v1 ?v2 ))):named a25 ))
(assert (! (forall ((?v0 B_a_prod_stream_b_a_prod_stream_bool_fun_fun$ )(?v1 B_a_prod_stream$ )(?v2 B_a_prod_stream$ ))(=> (and (fun_app$p (fun_app$q ?v0 ?v1 )?v2 )(forall ((?v3 B_a_prod_stream$ )(?v4 B_a_prod_stream$ ))(=> (fun_app$p (fun_app$q ?v0 ?v3 )?v4 )(and (= (shd$e ?v3 )(shd$e ?v4 ))(fun_app$p (fun_app$q ?v0 (stl$e ?v3 ))(stl$e ?v4 ))))))(= ?v1 ?v2 ))):named a26 ))
(assert (! (forall ((?v0 C_stream_c_stream_bool_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(=> (and (fun_app$r (fun_app$s ?v0 ?v1 )?v2 )(forall ((?v3 C_stream$ )(?v4 C_stream$ ))(=> (fun_app$r (fun_app$s ?v0 ?v3 )?v4 )(and (= (shd$b ?v3 )(shd$b ?v4 ))(fun_app$r (fun_app$s ?v0 (stl$b ?v3 ))(stl$b ?v4 ))))))(= ?v1 ?v2 ))):named a27 ))
(assert (! (forall ((?v0 B_b_prod_stream_b_b_prod_stream_bool_fun_fun$ )(?v1 B_b_prod_stream$ )(?v2 B_b_prod_stream$ ))(=> (and (fun_app$t (fun_app$u ?v0 ?v1 )?v2 )(forall ((?v3 B_b_prod_stream$ )(?v4 B_b_prod_stream$ ))(=> (fun_app$t (fun_app$u ?v0 ?v3 )?v4 )(and (= (shd$f ?v3 )(shd$f ?v4 ))(fun_app$t (fun_app$u ?v0 (stl$f ?v3 ))(stl$f ?v4 ))))))(= ?v1 ?v2 ))):named a28 ))
(assert (! (forall ((?v0 A_stream_a_stream_bool_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(=> (and (fun_app$v (fun_app$w ?v0 ?v1 )?v2 )(forall ((?v3 A_stream$ )(?v4 A_stream$ ))(=> (fun_app$v (fun_app$w ?v0 ?v3 )?v4 )(and (= (shd$a ?v3 )(shd$a ?v4 ))(fun_app$v (fun_app$w ?v0 (stl$a ?v3 ))(stl$a ?v4 ))))))(= ?v1 ?v2 ))):named a29 ))
(assert (! (forall ((?v0 B_stream_b_stream_bool_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(=> (and (fun_app$x (fun_app$y ?v0 ?v1 )?v2 )(forall ((?v3 B_stream$ )(?v4 B_stream$ ))(=> (fun_app$x (fun_app$y ?v0 ?v3 )?v4 )(and (= (shd$ ?v3 )(shd$ ?v4 ))(fun_app$x (fun_app$y ?v0 (stl$ ?v3 ))(stl$ ?v4 ))))))(= ?v1 ?v2 ))):named a30 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ )(?v1 C_b_c_b_sp_nu_sp_mu$ ))(= (= (in$a ?v0 )(in$a ?v1 ))(= ?v0 ?v1 ))):named a31 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ ))(= (= (in$ ?v0 )(in$ ?v1 ))(= ?v0 ?v1 ))):named a32 ))
(assert (! (forall ((?v0 C_b_sp_nu$ )(?v1 A$ )(?v2 A_c_sp_nu$ )(?v3 A_stream$ ))(=> (and (= (get$ f$ )(out$a ?v0 ))(= (fun_app$c h$ ?v1 )(out$ ?v2 )))(and (= (shd$ (run_nu$ (sp_nu_comp$ ?v0 ?v2 )?v3 ))(shd$ (run_nu$a ?v0 (run_nu$b ?v2 ?v3 ))))(exists ((?v4 C_b_sp_nu$ )(?v5 A_c_sp_nu$ )(?v6 A_stream$ ))(and (= (stl$ (run_nu$ (sp_nu_comp$ ?v0 ?v2 )?v3 ))(run_nu$ (sp_nu_comp$ ?v4 ?v5 )?v6 ))(= (stl$ (run_nu$a ?v0 (run_nu$b ?v2 ?v3 )))(run_nu$a ?v4 (run_nu$b ?v5 ?v6 )))))))):named a33 ))
(assert (! (forall ((?v0 B_b_stream_b_stream_fun_fun$ )(?v1 B_stream$ ))(! (= (case_stream$ ?v0 ?v1 )(fun_app$h (fun_app$i ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((case_stream$ ?v0 ?v1 )))):named a34 ))
(assert (! (forall ((?v0 A_a_stream_a_fun_fun$ )(?v1 A_stream$ ))(! (= (case_stream$a ?v0 ?v1 )(fun_app$f (fun_app$g ?v0 (shd$a ?v1 ))(stl$a ?v1 ))):pattern ((case_stream$a ?v0 ?v1 )))):named a35 ))
(assert (! (forall ((?v0 B_b_stream_b_fun_fun$ )(?v1 B_stream$ ))(! (= (case_stream$b ?v0 ?v1 )(fun_app$d (fun_app$e ?v0 (shd$ ?v1 ))(stl$ ?v1 ))):pattern ((case_stream$b ?v0 ?v1 )))):named a36 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod_stream$ ))(= (sdrop_while$ ?v0 ?v1 )(ite (fun_app$z ?v0 (shd$c ?v1 ))(sdrop_while$ ?v0 (stl$c ?v1 ))?v1 ))):named a37 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod_stream$ ))(= (sdrop_while$a ?v0 ?v1 )(ite (fun_app$aa ?v0 (shd$d ?v1 ))(sdrop_while$a ?v0 (stl$d ?v1 ))?v1 ))):named a38 ))
(assert (! (forall ((?v0 B_a_prod_bool_fun$ )(?v1 B_a_prod_stream$ ))(= (sdrop_while$b ?v0 ?v1 )(ite (fun_app$ab ?v0 (shd$e ?v1 ))(sdrop_while$b ?v0 (stl$e ?v1 ))?v1 ))):named a39 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 C_stream$ ))(= (sdrop_while$c ?v0 ?v1 )(ite (fun_app$ac ?v0 (shd$b ?v1 ))(sdrop_while$c ?v0 (stl$b ?v1 ))?v1 ))):named a40 ))
(assert (! (forall ((?v0 B_b_prod_bool_fun$ )(?v1 B_b_prod_stream$ ))(= (sdrop_while$d ?v0 ?v1 )(ite (fun_app$ad ?v0 (shd$f ?v1 ))(sdrop_while$d ?v0 (stl$f ?v1 ))?v1 ))):named a41 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sdrop_while$e ?v0 ?v1 )(ite (fun_app$ae ?v0 (shd$a ?v1 ))(sdrop_while$e ?v0 (stl$a ?v1 ))?v1 ))):named a42 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(= (sdrop_while$f ?v0 ?v1 )(ite (fun_app$af ?v0 (shd$ ?v1 ))(sdrop_while$f ?v0 (stl$ ?v1 ))?v1 ))):named a43 ))
(assert (! (= (get$ f$ )(out$a spb$ )):named a44 ))
(assert (! (forall ((?v0 C_stream$ ))(= (sCons$b (shd$b ?v0 )(stl$b ?v0 ))?v0 )):named a45 ))
(assert (! (forall ((?v0 B_b_prod_stream$ ))(= (sCons$f (shd$f ?v0 )(stl$f ?v0 ))?v0 )):named a46 ))
(assert (! (forall ((?v0 B_a_prod_stream$ ))(= (sCons$e (shd$e ?v0 )(stl$e ?v0 ))?v0 )):named a47 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(= (sCons$d (shd$d ?v0 )(stl$d ?v0 ))?v0 )):named a48 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(= (sCons$c (shd$c ?v0 )(stl$c ?v0 ))?v0 )):named a49 ))
(assert (! (forall ((?v0 A_stream$ ))(= (sCons$a (shd$a ?v0 )(stl$a ?v0 ))?v0 )):named a50 ))
(assert (! (forall ((?v0 B_stream$ ))(= (sCons$ (shd$ ?v0 )(stl$ ?v0 ))?v0 )):named a51 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$ (stl$g ?v0 )(streams$ ?v1 ))(member$a (shd$g ?v0 )?v1 ))(member$ ?v0 (streams$ ?v1 )))):named a52 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$b (stl$h ?v0 )(streams$a ?v1 ))(member$c (shd$h ?v0 )?v1 ))(member$b ?v0 (streams$a ?v1 )))):named a53 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (and (member$d (stl$c ?v0 )(streams$b ?v1 ))(member$e (shd$c ?v0 )?v1 ))(member$d ?v0 (streams$b ?v1 )))):named a54 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_set$ ))(=> (and (member$f (stl$d ?v0 )(streams$c ?v1 ))(member$g (shd$d ?v0 )?v1 ))(member$f ?v0 (streams$c ?v1 )))):named a55 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_set$ ))(=> (and (member$h (stl$e ?v0 )(streams$d ?v1 ))(member$i (shd$e ?v0 )?v1 ))(member$h ?v0 (streams$d ?v1 )))):named a56 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (and (member$j (stl$b ?v0 )(streams$e ?v1 ))(member$k (shd$b ?v0 )?v1 ))(member$j ?v0 (streams$e ?v1 )))):named a57 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (and (member$l (stl$f ?v0 )(streams$f ?v1 ))(member$m (shd$f ?v0 )?v1 ))(member$l ?v0 (streams$f ?v1 )))):named a58 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$c (stl$a ?v0 )(streams$g ?v1 ))(member$n (shd$a ?v0 )?v1 ))(member$c ?v0 (streams$g ?v1 )))):named a59 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a (stl$ ?v0 )(streams$h ?v1 ))(member$o (shd$ ?v0 )?v1 ))(member$a ?v0 (streams$h ?v1 )))):named a60 ))
(assert (! (forall ((?v0 A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )(?v1 A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ ))(= (= (get$b ?v0 )(get$b ?v1 ))(= ?v0 ?v1 ))):named a61 ))
(assert (! (forall ((?v0 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v1 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(= (= (get$a ?v0 )(get$a ?v1 ))(= ?v0 ?v1 ))):named a62 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ ))(= (= (get$ ?v0 )(get$ ?v1 ))(= ?v0 ?v1 ))):named a63 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_stream$ )(?v2 B_a_prod$ )(?v3 B_a_prod_stream$ ))(= (= (sCons$e ?v0 ?v1 )(sCons$e ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a64 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(= (= (sCons$d ?v0 ?v1 )(sCons$d ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a65 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(= (= (sCons$c ?v0 ?v1 )(sCons$c ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a66 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B$ )(?v3 B_stream$ ))(= (= (sCons$ ?v0 ?v1 )(sCons$ ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a67 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A$ )(?v3 A_stream$ ))(= (= (sCons$a ?v0 ?v1 )(sCons$a ?v2 ?v3 ))(and (= ?v0 ?v2 )(= ?v1 ?v3 )))):named a68 ))
(assert (! (forall ((?v0 A_c_sp_nu$ ))(= (in$ (out$ ?v0 ))?v0 )):named a69 ))
(assert (! (forall ((?v0 C_b_sp_nu$ ))(= (in$a (out$a ?v0 ))?v0 )):named a70 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream_stream$ )(?v2 B_stream_set$ ))(= (member$ (sCons$g ?v0 ?v1 )(streams$ ?v2 ))(and (member$a ?v0 ?v2 )(member$ ?v1 (streams$ ?v2 ))))):named a71 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(= (member$b (sCons$h ?v0 ?v1 )(streams$a ?v2 ))(and (member$c ?v0 ?v2 )(member$b ?v1 (streams$a ?v2 ))))):named a72 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ )(?v2 C_set$ ))(= (member$j (sCons$b ?v0 ?v1 )(streams$e ?v2 ))(and (member$k ?v0 ?v2 )(member$j ?v1 (streams$e ?v2 ))))):named a73 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_stream$ )(?v2 B_a_prod_set$ ))(= (member$h (sCons$e ?v0 ?v1 )(streams$d ?v2 ))(and (member$i ?v0 ?v2 )(member$h ?v1 (streams$d ?v2 ))))):named a74 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_set$ ))(= (member$f (sCons$d ?v0 ?v1 )(streams$c ?v2 ))(and (member$g ?v0 ?v2 )(member$f ?v1 (streams$c ?v2 ))))):named a75 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_set$ ))(= (member$d (sCons$c ?v0 ?v1 )(streams$b ?v2 ))(and (member$e ?v0 ?v2 )(member$d ?v1 (streams$b ?v2 ))))):named a76 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B_set$ ))(= (member$a (sCons$ ?v0 ?v1 )(streams$h ?v2 ))(and (member$o ?v0 ?v2 )(member$a ?v1 (streams$h ?v2 ))))):named a77 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_set$ ))(= (member$c (sCons$a ?v0 ?v1 )(streams$g ?v2 ))(and (member$n ?v0 ?v2 )(member$c ?v1 (streams$g ?v2 ))))):named a78 ))
(assert (! (forall ((?v0 B_a_prod_bool_fun$ )(?v1 B_a_prod$ )(?v2 B_a_prod_stream$ ))(! (= (sdrop_while$b ?v0 (sCons$e ?v1 ?v2 ))(ite (fun_app$ab ?v0 ?v1 )(sdrop_while$b ?v0 ?v2 )(sCons$e ?v1 ?v2 ))):pattern ((sdrop_while$b ?v0 (sCons$e ?v1 ?v2 ))))):named a79 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ ))(! (= (sdrop_while$a ?v0 (sCons$d ?v1 ?v2 ))(ite (fun_app$aa ?v0 ?v1 )(sdrop_while$a ?v0 ?v2 )(sCons$d ?v1 ?v2 ))):pattern ((sdrop_while$a ?v0 (sCons$d ?v1 ?v2 ))))):named a80 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (sdrop_while$ ?v0 (sCons$c ?v1 ?v2 ))(ite (fun_app$z ?v0 ?v1 )(sdrop_while$ ?v0 ?v2 )(sCons$c ?v1 ?v2 ))):pattern ((sdrop_while$ ?v0 (sCons$c ?v1 ?v2 ))))):named a81 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (sdrop_while$f ?v0 (sCons$ ?v1 ?v2 ))(ite (fun_app$af ?v0 ?v1 )(sdrop_while$f ?v0 ?v2 )(sCons$ ?v1 ?v2 ))):pattern ((sdrop_while$f ?v0 (sCons$ ?v1 ?v2 ))))):named a82 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (sdrop_while$e ?v0 (sCons$a ?v1 ?v2 ))(ite (fun_app$ae ?v0 ?v1 )(sdrop_while$e ?v0 ?v2 )(sCons$a ?v1 ?v2 ))):pattern ((sdrop_while$e ?v0 (sCons$a ?v1 ?v2 ))))):named a83 ))
(assert (! (forall ((?v0 B_b_stream_b_stream_fun_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (case_stream$ ?v0 (sCons$ ?v1 ?v2 ))(fun_app$h (fun_app$i ?v0 ?v1 )?v2 )):pattern ((case_stream$ ?v0 (sCons$ ?v1 ?v2 ))))):named a84 ))
(assert (! (forall ((?v0 A_a_stream_a_fun_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (case_stream$a ?v0 (sCons$a ?v1 ?v2 ))(fun_app$f (fun_app$g ?v0 ?v1 )?v2 )):pattern ((case_stream$a ?v0 (sCons$a ?v1 ?v2 ))))):named a85 ))
(assert (! (forall ((?v0 B_b_stream_b_fun_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (case_stream$b ?v0 (sCons$ ?v1 ?v2 ))(fun_app$d (fun_app$e ?v0 ?v1 )?v2 )):pattern ((case_stream$b ?v0 (sCons$ ?v1 ?v2 ))))):named a86 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(= (member$ ?v0 (streams$ ?v1 ))(exists ((?v2 B_stream$ )(?v3 B_stream_stream$ ))(and (= ?v0 (sCons$g ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$ ?v3 (streams$ ?v1 ))))))):named a87 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(= (member$b ?v0 (streams$a ?v1 ))(exists ((?v2 A_stream$ )(?v3 A_stream_stream$ ))(and (= ?v0 (sCons$h ?v2 ?v3 ))(and (member$c ?v2 ?v1 )(member$b ?v3 (streams$a ?v1 ))))))):named a88 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(= (member$j ?v0 (streams$e ?v1 ))(exists ((?v2 C$ )(?v3 C_stream$ ))(and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$k ?v2 ?v1 )(member$j ?v3 (streams$e ?v1 ))))))):named a89 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_set$ ))(= (member$h ?v0 (streams$d ?v1 ))(exists ((?v2 B_a_prod$ )(?v3 B_a_prod_stream$ ))(and (= ?v0 (sCons$e ?v2 ?v3 ))(and (member$i ?v2 ?v1 )(member$h ?v3 (streams$d ?v1 ))))))):named a90 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_set$ ))(= (member$f ?v0 (streams$c ?v1 ))(exists ((?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$g ?v2 ?v1 )(member$f ?v3 (streams$c ?v1 ))))))):named a91 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(= (member$d ?v0 (streams$b ?v1 ))(exists ((?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$e ?v2 ?v1 )(member$d ?v3 (streams$b ?v1 ))))))):named a92 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(= (member$a ?v0 (streams$h ?v1 ))(exists ((?v2 B$ )(?v3 B_stream$ ))(and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$o ?v2 ?v1 )(member$a ?v3 (streams$h ?v1 ))))))):named a93 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(= (member$c ?v0 (streams$g ?v1 ))(exists ((?v2 A$ )(?v3 A_stream$ ))(and (= ?v0 (sCons$a ?v2 ?v3 ))(and (member$n ?v2 ?v1 )(member$c ?v3 (streams$g ?v1 ))))))):named a94 ))
(assert (! (forall ((?v0 B_a_prod_stream$ ))(=> (forall ((?v1 B_a_prod$ )(?v2 B_a_prod_stream$ ))(=> (= ?v0 (sCons$e ?v1 ?v2 ))false ))false )):named a95 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(=> (forall ((?v1 A_b_prod$ )(?v2 A_b_prod_stream$ ))(=> (= ?v0 (sCons$d ?v1 ?v2 ))false ))false )):named a96 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(=> (forall ((?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(=> (= ?v0 (sCons$c ?v1 ?v2 ))false ))false )):named a97 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (forall ((?v1 B$ )(?v2 B_stream$ ))(=> (= ?v0 (sCons$ ?v1 ?v2 ))false ))false )):named a98 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (forall ((?v1 A$ )(?v2 A_stream$ ))(=> (= ?v0 (sCons$a ?v1 ?v2 ))false ))false )):named a99 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(forall ((?v2 B_stream$ )(?v3 B_stream_stream$ ))(=> (and (= ?v0 (sCons$g ?v2 ?v3 ))(and (member$a ?v2 ?v1 )(member$ ?v3 (streams$ ?v1 ))))false )))false )):named a100 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$b ?v0 (streams$a ?v1 ))(forall ((?v2 A_stream$ )(?v3 A_stream_stream$ ))(=> (and (= ?v0 (sCons$h ?v2 ?v3 ))(and (member$c ?v2 ?v1 )(member$b ?v3 (streams$a ?v1 ))))false )))false )):named a101 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (and (member$j ?v0 (streams$e ?v1 ))(forall ((?v2 C$ )(?v3 C_stream$ ))(=> (and (= ?v0 (sCons$b ?v2 ?v3 ))(and (member$k ?v2 ?v1 )(member$j ?v3 (streams$e ?v1 ))))false )))false )):named a102 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_set$ ))(=> (and (member$h ?v0 (streams$d ?v1 ))(forall ((?v2 B_a_prod$ )(?v3 B_a_prod_stream$ ))(=> (and (= ?v0 (sCons$e ?v2 ?v3 ))(and (member$i ?v2 ?v1 )(member$h ?v3 (streams$d ?v1 ))))false )))false )):named a103 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_set$ ))(=> (and (member$f ?v0 (streams$c ?v1 ))(forall ((?v2 A_b_prod$ )(?v3 A_b_prod_stream$ ))(=> (and (= ?v0 (sCons$d ?v2 ?v3 ))(and (member$g ?v2 ?v1 )(member$f ?v3 (streams$c ?v1 ))))false )))false )):named a104 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (and (member$d ?v0 (streams$b ?v1 ))(forall ((?v2 A_a_prod$ )(?v3 A_a_prod_stream$ ))(=> (and (= ?v0 (sCons$c ?v2 ?v3 ))(and (member$e ?v2 ?v1 )(member$d ?v3 (streams$b ?v1 ))))false )))false )):named a105 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a ?v0 (streams$h ?v1 ))(forall ((?v2 B$ )(?v3 B_stream$ ))(=> (and (= ?v0 (sCons$ ?v2 ?v3 ))(and (member$o ?v2 ?v1 )(member$a ?v3 (streams$h ?v1 ))))false )))false )):named a106 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$c ?v0 (streams$g ?v1 ))(forall ((?v2 A$ )(?v3 A_stream$ ))(=> (and (= ?v0 (sCons$a ?v2 ?v3 ))(and (member$n ?v2 ?v1 )(member$c ?v3 (streams$g ?v1 ))))false )))false )):named a107 ))
(assert (! (forall ((?v0 B_stream_stream_bool_fun$ )(?v1 B_stream_stream$ )(?v2 B_stream_set$ ))(=> (and (fun_app$ag ?v0 ?v1 )(forall ((?v3 B_stream_stream$ ))(=> (fun_app$ag ?v0 ?v3 )(exists ((?v4 B_stream$ )(?v5 B_stream_stream$ ))(and (= ?v3 (sCons$g ?v4 ?v5 ))(and (member$a ?v4 ?v2 )(or (fun_app$ag ?v0 ?v5 )(member$ ?v5 (streams$ ?v2 )))))))))(member$ ?v1 (streams$ ?v2 )))):named a108 ))
(assert (! (forall ((?v0 A_stream_stream_bool_fun$ )(?v1 A_stream_stream$ )(?v2 A_stream_set$ ))(=> (and (fun_app$ah ?v0 ?v1 )(forall ((?v3 A_stream_stream$ ))(=> (fun_app$ah ?v0 ?v3 )(exists ((?v4 A_stream$ )(?v5 A_stream_stream$ ))(and (= ?v3 (sCons$h ?v4 ?v5 ))(and (member$c ?v4 ?v2 )(or (fun_app$ah ?v0 ?v5 )(member$b ?v5 (streams$a ?v2 )))))))))(member$b ?v1 (streams$a ?v2 )))):named a109 ))
(assert (! (forall ((?v0 C_stream_bool_fun$ )(?v1 C_stream$ )(?v2 C_set$ ))(=> (and (fun_app$r ?v0 ?v1 )(forall ((?v3 C_stream$ ))(=> (fun_app$r ?v0 ?v3 )(exists ((?v4 C$ )(?v5 C_stream$ ))(and (= ?v3 (sCons$b ?v4 ?v5 ))(and (member$k ?v4 ?v2 )(or (fun_app$r ?v0 ?v5 )(member$j ?v5 (streams$e ?v2 )))))))))(member$j ?v1 (streams$e ?v2 )))):named a110 ))
(assert (! (forall ((?v0 B_a_prod_stream_bool_fun$ )(?v1 B_a_prod_stream$ )(?v2 B_a_prod_set$ ))(=> (and (fun_app$p ?v0 ?v1 )(forall ((?v3 B_a_prod_stream$ ))(=> (fun_app$p ?v0 ?v3 )(exists ((?v4 B_a_prod$ )(?v5 B_a_prod_stream$ ))(and (= ?v3 (sCons$e ?v4 ?v5 ))(and (member$i ?v4 ?v2 )(or (fun_app$p ?v0 ?v5 )(member$h ?v5 (streams$d ?v2 )))))))))(member$h ?v1 (streams$d ?v2 )))):named a111 ))
(assert (! (forall ((?v0 A_b_prod_stream_bool_fun$ )(?v1 A_b_prod_stream$ )(?v2 A_b_prod_set$ ))(=> (and (fun_app$n ?v0 ?v1 )(forall ((?v3 A_b_prod_stream$ ))(=> (fun_app$n ?v0 ?v3 )(exists ((?v4 A_b_prod$ )(?v5 A_b_prod_stream$ ))(and (= ?v3 (sCons$d ?v4 ?v5 ))(and (member$g ?v4 ?v2 )(or (fun_app$n ?v0 ?v5 )(member$f ?v5 (streams$c ?v2 )))))))))(member$f ?v1 (streams$c ?v2 )))):named a112 ))
(assert (! (forall ((?v0 A_a_prod_stream_bool_fun$ )(?v1 A_a_prod_stream$ )(?v2 A_a_prod_set$ ))(=> (and (fun_app$l ?v0 ?v1 )(forall ((?v3 A_a_prod_stream$ ))(=> (fun_app$l ?v0 ?v3 )(exists ((?v4 A_a_prod$ )(?v5 A_a_prod_stream$ ))(and (= ?v3 (sCons$c ?v4 ?v5 ))(and (member$e ?v4 ?v2 )(or (fun_app$l ?v0 ?v5 )(member$d ?v5 (streams$b ?v2 )))))))))(member$d ?v1 (streams$b ?v2 )))):named a113 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_stream$ )(?v2 B_set$ ))(=> (and (fun_app$x ?v0 ?v1 )(forall ((?v3 B_stream$ ))(=> (fun_app$x ?v0 ?v3 )(exists ((?v4 B$ )(?v5 B_stream$ ))(and (= ?v3 (sCons$ ?v4 ?v5 ))(and (member$o ?v4 ?v2 )(or (fun_app$x ?v0 ?v5 )(member$a ?v5 (streams$h ?v2 )))))))))(member$a ?v1 (streams$h ?v2 )))):named a114 ))
(assert (! (forall ((?v0 A_stream_bool_fun$ )(?v1 A_stream$ )(?v2 A_set$ ))(=> (and (fun_app$v ?v0 ?v1 )(forall ((?v3 A_stream$ ))(=> (fun_app$v ?v0 ?v3 )(exists ((?v4 A$ )(?v5 A_stream$ ))(and (= ?v3 (sCons$a ?v4 ?v5 ))(and (member$n ?v4 ?v2 )(or (fun_app$v ?v0 ?v5 )(member$c ?v5 (streams$g ?v2 )))))))))(member$c ?v1 (streams$g ?v2 )))):named a115 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ ))(! (= (shd$b (sCons$b ?v0 ?v1 ))?v0 ):pattern ((sCons$b ?v0 ?v1 )))):named a116 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_stream$ ))(! (= (shd$f (sCons$f ?v0 ?v1 ))?v0 ):pattern ((sCons$f ?v0 ?v1 )))):named a117 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_stream$ ))(! (= (shd$e (sCons$e ?v0 ?v1 ))?v0 ):pattern ((sCons$e ?v0 ?v1 )))):named a118 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ ))(! (= (shd$d (sCons$d ?v0 ?v1 ))?v0 ):pattern ((sCons$d ?v0 ?v1 )))):named a119 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (shd$c (sCons$c ?v0 ?v1 ))?v0 ):pattern ((sCons$c ?v0 ?v1 )))):named a120 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (shd$ (sCons$ ?v0 ?v1 ))?v0 ):pattern ((sCons$ ?v0 ?v1 )))):named a121 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (shd$a (sCons$a ?v0 ?v1 ))?v0 ):pattern ((sCons$a ?v0 ?v1 )))):named a122 ))
(assert (! (forall ((?v0 C$ )(?v1 C_stream$ ))(! (= (stl$b (sCons$b ?v0 ?v1 ))?v1 ):pattern ((sCons$b ?v0 ?v1 )))):named a123 ))
(assert (! (forall ((?v0 B_b_prod$ )(?v1 B_b_prod_stream$ ))(! (= (stl$f (sCons$f ?v0 ?v1 ))?v1 ):pattern ((sCons$f ?v0 ?v1 )))):named a124 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod_stream$ ))(! (= (stl$e (sCons$e ?v0 ?v1 ))?v1 ):pattern ((sCons$e ?v0 ?v1 )))):named a125 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod_stream$ ))(! (= (stl$d (sCons$d ?v0 ?v1 ))?v1 ):pattern ((sCons$d ?v0 ?v1 )))):named a126 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod_stream$ ))(! (= (stl$c (sCons$c ?v0 ?v1 ))?v1 ):pattern ((sCons$c ?v0 ?v1 )))):named a127 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ ))(! (= (stl$a (sCons$a ?v0 ?v1 ))?v1 ):pattern ((sCons$a ?v0 ?v1 )))):named a128 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(! (= (stl$ (sCons$ ?v0 ?v1 ))?v1 ):pattern ((sCons$ ?v0 ?v1 )))):named a129 ))
(assert (! (forall ((?v0 A_c_sp_nu$ ))(=> (=> (= ?v0 (in$ (out$ ?v0 )))false )false )):named a130 ))
(assert (! (forall ((?v0 C_b_sp_nu$ ))(=> (=> (= ?v0 (in$a (out$a ?v0 )))false )false )):named a131 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu$ ))(! (= (out$ (in$ ?v0 ))?v0 ):pattern ((in$ ?v0 )))):named a132 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ ))(! (= (out$a (in$a ?v0 ))?v0 ):pattern ((in$a ?v0 )))):named a133 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (member$ ?v0 (streams$ ?v1 ))(member$a (shd$g ?v0 )?v1 ))):named a134 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (member$b ?v0 (streams$a ?v1 ))(member$c (shd$h ?v0 )?v1 ))):named a135 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (member$j ?v0 (streams$e ?v1 ))(member$k (shd$b ?v0 )?v1 ))):named a136 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (member$d ?v0 (streams$b ?v1 ))(member$e (shd$c ?v0 )?v1 ))):named a137 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_set$ ))(=> (member$f ?v0 (streams$c ?v1 ))(member$g (shd$d ?v0 )?v1 ))):named a138 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_set$ ))(=> (member$h ?v0 (streams$d ?v1 ))(member$i (shd$e ?v0 )?v1 ))):named a139 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (member$l ?v0 (streams$f ?v1 ))(member$m (shd$f ?v0 )?v1 ))):named a140 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (member$a ?v0 (streams$h ?v1 ))(member$o (shd$ ?v0 )?v1 ))):named a141 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$c ?v0 (streams$g ?v1 ))(member$n (shd$a ?v0 )?v1 ))):named a142 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (member$c ?v0 (streams$g ?v1 ))(member$c (stl$a ?v0 )(streams$g ?v1 )))):named a143 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (member$j ?v0 (streams$e ?v1 ))(member$j (stl$b ?v0 )(streams$e ?v1 )))):named a144 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (member$l ?v0 (streams$f ?v1 ))(member$l (stl$f ?v0 )(streams$f ?v1 )))):named a145 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (member$a ?v0 (streams$h ?v1 ))(member$a (stl$ ?v0 )(streams$h ?v1 )))):named a146 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_b_stream_b_stream_fun_fun$ )(?v2 B_stream$ ))(= (fun_app$x ?v0 (case_stream$ ?v1 ?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$x ?v0 (fun_app$h (fun_app$i ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a147 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_stream_a_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$ae ?v0 (case_stream$a ?v1 ?v2 ))(=> (= ?v2 (sCons$a (shd$a ?v2 )(stl$a ?v2 )))(fun_app$ae ?v0 (fun_app$f (fun_app$g ?v1 (shd$a ?v2 ))(stl$a ?v2 )))))):named a148 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_b_stream_b_fun_fun$ )(?v2 B_stream$ ))(= (fun_app$af ?v0 (case_stream$b ?v1 ?v2 ))(=> (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(fun_app$af ?v0 (fun_app$d (fun_app$e ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))):named a149 ))
(assert (! (forall ((?v0 B_stream_bool_fun$ )(?v1 B_b_stream_b_stream_fun_fun$ )(?v2 B_stream$ ))(= (fun_app$x ?v0 (case_stream$ ?v1 ?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$x ?v0 (fun_app$h (fun_app$i ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a150 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_a_stream_a_fun_fun$ )(?v2 A_stream$ ))(= (fun_app$ae ?v0 (case_stream$a ?v1 ?v2 ))(not (and (= ?v2 (sCons$a (shd$a ?v2 )(stl$a ?v2 )))(not (fun_app$ae ?v0 (fun_app$f (fun_app$g ?v1 (shd$a ?v2 ))(stl$a ?v2 )))))))):named a151 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_b_stream_b_fun_fun$ )(?v2 B_stream$ ))(= (fun_app$af ?v0 (case_stream$b ?v1 ?v2 ))(not (and (= ?v2 (sCons$ (shd$ ?v2 )(stl$ ?v2 )))(not (fun_app$af ?v0 (fun_app$d (fun_app$e ?v1 (shd$ ?v2 ))(stl$ ?v2 )))))))):named a152 ))
(assert (! (forall ((?v0 A_c_sp_nu$ )(?v1 A_c_sp_nu$ ))(=> (= (out$ ?v0 )(out$ ?v1 ))(= ?v0 ?v1 ))):named a153 ))
(assert (! (forall ((?v0 C_b_sp_nu$ )(?v1 C_b_sp_nu$ ))(=> (= (out$a ?v0 )(out$a ?v1 ))(= ?v0 ?v1 ))):named a154 ))
(assert (! (forall ((?v0 C_stream$ ))(=> (=> (= ?v0 (sCons$b (shd$b ?v0 )(stl$b ?v0 )))false )false )):named a155 ))
(assert (! (forall ((?v0 B_b_prod_stream$ ))(=> (=> (= ?v0 (sCons$f (shd$f ?v0 )(stl$f ?v0 )))false )false )):named a156 ))
(assert (! (forall ((?v0 B_a_prod_stream$ ))(=> (=> (= ?v0 (sCons$e (shd$e ?v0 )(stl$e ?v0 )))false )false )):named a157 ))
(assert (! (forall ((?v0 A_b_prod_stream$ ))(=> (=> (= ?v0 (sCons$d (shd$d ?v0 )(stl$d ?v0 )))false )false )):named a158 ))
(assert (! (forall ((?v0 A_a_prod_stream$ ))(=> (=> (= ?v0 (sCons$c (shd$c ?v0 )(stl$c ?v0 )))false )false )):named a159 ))
(assert (! (forall ((?v0 A_stream$ ))(=> (=> (= ?v0 (sCons$a (shd$a ?v0 )(stl$a ?v0 )))false )false )):named a160 ))
(assert (! (forall ((?v0 B_stream$ ))(=> (=> (= ?v0 (sCons$ (shd$ ?v0 )(stl$ ?v0 )))false )false )):named a161 ))
(assert (! (forall ((?v0 C_b_sp_nu$ ))(=> (forall ((?v1 C_b_c_b_sp_nu_sp_mu$ ))(=> (= ?v0 (in$a ?v1 ))false ))false )):named a162 ))
(assert (! (forall ((?v0 A_c_sp_nu$ ))(=> (forall ((?v1 A_c_a_c_sp_nu_sp_mu$ ))(=> (= ?v0 (in$ ?v1 ))false ))false )):named a163 ))
(assert (! (forall ((?v0 B_stream_stream$ )(?v1 B_stream_set$ ))(=> (and (member$ ?v0 (streams$ ?v1 ))(=> (and (member$a (shd$g ?v0 )?v1 )(member$ (stl$g ?v0 )(streams$ ?v1 )))false ))false )):named a164 ))
(assert (! (forall ((?v0 A_stream_stream$ )(?v1 A_stream_set$ ))(=> (and (member$b ?v0 (streams$a ?v1 ))(=> (and (member$c (shd$h ?v0 )?v1 )(member$b (stl$h ?v0 )(streams$a ?v1 )))false ))false )):named a165 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_set$ ))(=> (and (member$d ?v0 (streams$b ?v1 ))(=> (and (member$e (shd$c ?v0 )?v1 )(member$d (stl$c ?v0 )(streams$b ?v1 )))false ))false )):named a166 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_set$ ))(=> (and (member$f ?v0 (streams$c ?v1 ))(=> (and (member$g (shd$d ?v0 )?v1 )(member$f (stl$d ?v0 )(streams$c ?v1 )))false ))false )):named a167 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_set$ ))(=> (and (member$h ?v0 (streams$d ?v1 ))(=> (and (member$i (shd$e ?v0 )?v1 )(member$h (stl$e ?v0 )(streams$d ?v1 )))false ))false )):named a168 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_set$ ))(=> (and (member$j ?v0 (streams$e ?v1 ))(=> (and (member$k (shd$b ?v0 )?v1 )(member$j (stl$b ?v0 )(streams$e ?v1 )))false ))false )):named a169 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_set$ ))(=> (and (member$l ?v0 (streams$f ?v1 ))(=> (and (member$m (shd$f ?v0 )?v1 )(member$l (stl$f ?v0 )(streams$f ?v1 )))false ))false )):named a170 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_set$ ))(=> (and (member$c ?v0 (streams$g ?v1 ))(=> (and (member$n (shd$a ?v0 )?v1 )(member$c (stl$a ?v0 )(streams$g ?v1 )))false ))false )):named a171 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_set$ ))(=> (and (member$a ?v0 (streams$h ?v1 ))(=> (and (member$o (shd$ ?v0 )?v1 )(member$a (stl$ ?v0 )(streams$h ?v1 )))false ))false )):named a172 ))
(assert (! (forall ((?v0 A_a_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu_fun$ )(?v1 A_stream$ ))(! (= (run_mu$ (get$b ?v0 )?v1 )(run_mu$ (fun_app$a ?v0 (shd$a ?v1 ))(stl$a ?v1 ))):pattern ((run_mu$ (get$b ?v0 )?v1 )))):named a173 ))
(assert (! (forall ((?v0 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v1 A_stream$ ))(! (= (run_mu$a (get$a ?v0 )?v1 )(run_mu$a (fun_app$c ?v0 (shd$a ?v1 ))(stl$a ?v1 ))):pattern ((run_mu$a (get$a ?v0 )?v1 )))):named a174 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C_stream$ ))(! (= (run_mu$b (get$ ?v0 )?v1 )(run_mu$b (fun_app$ai ?v0 (shd$b ?v1 ))(stl$b ?v1 ))):pattern ((run_mu$b (get$ ?v0 )?v1 )))):named a175 ))
(assert (! (forall ((?v0 B_a_prod$ )(?v1 B_a_prod$ )(?v2 B_a_prod_stream$ ))(! (= (fun_app$p (smember$ ?v0 )(sCons$e ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$p (smember$ ?v0 )?v2 ))):pattern ((fun_app$p (smember$ ?v0 )(sCons$e ?v1 ?v2 ))))):named a176 ))
(assert (! (forall ((?v0 A_b_prod$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ ))(! (= (fun_app$n (smember$a ?v0 )(sCons$d ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$n (smember$a ?v0 )?v2 ))):pattern ((fun_app$n (smember$a ?v0 )(sCons$d ?v1 ?v2 ))))):named a177 ))
(assert (! (forall ((?v0 A_a_prod$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (fun_app$l (smember$b ?v0 )(sCons$c ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$l (smember$b ?v0 )?v2 ))):pattern ((fun_app$l (smember$b ?v0 )(sCons$c ?v1 ?v2 ))))):named a178 ))
(assert (! (forall ((?v0 B$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$x (smember$c ?v0 )(sCons$ ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$x (smember$c ?v0 )?v2 ))):pattern ((fun_app$x (smember$c ?v0 )(sCons$ ?v1 ?v2 ))))):named a179 ))
(assert (! (forall ((?v0 A$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$v (smember$d ?v0 )(sCons$a ?v1 ?v2 ))(ite (= ?v0 ?v1 )true (fun_app$v (smember$d ?v0 )?v2 ))):pattern ((fun_app$v (smember$d ?v0 )(sCons$a ?v1 ?v2 ))))):named a180 ))
(assert (! (forall ((?v0 C_stream$ )(?v1 C_stream$ ))(= (sinterleave$ ?v0 ?v1 )(sCons$b (shd$b ?v0 )(sinterleave$ ?v1 (stl$b ?v0 ))))):named a181 ))
(assert (! (forall ((?v0 B_b_prod_stream$ )(?v1 B_b_prod_stream$ ))(= (sinterleave$a ?v0 ?v1 )(sCons$f (shd$f ?v0 )(sinterleave$a ?v1 (stl$f ?v0 ))))):named a182 ))
(assert (! (forall ((?v0 B_a_prod_stream$ )(?v1 B_a_prod_stream$ ))(= (sinterleave$b ?v0 ?v1 )(sCons$e (shd$e ?v0 )(sinterleave$b ?v1 (stl$e ?v0 ))))):named a183 ))
(assert (! (forall ((?v0 A_b_prod_stream$ )(?v1 A_b_prod_stream$ ))(= (sinterleave$c ?v0 ?v1 )(sCons$d (shd$d ?v0 )(sinterleave$c ?v1 (stl$d ?v0 ))))):named a184 ))
(assert (! (forall ((?v0 A_a_prod_stream$ )(?v1 A_a_prod_stream$ ))(= (sinterleave$d ?v0 ?v1 )(sCons$c (shd$c ?v0 )(sinterleave$d ?v1 (stl$c ?v0 ))))):named a185 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (sinterleave$e ?v0 ?v1 )(sCons$a (shd$a ?v0 )(sinterleave$e ?v1 (stl$a ?v0 ))))):named a186 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (sinterleave$f ?v0 ?v1 )(sCons$ (shd$ ?v0 )(sinterleave$f ?v1 (stl$ ?v0 ))))):named a187 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_bool_fun$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ )(?v2 C_b_sp_nu$ ))(= (fun_app$aj ?v0 (case_sp_nu$ ?v1 ?v2 ))(not (and (= ?v2 (in$a (out$a ?v2 )))(not (fun_app$aj ?v0 (fun_app$j ?v1 (out$a ?v2 )))))))):named a188 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu_bool_fun$ )(?v1 A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ )(?v2 A_c_sp_nu$ ))(= (fun_app$ak ?v0 (case_sp_nu$a ?v1 ?v2 ))(not (and (= ?v2 (in$ (out$ ?v2 )))(not (fun_app$ak ?v0 (fun_app$k ?v1 (out$ ?v2 )))))))):named a189 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_bool_fun$ )(?v1 C_b_c_b_sp_nu_sp_mu_c_b_c_b_sp_nu_sp_mu_fun$ )(?v2 C_b_sp_nu$ ))(= (fun_app$aj ?v0 (case_sp_nu$ ?v1 ?v2 ))(=> (= ?v2 (in$a (out$a ?v2 )))(fun_app$aj ?v0 (fun_app$j ?v1 (out$a ?v2 )))))):named a190 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu_bool_fun$ )(?v1 A_c_a_c_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_fun$ )(?v2 A_c_sp_nu$ ))(= (fun_app$ak ?v0 (case_sp_nu$a ?v1 ?v2 ))(=> (= ?v2 (in$ (out$ ?v2 )))(fun_app$ak ?v0 (fun_app$k ?v1 (out$ ?v2 )))))):named a191 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (smap2$ ?v0 ?v1 ?v2 )(sCons$ (fun_app$al (fun_app$am ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a192 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (smap2$a ?v0 ?v1 ?v2 )(sCons$ (fun_app$an (fun_app$ao ?v0 (shd$ ?v1 ))(shd$a ?v2 ))(smap2$a ?v0 (stl$ ?v1 )(stl$a ?v2 ))))):named a193 ))
(assert (! (forall ((?v0 B_c_b_fun_fun$ )(?v1 B_stream$ )(?v2 C_stream$ ))(= (smap2$b ?v0 ?v1 ?v2 )(sCons$ (fun_app$ap (fun_app$aq ?v0 (shd$ ?v1 ))(shd$b ?v2 ))(smap2$b ?v0 (stl$ ?v1 )(stl$b ?v2 ))))):named a194 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (smap2$c ?v0 ?v1 ?v2 )(sCons$ (fun_app$al (fun_app$ar ?v0 (shd$a ?v1 ))(shd$ ?v2 ))(smap2$c ?v0 (stl$a ?v1 )(stl$ ?v2 ))))):named a195 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (smap2$d ?v0 ?v1 ?v2 )(sCons$ (fun_app$an (fun_app$as ?v0 (shd$a ?v1 ))(shd$a ?v2 ))(smap2$d ?v0 (stl$a ?v1 )(stl$a ?v2 ))))):named a196 ))
(assert (! (forall ((?v0 A_c_b_fun_fun$ )(?v1 A_stream$ )(?v2 C_stream$ ))(= (smap2$e ?v0 ?v1 ?v2 )(sCons$ (fun_app$ap (fun_app$at ?v0 (shd$a ?v1 ))(shd$b ?v2 ))(smap2$e ?v0 (stl$a ?v1 )(stl$b ?v2 ))))):named a197 ))
(assert (! (forall ((?v0 C_b_b_fun_fun$ )(?v1 C_stream$ )(?v2 B_stream$ ))(= (smap2$f ?v0 ?v1 ?v2 )(sCons$ (fun_app$al (fun_app$au ?v0 (shd$b ?v1 ))(shd$ ?v2 ))(smap2$f ?v0 (stl$b ?v1 )(stl$ ?v2 ))))):named a198 ))
(assert (! (forall ((?v0 C_a_b_fun_fun$ )(?v1 C_stream$ )(?v2 A_stream$ ))(= (smap2$g ?v0 ?v1 ?v2 )(sCons$ (fun_app$an (fun_app$av ?v0 (shd$b ?v1 ))(shd$a ?v2 ))(smap2$g ?v0 (stl$b ?v1 )(stl$a ?v2 ))))):named a199 ))
(assert (! (forall ((?v0 C_c_b_fun_fun$ )(?v1 C_stream$ )(?v2 C_stream$ ))(= (smap2$h ?v0 ?v1 ?v2 )(sCons$ (fun_app$ap (fun_app$aw ?v0 (shd$b ?v1 ))(shd$b ?v2 ))(smap2$h ?v0 (stl$b ?v1 )(stl$b ?v2 ))))):named a200 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (smap2$i ?v0 ?v1 ?v2 )(sCons$a (fun_app$ax (fun_app$ay ?v0 (shd$ ?v1 ))(shd$ ?v2 ))(smap2$i ?v0 (stl$ ?v1 )(stl$ ?v2 ))))):named a201 ))
(assert (! (forall ((?v0 A_b_prod_bool_fun$ )(?v1 A_b_prod$ )(?v2 A_b_prod_stream$ ))(! (= (fun_app$n (pred_stream$ ?v0 )(sCons$d ?v1 ?v2 ))(and (fun_app$aa ?v0 ?v1 )(fun_app$n (pred_stream$ ?v0 )?v2 ))):pattern ((fun_app$n (pred_stream$ ?v0 )(sCons$d ?v1 ?v2 ))))):named a202 ))
(assert (! (forall ((?v0 A_a_prod_bool_fun$ )(?v1 A_a_prod$ )(?v2 A_a_prod_stream$ ))(! (= (fun_app$l (pred_stream$a ?v0 )(sCons$c ?v1 ?v2 ))(and (fun_app$z ?v0 ?v1 )(fun_app$l (pred_stream$a ?v0 )?v2 ))):pattern ((fun_app$l (pred_stream$a ?v0 )(sCons$c ?v1 ?v2 ))))):named a203 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B$ )(?v2 B_stream$ ))(! (= (fun_app$x (pred_stream$b ?v0 )(sCons$ ?v1 ?v2 ))(and (fun_app$af ?v0 ?v1 )(fun_app$x (pred_stream$b ?v0 )?v2 ))):pattern ((fun_app$x (pred_stream$b ?v0 )(sCons$ ?v1 ?v2 ))))):named a204 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A$ )(?v2 A_stream$ ))(! (= (fun_app$v (pred_stream$c ?v0 )(sCons$a ?v1 ?v2 ))(and (fun_app$ae ?v0 ?v1 )(fun_app$v (pred_stream$c ?v0 )?v2 ))):pattern ((fun_app$v (pred_stream$c ?v0 )(sCons$a ?v1 ?v2 ))))):named a205 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (shd$ (smap$ ?v0 ?v1 ))(fun_app$al ?v0 (shd$ ?v1 )))):named a206 ))
(assert (! (forall ((?v0 A_b_fun$ )(?v1 A_stream$ ))(= (shd$ (smap$a ?v0 ?v1 ))(fun_app$an ?v0 (shd$a ?v1 )))):named a207 ))
(assert (! (forall ((?v0 B_a_fun$ )(?v1 B_stream$ ))(= (shd$a (smap$b ?v0 ?v1 ))(fun_app$ax ?v0 (shd$ ?v1 )))):named a208 ))
(assert (! (forall ((?v0 A_a_fun$ )(?v1 A_stream$ ))(= (shd$a (smap$c ?v0 ?v1 ))(fun_app$az ?v0 (shd$a ?v1 )))):named a209 ))
(assert (! (forall ((?v0 B_b_fun$ )(?v1 B_stream$ ))(= (stl$ (smap$ ?v0 ?v1 ))(smap$ ?v0 (stl$ ?v1 )))):named a210 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$ ?v0 ?v1 ?v2 ))(fun_app$al (fun_app$am ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a211 ))
(assert (! (forall ((?v0 B_a_b_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$a ?v0 ?v1 ?v2 ))(fun_app$an (fun_app$ao ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a212 ))
(assert (! (forall ((?v0 A_b_b_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (shd$ (smap2$c ?v0 ?v1 ?v2 ))(fun_app$al (fun_app$ar ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a213 ))
(assert (! (forall ((?v0 A_a_b_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$ (smap2$d ?v0 ?v1 ?v2 ))(fun_app$an (fun_app$as ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a214 ))
(assert (! (forall ((?v0 B_b_a_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (shd$a (smap2$i ?v0 ?v1 ?v2 ))(fun_app$ax (fun_app$ay ?v0 (shd$ ?v1 ))(shd$ ?v2 )))):named a215 ))
(assert (! (forall ((?v0 B_a_a_fun_fun$ )(?v1 B_stream$ )(?v2 A_stream$ ))(= (shd$a (smap2$j ?v0 ?v1 ?v2 ))(fun_app$az (fun_app$ba ?v0 (shd$ ?v1 ))(shd$a ?v2 )))):named a216 ))
(assert (! (forall ((?v0 A_b_a_fun_fun$ )(?v1 A_stream$ )(?v2 B_stream$ ))(= (shd$a (smap2$k ?v0 ?v1 ?v2 ))(fun_app$ax (fun_app$bb ?v0 (shd$a ?v1 ))(shd$ ?v2 )))):named a217 ))
(assert (! (forall ((?v0 A_a_a_fun_fun$ )(?v1 A_stream$ )(?v2 A_stream$ ))(= (shd$a (smap2$l ?v0 ?v1 ?v2 ))(fun_app$az (fun_app$bc ?v0 (shd$a ?v1 ))(shd$a ?v2 )))):named a218 ))
(assert (! (forall ((?v0 B_b_b_fun_fun$ )(?v1 B_stream$ )(?v2 B_stream$ ))(= (stl$ (smap2$ ?v0 ?v1 ?v2 ))(smap2$ ?v0 (stl$ ?v1 )(stl$ ?v2 )))):named a219 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (shd$ (sinterleave$f ?v0 ?v1 ))(shd$ ?v0 ))):named a220 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$a (sinterleave$e ?v0 ?v1 ))(shd$a ?v0 ))):named a221 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (stl$ (sinterleave$f ?v0 ?v1 ))(sinterleave$f ?v1 (stl$ ?v0 )))):named a222 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (sfilter$ ?v0 ?v1 )(sCons$a (shd$a (sdrop_while$e (fun_app$bd (comp$ uu$ )?v0 )?v1 ))(sfilter$ ?v0 (stl$a (sdrop_while$e (fun_app$bd (comp$ uu$ )?v0 )?v1 )))))):named a223 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(= (sfilter$a ?v0 ?v1 )(sCons$ (shd$ (sdrop_while$f (fun_app$be (comp$a uu$ )?v0 )?v1 ))(sfilter$a ?v0 (stl$ (sdrop_while$f (fun_app$be (comp$a uu$ )?v0 )?v1 )))))):named a224 ))
(assert (! (forall ((?v0 A$ )(?v1 A_stream$ )(?v2 A_a_stream_bool_fun_fun$ ))(=> (and (member$n ?v0 (sset$ ?v1 ))(and (forall ((?v3 A_stream$ ))(fun_app$v (fun_app$bf ?v2 (shd$a ?v3 ))?v3 ))(forall ((?v3 A_stream$ )(?v4 A$ ))(=> (and (member$n ?v4 (sset$ (stl$a ?v3 )))(fun_app$v (fun_app$bf ?v2 ?v4 )(stl$a ?v3 )))(fun_app$v (fun_app$bf ?v2 ?v4 )?v3 )))))(fun_app$v (fun_app$bf ?v2 ?v0 )?v1 ))):named a225 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ )(?v2 B_b_stream_bool_fun_fun$ ))(=> (and (member$o ?v0 (sset$a ?v1 ))(and (forall ((?v3 B_stream$ ))(fun_app$x (fun_app$bg ?v2 (shd$ ?v3 ))?v3 ))(forall ((?v3 B_stream$ )(?v4 B$ ))(=> (and (member$o ?v4 (sset$a (stl$ ?v3 )))(fun_app$x (fun_app$bg ?v2 ?v4 )(stl$ ?v3 )))(fun_app$x (fun_app$bg ?v2 ?v4 )?v3 )))))(fun_app$x (fun_app$bg ?v2 ?v0 )?v1 ))):named a226 ))
(assert (! (forall ((?v0 B_stream$ ))(member$o (shd$ ?v0 )(sset$a ?v0 ))):named a227 ))
(assert (! (forall ((?v0 A_stream$ ))(member$n (shd$a ?v0 )(sset$ ?v0 ))):named a228 ))
(assert (! (forall ((?v0 B$ )(?v1 B_stream$ ))(=> (member$o ?v0 (sset$a (stl$ ?v1 )))(member$o ?v0 (sset$a ?v1 )))):named a229 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(= (shd$ (sfilter$a ?v0 ?v1 ))(shd$ (sdrop_while$f (fun_app$be (comp$a uu$ )?v0 )?v1 )))):named a230 ))
(assert (! (forall ((?v0 A_bool_fun$ )(?v1 A_stream$ ))(= (shd$a (sfilter$ ?v0 ?v1 ))(shd$a (sdrop_while$e (fun_app$bd (comp$ uu$ )?v0 )?v1 )))):named a231 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 B_stream$ ))(= (stl$ (sfilter$a ?v0 ?v1 ))(sfilter$a ?v0 (stl$ (sdrop_while$f (fun_app$be (comp$a uu$ )?v0 )?v1 ))))):named a232 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (sdrop$ ?v0 (stl$ ?v1 ))(stl$ (sdrop$ ?v0 ?v1 )))):named a233 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (shd$ (sdrop$ ?v0 ?v1 ))(snth$ ?v1 ?v0 ))):named a234 ))
(assert (! (forall ((?v0 Nat$ )(?v1 A_stream$ ))(= (shd$a (sdrop$a ?v0 ?v1 ))(snth$a ?v1 ?v0 ))):named a235 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (stl$f (szip$ ?v0 ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 )))):named a236 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (szip$a ?v0 ?v1 )(sCons$c (pair$ (shd$a ?v0 )(shd$a ?v1 ))(szip$a (stl$a ?v0 )(stl$a ?v1 ))))):named a237 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (szip$b ?v0 ?v1 )(sCons$d (pair$a (shd$a ?v0 )(shd$ ?v1 ))(szip$b (stl$a ?v0 )(stl$ ?v1 ))))):named a238 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ ))(= (szip$c ?v0 ?v1 )(sCons$e (pair$b (shd$ ?v0 )(shd$a ?v1 ))(szip$c (stl$ ?v0 )(stl$a ?v1 ))))):named a239 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (szip$ ?v0 ?v1 )(sCons$f (pair$c (shd$ ?v0 )(shd$ ?v1 ))(szip$ (stl$ ?v0 )(stl$ ?v1 ))))):named a240 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 B_stream$ ))(= (shd$f (szip$ ?v0 ?v1 ))(pair$c (shd$ ?v0 )(shd$ ?v1 )))):named a241 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 A_stream$ ))(= (shd$e (szip$c ?v0 ?v1 ))(pair$b (shd$ ?v0 )(shd$a ?v1 )))):named a242 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 B_stream$ ))(= (shd$d (szip$b ?v0 ?v1 ))(pair$a (shd$a ?v0 )(shd$ ?v1 )))):named a243 ))
(assert (! (forall ((?v0 A_stream$ )(?v1 A_stream$ ))(= (shd$c (szip$a ?v0 ?v1 ))(pair$ (shd$a ?v0 )(shd$a ?v1 )))):named a244 ))
(assert (! (forall ((?v0 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v1 A$ ))(member$p (pair$k (fun_app$c ?v0 ?v1 )(get$a ?v0 ))sub$ )):named a245 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C$ ))(member$q (pair$l (fun_app$ai ?v0 ?v1 )(get$ ?v0 ))sub$a )):named a246 ))
(assert (! (forall ((?v0 A_bool_fun_a_stream_prod_a_stream_bool_fun_fun$ )(?v1 A_bool_fun$ )(?v2 A_stream$ )(?v3 A_stream$ ))(=> (and (forall ((?v4 A_bool_fun_a_stream_a_stream_fun_fun$ )(?v5 A_bool_fun$ )(?v6 A_stream$ )(?v7 A_stream$ ))(=> (and (forall ((?v8 A_bool_fun$ )(?v9 A_stream$ )(?v10 A_stream$ ))(=> (and (= (fun_app$bh (fun_app$bi ?v4 ?v8 )?v9 )?v10 )(not (= ?v10 undefined$ )))(fun_app$v (fun_app$bj ?v0 (pair$m ?v8 ?v9 ))?v10 )))(and (= (ite (fun_app$ae ?v5 (shd$a ?v6 ))(fun_app$bh (fun_app$bi ?v4 ?v5 )(stl$a ?v6 ))?v6 )?v7 )(not (= ?v7 undefined$ ))))(fun_app$v (fun_app$bj ?v0 (pair$m ?v5 ?v6 ))?v7 )))(and (= (sdrop_while$e ?v1 ?v2 )?v3 )(not (= ?v3 undefined$ ))))(fun_app$v (fun_app$bj ?v0 (pair$m ?v1 ?v2 ))?v3 ))):named a247 ))
(assert (! (forall ((?v0 B_bool_fun_b_stream_prod_b_stream_bool_fun_fun$ )(?v1 B_bool_fun$ )(?v2 B_stream$ )(?v3 B_stream$ ))(=> (and (forall ((?v4 B_bool_fun_b_stream_b_stream_fun_fun$ )(?v5 B_bool_fun$ )(?v6 B_stream$ )(?v7 B_stream$ ))(=> (and (forall ((?v8 B_bool_fun$ )(?v9 B_stream$ )(?v10 B_stream$ ))(=> (and (= (fun_app$h (fun_app$bk ?v4 ?v8 )?v9 )?v10 )(not (= ?v10 undefined$a )))(fun_app$x (fun_app$bl ?v0 (pair$n ?v8 ?v9 ))?v10 )))(and (= (ite (fun_app$af ?v5 (shd$ ?v6 ))(fun_app$h (fun_app$bk ?v4 ?v5 )(stl$ ?v6 ))?v6 )?v7 )(not (= ?v7 undefined$a ))))(fun_app$x (fun_app$bl ?v0 (pair$n ?v5 ?v6 ))?v7 )))(and (= (sdrop_while$f ?v1 ?v2 )?v3 )(not (= ?v3 undefined$a ))))(fun_app$x (fun_app$bl ?v0 (pair$n ?v1 ?v2 ))?v3 ))):named a248 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(= (stl$ (sdrop$ ?v0 ?v1 ))(sdrop$ (suc$ ?v0 )?v1 ))):named a249 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_prod$ ))(=> (and (forall ((?v1 B$ )(?v2 C_b_sp_nu$ )(?v3 A_c_a_c_sp_nu_sp_mu$ ))(=> (= ?v0 (pair$o (put$ ?v1 ?v2 )?v3 ))false ))(and (forall ((?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v2 C$ )(?v3 A_c_sp_nu$ ))(=> (= ?v0 (pair$o (get$ ?v1 )(put$a ?v2 ?v3 )))false ))(forall ((?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v2 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (= ?v0 (pair$o (get$ ?v1 )(get$a ?v2 )))false ))))false )):named a250 ))
(assert (! (forall ((?v0 A_c_a_c_sp_nu_sp_mu$ ))(=> (and (forall ((?v1 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (= ?v0 (get$a ?v1 ))false ))(forall ((?v1 C$ )(?v2 A_c_sp_nu$ ))(=> (= ?v0 (put$a ?v1 ?v2 ))false )))false )):named a251 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ ))(=> (and (forall ((?v1 C_c_b_c_b_sp_nu_sp_mu_fun$ ))(=> (= ?v0 (get$ ?v1 ))false ))(forall ((?v1 B$ )(?v2 C_b_sp_nu$ ))(=> (= ?v0 (put$ ?v1 ?v2 ))false )))false )):named a252 ))
(assert (! (forall ((?v0 A_a_c_a_c_sp_nu_sp_mu_fun$ )(?v1 C$ )(?v2 A_c_sp_nu$ ))(not (= (get$a ?v0 )(put$a ?v1 ?v2 )))):named a253 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 B$ )(?v2 C_b_sp_nu$ ))(not (= (get$ ?v0 )(put$ ?v1 ?v2 )))):named a254 ))
(assert (! (forall ((?v0 B_stream$ )(?v1 Nat$ ))(! (= (snth$ ?v0 (suc$ ?v1 ))(snth$ (stl$ ?v0 )?v1 )):pattern ((snth$ ?v0 (suc$ ?v1 ))))):named a255 ))
(assert (! (forall ((?v0 Nat$ )(?v1 B_stream$ ))(! (= (sdrop$ (suc$ ?v0 )?v1 )(sdrop$ ?v0 (stl$ ?v1 ))):pattern ((sdrop$ (suc$ ?v0 )?v1 )))):named a256 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C$ )(?v2 A_c_sp_nu$ ))(! (= (sp_mu_comp$ (get$ ?v0 )(put$a ?v1 ?v2 ))(sp_mu_comp$ (fun_app$ai ?v0 ?v1 )(out$ ?v2 ))):pattern ((sp_mu_comp$ (get$ ?v0 )(put$a ?v1 ?v2 ))))):named a257 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ )(?v2 C_b_c_b_sp_nu_sp_mu_a_c_a_c_sp_nu_sp_mu_bool_fun_fun$ ))(=> (and (accp$ sp_mu_comp_rel$ (pair$o ?v0 ?v1 ))(and (forall ((?v3 B$ )(?v4 C_b_sp_nu$ )(?v5 A_c_a_c_sp_nu_sp_mu$ ))(=> (accp$ sp_mu_comp_rel$ (pair$o (put$ ?v3 ?v4 )?v5 ))(fun_app$ak (fun_app$bm ?v2 (put$ ?v3 ?v4 ))?v5 )))(and (forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 C$ )(?v5 A_c_sp_nu$ ))(=> (and (accp$ sp_mu_comp_rel$ (pair$o (get$ ?v3 )(put$a ?v4 ?v5 )))(fun_app$ak (fun_app$bm ?v2 (fun_app$ai ?v3 ?v4 ))(out$ ?v5 )))(fun_app$ak (fun_app$bm ?v2 (get$ ?v3 ))(put$a ?v4 ?v5 ))))(forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (and (accp$ sp_mu_comp_rel$ (pair$o (get$ ?v3 )(get$a ?v4 )))(forall ((?v5 A$ ))(fun_app$ak (fun_app$bm ?v2 (get$ ?v3 ))(fun_app$c ?v4 ?v5 ))))(fun_app$ak (fun_app$bm ?v2 (get$ ?v3 ))(get$a ?v4 )))))))(fun_app$ak (fun_app$bm ?v2 ?v0 )?v1 ))):named a258 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 C$ )(?v2 A_c_sp_nu$ ))(! (=> (accp$ sp_mu_comp_rel$ (pair$o (get$ ?v0 )(put$a ?v1 ?v2 )))(= (sp_mu_comp$ (get$ ?v0 )(put$a ?v1 ?v2 ))(sp_mu_comp$ (fun_app$ai ?v0 ?v1 )(out$ ?v2 )))):pattern ((sp_mu_comp$ (get$ ?v0 )(put$a ?v1 ?v2 ))))):named a259 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 A_c_sp_nu_bool_fun$ )(?v2 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(! (= (fun_app$ak (fun_app$bn (pred_sp_mu$ ?v0 )?v1 )(get$a ?v2 ))(pred_fun$ (fun_app$bn (pred_sp_mu$ ?v0 )?v1 )?v2 )):pattern ((fun_app$ak (fun_app$bn (pred_sp_mu$ ?v0 )?v1 )(get$a ?v2 ))))):named a260 ))
(assert (! (forall ((?v0 B_bool_fun$ )(?v1 C_b_sp_nu_bool_fun$ )(?v2 C_c_b_c_b_sp_nu_sp_mu_fun$ ))(! (= (fun_app$aj (fun_app$bo (pred_sp_mu$a ?v0 )?v1 )(get$ ?v2 ))(pred_fun$a (fun_app$bo (pred_sp_mu$a ?v0 )?v1 )?v2 )):pattern ((fun_app$aj (fun_app$bo (pred_sp_mu$a ?v0 )?v1 )(get$ ?v2 ))))):named a261 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ )(?v2 A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ ))(=> (and (= (sp_mu_comp$ ?v0 ?v1 )?v2 )(and (accp$ sp_mu_comp_rel$ (pair$o ?v0 ?v1 ))(and (forall ((?v3 B$ )(?v4 C_b_sp_nu$ )(?v5 A_c_a_c_sp_nu_sp_mu$ ))(=> (and (= ?v0 (put$ ?v3 ?v4 ))(and (= ?v1 ?v5 )(and (= ?v2 (put$b ?v3 (pair$d ?v4 (in$ ?v5 ))))(accp$ sp_mu_comp_rel$ (pair$o (put$ ?v3 ?v4 )?v5 )))))false ))(and (forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 C$ )(?v5 A_c_sp_nu$ ))(=> (and (= ?v0 (get$ ?v3 ))(and (= ?v1 (put$a ?v4 ?v5 ))(and (= ?v2 (sp_mu_comp$ (fun_app$ai ?v3 ?v4 )(out$ ?v5 )))(accp$ sp_mu_comp_rel$ (pair$o (get$ ?v3 )(put$a ?v4 ?v5 ))))))false ))(forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (and (= ?v0 (get$ ?v3 ))(and (= ?v1 (get$a ?v4 ))(and (= ?v2 (get$b (fun_app$b (uua$ ?v3 )?v4 )))(accp$ sp_mu_comp_rel$ (pair$o (get$ ?v3 )(get$a ?v4 ))))))false ))))))false )):named a262 ))
(assert (! (forall ((?v0 C_b_c_b_sp_nu_sp_mu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ )(?v2 A_b_c_b_sp_nu_a_c_sp_nu_prod_sp_mu$ ))(=> (and (= (sp_mu_comp$ ?v0 ?v1 )?v2 )(and (forall ((?v3 B$ )(?v4 C_b_sp_nu$ )(?v5 A_c_a_c_sp_nu_sp_mu$ ))(=> (and (= ?v0 (put$ ?v3 ?v4 ))(and (= ?v1 ?v5 )(= ?v2 (put$b ?v3 (pair$d ?v4 (in$ ?v5 ))))))false ))(and (forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 C$ )(?v5 A_c_sp_nu$ ))(=> (and (= ?v0 (get$ ?v3 ))(and (= ?v1 (put$a ?v4 ?v5 ))(= ?v2 (sp_mu_comp$ (fun_app$ai ?v3 ?v4 )(out$ ?v5 )))))false ))(forall ((?v3 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v4 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (and (= ?v0 (get$ ?v3 ))(and (= ?v1 (get$a ?v4 ))(= ?v2 (get$b (fun_app$b (uua$ ?v3 )?v4 )))))false )))))false )):named a263 ))
(assert (! (forall ((?v0 C_bool_fun$ )(?v1 A_c_a_c_sp_nu_sp_mu$ ))(! (= (fun_app$bp (pred_sp_nu$ ?v0 )(in$ ?v1 ))(fun_app$ak (fun_app$bn (pred_sp_mu$ ?v0 )(pred_sp_nu$ ?v0 ))?v1 )):pattern ((fun_app$bp (pred_sp_nu$ ?v0 )(in$ ?v1 ))))):named a264 ))
(assert (! (forall ((?v0 B_stream$ ))(= (stl$ ?v0 )(case_stream$ uub$ ?v0 ))):named a265 ))
(assert (! (forall ((?v0 A_c_sp_nu$ ))(= (out$ ?v0 )(case_sp_nu$a uuc$ ?v0 ))):named a266 ))
(assert (! (forall ((?v0 C_b_sp_nu$ ))(= (out$a ?v0 )(case_sp_nu$ uud$ ?v0 ))):named a267 ))
(assert (! (forall ((?v0 B_stream$ ))(= (shd$ ?v0 )(case_stream$b uue$ ?v0 ))):named a268 ))
(assert (! (forall ((?v0 A_stream$ ))(= (shd$a ?v0 )(case_stream$a uuf$ ?v0 ))):named a269 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(= (sp_mu_comp$ (get$ ?v0 )(get$a ?v1 ))(get$b (fun_app$b (uua$ ?v0 )?v1 )))):named a270 ))
(assert (! (forall ((?v0 C_c_b_c_b_sp_nu_sp_mu_fun$ )(?v1 A_a_c_a_c_sp_nu_sp_mu_fun$ ))(=> (accp$ sp_mu_comp_rel$ (pair$o (get$ ?v0 )(get$a ?v1 )))(= (sp_mu_comp$ (get$ ?v0 )(get$a ?v1 ))(get$b (fun_app$b (uua$ ?v0 )?v1 ))))):named a271 ))
(assert (! (forall ((?v0 A_c_sp_nu$ )(?v1 A_c_a_c_sp_nu_sp_mu$ )(?v2 C$ ))(=> (and (member$r ?v0 (set2_sp_mu$ ?v1 ))(member$k ?v2 (set_sp_nu$ ?v0 )))(member$k ?v2 (set_sp_nu$ (in$ ?v1 ))))):named a272 ))
(assert (! (forall ((?v0 C$ )(?v1 A_c_a_c_sp_nu_sp_mu$ ))(=> (member$k ?v0 (set1_sp_mu$ ?v1 ))(member$k ?v0 (set_sp_nu$ (in$ ?v1 ))))):named a273 ))
(assert (! (forall ((?v0 A_c_sp_nu$ )(?v1 A_c_sp_nu$ )(?v2 C$ ))(=> (and (member$r ?v0 (set2_sp_mu$ (out$ ?v1 )))(member$k ?v2 (set_sp_nu$ ?v0 )))(member$k ?v2 (set_sp_nu$ ?v1 )))):named a274 ))
(assert (! (forall ((?v0 C_b_sp_nu$ )(?v1 C_b_sp_nu$ )(?v2 B$ ))(=> (and (member$s ?v0 (set2_sp_mu$a (out$a ?v1 )))(member$o ?v2 (set_sp_nu$a ?v0 )))(member$o ?v2 (set_sp_nu$a ?v1 )))):named a275 ))
(assert (! (forall ((?v0 C$ )(?v1 A_c_sp_nu$ ))(=> (and (member$k ?v0 (set_sp_nu$ ?v1 ))(and (forall ((?v2 A_c_a_c_sp_nu_sp_mu$ ))(=> (and (= ?v1 (in$ ?v2 ))(member$k ?v0 (set1_sp_mu$ ?v2 )))false ))(forall ((?v2 A_c_a_c_sp_nu_sp_mu$ )(?v3 A_c_sp_nu$ ))(=> (and (= ?v1 (in$ ?v2 ))(and (member$r ?v3 (set2_sp_mu$ ?v2 ))(member$k ?v0 (set_sp_nu$ ?v3 ))))false ))))false )):named a276 ))
(assert (! (forall ((?v0 C$ )(?v1 A_c_sp_nu$ )(?v2 C_a_c_sp_nu_bool_fun_fun$ ))(=> (and (member$k ?v0 (set_sp_nu$ ?v1 ))(and (forall ((?v3 A_c_a_c_sp_nu_sp_mu$ )(?v4 C$ ))(=> (member$k ?v4 (set1_sp_mu$ ?v3 ))(fun_app$bp (fun_app$bq ?v2 ?v4 )(in$ ?v3 ))))(forall ((?v3 A_c_a_c_sp_nu_sp_mu$ )(?v4 A_c_sp_nu$ )(?v5 C$ ))(=> (and (member$r ?v4 (set2_sp_mu$ ?v3 ))(and (member$k ?v5 (set_sp_nu$ ?v4 ))(fun_app$bp (fun_app$bq ?v2 ?v5 )?v4 )))(fun_app$bp (fun_app$bq ?v2 ?v5 )(in$ ?v3 ))))))(fun_app$bp (fun_app$bq ?v2 ?v0 )?v1 ))):named a277 ))
(check-sat )
(get-unsat-core )
