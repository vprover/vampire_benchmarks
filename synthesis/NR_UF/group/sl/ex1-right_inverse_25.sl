(set-logic HO_UF)
(set-feature :recursion true)

(declare-sort s 0)

(declare-var inv (-> s s))
(declare-var op (-> s s s))
(declare-var e s)
(declare-var x0 s)
(declare-var x1 s)
(declare-var x2 s)
(declare-var x3 s)
(declare-var x4 s)
(declare-var x5 s)
(declare-var x6 s)
(declare-var x7 s)
(declare-var x8 s)
(declare-var x9 s)
(declare-var x10 s)
(declare-var x11 s)
(declare-var x12 s)
(declare-var x13 s)
(declare-var x14 s)
(declare-var x15 s)
(declare-var x16 s)
(declare-var x17 s)
(declare-var x18 s)
(declare-var x19 s)
(declare-var x20 s)
(declare-var x21 s)
(declare-var x22 s)
(declare-var x23 s)
(declare-var x24 s)

(assume (forall ((x s)) (= (op (inv x) x) e)))
(assume (forall ((x s)) (= (op e x) x)))
(assume (forall ((x s) (y s) (z s)) (= (op x (op y z)) (op (op x y) z))))

(synth-fun fy ((inv (-> s s)) (op (-> s s s)) (e s) (x0 s) (x1 s) (x2 s) (x3 s) (x4 s) (x5 s) (x6 s) (x7 s) (x8 s) (x9 s) (x10 s) (x11 s) (x12 s) (x13 s) (x14 s) (x15 s) (x16 s) (x17 s) (x18 s) (x19 s) (x20 s) (x21 s) (x22 s) (x23 s) (x24 s)) s)

(constraint (= (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op (op x0 x1) x2) x3) x4) x5) x6) x7) x8) x9) x10) x11) x12) x13) x14) x15) x16) x17) x18) x19) x20) x21) x22) x23) x24) (fy inv op e x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 x20 x21 x22 x23 x24)) e))

(check-synth)
