(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+593 () Bool)
(declare-fun j@4 () Int)
(declare-fun j@3 () Int)
(declare-fun %lbl%@2329 () Bool)
(declare-fun bad@4 () Bool)
(declare-fun i () Int)
(declare-fun n () Int)
(declare-fun %lbl%@2348 () Bool)
(declare-fun a@14 () (Array Int Int))
(declare-fun minValue@9 () Int)
(declare-fun %lbl%@2359 () Bool)
(declare-fun %lbl%@2392 () Bool)
(declare-fun %lbl%+591 () Bool)
(declare-fun minValue@7 () Int)
(declare-fun a@11 () (Array Int Int))
(declare-fun %lbl%+589 () Bool)
(declare-fun minValue@8 () Int)
(declare-fun t@4 () Int)
(declare-fun a@12 () (Array Int Int))
(declare-fun a@13 () (Array Int Int))
(declare-fun %lbl%+580 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun %lbl%+578 () Bool)
(declare-fun %lbl%+576 () Bool)
(declare-fun j@2 () Int)
(declare-fun %lbl%+570 () Bool)
(declare-fun minValue@5 () Int)
(declare-fun a@8 () (Array Int Int))
(declare-fun %lbl%+568 () Bool)
(declare-fun minValue@6 () Int)
(declare-fun t@3 () Int)
(declare-fun a@9 () (Array Int Int))
(declare-fun a@10 () (Array Int Int))
(declare-fun %lbl%+559 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+557 () Bool)
(declare-fun %lbl%+555 () Bool)
(declare-fun j@1 () Int)
(declare-fun %lbl%+549 () Bool)
(declare-fun minValue@3 () Int)
(declare-fun a@5 () (Array Int Int))
(declare-fun %lbl%+547 () Bool)
(declare-fun minValue@4 () Int)
(declare-fun t@2 () Int)
(declare-fun a@6 () (Array Int Int))
(declare-fun a@7 () (Array Int Int))
(declare-fun %lbl%+538 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+536 () Bool)
(declare-fun %lbl%+534 () Bool)
(declare-fun j@0 () Int)
(declare-fun %lbl%+528 () Bool)
(declare-fun minValue@1 () Int)
(declare-fun a@2 () (Array Int Int))
(declare-fun %lbl%+526 () Bool)
(declare-fun minValue@2 () Int)
(declare-fun t@1 () Int)
(declare-fun a@3 () (Array Int Int))
(declare-fun a@4 () (Array Int Int))
(declare-fun %lbl%+517 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+515 () Bool)
(declare-fun %lbl%+513 () Bool)
(declare-fun j () Int)
(declare-fun %lbl%+507 () Bool)
(declare-fun minValue () Int)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%+505 () Bool)
(declare-fun minValue@0 () Int)
(declare-fun t@0 () Int)
(declare-fun a@0 () (Array Int Int))
(declare-fun a@1 () (Array Int Int))
(declare-fun %lbl%+496 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+494 () Bool)
(declare-fun %lbl%+1028 () Bool)
(declare-fun k () Int)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((anon20_correct  (=> (! (and %lbl%+593 true) :lblpos +593) (=> (= j@4 (+ j@3 1)) (and (! (or %lbl%@2329  (or bad@4 (and (<= (+ i 1) j@4) (<= j@4 n)))) :lblneg @2329) (=> (or bad@4 (and (<= (+ i 1) j@4) (<= j@4 n))) (and (! (or %lbl%@2348  (or bad@4 (= (select a@14 i) minValue@9))) :lblneg @2348) (=> (or bad@4 (= (select a@14 i) minValue@9)) (and (! (or %lbl%@2359  (or bad@4 (forall ((w Int) ) (!  (=> (and (< i w) (< w j@4)) (<= (select a@14 i) (select a@14 w)))
 :qid |selectk5.26:26|
 :skolemid |4|
)))) :lblneg @2359) (=> (or bad@4 (forall ((w@@0 Int) ) (!  (=> (and (< i w@@0) (< w@@0 j@4)) (<= (select a@14 i) (select a@14 w@@0)))
 :qid |selectk5.26:26|
 :skolemid |4|
))) (! (or %lbl%@2392  (or bad@4 (forall ((v Int) (w@@1 Int) ) (!  (=> (and (and (and (<= 0 v) (< v i)) (<= i w@@1)) (< w@@1 n)) (<= (select a@14 v) (select a@14 w@@1)))
 :qid |selectk5.27:26|
 :skolemid |5|
)))) :lblneg @2392)))))))))))
(let ((anon30_Else_correct  (=> (! (and %lbl%+591 true) :lblpos +591) (=> (<= minValue@7 (select a@11 j@3)) (=> (and (= a@14 a@11) (= minValue@9 minValue@7)) anon20_correct)))))
(let ((anon30_Then_correct  (=> (! (and %lbl%+589 true) :lblpos +589) (=> (< (select a@11 j@3) minValue@7) (=> (and (= minValue@8 (select a@11 j@3)) (= t@4 (select a@11 i))) (=> (and (and (= a@12 (store a@11 i (select a@11 j@3))) (= a@13 (store a@12 j@3 t@4))) (and (= a@14 a@13) (= minValue@9 minValue@8))) anon20_correct))))))
(let ((anon29_Else_correct  (=> (! (and %lbl%+580 true) :lblpos +580) (=> (< j@3 n) (=> (and (=> bad@4 bad@3) (=> bad@3 bad@4)) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon29_Then_correct  (=> (! (and %lbl%+578 true) :lblpos +578) (=> (not (< j@3 n)) (=> (and (=> bad@4 true) (=> true bad@4)) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon16_correct  (=> (! (and %lbl%+576 true) :lblpos +576) (=> (= j@3 (+ j@2 1)) (and anon29_Then_correct anon29_Else_correct)))))
(let ((anon28_Else_correct  (=> (! (and %lbl%+570 true) :lblpos +570) (=> (<= minValue@5 (select a@8 j@2)) (=> (and (= minValue@7 minValue@5) (= a@11 a@8)) anon16_correct)))))
(let ((anon28_Then_correct  (=> (! (and %lbl%+568 true) :lblpos +568) (=> (< (select a@8 j@2) minValue@5) (=> (and (= minValue@6 (select a@8 j@2)) (= t@3 (select a@8 i))) (=> (and (and (= a@9 (store a@8 i (select a@8 j@2))) (= a@10 (store a@9 j@2 t@3))) (and (= minValue@7 minValue@6) (= a@11 a@10))) anon16_correct))))))
(let ((anon27_Else_correct  (=> (! (and %lbl%+559 true) :lblpos +559) (=> (< j@2 n) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon27_Then_correct  (=> (! (and %lbl%+557 true) :lblpos +557) (=> (not (< j@2 n)) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon12_correct  (=> (! (and %lbl%+555 true) :lblpos +555) (=> (= j@2 (+ j@1 1)) (and anon27_Then_correct anon27_Else_correct)))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+549 true) :lblpos +549) (=> (<= minValue@3 (select a@5 j@1)) (=> (and (= a@8 a@5) (= minValue@5 minValue@3)) anon12_correct)))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+547 true) :lblpos +547) (=> (< (select a@5 j@1) minValue@3) (=> (and (= minValue@4 (select a@5 j@1)) (= t@2 (select a@5 i))) (=> (and (and (= a@6 (store a@5 i (select a@5 j@1))) (= a@7 (store a@6 j@1 t@2))) (and (= a@8 a@7) (= minValue@5 minValue@4))) anon12_correct))))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+538 true) :lblpos +538) (=> (< j@1 n) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon26_Then_correct anon26_Else_correct))))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+536 true) :lblpos +536) (=> (not (< j@1 n)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon26_Then_correct anon26_Else_correct))))))
(let ((anon8_correct  (=> (! (and %lbl%+534 true) :lblpos +534) (=> (= j@1 (+ j@0 1)) (and anon25_Then_correct anon25_Else_correct)))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+528 true) :lblpos +528) (=> (<= minValue@1 (select a@2 j@0)) (=> (and (= minValue@3 minValue@1) (= a@5 a@2)) anon8_correct)))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+526 true) :lblpos +526) (=> (< (select a@2 j@0) minValue@1) (=> (and (= minValue@2 (select a@2 j@0)) (= t@1 (select a@2 i))) (=> (and (and (= a@3 (store a@2 i (select a@2 j@0))) (= a@4 (store a@3 j@0 t@1))) (and (= minValue@3 minValue@2) (= a@5 a@4))) anon8_correct))))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+517 true) :lblpos +517) (=> (< j@0 n) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+515 true) :lblpos +515) (=> (not (< j@0 n)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon4_correct  (=> (! (and %lbl%+513 true) :lblpos +513) (=> (= j@0 (+ j 1)) (and anon23_Then_correct anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+507 true) :lblpos +507) (=> (<= minValue (select a j)) (=> (and (= minValue@1 minValue) (= a@2 a)) anon4_correct)))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+505 true) :lblpos +505) (=> (< (select a j) minValue) (=> (and (= minValue@0 (select a j)) (= t@0 (select a i))) (=> (and (and (= a@0 (store a i (select a j))) (= a@1 (store a@0 j t@0))) (and (= minValue@1 minValue@0) (= a@2 a@1))) anon4_correct))))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+496 true) :lblpos +496) (=> (< j n) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+494 true) :lblpos +494) (=> (not (< j n)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+1028 true) :lblpos +1028) (=> (> n 0) (=> (and (<= 0 k) (< k n)) (=> (and (and (<= 0 i) (<= i (+ k 1))) (and (=> (> i 0) (forall ((v@@0 Int) ) (!  (=> (and (<= 0 v@@0) (< v@@0 (- i 1))) (<= (select a v@@0) (select a (- i 1))))
 :qid |selectk5.16:30|
 :skolemid |0|
))) (=> (> i 0) (forall ((w@@2 Int) ) (!  (=> (and (< (- i 1) w@@2) (< w@@2 n)) (<= (select a (- i 1)) (select a w@@2)))
 :qid |selectk5.17:30|
 :skolemid |1|
))))) (=> (and (and (and (<= (+ i 1) j) (<= j n)) (= (select a i) minValue)) (and (forall ((w@@3 Int) ) (!  (=> (and (< i w@@3) (< w@@3 j)) (<= (select a i) (select a w@@3)))
 :qid |selectk5.21:20|
 :skolemid |2|
)) (forall ((v@@1 Int) (w@@4 Int) ) (!  (=> (and (and (and (<= 0 v@@1) (< v@@1 i)) (<= i w@@4)) (< w@@4 n)) (<= (select a v@@1) (select a w@@4)))
 :qid |selectk5.22:20|
 :skolemid |3|
)))) (and anon21_Then_correct anon21_Else_correct))))))))
anon0_correct))))))))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
