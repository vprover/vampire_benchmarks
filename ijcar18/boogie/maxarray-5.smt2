(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+673 () Bool)
(declare-fun %lbl%@1549 () Bool)
(declare-fun bad@4 () Bool)
(declare-fun x@9 () Int)
(declare-fun y@9 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1570 () Bool)
(declare-fun m@0 () Int)
(declare-fun %lbl%@1583 () Bool)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%@1617 () Bool)
(declare-fun %lbl%+448 () Bool)
(declare-fun y@7 () Int)
(declare-fun x@7 () Int)
(declare-fun y@8 () Int)
(declare-fun %lbl%+446 () Bool)
(declare-fun x@8 () Int)
(declare-fun %lbl%+437 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun %lbl%+435 () Bool)
(declare-fun %lbl%+427 () Bool)
(declare-fun y@5 () Int)
(declare-fun x@5 () Int)
(declare-fun y@6 () Int)
(declare-fun %lbl%+425 () Bool)
(declare-fun x@6 () Int)
(declare-fun %lbl%+416 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+414 () Bool)
(declare-fun %lbl%+406 () Bool)
(declare-fun y@3 () Int)
(declare-fun x@3 () Int)
(declare-fun y@4 () Int)
(declare-fun %lbl%+404 () Bool)
(declare-fun x@4 () Int)
(declare-fun %lbl%+395 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+393 () Bool)
(declare-fun %lbl%+385 () Bool)
(declare-fun y@1 () Int)
(declare-fun x@1 () Int)
(declare-fun y@2 () Int)
(declare-fun %lbl%+383 () Bool)
(declare-fun x@2 () Int)
(declare-fun %lbl%+374 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+372 () Bool)
(declare-fun %lbl%+364 () Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun y@0 () Int)
(declare-fun %lbl%+362 () Bool)
(declare-fun x@0 () Int)
(declare-fun %lbl%+353 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+351 () Bool)
(declare-fun %lbl%+677 () Bool)
(declare-fun m () Int)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+673 true) :lblpos +673) (and (! (or %lbl%@1549  (or bad@4 (and (and (<= 0 x@9) (<= x@9 y@9)) (< y@9 n)))) :lblneg @1549) (=> (or bad@4 (and (and (<= 0 x@9) (<= x@9 y@9)) (< y@9 n))) (and (! (or %lbl%@1570  (or bad@4 (or (= m@0 x@9) (= m@0 y@9)))) :lblneg @1570) (=> (or bad@4 (or (= m@0 x@9) (= m@0 y@9))) (and (! (or %lbl%@1583  (or bad@4 (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i x@9)) (<= (select a i) (select a m@0)))
 :qid |maxarray.19:26|
 :skolemid |2|
)))) :lblneg @1583) (=> (or bad@4 (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 x@9)) (<= (select a i@@0) (select a m@0)))
 :qid |maxarray.19:26|
 :skolemid |2|
))) (! (or %lbl%@1617  (or bad@4 (forall ((i@@1 Int) ) (!  (=> (and (< y@9 i@@1) (< i@@1 n)) (<= (select a i@@1) (select a m@0)))
 :qid |maxarray.20:26|
 :skolemid |3|
)))) :lblneg @1617))))))))))
(let ((anon34_Else_correct  (=> (! (and %lbl%+448 true) :lblpos +448) (=> (< (select a y@7) (select a x@7)) (=> (and (and (= y@8 (- y@7 1)) (= y@9 y@8)) (and (= x@9 x@7) (= m@0 x@7))) GeneratedUnifiedExit_correct)))))
(let ((anon34_Then_correct  (=> (! (and %lbl%+446 true) :lblpos +446) (=> (<= (select a x@7) (select a y@7)) (=> (and (and (= x@8 (+ x@7 1)) (= y@9 y@7)) (and (= x@9 x@8) (= m@0 y@7))) GeneratedUnifiedExit_correct)))))
(let ((anon33_Else_correct  (=> (! (and %lbl%+437 true) :lblpos +437) (=> (not (= x@7 y@7)) (=> (and (=> bad@4 bad@3) (=> bad@3 bad@4)) (and anon34_Then_correct anon34_Else_correct))))))
(let ((anon33_Then_correct  (=> (! (and %lbl%+435 true) :lblpos +435) (=> (not (not (= x@7 y@7))) (=> (and (=> bad@4 true) (=> true bad@4)) (and anon34_Then_correct anon34_Else_correct))))))
(let ((anon32_Else_correct  (=> (! (and %lbl%+427 true) :lblpos +427) (=> (and (and (< (select a y@5) (select a x@5)) (= y@6 (- y@5 1))) (and (= x@7 x@5) (= y@7 y@6))) (and anon33_Then_correct anon33_Else_correct)))))
(let ((anon32_Then_correct  (=> (! (and %lbl%+425 true) :lblpos +425) (=> (and (and (<= (select a x@5) (select a y@5)) (= x@6 (+ x@5 1))) (and (= x@7 x@6) (= y@7 y@5))) (and anon33_Then_correct anon33_Else_correct)))))
(let ((anon31_Else_correct  (=> (! (and %lbl%+416 true) :lblpos +416) (=> (not (= x@5 y@5)) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon32_Then_correct anon32_Else_correct))))))
(let ((anon31_Then_correct  (=> (! (and %lbl%+414 true) :lblpos +414) (=> (not (not (= x@5 y@5))) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon32_Then_correct anon32_Else_correct))))))
(let ((anon30_Else_correct  (=> (! (and %lbl%+406 true) :lblpos +406) (=> (and (and (< (select a y@3) (select a x@3)) (= y@4 (- y@3 1))) (and (= y@5 y@4) (= x@5 x@3))) (and anon31_Then_correct anon31_Else_correct)))))
(let ((anon30_Then_correct  (=> (! (and %lbl%+404 true) :lblpos +404) (=> (and (and (<= (select a x@3) (select a y@3)) (= x@4 (+ x@3 1))) (and (= y@5 y@3) (= x@5 x@4))) (and anon31_Then_correct anon31_Else_correct)))))
(let ((anon29_Else_correct  (=> (! (and %lbl%+395 true) :lblpos +395) (=> (not (= x@3 y@3)) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon29_Then_correct  (=> (! (and %lbl%+393 true) :lblpos +393) (=> (not (not (= x@3 y@3))) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon28_Else_correct  (=> (! (and %lbl%+385 true) :lblpos +385) (=> (and (and (< (select a y@1) (select a x@1)) (= y@2 (- y@1 1))) (and (= x@3 x@1) (= y@3 y@2))) (and anon29_Then_correct anon29_Else_correct)))))
(let ((anon28_Then_correct  (=> (! (and %lbl%+383 true) :lblpos +383) (=> (and (and (<= (select a x@1) (select a y@1)) (= x@2 (+ x@1 1))) (and (= x@3 x@2) (= y@3 y@1))) (and anon29_Then_correct anon29_Else_correct)))))
(let ((anon27_Else_correct  (=> (! (and %lbl%+374 true) :lblpos +374) (=> (not (= x@1 y@1)) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon27_Then_correct  (=> (! (and %lbl%+372 true) :lblpos +372) (=> (not (not (= x@1 y@1))) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+364 true) :lblpos +364) (=> (and (and (< (select a y) (select a x)) (= y@0 (- y 1))) (and (= y@1 y@0) (= x@1 x))) (and anon27_Then_correct anon27_Else_correct)))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+362 true) :lblpos +362) (=> (and (and (<= (select a x) (select a y)) (= x@0 (+ x 1))) (and (= y@1 y) (= x@1 x@0))) (and anon27_Then_correct anon27_Else_correct)))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+353 true) :lblpos +353) (=> (not (= x y)) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon26_Then_correct anon26_Else_correct))))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+351 true) :lblpos +351) (=> (not (not (= x y))) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon26_Then_correct anon26_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+677 true) :lblpos +677) (=> (> n 0) (=> (and (and (and (and (<= 0 x) (<= x y)) (< y n)) (or (= m x) (= m y))) (and (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 x)) (<= (select a i@@2) (select a m)))
 :qid |maxarray.14:20|
 :skolemid |0|
)) (forall ((i@@3 Int) ) (!  (=> (and (< y i@@3) (< i@@3 n)) (<= (select a i@@3) (select a m)))
 :qid |maxarray.15:20|
 :skolemid |1|
)))) (and anon25_Then_correct anon25_Else_correct))))))
anon0_correct))))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
