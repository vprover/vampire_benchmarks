(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+648 () Bool)
(declare-fun %lbl%@1566 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun low@5 () Int)
(declare-fun high@5 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1591 () Bool)
(declare-fun i@2 () Int)
(declare-fun a () (Array Int Int))
(declare-fun e () Int)
(declare-fun %lbl%@1610 () Bool)
(declare-fun %lbl%@1641 () Bool)
(declare-fun %lbl%+427 () Bool)
(declare-fun mid@2 () Int)
(declare-fun high@4 () Int)
(declare-fun low@3 () Int)
(declare-fun i@1 () Int)
(declare-fun %lbl%+425 () Bool)
(declare-fun low@4 () Int)
(declare-fun high@3 () Int)
(declare-fun %lbl%+423 () Bool)
(declare-fun %lbl%+416 () Bool)
(declare-fun %lbl%+414 () Bool)
(declare-fun %lbl%+407 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+405 () Bool)
(declare-fun %lbl%+397 () Bool)
(declare-fun mid@1 () Int)
(declare-fun high@2 () Int)
(declare-fun low@1 () Int)
(declare-fun i@0 () Int)
(declare-fun %lbl%+395 () Bool)
(declare-fun low@2 () Int)
(declare-fun high@1 () Int)
(declare-fun %lbl%+393 () Bool)
(declare-fun %lbl%+386 () Bool)
(declare-fun %lbl%+384 () Bool)
(declare-fun %lbl%+377 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+375 () Bool)
(declare-fun %lbl%+367 () Bool)
(declare-fun mid@0 () Int)
(declare-fun high@0 () Int)
(declare-fun low () Int)
(declare-fun i () Int)
(declare-fun %lbl%+365 () Bool)
(declare-fun low@0 () Int)
(declare-fun high () Int)
(declare-fun %lbl%+363 () Bool)
(declare-fun %lbl%+356 () Bool)
(declare-fun %lbl%+354 () Bool)
(declare-fun %lbl%+347 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+345 () Bool)
(declare-fun %lbl%+653 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+648 true) :lblpos +648) (and (! (or %lbl%@1566  (or bad@2 (and (and (<= 0 low@5) (<= low@5 (+ high@5 1))) (< high@5 n)))) :lblneg @1566) (=> (or bad@2 (and (and (<= 0 low@5) (<= low@5 (+ high@5 1))) (< high@5 n))) (and (! (or %lbl%@1591  (or bad@2 (=> (>= i@2 0) (= (select a i@2) e)))) :lblneg @1591) (=> (or bad@2 (=> (>= i@2 0) (= (select a i@2) e))) (and (! (or %lbl%@1610  (or bad@2 (forall ((k Int) ) (!  (=> (and (>= k 0) (< k low@5)) (< (select a k) e))
 :qid |binaryse.23:26|
 :skolemid |3|
)))) :lblneg @1610) (=> (or bad@2 (forall ((k@@0 Int) ) (!  (=> (and (>= k@@0 0) (< k@@0 low@5)) (< (select a k@@0) e))
 :qid |binaryse.23:26|
 :skolemid |3|
))) (! (or %lbl%@1641  (or bad@2 (forall ((k@@1 Int) ) (!  (=> (and (> k@@1 high@5) (< k@@1 n)) (> (select a k@@1) e))
 :qid |binaryse.24:26|
 :skolemid |4|
)))) :lblneg @1641))))))))))
(let ((anon29_Else_correct  (=> (! (and %lbl%+427 true) :lblpos +427) (=> (<= e (select a mid@2)) (=> (and (and (= high@4 (- mid@2 1)) (= low@5 low@3)) (and (= high@5 high@4) (= i@2 i@1))) GeneratedUnifiedExit_correct)))))
(let ((anon29_Then_correct  (=> (! (and %lbl%+425 true) :lblpos +425) (=> (< (select a mid@2) e) (=> (and (and (= low@4 (+ mid@2 1)) (= low@5 low@4)) (and (= high@5 high@3) (= i@2 i@1))) GeneratedUnifiedExit_correct)))))
(let ((anon28_Else_correct  (=> (! (and %lbl%+423 true) :lblpos +423) (=> (not (= (select a mid@2) e)) (and anon29_Then_correct anon29_Else_correct)))))
(let ((anon28_Then_correct  (=> (! (and %lbl%+416 true) :lblpos +416) (=> (and (and (= (select a mid@2) e) (= low@5 low@3)) (and (= high@5 high@3) (= i@2 mid@2))) GeneratedUnifiedExit_correct))))
(let ((anon16_correct  (=> (! (and %lbl%+414 true) :lblpos +414) (=> (= mid@2 (div (+ low@3 high@3) 2)) (and anon28_Then_correct anon28_Else_correct)))))
(let ((anon27_Else_correct  (=> (! (and %lbl%+407 true) :lblpos +407) (=> (and (and (<= low@3 high@3) (< i@1 0)) (and (=> bad@2 bad@1) (=> bad@1 bad@2))) anon16_correct))))
(let ((anon27_Then_correct  (=> (! (and %lbl%+405 true) :lblpos +405) (=> (not (and (<= low@3 high@3) (< i@1 0))) (=> (and (=> bad@2 true) (=> true bad@2)) anon16_correct)))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+397 true) :lblpos +397) (=> (<= e (select a mid@1)) (=> (and (and (= high@2 (- mid@1 1)) (= high@3 high@2)) (and (= low@3 low@1) (= i@1 i@0))) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+395 true) :lblpos +395) (=> (< (select a mid@1) e) (=> (and (and (= low@2 (+ mid@1 1)) (= high@3 high@1)) (and (= low@3 low@2) (= i@1 i@0))) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+393 true) :lblpos +393) (=> (not (= (select a mid@1) e)) (and anon26_Then_correct anon26_Else_correct)))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+386 true) :lblpos +386) (=> (and (and (= (select a mid@1) e) (= high@3 high@1)) (and (= low@3 low@1) (= i@1 mid@1))) (and anon27_Then_correct anon27_Else_correct)))))
(let ((anon9_correct  (=> (! (and %lbl%+384 true) :lblpos +384) (=> (= mid@1 (div (+ low@1 high@1) 2)) (and anon25_Then_correct anon25_Else_correct)))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+377 true) :lblpos +377) (=> (and (and (<= low@1 high@1) (< i@0 0)) (and (=> bad@1 bad@0) (=> bad@0 bad@1))) anon9_correct))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+375 true) :lblpos +375) (=> (not (and (<= low@1 high@1) (< i@0 0))) (=> (and (=> bad@1 true) (=> true bad@1)) anon9_correct)))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+367 true) :lblpos +367) (=> (<= e (select a mid@0)) (=> (and (and (= high@0 (- mid@0 1)) (= high@1 high@0)) (and (= low@1 low) (= i@0 i))) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+365 true) :lblpos +365) (=> (< (select a mid@0) e) (=> (and (and (= low@0 (+ mid@0 1)) (= high@1 high)) (and (= low@1 low@0) (= i@0 i))) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+363 true) :lblpos +363) (=> (not (= (select a mid@0) e)) (and anon23_Then_correct anon23_Else_correct)))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+356 true) :lblpos +356) (=> (and (and (= (select a mid@0) e) (= high@1 high)) (and (= low@1 low) (= i@0 mid@0))) (and anon24_Then_correct anon24_Else_correct)))))
(let ((anon2_correct  (=> (! (and %lbl%+354 true) :lblpos +354) (=> (= mid@0 (div (+ low high) 2)) (and anon22_Then_correct anon22_Else_correct)))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+347 true) :lblpos +347) (=> (and (and (<= low high) (< i 0)) (and (=> bad@0 bad) (=> bad bad@0))) anon2_correct))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+345 true) :lblpos +345) (=> (not (and (<= low high) (< i 0))) (=> (and (=> bad@0 true) (=> true bad@0)) anon2_correct)))))
(let ((anon0_correct  (=> (! (and %lbl%+653 true) :lblpos +653) (=> (and (> n 0) (forall ((j Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 j) (<= j k@@2)) (< k@@2 n)) (<= (select a j) (select a k@@2)))
 :qid |binaryse.14:20|
 :skolemid |0|
))) (=> (and (and (and (and (<= 0 low) (<= low (+ high 1))) (< high n)) (=> (>= i 0) (= (select a i) e))) (and (forall ((k@@3 Int) ) (!  (=> (and (>= k@@3 0) (< k@@3 low)) (< (select a k@@3) e))
 :qid |binaryse.18:20|
 :skolemid |1|
)) (forall ((k@@4 Int) ) (!  (=> (and (> k@@4 high) (< k@@4 n)) (> (select a k@@4) e))
 :qid |binaryse.19:20|
 :skolemid |2|
)))) (and anon21_Then_correct anon21_Else_correct))))))
anon0_correct)))))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
