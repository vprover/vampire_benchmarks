(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+587 () Bool)
(declare-fun %lbl%@1406 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun i@5 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1421 () Bool)
(declare-fun d@5 () Int)
(declare-fun occs@5 () (Array Int Bool))
(declare-fun a () (Array Int Int))
(declare-fun %lbl%@1439 () Bool)
(declare-fun %lbl%@1469 () Bool)
(declare-fun %lbl%+366 () Bool)
(declare-fun occs@3 () (Array Int Bool))
(declare-fun i@3 () Int)
(declare-fun d@4 () Int)
(declare-fun %lbl%+364 () Bool)
(declare-fun occs@4 () (Array Int Bool))
(declare-fun i@4 () Int)
(declare-fun d@3 () Int)
(declare-fun %lbl%+356 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+354 () Bool)
(declare-fun %lbl%+346 () Bool)
(declare-fun occs@1 () (Array Int Bool))
(declare-fun i@1 () Int)
(declare-fun d@2 () Int)
(declare-fun %lbl%+344 () Bool)
(declare-fun occs@2 () (Array Int Bool))
(declare-fun i@2 () Int)
(declare-fun d@1 () Int)
(declare-fun %lbl%+336 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+334 () Bool)
(declare-fun %lbl%+326 () Bool)
(declare-fun occs () (Array Int Bool))
(declare-fun i () Int)
(declare-fun d@0 () Int)
(declare-fun %lbl%+324 () Bool)
(declare-fun occs@0 () (Array Int Bool))
(declare-fun i@0 () Int)
(declare-fun d () Int)
(declare-fun %lbl%+316 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+314 () Bool)
(declare-fun %lbl%+591 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+587 true) :lblpos +587) (and (! (or %lbl%@1406  (or bad@2 (and (<= 0 i@5) (<= i@5 n)))) :lblneg @1406) (=> (or bad@2 (and (<= 0 i@5) (<= i@5 n))) (and (! (or %lbl%@1421  (or bad@2 (=> (>= d@5 0) (select occs@5 (select a i@5))))) :lblneg @1421) (=> (or bad@2 (=> (>= d@5 0) (select occs@5 (select a i@5)))) (and (! (or %lbl%@1439  (or bad@2 (forall ((k Int) ) (!  (=> (and (<= 0 k) (< k i@5)) (select occs@5 (select a k)))
 :qid |onedupli.19:26|
 :skolemid |3|
)))) :lblneg @1439) (=> (or bad@2 (forall ((k@@0 Int) ) (!  (=> (and (<= 0 k@@0) (< k@@0 i@5)) (select occs@5 (select a k@@0)))
 :qid |onedupli.19:26|
 :skolemid |3|
))) (! (or %lbl%@1469  (or bad@2 (forall ((j Int) (k@@1 Int) ) (!  (=> (and (and (<= 0 j) (< j k@@1)) (< k@@1 i@5)) (not (= (select a j) (select a k@@1))))
 :qid |onedupli.20:26|
 :skolemid |4|
)))) :lblneg @1469))))))))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+366 true) :lblpos +366) (=> (select occs@3 (select a i@3)) (=> (and (and (= d@4 (select a i@3)) (= i@5 i@3)) (and (= occs@5 occs@3) (= d@5 d@4))) GeneratedUnifiedExit_correct)))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+364 true) :lblpos +364) (=> (and (not (select occs@3 (select a i@3))) (= occs@4 (store occs@3 (select a i@3) true))) (=> (and (and (= i@4 (+ i@3 1)) (= i@5 i@4)) (and (= occs@5 occs@4) (= d@5 d@3))) GeneratedUnifiedExit_correct)))))
(let ((anon19_Else_correct  (=> (! (and %lbl%+356 true) :lblpos +356) (=> (and (and (< i@3 n) (< d@3 0)) (and (=> bad@2 bad@1) (=> bad@1 bad@2))) (and anon20_Then_correct anon20_Else_correct)))))
(let ((anon19_Then_correct  (=> (! (and %lbl%+354 true) :lblpos +354) (=> (not (and (< i@3 n) (< d@3 0))) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon20_Then_correct anon20_Else_correct))))))
(let ((anon18_Else_correct  (=> (! (and %lbl%+346 true) :lblpos +346) (=> (select occs@1 (select a i@1)) (=> (and (and (= d@2 (select a i@1)) (= d@3 d@2)) (and (= occs@3 occs@1) (= i@3 i@1))) (and anon19_Then_correct anon19_Else_correct))))))
(let ((anon18_Then_correct  (=> (! (and %lbl%+344 true) :lblpos +344) (=> (and (not (select occs@1 (select a i@1))) (= occs@2 (store occs@1 (select a i@1) true))) (=> (and (and (= i@2 (+ i@1 1)) (= d@3 d@1)) (and (= occs@3 occs@2) (= i@3 i@2))) (and anon19_Then_correct anon19_Else_correct))))))
(let ((anon17_Else_correct  (=> (! (and %lbl%+336 true) :lblpos +336) (=> (and (and (< i@1 n) (< d@1 0)) (and (=> bad@1 bad@0) (=> bad@0 bad@1))) (and anon18_Then_correct anon18_Else_correct)))))
(let ((anon17_Then_correct  (=> (! (and %lbl%+334 true) :lblpos +334) (=> (not (and (< i@1 n) (< d@1 0))) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon16_Else_correct  (=> (! (and %lbl%+326 true) :lblpos +326) (=> (select occs (select a i)) (=> (and (and (= d@0 (select a i)) (= d@1 d@0)) (and (= occs@1 occs) (= i@1 i))) (and anon17_Then_correct anon17_Else_correct))))))
(let ((anon16_Then_correct  (=> (! (and %lbl%+324 true) :lblpos +324) (=> (and (not (select occs (select a i))) (= occs@0 (store occs (select a i) true))) (=> (and (and (= i@0 (+ i 1)) (= d@1 d)) (and (= occs@1 occs@0) (= i@1 i@0))) (and anon17_Then_correct anon17_Else_correct))))))
(let ((anon15_Else_correct  (=> (! (and %lbl%+316 true) :lblpos +316) (=> (and (and (< i n) (< d 0)) (and (=> bad@0 bad) (=> bad bad@0))) (and anon16_Then_correct anon16_Else_correct)))))
(let ((anon15_Then_correct  (=> (! (and %lbl%+314 true) :lblpos +314) (=> (not (and (< i n) (< d 0))) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+591 true) :lblpos +591) (=> (and (> n 0) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 n)) (>= (select a i@@0) 0))
 :qid |onedupli.11:20|
 :skolemid |0|
))) (=> (and (and (and (<= 0 i) (<= i n)) (=> (>= d 0) (select occs (select a i)))) (and (forall ((k@@2 Int) ) (!  (=> (and (<= 0 k@@2) (< k@@2 i)) (select occs (select a k@@2)))
 :qid |onedupli.14:20|
 :skolemid |1|
)) (forall ((j@@0 Int) (k@@3 Int) ) (!  (=> (and (and (<= 0 j@@0) (< j@@0 k@@3)) (< k@@3 i)) (not (= (select a j@@0) (select a k@@3))))
 :qid |onedupli.15:20|
 :skolemid |2|
)))) (and anon15_Then_correct anon15_Else_correct))))))
anon0_correct))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
