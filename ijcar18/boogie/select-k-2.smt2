(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+395 () Bool)
(declare-fun j@1 () Int)
(declare-fun j@0 () Int)
(declare-fun %lbl%@1633 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun i () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1652 () Bool)
(declare-fun a@5 () (Array Int Int))
(declare-fun minValue@3 () Int)
(declare-fun %lbl%@1663 () Bool)
(declare-fun %lbl%@1696 () Bool)
(declare-fun %lbl%+393 () Bool)
(declare-fun minValue@1 () Int)
(declare-fun a@2 () (Array Int Int))
(declare-fun %lbl%+391 () Bool)
(declare-fun minValue@2 () Int)
(declare-fun t@1 () Int)
(declare-fun a@3 () (Array Int Int))
(declare-fun a@4 () (Array Int Int))
(declare-fun %lbl%+382 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+380 () Bool)
(declare-fun %lbl%+378 () Bool)
(declare-fun j () Int)
(declare-fun %lbl%+372 () Bool)
(declare-fun minValue () Int)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%+370 () Bool)
(declare-fun minValue@0 () Int)
(declare-fun t@0 () Int)
(declare-fun a@0 () (Array Int Int))
(declare-fun a@1 () (Array Int Int))
(declare-fun %lbl%+361 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+359 () Bool)
(declare-fun %lbl%+722 () Bool)
(declare-fun k () Int)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((anon8_correct  (=> (! (and %lbl%+395 true) :lblpos +395) (=> (= j@1 (+ j@0 1)) (and (! (or %lbl%@1633  (or bad@1 (and (<= (+ i 1) j@1) (<= j@1 n)))) :lblneg @1633) (=> (or bad@1 (and (<= (+ i 1) j@1) (<= j@1 n))) (and (! (or %lbl%@1652  (or bad@1 (= (select a@5 i) minValue@3))) :lblneg @1652) (=> (or bad@1 (= (select a@5 i) minValue@3)) (and (! (or %lbl%@1663  (or bad@1 (forall ((w Int) ) (!  (=> (and (< i w) (< w j@1)) (<= (select a@5 i) (select a@5 w)))
 :qid |selectk2.26:26|
 :skolemid |4|
)))) :lblneg @1663) (=> (or bad@1 (forall ((w@@0 Int) ) (!  (=> (and (< i w@@0) (< w@@0 j@1)) (<= (select a@5 i) (select a@5 w@@0)))
 :qid |selectk2.26:26|
 :skolemid |4|
))) (! (or %lbl%@1696  (or bad@1 (forall ((v Int) (w@@1 Int) ) (!  (=> (and (and (and (<= 0 v) (< v i)) (<= i w@@1)) (< w@@1 n)) (<= (select a@5 v) (select a@5 w@@1)))
 :qid |selectk2.27:26|
 :skolemid |5|
)))) :lblneg @1696)))))))))))
(let ((anon12_Else_correct  (=> (! (and %lbl%+393 true) :lblpos +393) (=> (<= minValue@1 (select a@2 j@0)) (=> (and (= minValue@3 minValue@1) (= a@5 a@2)) anon8_correct)))))
(let ((anon12_Then_correct  (=> (! (and %lbl%+391 true) :lblpos +391) (=> (< (select a@2 j@0) minValue@1) (=> (and (= minValue@2 (select a@2 j@0)) (= t@1 (select a@2 i))) (=> (and (and (= a@3 (store a@2 i (select a@2 j@0))) (= a@4 (store a@3 j@0 t@1))) (and (= minValue@3 minValue@2) (= a@5 a@4))) anon8_correct))))))
(let ((anon11_Else_correct  (=> (! (and %lbl%+382 true) :lblpos +382) (=> (< j@0 n) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon12_Then_correct anon12_Else_correct))))))
(let ((anon11_Then_correct  (=> (! (and %lbl%+380 true) :lblpos +380) (=> (not (< j@0 n)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon12_Then_correct anon12_Else_correct))))))
(let ((anon4_correct  (=> (! (and %lbl%+378 true) :lblpos +378) (=> (= j@0 (+ j 1)) (and anon11_Then_correct anon11_Else_correct)))))
(let ((anon10_Else_correct  (=> (! (and %lbl%+372 true) :lblpos +372) (=> (<= minValue (select a j)) (=> (and (= minValue@1 minValue) (= a@2 a)) anon4_correct)))))
(let ((anon10_Then_correct  (=> (! (and %lbl%+370 true) :lblpos +370) (=> (< (select a j) minValue) (=> (and (= minValue@0 (select a j)) (= t@0 (select a i))) (=> (and (and (= a@0 (store a i (select a j))) (= a@1 (store a@0 j t@0))) (and (= minValue@1 minValue@0) (= a@2 a@1))) anon4_correct))))))
(let ((anon9_Else_correct  (=> (! (and %lbl%+361 true) :lblpos +361) (=> (< j n) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon10_Then_correct anon10_Else_correct))))))
(let ((anon9_Then_correct  (=> (! (and %lbl%+359 true) :lblpos +359) (=> (not (< j n)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon10_Then_correct anon10_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+722 true) :lblpos +722) (=> (> n 0) (=> (and (<= 0 k) (< k n)) (=> (and (and (<= 0 i) (<= i (+ k 1))) (and (=> (> i 0) (forall ((v@@0 Int) ) (!  (=> (and (<= 0 v@@0) (< v@@0 (- i 1))) (<= (select a v@@0) (select a (- i 1))))
 :qid |selectk2.16:30|
 :skolemid |0|
))) (=> (> i 0) (forall ((w@@2 Int) ) (!  (=> (and (< (- i 1) w@@2) (< w@@2 n)) (<= (select a (- i 1)) (select a w@@2)))
 :qid |selectk2.17:30|
 :skolemid |1|
))))) (=> (and (and (and (<= (+ i 1) j) (<= j n)) (= (select a i) minValue)) (and (forall ((w@@3 Int) ) (!  (=> (and (< i w@@3) (< w@@3 j)) (<= (select a i) (select a w@@3)))
 :qid |selectk2.21:20|
 :skolemid |2|
)) (forall ((v@@1 Int) (w@@4 Int) ) (!  (=> (and (and (and (<= 0 v@@1) (< v@@1 i)) (<= i w@@4)) (< w@@4 n)) (<= (select a v@@1) (select a w@@4)))
 :qid |selectk2.22:20|
 :skolemid |3|
)))) (and anon9_Then_correct anon9_Else_correct))))))))
anon0_correct)))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
