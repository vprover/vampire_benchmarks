(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+504 () Bool)
(declare-fun %lbl%@1174 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun i@5 () Int)
(declare-fun j@5 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1203 () Bool)
(declare-fun a@5 () (Array Int Bool))
(declare-fun %lbl%@1231 () Bool)
(declare-fun %lbl%+324 () Bool)
(declare-fun a@2 () (Array Int Bool))
(declare-fun j@2 () Int)
(declare-fun t@1 () Bool)
(declare-fun i@2 () Int)
(declare-fun a@3 () (Array Int Bool))
(declare-fun a@4 () (Array Int Bool))
(declare-fun i@4 () Int)
(declare-fun j@4 () Int)
(declare-fun %lbl%+322 () Bool)
(declare-fun j@3 () Int)
(declare-fun %lbl%+320 () Bool)
(declare-fun %lbl%+311 () Bool)
(declare-fun i@3 () Int)
(declare-fun %lbl%+303 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+301 () Bool)
(declare-fun %lbl%+293 () Bool)
(declare-fun a () (Array Int Bool))
(declare-fun j () Int)
(declare-fun t@0 () Bool)
(declare-fun i () Int)
(declare-fun a@0 () (Array Int Bool))
(declare-fun a@1 () (Array Int Bool))
(declare-fun i@1 () Int)
(declare-fun j@1 () Int)
(declare-fun %lbl%+291 () Bool)
(declare-fun j@0 () Int)
(declare-fun %lbl%+289 () Bool)
(declare-fun %lbl%+280 () Bool)
(declare-fun i@0 () Int)
(declare-fun %lbl%+272 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+270 () Bool)
(declare-fun %lbl%+509 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+504 true) :lblpos +504) (and (! (or %lbl%@1174  (or bad@1 (and (and (<= 0 i@5) (<= i@5 (+ j@5 1))) (<= (+ j@5 1) n)))) :lblneg @1174) (=> (or bad@1 (and (and (<= 0 i@5) (<= i@5 (+ j@5 1))) (<= (+ j@5 1) n))) (and (! (or %lbl%@1203  (or bad@1 (forall ((m Int) ) (!  (=> (and (<= 0 m) (< m i@5)) (not (select a@5 m)))
 :qid |twowayso.16:26|
 :skolemid |2|
)))) :lblneg @1203) (=> (or bad@1 (forall ((m@@0 Int) ) (!  (=> (and (<= 0 m@@0) (< m@@0 i@5)) (not (select a@5 m@@0)))
 :qid |twowayso.16:26|
 :skolemid |2|
))) (! (or %lbl%@1231  (or bad@1 (forall ((k Int) ) (!  (=> (and (< j@5 k) (< k n)) (select a@5 k))
 :qid |twowayso.17:26|
 :skolemid |3|
)))) :lblneg @1231))))))))
(let ((anon17_Else_correct  (=> (! (and %lbl%+324 true) :lblpos +324) (=> (not (select a@2 j@2)) (=> (and (and (and (and (=> t@1 (select a@2 i@2)) (=> (select a@2 i@2) t@1)) (= a@3 (store a@2 i@2 (select a@2 j@2)))) (and (= a@4 (store a@3 j@2 t@1)) (= i@4 (+ i@2 1)))) (and (and (= j@4 (- j@2 1)) (= j@5 j@4)) (and (= i@5 i@4) (= a@5 a@4)))) GeneratedUnifiedExit_correct)))))
(let ((anon17_Then_correct  (=> (! (and %lbl%+322 true) :lblpos +322) (=> (select a@2 j@2) (=> (and (and (= j@3 (- j@2 1)) (= j@5 j@3)) (and (= i@5 i@2) (= a@5 a@2))) GeneratedUnifiedExit_correct)))))
(let ((anon16_Else_correct  (=> (! (and %lbl%+320 true) :lblpos +320) (=> (select a@2 i@2) (and anon17_Then_correct anon17_Else_correct)))))
(let ((anon16_Then_correct  (=> (! (and %lbl%+311 true) :lblpos +311) (=> (not (select a@2 i@2)) (=> (and (and (= i@3 (+ i@2 1)) (= j@5 j@2)) (and (= i@5 i@3) (= a@5 a@2))) GeneratedUnifiedExit_correct)))))
(let ((anon15_Else_correct  (=> (! (and %lbl%+303 true) :lblpos +303) (=> (<= i@2 j@2) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon15_Then_correct  (=> (! (and %lbl%+301 true) :lblpos +301) (=> (not (<= i@2 j@2)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon14_Else_correct  (=> (! (and %lbl%+293 true) :lblpos +293) (=> (not (select a j)) (=> (and (and (and (and (=> t@0 (select a i)) (=> (select a i) t@0)) (= a@0 (store a i (select a j)))) (and (= a@1 (store a@0 j t@0)) (= i@1 (+ i 1)))) (and (and (= j@1 (- j 1)) (= a@2 a@1)) (and (= i@2 i@1) (= j@2 j@1)))) (and anon15_Then_correct anon15_Else_correct))))))
(let ((anon14_Then_correct  (=> (! (and %lbl%+291 true) :lblpos +291) (=> (select a j) (=> (and (and (= j@0 (- j 1)) (= a@2 a)) (and (= i@2 i) (= j@2 j@0))) (and anon15_Then_correct anon15_Else_correct))))))
(let ((anon13_Else_correct  (=> (! (and %lbl%+289 true) :lblpos +289) (=> (select a i) (and anon14_Then_correct anon14_Else_correct)))))
(let ((anon13_Then_correct  (=> (! (and %lbl%+280 true) :lblpos +280) (=> (not (select a i)) (=> (and (and (= i@0 (+ i 1)) (= a@2 a)) (and (= i@2 i@0) (= j@2 j))) (and anon15_Then_correct anon15_Else_correct))))))
(let ((anon12_Else_correct  (=> (! (and %lbl%+272 true) :lblpos +272) (=> (<= i j) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon12_Then_correct  (=> (! (and %lbl%+270 true) :lblpos +270) (=> (not (<= i j)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+509 true) :lblpos +509) (=> (> n 0) (=> (and (and (and (<= 0 i) (<= i (+ j 1))) (<= (+ j 1) n)) (and (forall ((m@@1 Int) ) (!  (=> (and (<= 0 m@@1) (< m@@1 i)) (not (select a m@@1)))
 :qid |twowayso.12:20|
 :skolemid |0|
)) (forall ((k@@0 Int) ) (!  (=> (and (< j k@@0) (< k@@0 n)) (select a k@@0))
 :qid |twowayso.13:20|
 :skolemid |1|
)))) (and anon12_Then_correct anon12_Else_correct))))))
anon0_correct))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
