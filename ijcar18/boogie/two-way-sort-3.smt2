(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+638 () Bool)
(declare-fun %lbl%@1485 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun i@8 () Int)
(declare-fun j@8 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1514 () Bool)
(declare-fun a@8 () (Array Int Bool))
(declare-fun %lbl%@1542 () Bool)
(declare-fun %lbl%+414 () Bool)
(declare-fun a@5 () (Array Int Bool))
(declare-fun j@5 () Int)
(declare-fun t@2 () Bool)
(declare-fun i@5 () Int)
(declare-fun a@6 () (Array Int Bool))
(declare-fun a@7 () (Array Int Bool))
(declare-fun i@7 () Int)
(declare-fun j@7 () Int)
(declare-fun %lbl%+412 () Bool)
(declare-fun j@6 () Int)
(declare-fun %lbl%+410 () Bool)
(declare-fun %lbl%+401 () Bool)
(declare-fun i@6 () Int)
(declare-fun %lbl%+393 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+391 () Bool)
(declare-fun %lbl%+383 () Bool)
(declare-fun a@2 () (Array Int Bool))
(declare-fun j@2 () Int)
(declare-fun t@1 () Bool)
(declare-fun i@2 () Int)
(declare-fun a@3 () (Array Int Bool))
(declare-fun a@4 () (Array Int Bool))
(declare-fun i@4 () Int)
(declare-fun j@4 () Int)
(declare-fun %lbl%+381 () Bool)
(declare-fun j@3 () Int)
(declare-fun %lbl%+379 () Bool)
(declare-fun %lbl%+370 () Bool)
(declare-fun i@3 () Int)
(declare-fun %lbl%+362 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+360 () Bool)
(declare-fun %lbl%+352 () Bool)
(declare-fun a () (Array Int Bool))
(declare-fun j () Int)
(declare-fun t@0 () Bool)
(declare-fun i () Int)
(declare-fun a@0 () (Array Int Bool))
(declare-fun a@1 () (Array Int Bool))
(declare-fun i@1 () Int)
(declare-fun j@1 () Int)
(declare-fun %lbl%+350 () Bool)
(declare-fun j@0 () Int)
(declare-fun %lbl%+348 () Bool)
(declare-fun %lbl%+339 () Bool)
(declare-fun i@0 () Int)
(declare-fun %lbl%+331 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+329 () Bool)
(declare-fun %lbl%+643 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+638 true) :lblpos +638) (and (! (or %lbl%@1485  (or bad@2 (and (and (<= 0 i@8) (<= i@8 (+ j@8 1))) (<= (+ j@8 1) n)))) :lblneg @1485) (=> (or bad@2 (and (and (<= 0 i@8) (<= i@8 (+ j@8 1))) (<= (+ j@8 1) n))) (and (! (or %lbl%@1514  (or bad@2 (forall ((m Int) ) (!  (=> (and (<= 0 m) (< m i@8)) (not (select a@8 m)))
 :qid |twowayso.16:26|
 :skolemid |2|
)))) :lblneg @1514) (=> (or bad@2 (forall ((m@@0 Int) ) (!  (=> (and (<= 0 m@@0) (< m@@0 i@8)) (not (select a@8 m@@0)))
 :qid |twowayso.16:26|
 :skolemid |2|
))) (! (or %lbl%@1542  (or bad@2 (forall ((k Int) ) (!  (=> (and (< j@8 k) (< k n)) (select a@8 k))
 :qid |twowayso.17:26|
 :skolemid |3|
)))) :lblneg @1542))))))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+414 true) :lblpos +414) (=> (not (select a@5 j@5)) (=> (and (and (and (and (=> t@2 (select a@5 i@5)) (=> (select a@5 i@5) t@2)) (= a@6 (store a@5 i@5 (select a@5 j@5)))) (and (= a@7 (store a@6 j@5 t@2)) (= i@7 (+ i@5 1)))) (and (and (= j@7 (- j@5 1)) (= a@8 a@7)) (and (= i@8 i@7) (= j@8 j@7)))) GeneratedUnifiedExit_correct)))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+412 true) :lblpos +412) (=> (select a@5 j@5) (=> (and (and (= j@6 (- j@5 1)) (= a@8 a@5)) (and (= i@8 i@5) (= j@8 j@6))) GeneratedUnifiedExit_correct)))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+410 true) :lblpos +410) (=> (select a@5 i@5) (and anon26_Then_correct anon26_Else_correct)))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+401 true) :lblpos +401) (=> (not (select a@5 i@5)) (=> (and (and (= i@6 (+ i@5 1)) (= a@8 a@5)) (and (= i@8 i@6) (= j@8 j@5))) GeneratedUnifiedExit_correct)))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+393 true) :lblpos +393) (=> (<= i@5 j@5) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+391 true) :lblpos +391) (=> (not (<= i@5 j@5)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+383 true) :lblpos +383) (=> (not (select a@2 j@2)) (=> (and (and (and (and (=> t@1 (select a@2 i@2)) (=> (select a@2 i@2) t@1)) (= a@3 (store a@2 i@2 (select a@2 j@2)))) (and (= a@4 (store a@3 j@2 t@1)) (= i@4 (+ i@2 1)))) (and (and (= j@4 (- j@2 1)) (= j@5 j@4)) (and (= i@5 i@4) (= a@5 a@4)))) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+381 true) :lblpos +381) (=> (select a@2 j@2) (=> (and (and (= j@3 (- j@2 1)) (= j@5 j@3)) (and (= i@5 i@2) (= a@5 a@2))) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+379 true) :lblpos +379) (=> (select a@2 i@2) (and anon23_Then_correct anon23_Else_correct)))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+370 true) :lblpos +370) (=> (not (select a@2 i@2)) (=> (and (and (= i@3 (+ i@2 1)) (= j@5 j@2)) (and (= i@5 i@3) (= a@5 a@2))) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+362 true) :lblpos +362) (=> (<= i@2 j@2) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+360 true) :lblpos +360) (=> (not (<= i@2 j@2)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+352 true) :lblpos +352) (=> (not (select a j)) (=> (and (and (and (and (=> t@0 (select a i)) (=> (select a i) t@0)) (= a@0 (store a i (select a j)))) (and (= a@1 (store a@0 j t@0)) (= i@1 (+ i 1)))) (and (and (= j@1 (- j 1)) (= a@2 a@1)) (and (= i@2 i@1) (= j@2 j@1)))) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+350 true) :lblpos +350) (=> (select a j) (=> (and (and (= j@0 (- j 1)) (= a@2 a)) (and (= i@2 i) (= j@2 j@0))) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon19_Else_correct  (=> (! (and %lbl%+348 true) :lblpos +348) (=> (select a i) (and anon20_Then_correct anon20_Else_correct)))))
(let ((anon19_Then_correct  (=> (! (and %lbl%+339 true) :lblpos +339) (=> (not (select a i)) (=> (and (and (= i@0 (+ i 1)) (= a@2 a)) (and (= i@2 i@0) (= j@2 j))) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon18_Else_correct  (=> (! (and %lbl%+331 true) :lblpos +331) (=> (<= i j) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon19_Then_correct anon19_Else_correct))))))
(let ((anon18_Then_correct  (=> (! (and %lbl%+329 true) :lblpos +329) (=> (not (<= i j)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon19_Then_correct anon19_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+643 true) :lblpos +643) (=> (> n 0) (=> (and (and (and (<= 0 i) (<= i (+ j 1))) (<= (+ j 1) n)) (and (forall ((m@@1 Int) ) (!  (=> (and (<= 0 m@@1) (< m@@1 i)) (not (select a m@@1)))
 :qid |twowayso.12:20|
 :skolemid |0|
)) (forall ((k@@0 Int) ) (!  (=> (and (< j k@@0) (< k@@0 n)) (select a k@@0))
 :qid |twowayso.13:20|
 :skolemid |1|
)))) (and anon18_Then_correct anon18_Else_correct))))))
anon0_correct))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
