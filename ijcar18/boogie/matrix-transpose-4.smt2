(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+910 () Bool)
(declare-fun %lbl%@2105 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun row@7 () Int)
(declare-fun col@11 () Int)
(declare-fun %lbl%@2119 () Bool)
(declare-fun size () Int)
(declare-fun transposed@15 () (Array Int (Array Int Int)))
(declare-fun matrix () (Array Int (Array Int Int)))
(declare-fun %lbl%+517 () Bool)
(declare-fun col@8 () Int)
(declare-fun row@6 () Int)
(declare-fun row@5 () Int)
(declare-fun col@10 () Int)
(declare-fun transposed@14 () (Array Int (Array Int Int)))
(declare-fun transposed@11 () (Array Int (Array Int Int)))
(declare-fun %lbl%+515 () Bool)
(declare-fun transposed@12 () (Array Int (Array Int Int)))
(declare-fun transposed@13 () (Array Int (Array Int Int)))
(declare-fun col@9 () Int)
(declare-fun %lbl%+506 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+504 () Bool)
(declare-fun %lbl%+496 () Bool)
(declare-fun col@5 () Int)
(declare-fun row@4 () Int)
(declare-fun row@3 () Int)
(declare-fun col@7 () Int)
(declare-fun transposed@10 () (Array Int (Array Int Int)))
(declare-fun transposed@7 () (Array Int (Array Int Int)))
(declare-fun %lbl%+494 () Bool)
(declare-fun transposed@8 () (Array Int (Array Int Int)))
(declare-fun transposed@9 () (Array Int (Array Int Int)))
(declare-fun col@6 () Int)
(declare-fun %lbl%+485 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+483 () Bool)
(declare-fun %lbl%+475 () Bool)
(declare-fun col@2 () Int)
(declare-fun row@2 () Int)
(declare-fun row@1 () Int)
(declare-fun col@4 () Int)
(declare-fun transposed@6 () (Array Int (Array Int Int)))
(declare-fun transposed@3 () (Array Int (Array Int Int)))
(declare-fun %lbl%+473 () Bool)
(declare-fun transposed@4 () (Array Int (Array Int Int)))
(declare-fun transposed@5 () (Array Int (Array Int Int)))
(declare-fun col@3 () Int)
(declare-fun %lbl%+464 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+462 () Bool)
(declare-fun %lbl%+454 () Bool)
(declare-fun col () Int)
(declare-fun row@0 () Int)
(declare-fun row () Int)
(declare-fun col@1 () Int)
(declare-fun transposed@2 () (Array Int (Array Int Int)))
(declare-fun transposed () (Array Int (Array Int Int)))
(declare-fun %lbl%+452 () Bool)
(declare-fun transposed@0 () (Array Int (Array Int Int)))
(declare-fun transposed@1 () (Array Int (Array Int Int)))
(declare-fun col@0 () Int)
(declare-fun %lbl%+443 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+441 () Bool)
(declare-fun %lbl%+914 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+910 true) :lblpos +910) (and (! (or %lbl%@2105  (or bad@3 (and (<= 0 row@7) (<= row@7 col@11)))) :lblneg @2105) (=> (or bad@3 (and (<= 0 row@7) (<= row@7 col@11))) (! (or %lbl%@2119  (or bad@3 (forall ((i Int) (j Int) ) (!  (=> (and (and (and (<= 0 i) (<= i j)) (< j size)) (or (and (= i row@7) (< j col@11)) (< i row@7))) (and (= (select (select transposed@15 i) j) (select (select matrix j) i)) (= (select (select transposed@15 j) i) (select (select matrix i) j))))
 :qid |matrixtr.15:26|
 :skolemid |1|
)))) :lblneg @2119))))))
(let ((anon27_Else_correct  (=> (! (and %lbl%+517 true) :lblpos +517) (=> (<= size col@8) (=> (and (= row@6 (+ row@5 1)) (= col@10 (+ row@6 1))) (=> (and (and (= transposed@14 (store transposed@11 row@6 (store (select transposed@11 row@6) row@6 (select (select matrix row@6) row@6)))) (= col@11 col@10)) (and (= row@7 row@6) (= transposed@15 transposed@14))) GeneratedUnifiedExit_correct))))))
(let ((anon27_Then_correct  (=> (! (and %lbl%+515 true) :lblpos +515) (=> (< col@8 size) (=> (and (= transposed@12 (store transposed@11 row@5 (store (select transposed@11 row@5) col@8 (select (select matrix col@8) row@5)))) (= transposed@13 (store transposed@12 col@8 (store (select transposed@12 col@8) row@5 (select (select matrix row@5) col@8))))) (=> (and (and (= col@9 (+ col@8 1)) (= col@11 col@9)) (and (= row@7 row@5) (= transposed@15 transposed@13))) GeneratedUnifiedExit_correct))))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+506 true) :lblpos +506) (=> (not (= row@5 size)) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+504 true) :lblpos +504) (=> (not (not (= row@5 size))) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+496 true) :lblpos +496) (=> (<= size col@5) (=> (and (= row@4 (+ row@3 1)) (= col@7 (+ row@4 1))) (=> (and (and (= transposed@10 (store transposed@7 row@4 (store (select transposed@7 row@4) row@4 (select (select matrix row@4) row@4)))) (= transposed@11 transposed@10)) (and (= row@5 row@4) (= col@8 col@7))) (and anon26_Then_correct anon26_Else_correct)))))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+494 true) :lblpos +494) (=> (< col@5 size) (=> (and (= transposed@8 (store transposed@7 row@3 (store (select transposed@7 row@3) col@5 (select (select matrix col@5) row@3)))) (= transposed@9 (store transposed@8 col@5 (store (select transposed@8 col@5) row@3 (select (select matrix row@3) col@5))))) (=> (and (and (= col@6 (+ col@5 1)) (= transposed@11 transposed@9)) (and (= row@5 row@3) (= col@8 col@6))) (and anon26_Then_correct anon26_Else_correct)))))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+485 true) :lblpos +485) (=> (not (= row@3 size)) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+483 true) :lblpos +483) (=> (not (not (= row@3 size))) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+475 true) :lblpos +475) (=> (<= size col@2) (=> (and (= row@2 (+ row@1 1)) (= col@4 (+ row@2 1))) (=> (and (and (= transposed@6 (store transposed@3 row@2 (store (select transposed@3 row@2) row@2 (select (select matrix row@2) row@2)))) (= col@5 col@4)) (and (= row@3 row@2) (= transposed@7 transposed@6))) (and anon24_Then_correct anon24_Else_correct)))))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+473 true) :lblpos +473) (=> (< col@2 size) (=> (and (= transposed@4 (store transposed@3 row@1 (store (select transposed@3 row@1) col@2 (select (select matrix col@2) row@1)))) (= transposed@5 (store transposed@4 col@2 (store (select transposed@4 col@2) row@1 (select (select matrix row@1) col@2))))) (=> (and (and (= col@3 (+ col@2 1)) (= col@5 col@3)) (and (= row@3 row@1) (= transposed@7 transposed@5))) (and anon24_Then_correct anon24_Else_correct)))))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+464 true) :lblpos +464) (=> (not (= row@1 size)) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon23_Then_correct anon23_Else_correct))))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+462 true) :lblpos +462) (=> (not (not (= row@1 size))) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon23_Then_correct anon23_Else_correct))))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+454 true) :lblpos +454) (=> (<= size col) (=> (and (= row@0 (+ row 1)) (= col@1 (+ row@0 1))) (=> (and (and (= transposed@2 (store transposed row@0 (store (select transposed row@0) row@0 (select (select matrix row@0) row@0)))) (= row@1 row@0)) (and (= transposed@3 transposed@2) (= col@2 col@1))) (and anon22_Then_correct anon22_Else_correct)))))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+452 true) :lblpos +452) (=> (< col size) (=> (and (= transposed@0 (store transposed row (store (select transposed row) col (select (select matrix col) row)))) (= transposed@1 (store transposed@0 col (store (select transposed@0 col) row (select (select matrix row) col))))) (=> (and (and (= col@0 (+ col 1)) (= row@1 row)) (and (= transposed@3 transposed@1) (= col@2 col@0))) (and anon22_Then_correct anon22_Else_correct)))))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+443 true) :lblpos +443) (=> (not (= row size)) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+441 true) :lblpos +441) (=> (not (not (= row size))) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+914 true) :lblpos +914) (=> (> size 0) (=> (and (and (<= 0 row) (<= row col)) (forall ((i@@0 Int) (j@@0 Int) ) (!  (=> (and (and (and (<= 0 i@@0) (<= i@@0 j@@0)) (< j@@0 size)) (or (and (= i@@0 row) (< j@@0 col)) (< i@@0 row))) (and (= (select (select transposed i@@0) j@@0) (select (select matrix j@@0) i@@0)) (= (select (select transposed j@@0) i@@0) (select (select matrix i@@0) j@@0))))
 :qid |matrixtr.11:20|
 :skolemid |0|
))) (and anon20_Then_correct anon20_Else_correct))))))
anon0_correct))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
