(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+505 () Bool)
(declare-fun %lbl%@1193 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun i@3 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1208 () Bool)
(declare-fun d@3 () Int)
(declare-fun occs@3 () (Array Int Bool))
(declare-fun a () (Array Int Int))
(declare-fun %lbl%@1226 () Bool)
(declare-fun %lbl%@1256 () Bool)
(declare-fun %lbl%+308 () Bool)
(declare-fun occs@1 () (Array Int Bool))
(declare-fun i@1 () Int)
(declare-fun d@2 () Int)
(declare-fun %lbl%+306 () Bool)
(declare-fun occs@2 () (Array Int Bool))
(declare-fun i@2 () Int)
(declare-fun d@1 () Int)
(declare-fun %lbl%+298 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+296 () Bool)
(declare-fun %lbl%+288 () Bool)
(declare-fun occs () (Array Int Bool))
(declare-fun i () Int)
(declare-fun d@0 () Int)
(declare-fun %lbl%+286 () Bool)
(declare-fun occs@0 () (Array Int Bool))
(declare-fun i@0 () Int)
(declare-fun d () Int)
(declare-fun %lbl%+278 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+276 () Bool)
(declare-fun %lbl%+509 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+505 true) :lblpos +505) (and (! (or %lbl%@1193  (or bad@1 (and (<= 0 i@3) (<= i@3 n)))) :lblneg @1193) (=> (or bad@1 (and (<= 0 i@3) (<= i@3 n))) (and (! (or %lbl%@1208  (or bad@1 (=> (>= d@3 0) (select occs@3 (select a i@3))))) :lblneg @1208) (=> (or bad@1 (=> (>= d@3 0) (select occs@3 (select a i@3)))) (and (! (or %lbl%@1226  (or bad@1 (forall ((k Int) ) (!  (=> (and (<= 0 k) (< k i@3)) (select occs@3 (select a k)))
 :qid |onedupli.19:26|
 :skolemid |3|
)))) :lblneg @1226) (=> (or bad@1 (forall ((k@@0 Int) ) (!  (=> (and (<= 0 k@@0) (< k@@0 i@3)) (select occs@3 (select a k@@0)))
 :qid |onedupli.19:26|
 :skolemid |3|
))) (! (or %lbl%@1256  (or bad@1 (forall ((j Int) (k@@1 Int) ) (!  (=> (and (and (<= 0 j) (< j k@@1)) (< k@@1 i@3)) (not (= (select a j) (select a k@@1))))
 :qid |onedupli.20:26|
 :skolemid |4|
)))) :lblneg @1256))))))))))
(let ((anon13_Else_correct  (=> (! (and %lbl%+308 true) :lblpos +308) (=> (select occs@1 (select a i@1)) (=> (and (and (= d@2 (select a i@1)) (= d@3 d@2)) (and (= occs@3 occs@1) (= i@3 i@1))) GeneratedUnifiedExit_correct)))))
(let ((anon13_Then_correct  (=> (! (and %lbl%+306 true) :lblpos +306) (=> (and (not (select occs@1 (select a i@1))) (= occs@2 (store occs@1 (select a i@1) true))) (=> (and (and (= i@2 (+ i@1 1)) (= d@3 d@1)) (and (= occs@3 occs@2) (= i@3 i@2))) GeneratedUnifiedExit_correct)))))
(let ((anon12_Else_correct  (=> (! (and %lbl%+298 true) :lblpos +298) (=> (and (and (< i@1 n) (< d@1 0)) (and (=> bad@1 bad@0) (=> bad@0 bad@1))) (and anon13_Then_correct anon13_Else_correct)))))
(let ((anon12_Then_correct  (=> (! (and %lbl%+296 true) :lblpos +296) (=> (not (and (< i@1 n) (< d@1 0))) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon11_Else_correct  (=> (! (and %lbl%+288 true) :lblpos +288) (=> (select occs (select a i)) (=> (and (and (= d@0 (select a i)) (= d@1 d@0)) (and (= occs@1 occs) (= i@1 i))) (and anon12_Then_correct anon12_Else_correct))))))
(let ((anon11_Then_correct  (=> (! (and %lbl%+286 true) :lblpos +286) (=> (and (not (select occs (select a i))) (= occs@0 (store occs (select a i) true))) (=> (and (and (= i@0 (+ i 1)) (= d@1 d)) (and (= occs@1 occs@0) (= i@1 i@0))) (and anon12_Then_correct anon12_Else_correct))))))
(let ((anon10_Else_correct  (=> (! (and %lbl%+278 true) :lblpos +278) (=> (and (and (< i n) (< d 0)) (and (=> bad@0 bad) (=> bad bad@0))) (and anon11_Then_correct anon11_Else_correct)))))
(let ((anon10_Then_correct  (=> (! (and %lbl%+276 true) :lblpos +276) (=> (not (and (< i n) (< d 0))) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon11_Then_correct anon11_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+509 true) :lblpos +509) (=> (and (> n 0) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 n)) (>= (select a i@@0) 0))
 :qid |onedupli.11:20|
 :skolemid |0|
))) (=> (and (and (and (<= 0 i) (<= i n)) (=> (>= d 0) (select occs (select a i)))) (and (forall ((k@@2 Int) ) (!  (=> (and (<= 0 k@@2) (< k@@2 i)) (select occs (select a k@@2)))
 :qid |onedupli.14:20|
 :skolemid |1|
)) (forall ((j@@0 Int) (k@@3 Int) ) (!  (=> (and (and (<= 0 j@@0) (< j@@0 k@@3)) (< k@@3 i)) (not (= (select a j@@0) (select a k@@3))))
 :qid |onedupli.15:20|
 :skolemid |2|
)))) (and anon10_Then_correct anon10_Else_correct))))))
anon0_correct))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
