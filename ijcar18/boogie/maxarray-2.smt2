(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+439 () Bool)
(declare-fun %lbl%@1015 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun x@3 () Int)
(declare-fun y@3 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1036 () Bool)
(declare-fun m@0 () Int)
(declare-fun %lbl%@1049 () Bool)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%@1083 () Bool)
(declare-fun %lbl%+280 () Bool)
(declare-fun y@1 () Int)
(declare-fun x@1 () Int)
(declare-fun y@2 () Int)
(declare-fun %lbl%+278 () Bool)
(declare-fun x@2 () Int)
(declare-fun %lbl%+269 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+267 () Bool)
(declare-fun %lbl%+259 () Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun y@0 () Int)
(declare-fun %lbl%+257 () Bool)
(declare-fun x@0 () Int)
(declare-fun %lbl%+248 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+246 () Bool)
(declare-fun %lbl%+443 () Bool)
(declare-fun m () Int)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+439 true) :lblpos +439) (and (! (or %lbl%@1015  (or bad@1 (and (and (<= 0 x@3) (<= x@3 y@3)) (< y@3 n)))) :lblneg @1015) (=> (or bad@1 (and (and (<= 0 x@3) (<= x@3 y@3)) (< y@3 n))) (and (! (or %lbl%@1036  (or bad@1 (or (= m@0 x@3) (= m@0 y@3)))) :lblneg @1036) (=> (or bad@1 (or (= m@0 x@3) (= m@0 y@3))) (and (! (or %lbl%@1049  (or bad@1 (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i x@3)) (<= (select a i) (select a m@0)))
 :qid |maxarray.19:26|
 :skolemid |2|
)))) :lblneg @1049) (=> (or bad@1 (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 x@3)) (<= (select a i@@0) (select a m@0)))
 :qid |maxarray.19:26|
 :skolemid |2|
))) (! (or %lbl%@1083  (or bad@1 (forall ((i@@1 Int) ) (!  (=> (and (< y@3 i@@1) (< i@@1 n)) (<= (select a i@@1) (select a m@0)))
 :qid |maxarray.20:26|
 :skolemid |3|
)))) :lblneg @1083))))))))))
(let ((anon13_Else_correct  (=> (! (and %lbl%+280 true) :lblpos +280) (=> (< (select a y@1) (select a x@1)) (=> (and (and (= y@2 (- y@1 1)) (= x@3 x@1)) (and (= y@3 y@2) (= m@0 x@1))) GeneratedUnifiedExit_correct)))))
(let ((anon13_Then_correct  (=> (! (and %lbl%+278 true) :lblpos +278) (=> (<= (select a x@1) (select a y@1)) (=> (and (and (= x@2 (+ x@1 1)) (= x@3 x@2)) (and (= y@3 y@1) (= m@0 y@1))) GeneratedUnifiedExit_correct)))))
(let ((anon12_Else_correct  (=> (! (and %lbl%+269 true) :lblpos +269) (=> (not (= x@1 y@1)) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon12_Then_correct  (=> (! (and %lbl%+267 true) :lblpos +267) (=> (not (not (= x@1 y@1))) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon11_Else_correct  (=> (! (and %lbl%+259 true) :lblpos +259) (=> (and (and (< (select a y) (select a x)) (= y@0 (- y 1))) (and (= y@1 y@0) (= x@1 x))) (and anon12_Then_correct anon12_Else_correct)))))
(let ((anon11_Then_correct  (=> (! (and %lbl%+257 true) :lblpos +257) (=> (and (and (<= (select a x) (select a y)) (= x@0 (+ x 1))) (and (= y@1 y) (= x@1 x@0))) (and anon12_Then_correct anon12_Else_correct)))))
(let ((anon10_Else_correct  (=> (! (and %lbl%+248 true) :lblpos +248) (=> (not (= x y)) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon11_Then_correct anon11_Else_correct))))))
(let ((anon10_Then_correct  (=> (! (and %lbl%+246 true) :lblpos +246) (=> (not (not (= x y))) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon11_Then_correct anon11_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+443 true) :lblpos +443) (=> (> n 0) (=> (and (and (and (and (<= 0 x) (<= x y)) (< y n)) (or (= m x) (= m y))) (and (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 x)) (<= (select a i@@2) (select a m)))
 :qid |maxarray.14:20|
 :skolemid |0|
)) (forall ((i@@3 Int) ) (!  (=> (and (< y i@@3) (< i@@3 n)) (<= (select a i@@3) (select a m)))
 :qid |maxarray.15:20|
 :skolemid |1|
)))) (and anon10_Then_correct anon10_Else_correct))))))
anon0_correct))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
