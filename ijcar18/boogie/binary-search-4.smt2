(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+746 () Bool)
(declare-fun %lbl%@1820 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun low@7 () Int)
(declare-fun high@7 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1845 () Bool)
(declare-fun i@3 () Int)
(declare-fun a () (Array Int Int))
(declare-fun e () Int)
(declare-fun %lbl%@1864 () Bool)
(declare-fun %lbl%@1895 () Bool)
(declare-fun %lbl%+503 () Bool)
(declare-fun mid@3 () Int)
(declare-fun high@6 () Int)
(declare-fun low@5 () Int)
(declare-fun i@2 () Int)
(declare-fun %lbl%+501 () Bool)
(declare-fun low@6 () Int)
(declare-fun high@5 () Int)
(declare-fun %lbl%+499 () Bool)
(declare-fun %lbl%+492 () Bool)
(declare-fun %lbl%+490 () Bool)
(declare-fun %lbl%+483 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+481 () Bool)
(declare-fun %lbl%+473 () Bool)
(declare-fun mid@2 () Int)
(declare-fun high@4 () Int)
(declare-fun low@3 () Int)
(declare-fun i@1 () Int)
(declare-fun %lbl%+471 () Bool)
(declare-fun low@4 () Int)
(declare-fun high@3 () Int)
(declare-fun %lbl%+469 () Bool)
(declare-fun %lbl%+462 () Bool)
(declare-fun %lbl%+460 () Bool)
(declare-fun %lbl%+453 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+451 () Bool)
(declare-fun %lbl%+443 () Bool)
(declare-fun mid@1 () Int)
(declare-fun high@2 () Int)
(declare-fun low@1 () Int)
(declare-fun i@0 () Int)
(declare-fun %lbl%+441 () Bool)
(declare-fun low@2 () Int)
(declare-fun high@1 () Int)
(declare-fun %lbl%+439 () Bool)
(declare-fun %lbl%+432 () Bool)
(declare-fun %lbl%+430 () Bool)
(declare-fun %lbl%+423 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+421 () Bool)
(declare-fun %lbl%+413 () Bool)
(declare-fun mid@0 () Int)
(declare-fun high@0 () Int)
(declare-fun low () Int)
(declare-fun i () Int)
(declare-fun %lbl%+411 () Bool)
(declare-fun low@0 () Int)
(declare-fun high () Int)
(declare-fun %lbl%+409 () Bool)
(declare-fun %lbl%+402 () Bool)
(declare-fun %lbl%+400 () Bool)
(declare-fun %lbl%+393 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+391 () Bool)
(declare-fun %lbl%+751 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+746 true) :lblpos +746) (and (! (or %lbl%@1820  (or bad@3 (and (and (<= 0 low@7) (<= low@7 (+ high@7 1))) (< high@7 n)))) :lblneg @1820) (=> (or bad@3 (and (and (<= 0 low@7) (<= low@7 (+ high@7 1))) (< high@7 n))) (and (! (or %lbl%@1845  (or bad@3 (=> (>= i@3 0) (= (select a i@3) e)))) :lblneg @1845) (=> (or bad@3 (=> (>= i@3 0) (= (select a i@3) e))) (and (! (or %lbl%@1864  (or bad@3 (forall ((k Int) ) (!  (=> (and (>= k 0) (< k low@7)) (< (select a k) e))
 :qid |binaryse.23:26|
 :skolemid |3|
)))) :lblneg @1864) (=> (or bad@3 (forall ((k@@0 Int) ) (!  (=> (and (>= k@@0 0) (< k@@0 low@7)) (< (select a k@@0) e))
 :qid |binaryse.23:26|
 :skolemid |3|
))) (! (or %lbl%@1895  (or bad@3 (forall ((k@@1 Int) ) (!  (=> (and (> k@@1 high@7) (< k@@1 n)) (> (select a k@@1) e))
 :qid |binaryse.24:26|
 :skolemid |4|
)))) :lblneg @1895))))))))))
(let ((anon39_Else_correct  (=> (! (and %lbl%+503 true) :lblpos +503) (=> (<= e (select a mid@3)) (=> (and (and (= high@6 (- mid@3 1)) (= low@7 low@5)) (and (= high@7 high@6) (= i@3 i@2))) GeneratedUnifiedExit_correct)))))
(let ((anon39_Then_correct  (=> (! (and %lbl%+501 true) :lblpos +501) (=> (< (select a mid@3) e) (=> (and (and (= low@6 (+ mid@3 1)) (= low@7 low@6)) (and (= high@7 high@5) (= i@3 i@2))) GeneratedUnifiedExit_correct)))))
(let ((anon38_Else_correct  (=> (! (and %lbl%+499 true) :lblpos +499) (=> (not (= (select a mid@3) e)) (and anon39_Then_correct anon39_Else_correct)))))
(let ((anon38_Then_correct  (=> (! (and %lbl%+492 true) :lblpos +492) (=> (and (and (= (select a mid@3) e) (= low@7 low@5)) (and (= high@7 high@5) (= i@3 mid@3))) GeneratedUnifiedExit_correct))))
(let ((anon23_correct  (=> (! (and %lbl%+490 true) :lblpos +490) (=> (= mid@3 (div (+ low@5 high@5) 2)) (and anon38_Then_correct anon38_Else_correct)))))
(let ((anon37_Else_correct  (=> (! (and %lbl%+483 true) :lblpos +483) (=> (and (and (<= low@5 high@5) (< i@2 0)) (and (=> bad@3 bad@2) (=> bad@2 bad@3))) anon23_correct))))
(let ((anon37_Then_correct  (=> (! (and %lbl%+481 true) :lblpos +481) (=> (not (and (<= low@5 high@5) (< i@2 0))) (=> (and (=> bad@3 true) (=> true bad@3)) anon23_correct)))))
(let ((anon36_Else_correct  (=> (! (and %lbl%+473 true) :lblpos +473) (=> (<= e (select a mid@2)) (=> (and (and (= high@4 (- mid@2 1)) (= low@5 low@3)) (and (= high@5 high@4) (= i@2 i@1))) (and anon37_Then_correct anon37_Else_correct))))))
(let ((anon36_Then_correct  (=> (! (and %lbl%+471 true) :lblpos +471) (=> (< (select a mid@2) e) (=> (and (and (= low@4 (+ mid@2 1)) (= low@5 low@4)) (and (= high@5 high@3) (= i@2 i@1))) (and anon37_Then_correct anon37_Else_correct))))))
(let ((anon35_Else_correct  (=> (! (and %lbl%+469 true) :lblpos +469) (=> (not (= (select a mid@2) e)) (and anon36_Then_correct anon36_Else_correct)))))
(let ((anon35_Then_correct  (=> (! (and %lbl%+462 true) :lblpos +462) (=> (and (and (= (select a mid@2) e) (= low@5 low@3)) (and (= high@5 high@3) (= i@2 mid@2))) (and anon37_Then_correct anon37_Else_correct)))))
(let ((anon16_correct  (=> (! (and %lbl%+460 true) :lblpos +460) (=> (= mid@2 (div (+ low@3 high@3) 2)) (and anon35_Then_correct anon35_Else_correct)))))
(let ((anon34_Else_correct  (=> (! (and %lbl%+453 true) :lblpos +453) (=> (and (and (<= low@3 high@3) (< i@1 0)) (and (=> bad@2 bad@1) (=> bad@1 bad@2))) anon16_correct))))
(let ((anon34_Then_correct  (=> (! (and %lbl%+451 true) :lblpos +451) (=> (not (and (<= low@3 high@3) (< i@1 0))) (=> (and (=> bad@2 true) (=> true bad@2)) anon16_correct)))))
(let ((anon33_Else_correct  (=> (! (and %lbl%+443 true) :lblpos +443) (=> (<= e (select a mid@1)) (=> (and (and (= high@2 (- mid@1 1)) (= high@3 high@2)) (and (= low@3 low@1) (= i@1 i@0))) (and anon34_Then_correct anon34_Else_correct))))))
(let ((anon33_Then_correct  (=> (! (and %lbl%+441 true) :lblpos +441) (=> (< (select a mid@1) e) (=> (and (and (= low@2 (+ mid@1 1)) (= high@3 high@1)) (and (= low@3 low@2) (= i@1 i@0))) (and anon34_Then_correct anon34_Else_correct))))))
(let ((anon32_Else_correct  (=> (! (and %lbl%+439 true) :lblpos +439) (=> (not (= (select a mid@1) e)) (and anon33_Then_correct anon33_Else_correct)))))
(let ((anon32_Then_correct  (=> (! (and %lbl%+432 true) :lblpos +432) (=> (and (and (= (select a mid@1) e) (= high@3 high@1)) (and (= low@3 low@1) (= i@1 mid@1))) (and anon34_Then_correct anon34_Else_correct)))))
(let ((anon9_correct  (=> (! (and %lbl%+430 true) :lblpos +430) (=> (= mid@1 (div (+ low@1 high@1) 2)) (and anon32_Then_correct anon32_Else_correct)))))
(let ((anon31_Else_correct  (=> (! (and %lbl%+423 true) :lblpos +423) (=> (and (and (<= low@1 high@1) (< i@0 0)) (and (=> bad@1 bad@0) (=> bad@0 bad@1))) anon9_correct))))
(let ((anon31_Then_correct  (=> (! (and %lbl%+421 true) :lblpos +421) (=> (not (and (<= low@1 high@1) (< i@0 0))) (=> (and (=> bad@1 true) (=> true bad@1)) anon9_correct)))))
(let ((anon30_Else_correct  (=> (! (and %lbl%+413 true) :lblpos +413) (=> (<= e (select a mid@0)) (=> (and (and (= high@0 (- mid@0 1)) (= high@1 high@0)) (and (= low@1 low) (= i@0 i))) (and anon31_Then_correct anon31_Else_correct))))))
(let ((anon30_Then_correct  (=> (! (and %lbl%+411 true) :lblpos +411) (=> (< (select a mid@0) e) (=> (and (and (= low@0 (+ mid@0 1)) (= high@1 high)) (and (= low@1 low@0) (= i@0 i))) (and anon31_Then_correct anon31_Else_correct))))))
(let ((anon29_Else_correct  (=> (! (and %lbl%+409 true) :lblpos +409) (=> (not (= (select a mid@0) e)) (and anon30_Then_correct anon30_Else_correct)))))
(let ((anon29_Then_correct  (=> (! (and %lbl%+402 true) :lblpos +402) (=> (and (and (= (select a mid@0) e) (= high@1 high)) (and (= low@1 low) (= i@0 mid@0))) (and anon31_Then_correct anon31_Else_correct)))))
(let ((anon2_correct  (=> (! (and %lbl%+400 true) :lblpos +400) (=> (= mid@0 (div (+ low high) 2)) (and anon29_Then_correct anon29_Else_correct)))))
(let ((anon28_Else_correct  (=> (! (and %lbl%+393 true) :lblpos +393) (=> (and (and (<= low high) (< i 0)) (and (=> bad@0 bad) (=> bad bad@0))) anon2_correct))))
(let ((anon28_Then_correct  (=> (! (and %lbl%+391 true) :lblpos +391) (=> (not (and (<= low high) (< i 0))) (=> (and (=> bad@0 true) (=> true bad@0)) anon2_correct)))))
(let ((anon0_correct  (=> (! (and %lbl%+751 true) :lblpos +751) (=> (and (> n 0) (forall ((j Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 j) (<= j k@@2)) (< k@@2 n)) (<= (select a j) (select a k@@2)))
 :qid |binaryse.14:20|
 :skolemid |0|
))) (=> (and (and (and (and (<= 0 low) (<= low (+ high 1))) (< high n)) (=> (>= i 0) (= (select a i) e))) (and (forall ((k@@3 Int) ) (!  (=> (and (>= k@@3 0) (< k@@3 low)) (< (select a k@@3) e))
 :qid |binaryse.18:20|
 :skolemid |1|
)) (forall ((k@@4 Int) ) (!  (=> (and (> k@@4 high) (< k@@4 n)) (> (select a k@@4) e))
 :qid |binaryse.19:20|
 :skolemid |2|
)))) (and anon28_Then_correct anon28_Else_correct))))))
anon0_correct))))))))))))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
