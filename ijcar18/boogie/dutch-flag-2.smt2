(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+692 () Bool)
(declare-fun %lbl%@1631 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun low@3 () Int)
(declare-fun i@5 () Int)
(declare-fun high@3 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1662 () Bool)
(declare-fun a@9 () (Array Int Int))
(declare-fun pivot () Int)
(declare-fun %lbl%@1692 () Bool)
(declare-fun %lbl%@1721 () Bool)
(declare-fun %lbl%+428 () Bool)
(declare-fun a@4 () (Array Int Int))
(declare-fun i@2 () Int)
(declare-fun i@4 () Int)
(declare-fun high@1 () Int)
(declare-fun low@1 () Int)
(declare-fun %lbl%+426 () Bool)
(declare-fun t@3 () Int)
(declare-fun a@7 () (Array Int Int))
(declare-fun a@8 () (Array Int Int))
(declare-fun high@2 () Int)
(declare-fun %lbl%+424 () Bool)
(declare-fun %lbl%+414 () Bool)
(declare-fun t@2 () Int)
(declare-fun a@5 () (Array Int Int))
(declare-fun a@6 () (Array Int Int))
(declare-fun low@2 () Int)
(declare-fun i@3 () Int)
(declare-fun %lbl%+405 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+403 () Bool)
(declare-fun %lbl%+395 () Bool)
(declare-fun a () (Array Int Int))
(declare-fun i () Int)
(declare-fun i@1 () Int)
(declare-fun high () Int)
(declare-fun low () Int)
(declare-fun %lbl%+393 () Bool)
(declare-fun t@1 () Int)
(declare-fun a@2 () (Array Int Int))
(declare-fun a@3 () (Array Int Int))
(declare-fun high@0 () Int)
(declare-fun %lbl%+391 () Bool)
(declare-fun %lbl%+381 () Bool)
(declare-fun t@0 () Int)
(declare-fun a@0 () (Array Int Int))
(declare-fun a@1 () (Array Int Int))
(declare-fun low@0 () Int)
(declare-fun i@0 () Int)
(declare-fun %lbl%+372 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+370 () Bool)
(declare-fun %lbl%+697 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+692 true) :lblpos +692) (and (! (or %lbl%@1631  (or bad@1 (and (and (and (<= 0 low@3) (<= low@3 i@5)) (<= i@5 (+ high@3 1))) (< high@3 n)))) :lblneg @1631) (=> (or bad@1 (and (and (and (<= 0 low@3) (<= low@3 i@5)) (<= i@5 (+ high@3 1))) (< high@3 n))) (and (! (or %lbl%@1662  (or bad@1 (forall ((k Int) ) (!  (=> (and (<= 0 k) (< k low@3)) (< (select a@9 k) pivot))
 :qid |dutchfla.21:26|
 :skolemid |3|
)))) :lblneg @1662) (=> (or bad@1 (forall ((k@@0 Int) ) (!  (=> (and (<= 0 k@@0) (< k@@0 low@3)) (< (select a@9 k@@0) pivot))
 :qid |dutchfla.21:26|
 :skolemid |3|
))) (and (! (or %lbl%@1692  (or bad@1 (forall ((k@@1 Int) ) (!  (=> (and (<= low@3 k@@1) (< k@@1 i@5)) (= (select a@9 k@@1) pivot))
 :qid |dutchfla.22:26|
 :skolemid |4|
)))) :lblneg @1692) (=> (or bad@1 (forall ((k@@2 Int) ) (!  (=> (and (<= low@3 k@@2) (< k@@2 i@5)) (= (select a@9 k@@2) pivot))
 :qid |dutchfla.22:26|
 :skolemid |4|
))) (! (or %lbl%@1721  (or bad@1 (forall ((k@@3 Int) ) (!  (=> (and (< high@3 k@@3) (< k@@3 n)) (> (select a@9 k@@3) pivot))
 :qid |dutchfla.23:26|
 :skolemid |5|
)))) :lblneg @1721))))))))))
(let ((anon17_Else_correct  (=> (! (and %lbl%+428 true) :lblpos +428) (=> (and (>= pivot (select a@4 i@2)) (= i@4 (+ i@2 1))) (=> (and (and (= i@5 i@4) (= a@9 a@4)) (and (= high@3 high@1) (= low@3 low@1))) GeneratedUnifiedExit_correct)))))
(let ((anon17_Then_correct  (=> (! (and %lbl%+426 true) :lblpos +426) (=> (> (select a@4 i@2) pivot) (=> (and (and (and (= t@3 (select a@4 i@2)) (= a@7 (store a@4 i@2 (select a@4 high@1)))) (and (= a@8 (store a@7 high@1 t@3)) (= high@2 (- high@1 1)))) (and (and (= i@5 i@2) (= a@9 a@8)) (and (= high@3 high@2) (= low@3 low@1)))) GeneratedUnifiedExit_correct)))))
(let ((anon16_Else_correct  (=> (! (and %lbl%+424 true) :lblpos +424) (=> (<= pivot (select a@4 i@2)) (and anon17_Then_correct anon17_Else_correct)))))
(let ((anon16_Then_correct  (=> (! (and %lbl%+414 true) :lblpos +414) (=> (and (< (select a@4 i@2) pivot) (= t@2 (select a@4 low@1))) (=> (and (and (and (= a@5 (store a@4 low@1 (select a@4 i@2))) (= a@6 (store a@5 i@2 t@2))) (and (= low@2 (+ low@1 1)) (= i@3 (+ i@2 1)))) (and (and (= i@5 i@3) (= a@9 a@6)) (and (= high@3 high@1) (= low@3 low@2)))) GeneratedUnifiedExit_correct)))))
(let ((anon15_Else_correct  (=> (! (and %lbl%+405 true) :lblpos +405) (=> (<= i@2 high@1) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon15_Then_correct  (=> (! (and %lbl%+403 true) :lblpos +403) (=> (not (<= i@2 high@1)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon14_Else_correct  (=> (! (and %lbl%+395 true) :lblpos +395) (=> (and (>= pivot (select a i)) (= i@1 (+ i 1))) (=> (and (and (= i@2 i@1) (= a@4 a)) (and (= high@1 high) (= low@1 low))) (and anon15_Then_correct anon15_Else_correct))))))
(let ((anon14_Then_correct  (=> (! (and %lbl%+393 true) :lblpos +393) (=> (> (select a i) pivot) (=> (and (and (and (= t@1 (select a i)) (= a@2 (store a i (select a high)))) (and (= a@3 (store a@2 high t@1)) (= high@0 (- high 1)))) (and (and (= i@2 i) (= a@4 a@3)) (and (= high@1 high@0) (= low@1 low)))) (and anon15_Then_correct anon15_Else_correct))))))
(let ((anon13_Else_correct  (=> (! (and %lbl%+391 true) :lblpos +391) (=> (<= pivot (select a i)) (and anon14_Then_correct anon14_Else_correct)))))
(let ((anon13_Then_correct  (=> (! (and %lbl%+381 true) :lblpos +381) (=> (and (< (select a i) pivot) (= t@0 (select a low))) (=> (and (and (and (= a@0 (store a low (select a i))) (= a@1 (store a@0 i t@0))) (and (= low@0 (+ low 1)) (= i@0 (+ i 1)))) (and (and (= i@2 i@0) (= a@4 a@1)) (and (= high@1 high) (= low@1 low@0)))) (and anon15_Then_correct anon15_Else_correct))))))
(let ((anon12_Else_correct  (=> (! (and %lbl%+372 true) :lblpos +372) (=> (<= i high) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon12_Then_correct  (=> (! (and %lbl%+370 true) :lblpos +370) (=> (not (<= i high)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+697 true) :lblpos +697) (=> (>= n 0) (=> (and (and (and (and (and (<= 0 low) (<= low i)) (<= i (+ high 1))) (< high n)) (forall ((k@@4 Int) ) (!  (=> (and (<= 0 k@@4) (< k@@4 low)) (< (select a k@@4) pivot))
 :qid |dutchfla.16:20|
 :skolemid |0|
))) (and (forall ((k@@5 Int) ) (!  (=> (and (<= low k@@5) (< k@@5 i)) (= (select a k@@5) pivot))
 :qid |dutchfla.17:20|
 :skolemid |1|
)) (forall ((k@@6 Int) ) (!  (=> (and (< high k@@6) (< k@@6 n)) (> (select a k@@6) pivot))
 :qid |dutchfla.18:20|
 :skolemid |2|
)))) (and anon12_Then_correct anon12_Else_correct))))))
anon0_correct))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
