(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+844 () Bool)
(declare-fun %lbl%@2074 () Bool)
(declare-fun bad@4 () Bool)
(declare-fun low@9 () Int)
(declare-fun high@9 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@2099 () Bool)
(declare-fun i@4 () Int)
(declare-fun a () (Array Int Int))
(declare-fun e () Int)
(declare-fun %lbl%@2118 () Bool)
(declare-fun %lbl%@2149 () Bool)
(declare-fun %lbl%+579 () Bool)
(declare-fun mid@4 () Int)
(declare-fun high@8 () Int)
(declare-fun low@7 () Int)
(declare-fun i@3 () Int)
(declare-fun %lbl%+577 () Bool)
(declare-fun low@8 () Int)
(declare-fun high@7 () Int)
(declare-fun %lbl%+575 () Bool)
(declare-fun %lbl%+568 () Bool)
(declare-fun %lbl%+566 () Bool)
(declare-fun %lbl%+559 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun %lbl%+557 () Bool)
(declare-fun %lbl%+549 () Bool)
(declare-fun mid@3 () Int)
(declare-fun high@6 () Int)
(declare-fun low@5 () Int)
(declare-fun i@2 () Int)
(declare-fun %lbl%+547 () Bool)
(declare-fun low@6 () Int)
(declare-fun high@5 () Int)
(declare-fun %lbl%+545 () Bool)
(declare-fun %lbl%+538 () Bool)
(declare-fun %lbl%+536 () Bool)
(declare-fun %lbl%+529 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+527 () Bool)
(declare-fun %lbl%+519 () Bool)
(declare-fun mid@2 () Int)
(declare-fun high@4 () Int)
(declare-fun low@3 () Int)
(declare-fun i@1 () Int)
(declare-fun %lbl%+517 () Bool)
(declare-fun low@4 () Int)
(declare-fun high@3 () Int)
(declare-fun %lbl%+515 () Bool)
(declare-fun %lbl%+508 () Bool)
(declare-fun %lbl%+506 () Bool)
(declare-fun %lbl%+499 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+497 () Bool)
(declare-fun %lbl%+489 () Bool)
(declare-fun mid@1 () Int)
(declare-fun high@2 () Int)
(declare-fun low@1 () Int)
(declare-fun i@0 () Int)
(declare-fun %lbl%+487 () Bool)
(declare-fun low@2 () Int)
(declare-fun high@1 () Int)
(declare-fun %lbl%+485 () Bool)
(declare-fun %lbl%+478 () Bool)
(declare-fun %lbl%+476 () Bool)
(declare-fun %lbl%+469 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+467 () Bool)
(declare-fun %lbl%+459 () Bool)
(declare-fun mid@0 () Int)
(declare-fun high@0 () Int)
(declare-fun low () Int)
(declare-fun i () Int)
(declare-fun %lbl%+457 () Bool)
(declare-fun low@0 () Int)
(declare-fun high () Int)
(declare-fun %lbl%+455 () Bool)
(declare-fun %lbl%+448 () Bool)
(declare-fun %lbl%+446 () Bool)
(declare-fun %lbl%+439 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+437 () Bool)
(declare-fun %lbl%+849 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+844 true) :lblpos +844) (and (! (or %lbl%@2074  (or bad@4 (and (and (<= 0 low@9) (<= low@9 (+ high@9 1))) (< high@9 n)))) :lblneg @2074) (=> (or bad@4 (and (and (<= 0 low@9) (<= low@9 (+ high@9 1))) (< high@9 n))) (and (! (or %lbl%@2099  (or bad@4 (=> (>= i@4 0) (= (select a i@4) e)))) :lblneg @2099) (=> (or bad@4 (=> (>= i@4 0) (= (select a i@4) e))) (and (! (or %lbl%@2118  (or bad@4 (forall ((k Int) ) (!  (=> (and (>= k 0) (< k low@9)) (< (select a k) e))
 :qid |binaryse.23:26|
 :skolemid |3|
)))) :lblneg @2118) (=> (or bad@4 (forall ((k@@0 Int) ) (!  (=> (and (>= k@@0 0) (< k@@0 low@9)) (< (select a k@@0) e))
 :qid |binaryse.23:26|
 :skolemid |3|
))) (! (or %lbl%@2149  (or bad@4 (forall ((k@@1 Int) ) (!  (=> (and (> k@@1 high@9) (< k@@1 n)) (> (select a k@@1) e))
 :qid |binaryse.24:26|
 :skolemid |4|
)))) :lblneg @2149))))))))))
(let ((anon49_Else_correct  (=> (! (and %lbl%+579 true) :lblpos +579) (=> (<= e (select a mid@4)) (=> (and (and (= high@8 (- mid@4 1)) (= low@9 low@7)) (and (= high@9 high@8) (= i@4 i@3))) GeneratedUnifiedExit_correct)))))
(let ((anon49_Then_correct  (=> (! (and %lbl%+577 true) :lblpos +577) (=> (< (select a mid@4) e) (=> (and (and (= low@8 (+ mid@4 1)) (= low@9 low@8)) (and (= high@9 high@7) (= i@4 i@3))) GeneratedUnifiedExit_correct)))))
(let ((anon48_Else_correct  (=> (! (and %lbl%+575 true) :lblpos +575) (=> (not (= (select a mid@4) e)) (and anon49_Then_correct anon49_Else_correct)))))
(let ((anon48_Then_correct  (=> (! (and %lbl%+568 true) :lblpos +568) (=> (and (and (= (select a mid@4) e) (= low@9 low@7)) (and (= high@9 high@7) (= i@4 mid@4))) GeneratedUnifiedExit_correct))))
(let ((anon30_correct  (=> (! (and %lbl%+566 true) :lblpos +566) (=> (= mid@4 (div (+ low@7 high@7) 2)) (and anon48_Then_correct anon48_Else_correct)))))
(let ((anon47_Else_correct  (=> (! (and %lbl%+559 true) :lblpos +559) (=> (and (and (<= low@7 high@7) (< i@3 0)) (and (=> bad@4 bad@3) (=> bad@3 bad@4))) anon30_correct))))
(let ((anon47_Then_correct  (=> (! (and %lbl%+557 true) :lblpos +557) (=> (not (and (<= low@7 high@7) (< i@3 0))) (=> (and (=> bad@4 true) (=> true bad@4)) anon30_correct)))))
(let ((anon46_Else_correct  (=> (! (and %lbl%+549 true) :lblpos +549) (=> (<= e (select a mid@3)) (=> (and (and (= high@6 (- mid@3 1)) (= low@7 low@5)) (and (= high@7 high@6) (= i@3 i@2))) (and anon47_Then_correct anon47_Else_correct))))))
(let ((anon46_Then_correct  (=> (! (and %lbl%+547 true) :lblpos +547) (=> (< (select a mid@3) e) (=> (and (and (= low@6 (+ mid@3 1)) (= low@7 low@6)) (and (= high@7 high@5) (= i@3 i@2))) (and anon47_Then_correct anon47_Else_correct))))))
(let ((anon45_Else_correct  (=> (! (and %lbl%+545 true) :lblpos +545) (=> (not (= (select a mid@3) e)) (and anon46_Then_correct anon46_Else_correct)))))
(let ((anon45_Then_correct  (=> (! (and %lbl%+538 true) :lblpos +538) (=> (and (and (= (select a mid@3) e) (= low@7 low@5)) (and (= high@7 high@5) (= i@3 mid@3))) (and anon47_Then_correct anon47_Else_correct)))))
(let ((anon23_correct  (=> (! (and %lbl%+536 true) :lblpos +536) (=> (= mid@3 (div (+ low@5 high@5) 2)) (and anon45_Then_correct anon45_Else_correct)))))
(let ((anon44_Else_correct  (=> (! (and %lbl%+529 true) :lblpos +529) (=> (and (and (<= low@5 high@5) (< i@2 0)) (and (=> bad@3 bad@2) (=> bad@2 bad@3))) anon23_correct))))
(let ((anon44_Then_correct  (=> (! (and %lbl%+527 true) :lblpos +527) (=> (not (and (<= low@5 high@5) (< i@2 0))) (=> (and (=> bad@3 true) (=> true bad@3)) anon23_correct)))))
(let ((anon43_Else_correct  (=> (! (and %lbl%+519 true) :lblpos +519) (=> (<= e (select a mid@2)) (=> (and (and (= high@4 (- mid@2 1)) (= low@5 low@3)) (and (= high@5 high@4) (= i@2 i@1))) (and anon44_Then_correct anon44_Else_correct))))))
(let ((anon43_Then_correct  (=> (! (and %lbl%+517 true) :lblpos +517) (=> (< (select a mid@2) e) (=> (and (and (= low@4 (+ mid@2 1)) (= low@5 low@4)) (and (= high@5 high@3) (= i@2 i@1))) (and anon44_Then_correct anon44_Else_correct))))))
(let ((anon42_Else_correct  (=> (! (and %lbl%+515 true) :lblpos +515) (=> (not (= (select a mid@2) e)) (and anon43_Then_correct anon43_Else_correct)))))
(let ((anon42_Then_correct  (=> (! (and %lbl%+508 true) :lblpos +508) (=> (and (and (= (select a mid@2) e) (= low@5 low@3)) (and (= high@5 high@3) (= i@2 mid@2))) (and anon44_Then_correct anon44_Else_correct)))))
(let ((anon16_correct  (=> (! (and %lbl%+506 true) :lblpos +506) (=> (= mid@2 (div (+ low@3 high@3) 2)) (and anon42_Then_correct anon42_Else_correct)))))
(let ((anon41_Else_correct  (=> (! (and %lbl%+499 true) :lblpos +499) (=> (and (and (<= low@3 high@3) (< i@1 0)) (and (=> bad@2 bad@1) (=> bad@1 bad@2))) anon16_correct))))
(let ((anon41_Then_correct  (=> (! (and %lbl%+497 true) :lblpos +497) (=> (not (and (<= low@3 high@3) (< i@1 0))) (=> (and (=> bad@2 true) (=> true bad@2)) anon16_correct)))))
(let ((anon40_Else_correct  (=> (! (and %lbl%+489 true) :lblpos +489) (=> (<= e (select a mid@1)) (=> (and (and (= high@2 (- mid@1 1)) (= high@3 high@2)) (and (= low@3 low@1) (= i@1 i@0))) (and anon41_Then_correct anon41_Else_correct))))))
(let ((anon40_Then_correct  (=> (! (and %lbl%+487 true) :lblpos +487) (=> (< (select a mid@1) e) (=> (and (and (= low@2 (+ mid@1 1)) (= high@3 high@1)) (and (= low@3 low@2) (= i@1 i@0))) (and anon41_Then_correct anon41_Else_correct))))))
(let ((anon39_Else_correct  (=> (! (and %lbl%+485 true) :lblpos +485) (=> (not (= (select a mid@1) e)) (and anon40_Then_correct anon40_Else_correct)))))
(let ((anon39_Then_correct  (=> (! (and %lbl%+478 true) :lblpos +478) (=> (and (and (= (select a mid@1) e) (= high@3 high@1)) (and (= low@3 low@1) (= i@1 mid@1))) (and anon41_Then_correct anon41_Else_correct)))))
(let ((anon9_correct  (=> (! (and %lbl%+476 true) :lblpos +476) (=> (= mid@1 (div (+ low@1 high@1) 2)) (and anon39_Then_correct anon39_Else_correct)))))
(let ((anon38_Else_correct  (=> (! (and %lbl%+469 true) :lblpos +469) (=> (and (and (<= low@1 high@1) (< i@0 0)) (and (=> bad@1 bad@0) (=> bad@0 bad@1))) anon9_correct))))
(let ((anon38_Then_correct  (=> (! (and %lbl%+467 true) :lblpos +467) (=> (not (and (<= low@1 high@1) (< i@0 0))) (=> (and (=> bad@1 true) (=> true bad@1)) anon9_correct)))))
(let ((anon37_Else_correct  (=> (! (and %lbl%+459 true) :lblpos +459) (=> (<= e (select a mid@0)) (=> (and (and (= high@0 (- mid@0 1)) (= high@1 high@0)) (and (= low@1 low) (= i@0 i))) (and anon38_Then_correct anon38_Else_correct))))))
(let ((anon37_Then_correct  (=> (! (and %lbl%+457 true) :lblpos +457) (=> (< (select a mid@0) e) (=> (and (and (= low@0 (+ mid@0 1)) (= high@1 high)) (and (= low@1 low@0) (= i@0 i))) (and anon38_Then_correct anon38_Else_correct))))))
(let ((anon36_Else_correct  (=> (! (and %lbl%+455 true) :lblpos +455) (=> (not (= (select a mid@0) e)) (and anon37_Then_correct anon37_Else_correct)))))
(let ((anon36_Then_correct  (=> (! (and %lbl%+448 true) :lblpos +448) (=> (and (and (= (select a mid@0) e) (= high@1 high)) (and (= low@1 low) (= i@0 mid@0))) (and anon38_Then_correct anon38_Else_correct)))))
(let ((anon2_correct  (=> (! (and %lbl%+446 true) :lblpos +446) (=> (= mid@0 (div (+ low high) 2)) (and anon36_Then_correct anon36_Else_correct)))))
(let ((anon35_Else_correct  (=> (! (and %lbl%+439 true) :lblpos +439) (=> (and (and (<= low high) (< i 0)) (and (=> bad@0 bad) (=> bad bad@0))) anon2_correct))))
(let ((anon35_Then_correct  (=> (! (and %lbl%+437 true) :lblpos +437) (=> (not (and (<= low high) (< i 0))) (=> (and (=> bad@0 true) (=> true bad@0)) anon2_correct)))))
(let ((anon0_correct  (=> (! (and %lbl%+849 true) :lblpos +849) (=> (and (> n 0) (forall ((j Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 j) (<= j k@@2)) (< k@@2 n)) (<= (select a j) (select a k@@2)))
 :qid |binaryse.14:20|
 :skolemid |0|
))) (=> (and (and (and (and (<= 0 low) (<= low (+ high 1))) (< high n)) (=> (>= i 0) (= (select a i) e))) (and (forall ((k@@3 Int) ) (!  (=> (and (>= k@@3 0) (< k@@3 low)) (< (select a k@@3) e))
 :qid |binaryse.18:20|
 :skolemid |1|
)) (forall ((k@@4 Int) ) (!  (=> (and (> k@@4 high) (< k@@4 n)) (> (select a k@@4) e))
 :qid |binaryse.19:20|
 :skolemid |2|
)))) (and anon35_Then_correct anon35_Else_correct))))))
anon0_correct)))))))))))))))))))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
