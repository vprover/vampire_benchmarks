(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+122 () Bool)
(declare-fun i@0 () Int)
(declare-fun i () Int)
(declare-fun %lbl%@376 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun max@1 () Int)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%+120 () Bool)
(declare-fun q@max () Int)
(declare-fun %lbl%+118 () Bool)
(declare-fun max@0 () Int)
(declare-fun %lbl%+109 () Bool)
(declare-fun n () Int)
(declare-fun bad () Bool)
(declare-fun %lbl%+107 () Bool)
(declare-fun %lbl%+175 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((anon4_correct  (=> (! (and %lbl%+122 true) :lblpos +122) (=> (= i@0 (+ i 1)) (! (or %lbl%@376  (or bad@0 (forall ((j Int) ) (!  (=> (and (>= j 0) (< j i@0)) (>= max@1 (select a j)))
 :qid |maximum1.17:26|
 :skolemid |1|
)))) :lblneg @376)))))
(let ((anon6_Else_correct  (=> (! (and %lbl%+120 true) :lblpos +120) (=> (and (<= (select a i) q@max) (= max@1 q@max)) anon4_correct))))
(let ((anon6_Then_correct  (=> (! (and %lbl%+118 true) :lblpos +118) (=> (< q@max (select a i)) (=> (and (= max@0 (select a i)) (= max@1 max@0)) anon4_correct)))))
(let ((anon5_Else_correct  (=> (! (and %lbl%+109 true) :lblpos +109) (=> (< i n) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon6_Then_correct anon6_Else_correct))))))
(let ((anon5_Then_correct  (=> (! (and %lbl%+107 true) :lblpos +107) (=> (not (< i n)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon6_Then_correct anon6_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+175 true) :lblpos +175) (=> (and (> n 0) (forall ((j@@0 Int) ) (!  (=> (and (>= j@@0 0) (< j@@0 i)) (>= q@max (select a j@@0)))
 :qid |maximum1.15:20|
 :skolemid |0|
))) (and anon5_Then_correct anon5_Else_correct)))))
anon0_correct))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
