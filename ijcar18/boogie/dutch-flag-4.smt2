(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+1054 () Bool)
(declare-fun %lbl%@2485 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun low@7 () Int)
(declare-fun i@11 () Int)
(declare-fun high@7 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@2516 () Bool)
(declare-fun a@19 () (Array Int Int))
(declare-fun pivot () Int)
(declare-fun %lbl%@2546 () Bool)
(declare-fun %lbl%@2575 () Bool)
(declare-fun %lbl%+658 () Bool)
(declare-fun a@14 () (Array Int Int))
(declare-fun i@8 () Int)
(declare-fun i@10 () Int)
(declare-fun high@5 () Int)
(declare-fun low@5 () Int)
(declare-fun %lbl%+656 () Bool)
(declare-fun t@7 () Int)
(declare-fun a@17 () (Array Int Int))
(declare-fun a@18 () (Array Int Int))
(declare-fun high@6 () Int)
(declare-fun %lbl%+654 () Bool)
(declare-fun %lbl%+644 () Bool)
(declare-fun t@6 () Int)
(declare-fun a@15 () (Array Int Int))
(declare-fun a@16 () (Array Int Int))
(declare-fun low@6 () Int)
(declare-fun i@9 () Int)
(declare-fun %lbl%+635 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+633 () Bool)
(declare-fun %lbl%+625 () Bool)
(declare-fun a@9 () (Array Int Int))
(declare-fun i@5 () Int)
(declare-fun i@7 () Int)
(declare-fun high@3 () Int)
(declare-fun low@3 () Int)
(declare-fun %lbl%+623 () Bool)
(declare-fun t@5 () Int)
(declare-fun a@12 () (Array Int Int))
(declare-fun a@13 () (Array Int Int))
(declare-fun high@4 () Int)
(declare-fun %lbl%+621 () Bool)
(declare-fun %lbl%+611 () Bool)
(declare-fun t@4 () Int)
(declare-fun a@10 () (Array Int Int))
(declare-fun a@11 () (Array Int Int))
(declare-fun low@4 () Int)
(declare-fun i@6 () Int)
(declare-fun %lbl%+602 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+600 () Bool)
(declare-fun %lbl%+592 () Bool)
(declare-fun a@4 () (Array Int Int))
(declare-fun i@2 () Int)
(declare-fun i@4 () Int)
(declare-fun high@1 () Int)
(declare-fun low@1 () Int)
(declare-fun %lbl%+590 () Bool)
(declare-fun t@3 () Int)
(declare-fun a@7 () (Array Int Int))
(declare-fun a@8 () (Array Int Int))
(declare-fun high@2 () Int)
(declare-fun %lbl%+588 () Bool)
(declare-fun %lbl%+578 () Bool)
(declare-fun t@2 () Int)
(declare-fun a@5 () (Array Int Int))
(declare-fun a@6 () (Array Int Int))
(declare-fun low@2 () Int)
(declare-fun i@3 () Int)
(declare-fun %lbl%+569 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+567 () Bool)
(declare-fun %lbl%+559 () Bool)
(declare-fun a () (Array Int Int))
(declare-fun i () Int)
(declare-fun i@1 () Int)
(declare-fun high () Int)
(declare-fun low () Int)
(declare-fun %lbl%+557 () Bool)
(declare-fun t@1 () Int)
(declare-fun a@2 () (Array Int Int))
(declare-fun a@3 () (Array Int Int))
(declare-fun high@0 () Int)
(declare-fun %lbl%+555 () Bool)
(declare-fun %lbl%+545 () Bool)
(declare-fun t@0 () Int)
(declare-fun a@0 () (Array Int Int))
(declare-fun a@1 () (Array Int Int))
(declare-fun low@0 () Int)
(declare-fun i@0 () Int)
(declare-fun %lbl%+536 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+534 () Bool)
(declare-fun %lbl%+1059 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+1054 true) :lblpos +1054) (and (! (or %lbl%@2485  (or bad@3 (and (and (and (<= 0 low@7) (<= low@7 i@11)) (<= i@11 (+ high@7 1))) (< high@7 n)))) :lblneg @2485) (=> (or bad@3 (and (and (and (<= 0 low@7) (<= low@7 i@11)) (<= i@11 (+ high@7 1))) (< high@7 n))) (and (! (or %lbl%@2516  (or bad@3 (forall ((k Int) ) (!  (=> (and (<= 0 k) (< k low@7)) (< (select a@19 k) pivot))
 :qid |dutchfla.21:26|
 :skolemid |3|
)))) :lblneg @2516) (=> (or bad@3 (forall ((k@@0 Int) ) (!  (=> (and (<= 0 k@@0) (< k@@0 low@7)) (< (select a@19 k@@0) pivot))
 :qid |dutchfla.21:26|
 :skolemid |3|
))) (and (! (or %lbl%@2546  (or bad@3 (forall ((k@@1 Int) ) (!  (=> (and (<= low@7 k@@1) (< k@@1 i@11)) (= (select a@19 k@@1) pivot))
 :qid |dutchfla.22:26|
 :skolemid |4|
)))) :lblneg @2546) (=> (or bad@3 (forall ((k@@2 Int) ) (!  (=> (and (<= low@7 k@@2) (< k@@2 i@11)) (= (select a@19 k@@2) pivot))
 :qid |dutchfla.22:26|
 :skolemid |4|
))) (! (or %lbl%@2575  (or bad@3 (forall ((k@@3 Int) ) (!  (=> (and (< high@7 k@@3) (< k@@3 n)) (> (select a@19 k@@3) pivot))
 :qid |dutchfla.23:26|
 :skolemid |5|
)))) :lblneg @2575))))))))))
(let ((anon35_Else_correct  (=> (! (and %lbl%+658 true) :lblpos +658) (=> (and (>= pivot (select a@14 i@8)) (= i@10 (+ i@8 1))) (=> (and (and (= high@7 high@5) (= i@11 i@10)) (and (= a@19 a@14) (= low@7 low@5))) GeneratedUnifiedExit_correct)))))
(let ((anon35_Then_correct  (=> (! (and %lbl%+656 true) :lblpos +656) (=> (> (select a@14 i@8) pivot) (=> (and (and (and (= t@7 (select a@14 i@8)) (= a@17 (store a@14 i@8 (select a@14 high@5)))) (and (= a@18 (store a@17 high@5 t@7)) (= high@6 (- high@5 1)))) (and (and (= high@7 high@6) (= i@11 i@8)) (and (= a@19 a@18) (= low@7 low@5)))) GeneratedUnifiedExit_correct)))))
(let ((anon34_Else_correct  (=> (! (and %lbl%+654 true) :lblpos +654) (=> (<= pivot (select a@14 i@8)) (and anon35_Then_correct anon35_Else_correct)))))
(let ((anon34_Then_correct  (=> (! (and %lbl%+644 true) :lblpos +644) (=> (and (< (select a@14 i@8) pivot) (= t@6 (select a@14 low@5))) (=> (and (and (and (= a@15 (store a@14 low@5 (select a@14 i@8))) (= a@16 (store a@15 i@8 t@6))) (and (= low@6 (+ low@5 1)) (= i@9 (+ i@8 1)))) (and (and (= high@7 high@5) (= i@11 i@9)) (and (= a@19 a@16) (= low@7 low@6)))) GeneratedUnifiedExit_correct)))))
(let ((anon33_Else_correct  (=> (! (and %lbl%+635 true) :lblpos +635) (=> (<= i@8 high@5) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon34_Then_correct anon34_Else_correct))))))
(let ((anon33_Then_correct  (=> (! (and %lbl%+633 true) :lblpos +633) (=> (not (<= i@8 high@5)) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon34_Then_correct anon34_Else_correct))))))
(let ((anon32_Else_correct  (=> (! (and %lbl%+625 true) :lblpos +625) (=> (and (>= pivot (select a@9 i@5)) (= i@7 (+ i@5 1))) (=> (and (and (= high@5 high@3) (= a@14 a@9)) (and (= i@8 i@7) (= low@5 low@3))) (and anon33_Then_correct anon33_Else_correct))))))
(let ((anon32_Then_correct  (=> (! (and %lbl%+623 true) :lblpos +623) (=> (> (select a@9 i@5) pivot) (=> (and (and (and (= t@5 (select a@9 i@5)) (= a@12 (store a@9 i@5 (select a@9 high@3)))) (and (= a@13 (store a@12 high@3 t@5)) (= high@4 (- high@3 1)))) (and (and (= high@5 high@4) (= a@14 a@13)) (and (= i@8 i@5) (= low@5 low@3)))) (and anon33_Then_correct anon33_Else_correct))))))
(let ((anon31_Else_correct  (=> (! (and %lbl%+621 true) :lblpos +621) (=> (<= pivot (select a@9 i@5)) (and anon32_Then_correct anon32_Else_correct)))))
(let ((anon31_Then_correct  (=> (! (and %lbl%+611 true) :lblpos +611) (=> (and (< (select a@9 i@5) pivot) (= t@4 (select a@9 low@3))) (=> (and (and (and (= a@10 (store a@9 low@3 (select a@9 i@5))) (= a@11 (store a@10 i@5 t@4))) (and (= low@4 (+ low@3 1)) (= i@6 (+ i@5 1)))) (and (and (= high@5 high@3) (= a@14 a@11)) (and (= i@8 i@6) (= low@5 low@4)))) (and anon33_Then_correct anon33_Else_correct))))))
(let ((anon30_Else_correct  (=> (! (and %lbl%+602 true) :lblpos +602) (=> (<= i@5 high@3) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon31_Then_correct anon31_Else_correct))))))
(let ((anon30_Then_correct  (=> (! (and %lbl%+600 true) :lblpos +600) (=> (not (<= i@5 high@3)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon31_Then_correct anon31_Else_correct))))))
(let ((anon29_Else_correct  (=> (! (and %lbl%+592 true) :lblpos +592) (=> (and (>= pivot (select a@4 i@2)) (= i@4 (+ i@2 1))) (=> (and (and (= i@5 i@4) (= a@9 a@4)) (and (= high@3 high@1) (= low@3 low@1))) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon29_Then_correct  (=> (! (and %lbl%+590 true) :lblpos +590) (=> (> (select a@4 i@2) pivot) (=> (and (and (and (= t@3 (select a@4 i@2)) (= a@7 (store a@4 i@2 (select a@4 high@1)))) (and (= a@8 (store a@7 high@1 t@3)) (= high@2 (- high@1 1)))) (and (and (= i@5 i@2) (= a@9 a@8)) (and (= high@3 high@2) (= low@3 low@1)))) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon28_Else_correct  (=> (! (and %lbl%+588 true) :lblpos +588) (=> (<= pivot (select a@4 i@2)) (and anon29_Then_correct anon29_Else_correct)))))
(let ((anon28_Then_correct  (=> (! (and %lbl%+578 true) :lblpos +578) (=> (and (< (select a@4 i@2) pivot) (= t@2 (select a@4 low@1))) (=> (and (and (and (= a@5 (store a@4 low@1 (select a@4 i@2))) (= a@6 (store a@5 i@2 t@2))) (and (= low@2 (+ low@1 1)) (= i@3 (+ i@2 1)))) (and (and (= i@5 i@3) (= a@9 a@6)) (and (= high@3 high@1) (= low@3 low@2)))) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon27_Else_correct  (=> (! (and %lbl%+569 true) :lblpos +569) (=> (<= i@2 high@1) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon27_Then_correct  (=> (! (and %lbl%+567 true) :lblpos +567) (=> (not (<= i@2 high@1)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+559 true) :lblpos +559) (=> (and (>= pivot (select a i)) (= i@1 (+ i 1))) (=> (and (and (= i@2 i@1) (= a@4 a)) (and (= high@1 high) (= low@1 low))) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+557 true) :lblpos +557) (=> (> (select a i) pivot) (=> (and (and (and (= t@1 (select a i)) (= a@2 (store a i (select a high)))) (and (= a@3 (store a@2 high t@1)) (= high@0 (- high 1)))) (and (and (= i@2 i) (= a@4 a@3)) (and (= high@1 high@0) (= low@1 low)))) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+555 true) :lblpos +555) (=> (<= pivot (select a i)) (and anon26_Then_correct anon26_Else_correct)))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+545 true) :lblpos +545) (=> (and (< (select a i) pivot) (= t@0 (select a low))) (=> (and (and (and (= a@0 (store a low (select a i))) (= a@1 (store a@0 i t@0))) (and (= low@0 (+ low 1)) (= i@0 (+ i 1)))) (and (and (= i@2 i@0) (= a@4 a@1)) (and (= high@1 high) (= low@1 low@0)))) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+536 true) :lblpos +536) (=> (<= i high) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+534 true) :lblpos +534) (=> (not (<= i high)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+1059 true) :lblpos +1059) (=> (>= n 0) (=> (and (and (and (and (and (<= 0 low) (<= low i)) (<= i (+ high 1))) (< high n)) (forall ((k@@4 Int) ) (!  (=> (and (<= 0 k@@4) (< k@@4 low)) (< (select a k@@4) pivot))
 :qid |dutchfla.16:20|
 :skolemid |0|
))) (and (forall ((k@@5 Int) ) (!  (=> (and (<= low k@@5) (< k@@5 i)) (= (select a k@@5) pivot))
 :qid |dutchfla.17:20|
 :skolemid |1|
)) (forall ((k@@6 Int) ) (!  (=> (and (< high k@@6) (< k@@6 n)) (> (select a k@@6) pivot))
 :qid |dutchfla.18:20|
 :skolemid |2|
)))) (and anon24_Then_correct anon24_Else_correct))))))
anon0_correct))))))))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
