(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+873 () Bool)
(declare-fun %lbl%@2058 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun low@5 () Int)
(declare-fun i@8 () Int)
(declare-fun high@5 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@2089 () Bool)
(declare-fun a@14 () (Array Int Int))
(declare-fun pivot () Int)
(declare-fun %lbl%@2119 () Bool)
(declare-fun %lbl%@2148 () Bool)
(declare-fun %lbl%+543 () Bool)
(declare-fun a@9 () (Array Int Int))
(declare-fun i@5 () Int)
(declare-fun i@7 () Int)
(declare-fun high@3 () Int)
(declare-fun low@3 () Int)
(declare-fun %lbl%+541 () Bool)
(declare-fun t@5 () Int)
(declare-fun a@12 () (Array Int Int))
(declare-fun a@13 () (Array Int Int))
(declare-fun high@4 () Int)
(declare-fun %lbl%+539 () Bool)
(declare-fun %lbl%+529 () Bool)
(declare-fun t@4 () Int)
(declare-fun a@10 () (Array Int Int))
(declare-fun a@11 () (Array Int Int))
(declare-fun low@4 () Int)
(declare-fun i@6 () Int)
(declare-fun %lbl%+520 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+518 () Bool)
(declare-fun %lbl%+510 () Bool)
(declare-fun a@4 () (Array Int Int))
(declare-fun i@2 () Int)
(declare-fun i@4 () Int)
(declare-fun high@1 () Int)
(declare-fun low@1 () Int)
(declare-fun %lbl%+508 () Bool)
(declare-fun t@3 () Int)
(declare-fun a@7 () (Array Int Int))
(declare-fun a@8 () (Array Int Int))
(declare-fun high@2 () Int)
(declare-fun %lbl%+506 () Bool)
(declare-fun %lbl%+496 () Bool)
(declare-fun t@2 () Int)
(declare-fun a@5 () (Array Int Int))
(declare-fun a@6 () (Array Int Int))
(declare-fun low@2 () Int)
(declare-fun i@3 () Int)
(declare-fun %lbl%+487 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+485 () Bool)
(declare-fun %lbl%+477 () Bool)
(declare-fun a () (Array Int Int))
(declare-fun i () Int)
(declare-fun i@1 () Int)
(declare-fun high () Int)
(declare-fun low () Int)
(declare-fun %lbl%+475 () Bool)
(declare-fun t@1 () Int)
(declare-fun a@2 () (Array Int Int))
(declare-fun a@3 () (Array Int Int))
(declare-fun high@0 () Int)
(declare-fun %lbl%+473 () Bool)
(declare-fun %lbl%+463 () Bool)
(declare-fun t@0 () Int)
(declare-fun a@0 () (Array Int Int))
(declare-fun a@1 () (Array Int Int))
(declare-fun low@0 () Int)
(declare-fun i@0 () Int)
(declare-fun %lbl%+454 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+452 () Bool)
(declare-fun %lbl%+878 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+873 true) :lblpos +873) (and (! (or %lbl%@2058  (or bad@2 (and (and (and (<= 0 low@5) (<= low@5 i@8)) (<= i@8 (+ high@5 1))) (< high@5 n)))) :lblneg @2058) (=> (or bad@2 (and (and (and (<= 0 low@5) (<= low@5 i@8)) (<= i@8 (+ high@5 1))) (< high@5 n))) (and (! (or %lbl%@2089  (or bad@2 (forall ((k Int) ) (!  (=> (and (<= 0 k) (< k low@5)) (< (select a@14 k) pivot))
 :qid |dutchfla.21:26|
 :skolemid |3|
)))) :lblneg @2089) (=> (or bad@2 (forall ((k@@0 Int) ) (!  (=> (and (<= 0 k@@0) (< k@@0 low@5)) (< (select a@14 k@@0) pivot))
 :qid |dutchfla.21:26|
 :skolemid |3|
))) (and (! (or %lbl%@2119  (or bad@2 (forall ((k@@1 Int) ) (!  (=> (and (<= low@5 k@@1) (< k@@1 i@8)) (= (select a@14 k@@1) pivot))
 :qid |dutchfla.22:26|
 :skolemid |4|
)))) :lblneg @2119) (=> (or bad@2 (forall ((k@@2 Int) ) (!  (=> (and (<= low@5 k@@2) (< k@@2 i@8)) (= (select a@14 k@@2) pivot))
 :qid |dutchfla.22:26|
 :skolemid |4|
))) (! (or %lbl%@2148  (or bad@2 (forall ((k@@3 Int) ) (!  (=> (and (< high@5 k@@3) (< k@@3 n)) (> (select a@14 k@@3) pivot))
 :qid |dutchfla.23:26|
 :skolemid |5|
)))) :lblneg @2148))))))))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+543 true) :lblpos +543) (=> (and (>= pivot (select a@9 i@5)) (= i@7 (+ i@5 1))) (=> (and (and (= high@5 high@3) (= a@14 a@9)) (and (= i@8 i@7) (= low@5 low@3))) GeneratedUnifiedExit_correct)))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+541 true) :lblpos +541) (=> (> (select a@9 i@5) pivot) (=> (and (and (and (= t@5 (select a@9 i@5)) (= a@12 (store a@9 i@5 (select a@9 high@3)))) (and (= a@13 (store a@12 high@3 t@5)) (= high@4 (- high@3 1)))) (and (and (= high@5 high@4) (= a@14 a@13)) (and (= i@8 i@5) (= low@5 low@3)))) GeneratedUnifiedExit_correct)))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+539 true) :lblpos +539) (=> (<= pivot (select a@9 i@5)) (and anon26_Then_correct anon26_Else_correct)))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+529 true) :lblpos +529) (=> (and (< (select a@9 i@5) pivot) (= t@4 (select a@9 low@3))) (=> (and (and (and (= a@10 (store a@9 low@3 (select a@9 i@5))) (= a@11 (store a@10 i@5 t@4))) (and (= low@4 (+ low@3 1)) (= i@6 (+ i@5 1)))) (and (and (= high@5 high@3) (= a@14 a@11)) (and (= i@8 i@6) (= low@5 low@4)))) GeneratedUnifiedExit_correct)))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+520 true) :lblpos +520) (=> (<= i@5 high@3) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+518 true) :lblpos +518) (=> (not (<= i@5 high@3)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+510 true) :lblpos +510) (=> (and (>= pivot (select a@4 i@2)) (= i@4 (+ i@2 1))) (=> (and (and (= i@5 i@4) (= a@9 a@4)) (and (= high@3 high@1) (= low@3 low@1))) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+508 true) :lblpos +508) (=> (> (select a@4 i@2) pivot) (=> (and (and (and (= t@3 (select a@4 i@2)) (= a@7 (store a@4 i@2 (select a@4 high@1)))) (and (= a@8 (store a@7 high@1 t@3)) (= high@2 (- high@1 1)))) (and (and (= i@5 i@2) (= a@9 a@8)) (and (= high@3 high@2) (= low@3 low@1)))) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+506 true) :lblpos +506) (=> (<= pivot (select a@4 i@2)) (and anon23_Then_correct anon23_Else_correct)))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+496 true) :lblpos +496) (=> (and (< (select a@4 i@2) pivot) (= t@2 (select a@4 low@1))) (=> (and (and (and (= a@5 (store a@4 low@1 (select a@4 i@2))) (= a@6 (store a@5 i@2 t@2))) (and (= low@2 (+ low@1 1)) (= i@3 (+ i@2 1)))) (and (and (= i@5 i@3) (= a@9 a@6)) (and (= high@3 high@1) (= low@3 low@2)))) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+487 true) :lblpos +487) (=> (<= i@2 high@1) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+485 true) :lblpos +485) (=> (not (<= i@2 high@1)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+477 true) :lblpos +477) (=> (and (>= pivot (select a i)) (= i@1 (+ i 1))) (=> (and (and (= i@2 i@1) (= a@4 a)) (and (= high@1 high) (= low@1 low))) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+475 true) :lblpos +475) (=> (> (select a i) pivot) (=> (and (and (and (= t@1 (select a i)) (= a@2 (store a i (select a high)))) (and (= a@3 (store a@2 high t@1)) (= high@0 (- high 1)))) (and (and (= i@2 i) (= a@4 a@3)) (and (= high@1 high@0) (= low@1 low)))) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon19_Else_correct  (=> (! (and %lbl%+473 true) :lblpos +473) (=> (<= pivot (select a i)) (and anon20_Then_correct anon20_Else_correct)))))
(let ((anon19_Then_correct  (=> (! (and %lbl%+463 true) :lblpos +463) (=> (and (< (select a i) pivot) (= t@0 (select a low))) (=> (and (and (and (= a@0 (store a low (select a i))) (= a@1 (store a@0 i t@0))) (and (= low@0 (+ low 1)) (= i@0 (+ i 1)))) (and (and (= i@2 i@0) (= a@4 a@1)) (and (= high@1 high) (= low@1 low@0)))) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon18_Else_correct  (=> (! (and %lbl%+454 true) :lblpos +454) (=> (<= i high) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon19_Then_correct anon19_Else_correct))))))
(let ((anon18_Then_correct  (=> (! (and %lbl%+452 true) :lblpos +452) (=> (not (<= i high)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon19_Then_correct anon19_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+878 true) :lblpos +878) (=> (>= n 0) (=> (and (and (and (and (and (<= 0 low) (<= low i)) (<= i (+ high 1))) (< high n)) (forall ((k@@4 Int) ) (!  (=> (and (<= 0 k@@4) (< k@@4 low)) (< (select a k@@4) pivot))
 :qid |dutchfla.16:20|
 :skolemid |0|
))) (and (forall ((k@@5 Int) ) (!  (=> (and (<= low k@@5) (< k@@5 i)) (= (select a k@@5) pivot))
 :qid |dutchfla.17:20|
 :skolemid |1|
)) (forall ((k@@6 Int) ) (!  (=> (and (< high k@@6) (< k@@6 n)) (> (select a k@@6) pivot))
 :qid |dutchfla.18:20|
 :skolemid |2|
)))) (and anon18_Then_correct anon18_Else_correct))))))
anon0_correct))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
