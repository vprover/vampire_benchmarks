(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+214 () Bool)
(declare-fun i@2 () Int)
(declare-fun i@1 () Int)
(declare-fun %lbl%@650 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun max@5 () Int)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%+212 () Bool)
(declare-fun max@3 () Int)
(declare-fun %lbl%+210 () Bool)
(declare-fun max@4 () Int)
(declare-fun %lbl%+201 () Bool)
(declare-fun n () Int)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+199 () Bool)
(declare-fun %lbl%+197 () Bool)
(declare-fun i@0 () Int)
(declare-fun %lbl%+191 () Bool)
(declare-fun max@1 () Int)
(declare-fun %lbl%+189 () Bool)
(declare-fun max@2 () Int)
(declare-fun %lbl%+180 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+178 () Bool)
(declare-fun %lbl%+176 () Bool)
(declare-fun i () Int)
(declare-fun %lbl%+170 () Bool)
(declare-fun q@max () Int)
(declare-fun %lbl%+168 () Bool)
(declare-fun max@0 () Int)
(declare-fun %lbl%+159 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+157 () Bool)
(declare-fun %lbl%+295 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((anon12_correct  (=> (! (and %lbl%+214 true) :lblpos +214) (=> (= i@2 (+ i@1 1)) (! (or %lbl%@650  (or bad@2 (forall ((j Int) ) (!  (=> (and (>= j 0) (< j i@2)) (>= max@5 (select a j)))
 :qid |maximum3.17:26|
 :skolemid |1|
)))) :lblneg @650)))))
(let ((anon18_Else_correct  (=> (! (and %lbl%+212 true) :lblpos +212) (=> (and (<= (select a i@1) max@3) (= max@5 max@3)) anon12_correct))))
(let ((anon18_Then_correct  (=> (! (and %lbl%+210 true) :lblpos +210) (=> (< max@3 (select a i@1)) (=> (and (= max@4 (select a i@1)) (= max@5 max@4)) anon12_correct)))))
(let ((anon17_Else_correct  (=> (! (and %lbl%+201 true) :lblpos +201) (=> (< i@1 n) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon17_Then_correct  (=> (! (and %lbl%+199 true) :lblpos +199) (=> (not (< i@1 n)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon8_correct  (=> (! (and %lbl%+197 true) :lblpos +197) (=> (= i@1 (+ i@0 1)) (and anon17_Then_correct anon17_Else_correct)))))
(let ((anon16_Else_correct  (=> (! (and %lbl%+191 true) :lblpos +191) (=> (and (<= (select a i@0) max@1) (= max@3 max@1)) anon8_correct))))
(let ((anon16_Then_correct  (=> (! (and %lbl%+189 true) :lblpos +189) (=> (< max@1 (select a i@0)) (=> (and (= max@2 (select a i@0)) (= max@3 max@2)) anon8_correct)))))
(let ((anon15_Else_correct  (=> (! (and %lbl%+180 true) :lblpos +180) (=> (< i@0 n) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon15_Then_correct  (=> (! (and %lbl%+178 true) :lblpos +178) (=> (not (< i@0 n)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon4_correct  (=> (! (and %lbl%+176 true) :lblpos +176) (=> (= i@0 (+ i 1)) (and anon15_Then_correct anon15_Else_correct)))))
(let ((anon14_Else_correct  (=> (! (and %lbl%+170 true) :lblpos +170) (=> (and (<= (select a i) q@max) (= max@1 q@max)) anon4_correct))))
(let ((anon14_Then_correct  (=> (! (and %lbl%+168 true) :lblpos +168) (=> (< q@max (select a i)) (=> (and (= max@0 (select a i)) (= max@1 max@0)) anon4_correct)))))
(let ((anon13_Else_correct  (=> (! (and %lbl%+159 true) :lblpos +159) (=> (< i n) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon14_Then_correct anon14_Else_correct))))))
(let ((anon13_Then_correct  (=> (! (and %lbl%+157 true) :lblpos +157) (=> (not (< i n)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon14_Then_correct anon14_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+295 true) :lblpos +295) (=> (and (> n 0) (forall ((j@@0 Int) ) (!  (=> (and (>= j@@0 0) (< j@@0 i)) (>= q@max (select a j@@0)))
 :qid |maximum3.15:20|
 :skolemid |0|
))) (and anon13_Then_correct anon13_Else_correct)))))
anon0_correct))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
