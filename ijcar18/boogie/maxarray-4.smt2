(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+595 () Bool)
(declare-fun %lbl%@1371 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun x@7 () Int)
(declare-fun y@7 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1392 () Bool)
(declare-fun m@0 () Int)
(declare-fun %lbl%@1405 () Bool)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%@1439 () Bool)
(declare-fun %lbl%+392 () Bool)
(declare-fun y@5 () Int)
(declare-fun x@5 () Int)
(declare-fun y@6 () Int)
(declare-fun %lbl%+390 () Bool)
(declare-fun x@6 () Int)
(declare-fun %lbl%+381 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+379 () Bool)
(declare-fun %lbl%+371 () Bool)
(declare-fun y@3 () Int)
(declare-fun x@3 () Int)
(declare-fun y@4 () Int)
(declare-fun %lbl%+369 () Bool)
(declare-fun x@4 () Int)
(declare-fun %lbl%+360 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+358 () Bool)
(declare-fun %lbl%+350 () Bool)
(declare-fun y@1 () Int)
(declare-fun x@1 () Int)
(declare-fun y@2 () Int)
(declare-fun %lbl%+348 () Bool)
(declare-fun x@2 () Int)
(declare-fun %lbl%+339 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+337 () Bool)
(declare-fun %lbl%+329 () Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun y@0 () Int)
(declare-fun %lbl%+327 () Bool)
(declare-fun x@0 () Int)
(declare-fun %lbl%+318 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+316 () Bool)
(declare-fun %lbl%+599 () Bool)
(declare-fun m () Int)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+595 true) :lblpos +595) (and (! (or %lbl%@1371  (or bad@3 (and (and (<= 0 x@7) (<= x@7 y@7)) (< y@7 n)))) :lblneg @1371) (=> (or bad@3 (and (and (<= 0 x@7) (<= x@7 y@7)) (< y@7 n))) (and (! (or %lbl%@1392  (or bad@3 (or (= m@0 x@7) (= m@0 y@7)))) :lblneg @1392) (=> (or bad@3 (or (= m@0 x@7) (= m@0 y@7))) (and (! (or %lbl%@1405  (or bad@3 (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i x@7)) (<= (select a i) (select a m@0)))
 :qid |maxarray.19:26|
 :skolemid |2|
)))) :lblneg @1405) (=> (or bad@3 (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 x@7)) (<= (select a i@@0) (select a m@0)))
 :qid |maxarray.19:26|
 :skolemid |2|
))) (! (or %lbl%@1439  (or bad@3 (forall ((i@@1 Int) ) (!  (=> (and (< y@7 i@@1) (< i@@1 n)) (<= (select a i@@1) (select a m@0)))
 :qid |maxarray.20:26|
 :skolemid |3|
)))) :lblneg @1439))))))))))
(let ((anon27_Else_correct  (=> (! (and %lbl%+392 true) :lblpos +392) (=> (< (select a y@5) (select a x@5)) (=> (and (and (= y@6 (- y@5 1)) (= x@7 x@5)) (and (= y@7 y@6) (= m@0 x@5))) GeneratedUnifiedExit_correct)))))
(let ((anon27_Then_correct  (=> (! (and %lbl%+390 true) :lblpos +390) (=> (<= (select a x@5) (select a y@5)) (=> (and (and (= x@6 (+ x@5 1)) (= x@7 x@6)) (and (= y@7 y@5) (= m@0 y@5))) GeneratedUnifiedExit_correct)))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+381 true) :lblpos +381) (=> (not (= x@5 y@5)) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+379 true) :lblpos +379) (=> (not (not (= x@5 y@5))) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+371 true) :lblpos +371) (=> (and (and (< (select a y@3) (select a x@3)) (= y@4 (- y@3 1))) (and (= y@5 y@4) (= x@5 x@3))) (and anon26_Then_correct anon26_Else_correct)))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+369 true) :lblpos +369) (=> (and (and (<= (select a x@3) (select a y@3)) (= x@4 (+ x@3 1))) (and (= y@5 y@3) (= x@5 x@4))) (and anon26_Then_correct anon26_Else_correct)))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+360 true) :lblpos +360) (=> (not (= x@3 y@3)) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+358 true) :lblpos +358) (=> (not (not (= x@3 y@3))) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+350 true) :lblpos +350) (=> (and (and (< (select a y@1) (select a x@1)) (= y@2 (- y@1 1))) (and (= x@3 x@1) (= y@3 y@2))) (and anon24_Then_correct anon24_Else_correct)))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+348 true) :lblpos +348) (=> (and (and (<= (select a x@1) (select a y@1)) (= x@2 (+ x@1 1))) (and (= x@3 x@2) (= y@3 y@1))) (and anon24_Then_correct anon24_Else_correct)))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+339 true) :lblpos +339) (=> (not (= x@1 y@1)) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon23_Then_correct anon23_Else_correct))))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+337 true) :lblpos +337) (=> (not (not (= x@1 y@1))) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon23_Then_correct anon23_Else_correct))))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+329 true) :lblpos +329) (=> (and (and (< (select a y) (select a x)) (= y@0 (- y 1))) (and (= y@1 y@0) (= x@1 x))) (and anon22_Then_correct anon22_Else_correct)))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+327 true) :lblpos +327) (=> (and (and (<= (select a x) (select a y)) (= x@0 (+ x 1))) (and (= y@1 y) (= x@1 x@0))) (and anon22_Then_correct anon22_Else_correct)))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+318 true) :lblpos +318) (=> (not (= x y)) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+316 true) :lblpos +316) (=> (not (not (= x y))) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon21_Then_correct anon21_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+599 true) :lblpos +599) (=> (> n 0) (=> (and (and (and (and (<= 0 x) (<= x y)) (< y n)) (or (= m x) (= m y))) (and (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 x)) (<= (select a i@@2) (select a m)))
 :qid |maxarray.14:20|
 :skolemid |0|
)) (forall ((i@@3 Int) ) (!  (=> (and (< y i@@3) (< i@@3 n)) (<= (select a i@@3) (select a m)))
 :qid |maxarray.15:20|
 :skolemid |1|
)))) (and anon20_Then_correct anon20_Else_correct))))))
anon0_correct))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
