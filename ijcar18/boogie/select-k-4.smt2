(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+527 () Bool)
(declare-fun j@3 () Int)
(declare-fun j@2 () Int)
(declare-fun %lbl%@2097 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun i () Int)
(declare-fun n () Int)
(declare-fun %lbl%@2116 () Bool)
(declare-fun a@11 () (Array Int Int))
(declare-fun minValue@7 () Int)
(declare-fun %lbl%@2127 () Bool)
(declare-fun %lbl%@2160 () Bool)
(declare-fun %lbl%+525 () Bool)
(declare-fun minValue@5 () Int)
(declare-fun a@8 () (Array Int Int))
(declare-fun %lbl%+523 () Bool)
(declare-fun minValue@6 () Int)
(declare-fun t@3 () Int)
(declare-fun a@9 () (Array Int Int))
(declare-fun a@10 () (Array Int Int))
(declare-fun %lbl%+514 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+512 () Bool)
(declare-fun %lbl%+510 () Bool)
(declare-fun j@1 () Int)
(declare-fun %lbl%+504 () Bool)
(declare-fun minValue@3 () Int)
(declare-fun a@5 () (Array Int Int))
(declare-fun %lbl%+502 () Bool)
(declare-fun minValue@4 () Int)
(declare-fun t@2 () Int)
(declare-fun a@6 () (Array Int Int))
(declare-fun a@7 () (Array Int Int))
(declare-fun %lbl%+493 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+491 () Bool)
(declare-fun %lbl%+489 () Bool)
(declare-fun j@0 () Int)
(declare-fun %lbl%+483 () Bool)
(declare-fun minValue@1 () Int)
(declare-fun a@2 () (Array Int Int))
(declare-fun %lbl%+481 () Bool)
(declare-fun minValue@2 () Int)
(declare-fun t@1 () Int)
(declare-fun a@3 () (Array Int Int))
(declare-fun a@4 () (Array Int Int))
(declare-fun %lbl%+472 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+470 () Bool)
(declare-fun %lbl%+468 () Bool)
(declare-fun j () Int)
(declare-fun %lbl%+462 () Bool)
(declare-fun minValue () Int)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%+460 () Bool)
(declare-fun minValue@0 () Int)
(declare-fun t@0 () Int)
(declare-fun a@0 () (Array Int Int))
(declare-fun a@1 () (Array Int Int))
(declare-fun %lbl%+451 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+449 () Bool)
(declare-fun %lbl%+926 () Bool)
(declare-fun k () Int)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((anon16_correct  (=> (! (and %lbl%+527 true) :lblpos +527) (=> (= j@3 (+ j@2 1)) (and (! (or %lbl%@2097  (or bad@3 (and (<= (+ i 1) j@3) (<= j@3 n)))) :lblneg @2097) (=> (or bad@3 (and (<= (+ i 1) j@3) (<= j@3 n))) (and (! (or %lbl%@2116  (or bad@3 (= (select a@11 i) minValue@7))) :lblneg @2116) (=> (or bad@3 (= (select a@11 i) minValue@7)) (and (! (or %lbl%@2127  (or bad@3 (forall ((w Int) ) (!  (=> (and (< i w) (< w j@3)) (<= (select a@11 i) (select a@11 w)))
 :qid |selectk4.26:26|
 :skolemid |4|
)))) :lblneg @2127) (=> (or bad@3 (forall ((w@@0 Int) ) (!  (=> (and (< i w@@0) (< w@@0 j@3)) (<= (select a@11 i) (select a@11 w@@0)))
 :qid |selectk4.26:26|
 :skolemid |4|
))) (! (or %lbl%@2160  (or bad@3 (forall ((v Int) (w@@1 Int) ) (!  (=> (and (and (and (<= 0 v) (< v i)) (<= i w@@1)) (< w@@1 n)) (<= (select a@11 v) (select a@11 w@@1)))
 :qid |selectk4.27:26|
 :skolemid |5|
)))) :lblneg @2160)))))))))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+525 true) :lblpos +525) (=> (<= minValue@5 (select a@8 j@2)) (=> (and (= minValue@7 minValue@5) (= a@11 a@8)) anon16_correct)))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+523 true) :lblpos +523) (=> (< (select a@8 j@2) minValue@5) (=> (and (= minValue@6 (select a@8 j@2)) (= t@3 (select a@8 i))) (=> (and (and (= a@9 (store a@8 i (select a@8 j@2))) (= a@10 (store a@9 j@2 t@3))) (and (= minValue@7 minValue@6) (= a@11 a@10))) anon16_correct))))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+514 true) :lblpos +514) (=> (< j@2 n) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+512 true) :lblpos +512) (=> (not (< j@2 n)) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon12_correct  (=> (! (and %lbl%+510 true) :lblpos +510) (=> (= j@2 (+ j@1 1)) (and anon23_Then_correct anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+504 true) :lblpos +504) (=> (<= minValue@3 (select a@5 j@1)) (=> (and (= a@8 a@5) (= minValue@5 minValue@3)) anon12_correct)))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+502 true) :lblpos +502) (=> (< (select a@5 j@1) minValue@3) (=> (and (= minValue@4 (select a@5 j@1)) (= t@2 (select a@5 i))) (=> (and (and (= a@6 (store a@5 i (select a@5 j@1))) (= a@7 (store a@6 j@1 t@2))) (and (= a@8 a@7) (= minValue@5 minValue@4))) anon12_correct))))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+493 true) :lblpos +493) (=> (< j@1 n) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+491 true) :lblpos +491) (=> (not (< j@1 n)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon8_correct  (=> (! (and %lbl%+489 true) :lblpos +489) (=> (= j@1 (+ j@0 1)) (and anon21_Then_correct anon21_Else_correct)))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+483 true) :lblpos +483) (=> (<= minValue@1 (select a@2 j@0)) (=> (and (= minValue@3 minValue@1) (= a@5 a@2)) anon8_correct)))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+481 true) :lblpos +481) (=> (< (select a@2 j@0) minValue@1) (=> (and (= minValue@2 (select a@2 j@0)) (= t@1 (select a@2 i))) (=> (and (and (= a@3 (store a@2 i (select a@2 j@0))) (= a@4 (store a@3 j@0 t@1))) (and (= minValue@3 minValue@2) (= a@5 a@4))) anon8_correct))))))
(let ((anon19_Else_correct  (=> (! (and %lbl%+472 true) :lblpos +472) (=> (< j@0 n) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon20_Then_correct anon20_Else_correct))))))
(let ((anon19_Then_correct  (=> (! (and %lbl%+470 true) :lblpos +470) (=> (not (< j@0 n)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon20_Then_correct anon20_Else_correct))))))
(let ((anon4_correct  (=> (! (and %lbl%+468 true) :lblpos +468) (=> (= j@0 (+ j 1)) (and anon19_Then_correct anon19_Else_correct)))))
(let ((anon18_Else_correct  (=> (! (and %lbl%+462 true) :lblpos +462) (=> (<= minValue (select a j)) (=> (and (= minValue@1 minValue) (= a@2 a)) anon4_correct)))))
(let ((anon18_Then_correct  (=> (! (and %lbl%+460 true) :lblpos +460) (=> (< (select a j) minValue) (=> (and (= minValue@0 (select a j)) (= t@0 (select a i))) (=> (and (and (= a@0 (store a i (select a j))) (= a@1 (store a@0 j t@0))) (and (= minValue@1 minValue@0) (= a@2 a@1))) anon4_correct))))))
(let ((anon17_Else_correct  (=> (! (and %lbl%+451 true) :lblpos +451) (=> (< j n) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon17_Then_correct  (=> (! (and %lbl%+449 true) :lblpos +449) (=> (not (< j n)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+926 true) :lblpos +926) (=> (> n 0) (=> (and (<= 0 k) (< k n)) (=> (and (and (<= 0 i) (<= i (+ k 1))) (and (=> (> i 0) (forall ((v@@0 Int) ) (!  (=> (and (<= 0 v@@0) (< v@@0 (- i 1))) (<= (select a v@@0) (select a (- i 1))))
 :qid |selectk4.16:30|
 :skolemid |0|
))) (=> (> i 0) (forall ((w@@2 Int) ) (!  (=> (and (< (- i 1) w@@2) (< w@@2 n)) (<= (select a (- i 1)) (select a w@@2)))
 :qid |selectk4.17:30|
 :skolemid |1|
))))) (=> (and (and (and (<= (+ i 1) j) (<= j n)) (= (select a i) minValue)) (and (forall ((w@@3 Int) ) (!  (=> (and (< i w@@3) (< w@@3 j)) (<= (select a i) (select a w@@3)))
 :qid |selectk4.21:20|
 :skolemid |2|
)) (forall ((v@@1 Int) (w@@4 Int) ) (!  (=> (and (and (and (<= 0 v@@1) (< v@@1 i)) (<= i w@@4)) (< w@@4 n)) (<= (select a v@@1) (select a w@@4)))
 :qid |selectk4.22:20|
 :skolemid |3|
)))) (and anon17_Then_correct anon17_Else_correct))))))))
anon0_correct)))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
