(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+772 () Bool)
(declare-fun %lbl%@1796 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun i@11 () Int)
(declare-fun j@11 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1825 () Bool)
(declare-fun a@11 () (Array Int Bool))
(declare-fun %lbl%@1853 () Bool)
(declare-fun %lbl%+504 () Bool)
(declare-fun a@8 () (Array Int Bool))
(declare-fun j@8 () Int)
(declare-fun t@3 () Bool)
(declare-fun i@8 () Int)
(declare-fun a@9 () (Array Int Bool))
(declare-fun a@10 () (Array Int Bool))
(declare-fun i@10 () Int)
(declare-fun j@10 () Int)
(declare-fun %lbl%+502 () Bool)
(declare-fun j@9 () Int)
(declare-fun %lbl%+500 () Bool)
(declare-fun %lbl%+491 () Bool)
(declare-fun i@9 () Int)
(declare-fun %lbl%+483 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+481 () Bool)
(declare-fun %lbl%+473 () Bool)
(declare-fun a@5 () (Array Int Bool))
(declare-fun j@5 () Int)
(declare-fun t@2 () Bool)
(declare-fun i@5 () Int)
(declare-fun a@6 () (Array Int Bool))
(declare-fun a@7 () (Array Int Bool))
(declare-fun i@7 () Int)
(declare-fun j@7 () Int)
(declare-fun %lbl%+471 () Bool)
(declare-fun j@6 () Int)
(declare-fun %lbl%+469 () Bool)
(declare-fun %lbl%+460 () Bool)
(declare-fun i@6 () Int)
(declare-fun %lbl%+452 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+450 () Bool)
(declare-fun %lbl%+442 () Bool)
(declare-fun a@2 () (Array Int Bool))
(declare-fun j@2 () Int)
(declare-fun t@1 () Bool)
(declare-fun i@2 () Int)
(declare-fun a@3 () (Array Int Bool))
(declare-fun a@4 () (Array Int Bool))
(declare-fun i@4 () Int)
(declare-fun j@4 () Int)
(declare-fun %lbl%+440 () Bool)
(declare-fun j@3 () Int)
(declare-fun %lbl%+438 () Bool)
(declare-fun %lbl%+429 () Bool)
(declare-fun i@3 () Int)
(declare-fun %lbl%+421 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+419 () Bool)
(declare-fun %lbl%+411 () Bool)
(declare-fun a () (Array Int Bool))
(declare-fun j () Int)
(declare-fun t@0 () Bool)
(declare-fun i () Int)
(declare-fun a@0 () (Array Int Bool))
(declare-fun a@1 () (Array Int Bool))
(declare-fun i@1 () Int)
(declare-fun j@1 () Int)
(declare-fun %lbl%+409 () Bool)
(declare-fun j@0 () Int)
(declare-fun %lbl%+407 () Bool)
(declare-fun %lbl%+398 () Bool)
(declare-fun i@0 () Int)
(declare-fun %lbl%+390 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+388 () Bool)
(declare-fun %lbl%+777 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+772 true) :lblpos +772) (and (! (or %lbl%@1796  (or bad@3 (and (and (<= 0 i@11) (<= i@11 (+ j@11 1))) (<= (+ j@11 1) n)))) :lblneg @1796) (=> (or bad@3 (and (and (<= 0 i@11) (<= i@11 (+ j@11 1))) (<= (+ j@11 1) n))) (and (! (or %lbl%@1825  (or bad@3 (forall ((m Int) ) (!  (=> (and (<= 0 m) (< m i@11)) (not (select a@11 m)))
 :qid |twowayso.16:26|
 :skolemid |2|
)))) :lblneg @1825) (=> (or bad@3 (forall ((m@@0 Int) ) (!  (=> (and (<= 0 m@@0) (< m@@0 i@11)) (not (select a@11 m@@0)))
 :qid |twowayso.16:26|
 :skolemid |2|
))) (! (or %lbl%@1853  (or bad@3 (forall ((k Int) ) (!  (=> (and (< j@11 k) (< k n)) (select a@11 k))
 :qid |twowayso.17:26|
 :skolemid |3|
)))) :lblneg @1853))))))))
(let ((anon35_Else_correct  (=> (! (and %lbl%+504 true) :lblpos +504) (=> (not (select a@8 j@8)) (=> (and (and (and (and (=> t@3 (select a@8 i@8)) (=> (select a@8 i@8) t@3)) (= a@9 (store a@8 i@8 (select a@8 j@8)))) (and (= a@10 (store a@9 j@8 t@3)) (= i@10 (+ i@8 1)))) (and (and (= j@10 (- j@8 1)) (= j@11 j@10)) (and (= i@11 i@10) (= a@11 a@10)))) GeneratedUnifiedExit_correct)))))
(let ((anon35_Then_correct  (=> (! (and %lbl%+502 true) :lblpos +502) (=> (select a@8 j@8) (=> (and (and (= j@9 (- j@8 1)) (= j@11 j@9)) (and (= i@11 i@8) (= a@11 a@8))) GeneratedUnifiedExit_correct)))))
(let ((anon34_Else_correct  (=> (! (and %lbl%+500 true) :lblpos +500) (=> (select a@8 i@8) (and anon35_Then_correct anon35_Else_correct)))))
(let ((anon34_Then_correct  (=> (! (and %lbl%+491 true) :lblpos +491) (=> (not (select a@8 i@8)) (=> (and (and (= i@9 (+ i@8 1)) (= j@11 j@8)) (and (= i@11 i@9) (= a@11 a@8))) GeneratedUnifiedExit_correct)))))
(let ((anon33_Else_correct  (=> (! (and %lbl%+483 true) :lblpos +483) (=> (<= i@8 j@8) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon34_Then_correct anon34_Else_correct))))))
(let ((anon33_Then_correct  (=> (! (and %lbl%+481 true) :lblpos +481) (=> (not (<= i@8 j@8)) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon34_Then_correct anon34_Else_correct))))))
(let ((anon32_Else_correct  (=> (! (and %lbl%+473 true) :lblpos +473) (=> (not (select a@5 j@5)) (=> (and (and (and (and (=> t@2 (select a@5 i@5)) (=> (select a@5 i@5) t@2)) (= a@6 (store a@5 i@5 (select a@5 j@5)))) (and (= a@7 (store a@6 j@5 t@2)) (= i@7 (+ i@5 1)))) (and (and (= j@7 (- j@5 1)) (= a@8 a@7)) (and (= i@8 i@7) (= j@8 j@7)))) (and anon33_Then_correct anon33_Else_correct))))))
(let ((anon32_Then_correct  (=> (! (and %lbl%+471 true) :lblpos +471) (=> (select a@5 j@5) (=> (and (and (= j@6 (- j@5 1)) (= a@8 a@5)) (and (= i@8 i@5) (= j@8 j@6))) (and anon33_Then_correct anon33_Else_correct))))))
(let ((anon31_Else_correct  (=> (! (and %lbl%+469 true) :lblpos +469) (=> (select a@5 i@5) (and anon32_Then_correct anon32_Else_correct)))))
(let ((anon31_Then_correct  (=> (! (and %lbl%+460 true) :lblpos +460) (=> (not (select a@5 i@5)) (=> (and (and (= i@6 (+ i@5 1)) (= a@8 a@5)) (and (= i@8 i@6) (= j@8 j@5))) (and anon33_Then_correct anon33_Else_correct))))))
(let ((anon30_Else_correct  (=> (! (and %lbl%+452 true) :lblpos +452) (=> (<= i@5 j@5) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon31_Then_correct anon31_Else_correct))))))
(let ((anon30_Then_correct  (=> (! (and %lbl%+450 true) :lblpos +450) (=> (not (<= i@5 j@5)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon31_Then_correct anon31_Else_correct))))))
(let ((anon29_Else_correct  (=> (! (and %lbl%+442 true) :lblpos +442) (=> (not (select a@2 j@2)) (=> (and (and (and (and (=> t@1 (select a@2 i@2)) (=> (select a@2 i@2) t@1)) (= a@3 (store a@2 i@2 (select a@2 j@2)))) (and (= a@4 (store a@3 j@2 t@1)) (= i@4 (+ i@2 1)))) (and (and (= j@4 (- j@2 1)) (= j@5 j@4)) (and (= i@5 i@4) (= a@5 a@4)))) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon29_Then_correct  (=> (! (and %lbl%+440 true) :lblpos +440) (=> (select a@2 j@2) (=> (and (and (= j@3 (- j@2 1)) (= j@5 j@3)) (and (= i@5 i@2) (= a@5 a@2))) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon28_Else_correct  (=> (! (and %lbl%+438 true) :lblpos +438) (=> (select a@2 i@2) (and anon29_Then_correct anon29_Else_correct)))))
(let ((anon28_Then_correct  (=> (! (and %lbl%+429 true) :lblpos +429) (=> (not (select a@2 i@2)) (=> (and (and (= i@3 (+ i@2 1)) (= j@5 j@2)) (and (= i@5 i@3) (= a@5 a@2))) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon27_Else_correct  (=> (! (and %lbl%+421 true) :lblpos +421) (=> (<= i@2 j@2) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon27_Then_correct  (=> (! (and %lbl%+419 true) :lblpos +419) (=> (not (<= i@2 j@2)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+411 true) :lblpos +411) (=> (not (select a j)) (=> (and (and (and (and (=> t@0 (select a i)) (=> (select a i) t@0)) (= a@0 (store a i (select a j)))) (and (= a@1 (store a@0 j t@0)) (= i@1 (+ i 1)))) (and (and (= j@1 (- j 1)) (= a@2 a@1)) (and (= i@2 i@1) (= j@2 j@1)))) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+409 true) :lblpos +409) (=> (select a j) (=> (and (and (= j@0 (- j 1)) (= a@2 a)) (and (= i@2 i) (= j@2 j@0))) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+407 true) :lblpos +407) (=> (select a i) (and anon26_Then_correct anon26_Else_correct)))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+398 true) :lblpos +398) (=> (not (select a i)) (=> (and (and (= i@0 (+ i 1)) (= a@2 a)) (and (= i@2 i@0) (= j@2 j))) (and anon27_Then_correct anon27_Else_correct))))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+390 true) :lblpos +390) (=> (<= i j) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+388 true) :lblpos +388) (=> (not (<= i j)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon25_Then_correct anon25_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+777 true) :lblpos +777) (=> (> n 0) (=> (and (and (and (<= 0 i) (<= i (+ j 1))) (<= (+ j 1) n)) (and (forall ((m@@1 Int) ) (!  (=> (and (<= 0 m@@1) (< m@@1 i)) (not (select a m@@1)))
 :qid |twowayso.12:20|
 :skolemid |0|
)) (forall ((k@@0 Int) ) (!  (=> (and (< j k@@0) (< k@@0 n)) (select a k@@0))
 :qid |twowayso.13:20|
 :skolemid |1|
)))) (and anon24_Then_correct anon24_Else_correct))))))
anon0_correct))))))))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
