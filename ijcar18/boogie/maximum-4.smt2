(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+260 () Bool)
(declare-fun i@3 () Int)
(declare-fun i@2 () Int)
(declare-fun %lbl%@787 () Bool)
(declare-fun bad@3 () Bool)
(declare-fun max@7 () Int)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%+258 () Bool)
(declare-fun max@5 () Int)
(declare-fun %lbl%+256 () Bool)
(declare-fun max@6 () Int)
(declare-fun %lbl%+247 () Bool)
(declare-fun n () Int)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+245 () Bool)
(declare-fun %lbl%+243 () Bool)
(declare-fun i@1 () Int)
(declare-fun %lbl%+237 () Bool)
(declare-fun max@3 () Int)
(declare-fun %lbl%+235 () Bool)
(declare-fun max@4 () Int)
(declare-fun %lbl%+226 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+224 () Bool)
(declare-fun %lbl%+222 () Bool)
(declare-fun i@0 () Int)
(declare-fun %lbl%+216 () Bool)
(declare-fun max@1 () Int)
(declare-fun %lbl%+214 () Bool)
(declare-fun max@2 () Int)
(declare-fun %lbl%+205 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+203 () Bool)
(declare-fun %lbl%+201 () Bool)
(declare-fun i () Int)
(declare-fun %lbl%+195 () Bool)
(declare-fun q@max () Int)
(declare-fun %lbl%+193 () Bool)
(declare-fun max@0 () Int)
(declare-fun %lbl%+184 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+182 () Bool)
(declare-fun %lbl%+355 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((anon16_correct  (=> (! (and %lbl%+260 true) :lblpos +260) (=> (= i@3 (+ i@2 1)) (! (or %lbl%@787  (or bad@3 (forall ((j Int) ) (!  (=> (and (>= j 0) (< j i@3)) (>= max@7 (select a j)))
 :qid |maximum4.17:26|
 :skolemid |1|
)))) :lblneg @787)))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+258 true) :lblpos +258) (=> (and (<= (select a i@2) max@5) (= max@7 max@5)) anon16_correct))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+256 true) :lblpos +256) (=> (< max@5 (select a i@2)) (=> (and (= max@6 (select a i@2)) (= max@7 max@6)) anon16_correct)))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+247 true) :lblpos +247) (=> (< i@2 n) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+245 true) :lblpos +245) (=> (not (< i@2 n)) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon12_correct  (=> (! (and %lbl%+243 true) :lblpos +243) (=> (= i@2 (+ i@1 1)) (and anon23_Then_correct anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+237 true) :lblpos +237) (=> (and (<= (select a i@1) max@3) (= max@5 max@3)) anon12_correct))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+235 true) :lblpos +235) (=> (< max@3 (select a i@1)) (=> (and (= max@4 (select a i@1)) (= max@5 max@4)) anon12_correct)))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+226 true) :lblpos +226) (=> (< i@1 n) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+224 true) :lblpos +224) (=> (not (< i@1 n)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon8_correct  (=> (! (and %lbl%+222 true) :lblpos +222) (=> (= i@1 (+ i@0 1)) (and anon21_Then_correct anon21_Else_correct)))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+216 true) :lblpos +216) (=> (and (<= (select a i@0) max@1) (= max@3 max@1)) anon8_correct))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+214 true) :lblpos +214) (=> (< max@1 (select a i@0)) (=> (and (= max@2 (select a i@0)) (= max@3 max@2)) anon8_correct)))))
(let ((anon19_Else_correct  (=> (! (and %lbl%+205 true) :lblpos +205) (=> (< i@0 n) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon20_Then_correct anon20_Else_correct))))))
(let ((anon19_Then_correct  (=> (! (and %lbl%+203 true) :lblpos +203) (=> (not (< i@0 n)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon20_Then_correct anon20_Else_correct))))))
(let ((anon4_correct  (=> (! (and %lbl%+201 true) :lblpos +201) (=> (= i@0 (+ i 1)) (and anon19_Then_correct anon19_Else_correct)))))
(let ((anon18_Else_correct  (=> (! (and %lbl%+195 true) :lblpos +195) (=> (and (<= (select a i) q@max) (= max@1 q@max)) anon4_correct))))
(let ((anon18_Then_correct  (=> (! (and %lbl%+193 true) :lblpos +193) (=> (< q@max (select a i)) (=> (and (= max@0 (select a i)) (= max@1 max@0)) anon4_correct)))))
(let ((anon17_Else_correct  (=> (! (and %lbl%+184 true) :lblpos +184) (=> (< i n) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon17_Then_correct  (=> (! (and %lbl%+182 true) :lblpos +182) (=> (not (< i n)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+355 true) :lblpos +355) (=> (and (> n 0) (forall ((j@@0 Int) ) (!  (=> (and (>= j@@0 0) (< j@@0 i)) (>= q@max (select a j@@0)))
 :qid |maximum4.15:20|
 :skolemid |0|
))) (and anon17_Then_correct anon17_Else_correct)))))
anon0_correct)))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
