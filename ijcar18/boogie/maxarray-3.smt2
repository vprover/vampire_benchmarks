(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+517 () Bool)
(declare-fun %lbl%@1193 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun x@5 () Int)
(declare-fun y@5 () Int)
(declare-fun n () Int)
(declare-fun %lbl%@1214 () Bool)
(declare-fun m@0 () Int)
(declare-fun %lbl%@1227 () Bool)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%@1261 () Bool)
(declare-fun %lbl%+336 () Bool)
(declare-fun y@3 () Int)
(declare-fun x@3 () Int)
(declare-fun y@4 () Int)
(declare-fun %lbl%+334 () Bool)
(declare-fun x@4 () Int)
(declare-fun %lbl%+325 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+323 () Bool)
(declare-fun %lbl%+315 () Bool)
(declare-fun y@1 () Int)
(declare-fun x@1 () Int)
(declare-fun y@2 () Int)
(declare-fun %lbl%+313 () Bool)
(declare-fun x@2 () Int)
(declare-fun %lbl%+304 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+302 () Bool)
(declare-fun %lbl%+294 () Bool)
(declare-fun y () Int)
(declare-fun x () Int)
(declare-fun y@0 () Int)
(declare-fun %lbl%+292 () Bool)
(declare-fun x@0 () Int)
(declare-fun %lbl%+283 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+281 () Bool)
(declare-fun %lbl%+521 () Bool)
(declare-fun m () Int)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+517 true) :lblpos +517) (and (! (or %lbl%@1193  (or bad@2 (and (and (<= 0 x@5) (<= x@5 y@5)) (< y@5 n)))) :lblneg @1193) (=> (or bad@2 (and (and (<= 0 x@5) (<= x@5 y@5)) (< y@5 n))) (and (! (or %lbl%@1214  (or bad@2 (or (= m@0 x@5) (= m@0 y@5)))) :lblneg @1214) (=> (or bad@2 (or (= m@0 x@5) (= m@0 y@5))) (and (! (or %lbl%@1227  (or bad@2 (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i x@5)) (<= (select a i) (select a m@0)))
 :qid |maxarray.19:26|
 :skolemid |2|
)))) :lblneg @1227) (=> (or bad@2 (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 x@5)) (<= (select a i@@0) (select a m@0)))
 :qid |maxarray.19:26|
 :skolemid |2|
))) (! (or %lbl%@1261  (or bad@2 (forall ((i@@1 Int) ) (!  (=> (and (< y@5 i@@1) (< i@@1 n)) (<= (select a i@@1) (select a m@0)))
 :qid |maxarray.20:26|
 :skolemid |3|
)))) :lblneg @1261))))))))))
(let ((anon20_Else_correct  (=> (! (and %lbl%+336 true) :lblpos +336) (=> (< (select a y@3) (select a x@3)) (=> (and (and (= y@4 (- y@3 1)) (= y@5 y@4)) (and (= x@5 x@3) (= m@0 x@3))) GeneratedUnifiedExit_correct)))))
(let ((anon20_Then_correct  (=> (! (and %lbl%+334 true) :lblpos +334) (=> (<= (select a x@3) (select a y@3)) (=> (and (and (= x@4 (+ x@3 1)) (= y@5 y@3)) (and (= x@5 x@4) (= m@0 y@3))) GeneratedUnifiedExit_correct)))))
(let ((anon19_Else_correct  (=> (! (and %lbl%+325 true) :lblpos +325) (=> (not (= x@3 y@3)) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon20_Then_correct anon20_Else_correct))))))
(let ((anon19_Then_correct  (=> (! (and %lbl%+323 true) :lblpos +323) (=> (not (not (= x@3 y@3))) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon20_Then_correct anon20_Else_correct))))))
(let ((anon18_Else_correct  (=> (! (and %lbl%+315 true) :lblpos +315) (=> (and (and (< (select a y@1) (select a x@1)) (= y@2 (- y@1 1))) (and (= x@3 x@1) (= y@3 y@2))) (and anon19_Then_correct anon19_Else_correct)))))
(let ((anon18_Then_correct  (=> (! (and %lbl%+313 true) :lblpos +313) (=> (and (and (<= (select a x@1) (select a y@1)) (= x@2 (+ x@1 1))) (and (= x@3 x@2) (= y@3 y@1))) (and anon19_Then_correct anon19_Else_correct)))))
(let ((anon17_Else_correct  (=> (! (and %lbl%+304 true) :lblpos +304) (=> (not (= x@1 y@1)) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon17_Then_correct  (=> (! (and %lbl%+302 true) :lblpos +302) (=> (not (not (= x@1 y@1))) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon18_Then_correct anon18_Else_correct))))))
(let ((anon16_Else_correct  (=> (! (and %lbl%+294 true) :lblpos +294) (=> (and (and (< (select a y) (select a x)) (= y@0 (- y 1))) (and (= y@1 y@0) (= x@1 x))) (and anon17_Then_correct anon17_Else_correct)))))
(let ((anon16_Then_correct  (=> (! (and %lbl%+292 true) :lblpos +292) (=> (and (and (<= (select a x) (select a y)) (= x@0 (+ x 1))) (and (= y@1 y) (= x@1 x@0))) (and anon17_Then_correct anon17_Else_correct)))))
(let ((anon15_Else_correct  (=> (! (and %lbl%+283 true) :lblpos +283) (=> (not (= x y)) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon15_Then_correct  (=> (! (and %lbl%+281 true) :lblpos +281) (=> (not (not (= x y))) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon16_Then_correct anon16_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+521 true) :lblpos +521) (=> (> n 0) (=> (and (and (and (and (<= 0 x) (<= x y)) (< y n)) (or (= m x) (= m y))) (and (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 x)) (<= (select a i@@2) (select a m)))
 :qid |maxarray.14:20|
 :skolemid |0|
)) (forall ((i@@3 Int) ) (!  (=> (and (< y i@@3) (< i@@3 n)) (<= (select a i@@3) (select a m)))
 :qid |maxarray.15:20|
 :skolemid |1|
)))) (and anon15_Then_correct anon15_Else_correct))))))
anon0_correct))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
