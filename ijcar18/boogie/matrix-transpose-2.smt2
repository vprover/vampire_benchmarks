(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+610 () Bool)
(declare-fun %lbl%@1403 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun row@3 () Int)
(declare-fun col@5 () Int)
(declare-fun %lbl%@1417 () Bool)
(declare-fun size () Int)
(declare-fun transposed@7 () (Array Int (Array Int Int)))
(declare-fun matrix () (Array Int (Array Int Int)))
(declare-fun %lbl%+345 () Bool)
(declare-fun col@2 () Int)
(declare-fun row@2 () Int)
(declare-fun row@1 () Int)
(declare-fun col@4 () Int)
(declare-fun transposed@6 () (Array Int (Array Int Int)))
(declare-fun transposed@3 () (Array Int (Array Int Int)))
(declare-fun %lbl%+343 () Bool)
(declare-fun transposed@4 () (Array Int (Array Int Int)))
(declare-fun transposed@5 () (Array Int (Array Int Int)))
(declare-fun col@3 () Int)
(declare-fun %lbl%+334 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+332 () Bool)
(declare-fun %lbl%+324 () Bool)
(declare-fun col () Int)
(declare-fun row@0 () Int)
(declare-fun row () Int)
(declare-fun col@1 () Int)
(declare-fun transposed@2 () (Array Int (Array Int Int)))
(declare-fun transposed () (Array Int (Array Int Int)))
(declare-fun %lbl%+322 () Bool)
(declare-fun transposed@0 () (Array Int (Array Int Int)))
(declare-fun transposed@1 () (Array Int (Array Int Int)))
(declare-fun col@0 () Int)
(declare-fun %lbl%+313 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+311 () Bool)
(declare-fun %lbl%+614 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+610 true) :lblpos +610) (and (! (or %lbl%@1403  (or bad@1 (and (<= 0 row@3) (<= row@3 col@5)))) :lblneg @1403) (=> (or bad@1 (and (<= 0 row@3) (<= row@3 col@5))) (! (or %lbl%@1417  (or bad@1 (forall ((i Int) (j Int) ) (!  (=> (and (and (and (<= 0 i) (<= i j)) (< j size)) (or (and (= i row@3) (< j col@5)) (< i row@3))) (and (= (select (select transposed@7 i) j) (select (select matrix j) i)) (= (select (select transposed@7 j) i) (select (select matrix i) j))))
 :qid |matrixtr.15:26|
 :skolemid |1|
)))) :lblneg @1417))))))
(let ((anon13_Else_correct  (=> (! (and %lbl%+345 true) :lblpos +345) (=> (<= size col@2) (=> (and (= row@2 (+ row@1 1)) (= col@4 (+ row@2 1))) (=> (and (and (= transposed@6 (store transposed@3 row@2 (store (select transposed@3 row@2) row@2 (select (select matrix row@2) row@2)))) (= col@5 col@4)) (and (= row@3 row@2) (= transposed@7 transposed@6))) GeneratedUnifiedExit_correct))))))
(let ((anon13_Then_correct  (=> (! (and %lbl%+343 true) :lblpos +343) (=> (< col@2 size) (=> (and (= transposed@4 (store transposed@3 row@1 (store (select transposed@3 row@1) col@2 (select (select matrix col@2) row@1)))) (= transposed@5 (store transposed@4 col@2 (store (select transposed@4 col@2) row@1 (select (select matrix row@1) col@2))))) (=> (and (and (= col@3 (+ col@2 1)) (= col@5 col@3)) (and (= row@3 row@1) (= transposed@7 transposed@5))) GeneratedUnifiedExit_correct))))))
(let ((anon12_Else_correct  (=> (! (and %lbl%+334 true) :lblpos +334) (=> (not (= row@1 size)) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon12_Then_correct  (=> (! (and %lbl%+332 true) :lblpos +332) (=> (not (not (= row@1 size))) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon13_Then_correct anon13_Else_correct))))))
(let ((anon11_Else_correct  (=> (! (and %lbl%+324 true) :lblpos +324) (=> (<= size col) (=> (and (= row@0 (+ row 1)) (= col@1 (+ row@0 1))) (=> (and (and (= transposed@2 (store transposed row@0 (store (select transposed row@0) row@0 (select (select matrix row@0) row@0)))) (= row@1 row@0)) (and (= transposed@3 transposed@2) (= col@2 col@1))) (and anon12_Then_correct anon12_Else_correct)))))))
(let ((anon11_Then_correct  (=> (! (and %lbl%+322 true) :lblpos +322) (=> (< col size) (=> (and (= transposed@0 (store transposed row (store (select transposed row) col (select (select matrix col) row)))) (= transposed@1 (store transposed@0 col (store (select transposed@0 col) row (select (select matrix row) col))))) (=> (and (and (= col@0 (+ col 1)) (= row@1 row)) (and (= transposed@3 transposed@1) (= col@2 col@0))) (and anon12_Then_correct anon12_Else_correct)))))))
(let ((anon10_Else_correct  (=> (! (and %lbl%+313 true) :lblpos +313) (=> (not (= row size)) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon11_Then_correct anon11_Else_correct))))))
(let ((anon10_Then_correct  (=> (! (and %lbl%+311 true) :lblpos +311) (=> (not (not (= row size))) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon11_Then_correct anon11_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+614 true) :lblpos +614) (=> (> size 0) (=> (and (and (<= 0 row) (<= row col)) (forall ((i@@0 Int) (j@@0 Int) ) (!  (=> (and (and (and (<= 0 i@@0) (<= i@@0 j@@0)) (< j@@0 size)) (or (and (= i@@0 row) (< j@@0 col)) (< i@@0 row))) (and (= (select (select transposed i@@0) j@@0) (select (select matrix j@@0) i@@0)) (= (select (select transposed j@@0) i@@0) (select (select matrix i@@0) j@@0))))
 :qid |matrixtr.11:20|
 :skolemid |0|
))) (and anon10_Then_correct anon10_Else_correct))))))
anon0_correct))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
