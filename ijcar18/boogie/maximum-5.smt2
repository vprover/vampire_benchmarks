(reset)
(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-info :status unsat)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
; done setting options


(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun %lbl%+306 () Bool)
(declare-fun i@4 () Int)
(declare-fun i@3 () Int)
(declare-fun %lbl%@924 () Bool)
(declare-fun bad@4 () Bool)
(declare-fun max@9 () Int)
(declare-fun a () (Array Int Int))
(declare-fun %lbl%+304 () Bool)
(declare-fun max@7 () Int)
(declare-fun %lbl%+302 () Bool)
(declare-fun max@8 () Int)
(declare-fun %lbl%+293 () Bool)
(declare-fun n () Int)
(declare-fun bad@3 () Bool)
(declare-fun %lbl%+291 () Bool)
(declare-fun %lbl%+289 () Bool)
(declare-fun i@2 () Int)
(declare-fun %lbl%+283 () Bool)
(declare-fun max@5 () Int)
(declare-fun %lbl%+281 () Bool)
(declare-fun max@6 () Int)
(declare-fun %lbl%+272 () Bool)
(declare-fun bad@2 () Bool)
(declare-fun %lbl%+270 () Bool)
(declare-fun %lbl%+268 () Bool)
(declare-fun i@1 () Int)
(declare-fun %lbl%+262 () Bool)
(declare-fun max@3 () Int)
(declare-fun %lbl%+260 () Bool)
(declare-fun max@4 () Int)
(declare-fun %lbl%+251 () Bool)
(declare-fun bad@1 () Bool)
(declare-fun %lbl%+249 () Bool)
(declare-fun %lbl%+247 () Bool)
(declare-fun i@0 () Int)
(declare-fun %lbl%+241 () Bool)
(declare-fun max@1 () Int)
(declare-fun %lbl%+239 () Bool)
(declare-fun max@2 () Int)
(declare-fun %lbl%+230 () Bool)
(declare-fun bad@0 () Bool)
(declare-fun %lbl%+228 () Bool)
(declare-fun %lbl%+226 () Bool)
(declare-fun i () Int)
(declare-fun %lbl%+220 () Bool)
(declare-fun q@max () Int)
(declare-fun %lbl%+218 () Bool)
(declare-fun max@0 () Int)
(declare-fun %lbl%+209 () Bool)
(declare-fun bad () Bool)
(declare-fun %lbl%+207 () Bool)
(declare-fun %lbl%+415 () Bool)
(push 1)
(set-info :boogie-vc-id main)
(assert (not
(let ((anon20_correct  (=> (! (and %lbl%+306 true) :lblpos +306) (=> (= i@4 (+ i@3 1)) (! (or %lbl%@924  (or bad@4 (forall ((j Int) ) (!  (=> (and (>= j 0) (< j i@4)) (>= max@9 (select a j)))
 :qid |maximum5.17:26|
 :skolemid |1|
)))) :lblneg @924)))))
(let ((anon30_Else_correct  (=> (! (and %lbl%+304 true) :lblpos +304) (=> (and (<= (select a i@3) max@7) (= max@9 max@7)) anon20_correct))))
(let ((anon30_Then_correct  (=> (! (and %lbl%+302 true) :lblpos +302) (=> (< max@7 (select a i@3)) (=> (and (= max@8 (select a i@3)) (= max@9 max@8)) anon20_correct)))))
(let ((anon29_Else_correct  (=> (! (and %lbl%+293 true) :lblpos +293) (=> (< i@3 n) (=> (and (=> bad@4 bad@3) (=> bad@3 bad@4)) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon29_Then_correct  (=> (! (and %lbl%+291 true) :lblpos +291) (=> (not (< i@3 n)) (=> (and (=> bad@4 true) (=> true bad@4)) (and anon30_Then_correct anon30_Else_correct))))))
(let ((anon16_correct  (=> (! (and %lbl%+289 true) :lblpos +289) (=> (= i@3 (+ i@2 1)) (and anon29_Then_correct anon29_Else_correct)))))
(let ((anon28_Else_correct  (=> (! (and %lbl%+283 true) :lblpos +283) (=> (and (<= (select a i@2) max@5) (= max@7 max@5)) anon16_correct))))
(let ((anon28_Then_correct  (=> (! (and %lbl%+281 true) :lblpos +281) (=> (< max@5 (select a i@2)) (=> (and (= max@6 (select a i@2)) (= max@7 max@6)) anon16_correct)))))
(let ((anon27_Else_correct  (=> (! (and %lbl%+272 true) :lblpos +272) (=> (< i@2 n) (=> (and (=> bad@3 bad@2) (=> bad@2 bad@3)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon27_Then_correct  (=> (! (and %lbl%+270 true) :lblpos +270) (=> (not (< i@2 n)) (=> (and (=> bad@3 true) (=> true bad@3)) (and anon28_Then_correct anon28_Else_correct))))))
(let ((anon12_correct  (=> (! (and %lbl%+268 true) :lblpos +268) (=> (= i@2 (+ i@1 1)) (and anon27_Then_correct anon27_Else_correct)))))
(let ((anon26_Else_correct  (=> (! (and %lbl%+262 true) :lblpos +262) (=> (and (<= (select a i@1) max@3) (= max@5 max@3)) anon12_correct))))
(let ((anon26_Then_correct  (=> (! (and %lbl%+260 true) :lblpos +260) (=> (< max@3 (select a i@1)) (=> (and (= max@4 (select a i@1)) (= max@5 max@4)) anon12_correct)))))
(let ((anon25_Else_correct  (=> (! (and %lbl%+251 true) :lblpos +251) (=> (< i@1 n) (=> (and (=> bad@2 bad@1) (=> bad@1 bad@2)) (and anon26_Then_correct anon26_Else_correct))))))
(let ((anon25_Then_correct  (=> (! (and %lbl%+249 true) :lblpos +249) (=> (not (< i@1 n)) (=> (and (=> bad@2 true) (=> true bad@2)) (and anon26_Then_correct anon26_Else_correct))))))
(let ((anon8_correct  (=> (! (and %lbl%+247 true) :lblpos +247) (=> (= i@1 (+ i@0 1)) (and anon25_Then_correct anon25_Else_correct)))))
(let ((anon24_Else_correct  (=> (! (and %lbl%+241 true) :lblpos +241) (=> (and (<= (select a i@0) max@1) (= max@3 max@1)) anon8_correct))))
(let ((anon24_Then_correct  (=> (! (and %lbl%+239 true) :lblpos +239) (=> (< max@1 (select a i@0)) (=> (and (= max@2 (select a i@0)) (= max@3 max@2)) anon8_correct)))))
(let ((anon23_Else_correct  (=> (! (and %lbl%+230 true) :lblpos +230) (=> (< i@0 n) (=> (and (=> bad@1 bad@0) (=> bad@0 bad@1)) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon23_Then_correct  (=> (! (and %lbl%+228 true) :lblpos +228) (=> (not (< i@0 n)) (=> (and (=> bad@1 true) (=> true bad@1)) (and anon24_Then_correct anon24_Else_correct))))))
(let ((anon4_correct  (=> (! (and %lbl%+226 true) :lblpos +226) (=> (= i@0 (+ i 1)) (and anon23_Then_correct anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (! (and %lbl%+220 true) :lblpos +220) (=> (and (<= (select a i) q@max) (= max@1 q@max)) anon4_correct))))
(let ((anon22_Then_correct  (=> (! (and %lbl%+218 true) :lblpos +218) (=> (< q@max (select a i)) (=> (and (= max@0 (select a i)) (= max@1 max@0)) anon4_correct)))))
(let ((anon21_Else_correct  (=> (! (and %lbl%+209 true) :lblpos +209) (=> (< i n) (=> (and (=> bad@0 bad) (=> bad bad@0)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon21_Then_correct  (=> (! (and %lbl%+207 true) :lblpos +207) (=> (not (< i n)) (=> (and (=> bad@0 true) (=> true bad@0)) (and anon22_Then_correct anon22_Else_correct))))))
(let ((anon0_correct  (=> (! (and %lbl%+415 true) :lblpos +415) (=> (and (> n 0) (forall ((j@@0 Int) ) (!  (=> (and (>= j@@0 0) (< j@@0 i)) (>= q@max (select a j@@0)))
 :qid |maximum5.15:20|
 :skolemid |0|
))) (and anon21_Then_correct anon21_Else_correct)))))
anon0_correct))))))))))))))))))))))))))
))
(get-info :name)
(check-sat)
(get-info :name)
(pop 1)
; Valid
